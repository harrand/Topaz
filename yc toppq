[1mdiff --git a/src/tz_gpu.psy b/src/tz_gpu.psy[m
[1mindex 7f9cca9d..160338a9 100644[m
[1m--- a/src/tz_gpu.psy[m
[1m+++ b/src/tz_gpu.psy[m
[36m@@ -176,6 +176,10 @@[m [mframes : frame_data mut#2;[m
 [[private]][m
 set_layouts : u64 mut#2;[m
 [[private]][m
[32m+[m[32mdescriptor_pools_data : u64 mut& mut;[m
[32m+[m[32mdescriptor_pools_count : u64 mut := 0;[m
[32m+[m[32mdescriptor_pools_cap : u64 mut := 0;[m
[32m+[m[32m[[private]][m
 vkinst : u64 mut;[m
 [[private]][m
 used_device : u64 mut;[m
[36m@@ -282,6 +286,83 @@[m [mpasses_cap : u64 mut := 0;[m
 [m
 // implementation details[m
 [m
[32m+[m[32m[[private]][m
[32m+[m[32mimpl_new_descriptor_pool ::= func(a : arena mut&) -> u64[m
[32m+[m[32m{[m
[32m+[m	[32mif(descriptor_pools_cap == 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mdescriptor_pools_data = arena_push(a, __sizeof(u64) * 4);[m
[32m+[m		[32mdescriptor_pools_cap = 4;[m
[32m+[m	[32m}[m
[32m+[m	[32mif(descriptor_pools_count > descriptor_pools_cap)[m
[32m+[m	[32m{[m
[32m+[m		[32mputs("todo: expand allocation of descriptor pool handles");[m
[32m+[m		[32m__debugbreak();[m
[32m+[m	[32m}[m
[32m+[m	[32mif(descriptor_pools_count == descriptor_pools_cap)[m
[32m+[m	[32m{[m
[32m+[m		[32mputs("todo: expand allocation of descriptor pool handles");[m
[32m+[m		[32m__debugbreak();[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mimage_limit ::= VkDescriptorPoolSize[m
[32m+[m	[32m{[m
[32m+[m		[32m.type := 1; // VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER[m
[32m+[m		[32m.descriptorCount := MAX_IMAGE_COUNT_PER_PASS;[m
[32m+[m	[32m};[m
[32m+[m	[32mcreate ::= VkDescriptorPoolCreateInfo[m
[32m+[m	[32m{[m
[32m+[m		[32m.sType := 33;[m
[32m+[m		[32m.pNext := null;[m
[32m+[m		[32m.flags := 0x00000002;[m
[32m+[m		[32m.maxSets := frame_overlap * 256;[m
[32m+[m		[32m.poolSizeCount := 1;[m
[32m+[m		[32m.pPoolSizes := ref image_limit;[m
[32m+[m	[32m};[m
[32m+[m	[32mnewpool : u64 mut;[m
[32m+[m	[32mvk_check(vk.create_descriptor_pool(used_device, ref create, null, ref newpool));[m
[32m+[m	[32mderef(descriptor_pools_data at descriptor_pools_count) = newpool;[m
[32m+[m	[32mdescriptor_pools_count = descriptor_pools_count + 1;[m
[32m+[m	[32mreturn newpool;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m[[private]][m
[32m+[m[32mimpl_populate_descriptors ::= func(passptr : pass_data_t mut&, a : arena mut&) -> v0[m
[32m+[m[32m{[m
[32m+[m	[32mpinfo ::= passptr->info;[m
[32m+[m	[32mif(descriptor_pools_count == 0)[m
[32m+[m	[32m{[m
[32m+[m		[32mimpl_new_descriptor_pool(a);[m
[32m+[m	[32m}[m
[32m+[m	[32mimage_count : u64 mut := 0;[m
[32m+[m	[32mcounter : u64 mut;[m
[32m+[m	[32mcur_resh : tz_gpu_resource mut;[m
[32m+[m	[32mresptr : resource_data_t mut& mut;[m
[32m+[m	[32mfor(counter = 0, counter < (pinfo.resources_count), counter = counter + 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mcur_resh = deref((pinfo.resources_data) at counter);[m
[32m+[m		[32mif(cur_resh != (tz_gpu_resource.invalid))[m
[32m+[m		[32m{[m
[32m+[m			[32mif(cur_resh == (tz_gpu_resource.window_resource))[m
[32m+[m			[32m{[m
[32m+[m				[32mimage_count = image_count + 1;[m
[32m+[m			[32m}[m
[32m+[m			[32mif(cur_resh != (tz_gpu_resource.window_resource))[m
[32m+[m			[32m{[m
[32m+[m				[32mresptr = resources at (cur_resh@s64);[m
[32m+[m				[32mif(!(resptr->is_buffer))[m
[32m+[m				[32m{[m
[32m+[m					[32mimage_count = image_count + 1;[m
[32m+[m				[32m}[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mpool ::= deref(descriptor_pools_data at descriptor_pools_count);[m
[32m+[m	[32m// todo: try to allocate descriptors using this pool[m
[32m+[m	[32m// while this fails, continually spawn new pools.[m
[32m+[m[32m};[m
[32m+[m
 [[private]][m
 impl_shader_is_compute ::= func(shader : tz_gpu_shader) -> bool[m
 {[m
[36m@@ -1557,6 +1638,12 @@[m [mtz_gpu_term ::= func() -> v0[m
 	}[m
 	resource_count = 0;[m
 [m
[32m+[m	[32mfor(counter = 0, counter < descriptor_pools_count, counter = counter + 1)[m
[32m+[m	[32m{[m
[32m+[m		[32mvk.destroy_descriptor_pool(used_device, deref(descriptor_pools_data at counter), null);[m
[32m+[m	[32m}[m
[32m+[m	[32mdescriptor_pools_count = 0;[m
[32m+[m
 	// destroy all shaders.[m
 	shad : shader_data_t mut& mut;[m
 	for(counter = 0, counter < shaders_count, counter = counter + 1)[m
[36m@@ -2034,6 +2121,9 @@[m [mtz_gpu_create_pass ::= func(info : tz_gpu_pass_info, a : arena mut&) -> tz_gpu_p[m
 [m
 		(passptr->colour_target_dimensions) = impl_get_pass_colour_target_dimensions(passptr);[m
 	}[m
[32m+[m
[32m+[m	[32mimpl_populate_descriptors(passptr, a);[m
[32m+[m
 	return retid@tz_gpu_pass;[m
 };[m
 [m
[1mdiff --git a/src/vulkan.psy b/src/vulkan.psy[m
[1mindex 787a2fdb..338d5075 100644[m
[1m--- a/src/vulkan.psy[m
[1m+++ b/src/vulkan.psy[m
[36m@@ -940,6 +940,22 @@[m [mVkPresentInfoKHR ::= struct[m
 	pResults : s32 mut&;[m
 };[m
 [m
[32m+[m[32mVkDescriptorPoolSize ::= struct[m
[32m+[m[32m{[m
[32m+[m	[32mtype : s32;[m
[32m+[m	[32mdescriptorCount : u32;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mVkDescriptorPoolCreateInfo ::= struct[m
[32m+[m[32m{[m
[32m+[m	[32msType : s32;[m
[32m+[m	[32mpNext : v0&;[m
[32m+[m	[32mflags : s32;[m
[32m+[m	[32mmaxSets : u32;[m
[32m+[m	[32mpoolSizeCount : u32;[m
[32m+[m	[32mpPoolSizes : VkDescriptorPoolSize&;[m
[32m+[m[32m};[m
[32m+[m
 vk_functions_t ::= struct[m
 {[m
 	get_instance_proc_addr : func(instance : u64, funcname : u8&) -> u64 weak;[m
[36m@@ -995,6 +1011,9 @@[m [mvk_functions_t ::= struct[m
 	create_pipeline_layout : func(device : u64, pCreateInfo : VkPipelineLayoutCreateInfo&, pAllocator : VkAllocationCallbacks&, pPipelineLayout : u64 mut&) -> s32;[m
 	destroy_pipeline_layout : func(device : u64, pipelineLayout : u64, pAllocator : VkAllocationCallbacks&) -> v0;[m
 [m
[32m+[m	[32mcreate_descriptor_pool : func(device : u64, pCreateInfo : VkDescriptorPoolCreateInfo&, pAllocator : VkAllocationCallbacks&, pDescriptorPool : u64 mut&) -> s32;[m
[32m+[m	[32mdestroy_descriptor_pool : func(device : u64, descriptorPool : u64, pAllocator : VkAllocationCallbacks&) -> v0;[m
[32m+[m
 	create_buffer : func(device : u64, pCreateInfo : VkBufferCreateInfo&, pAllocator : VkAllocationCallbacks&, pBuffer : u64 mut&) -> s32;[m
 	destroy_buffer : func(device : u64, buffer : u64, pAllocator : VkAllocationCallbacks&) -> v0;[m
 [m
[36m@@ -1134,6 +1153,9 @@[m [mvulkan_load_functions ::= func(instance : u64) -> v0[m
 	vk.create_pipeline_layout = load_vk_fn("vkCreatePipelineLayout", instance);[m
 	vk.destroy_pipeline_layout = load_vk_fn("vkDestroyPipelineLayout", instance);[m
 [m
[32m+[m	[32mvk.create_descriptor_pool = load_vk_fn("vkCreateDescriptorPool", instance);[m
[32m+[m	[32mvk.destroy_descriptor_pool = load_vk_fn("vkDestroyDescriptorPool", instance);[m
[32m+[m
 	vk.create_buffer = load_vk_fn("vkCreateBuffer", instance);[m
 	vk.destroy_buffer = load_vk_fn("vkDestroyBuffer", instance);[m
 [m
[1mdiff --git a/topaz.psy b/topaz.psy[m
[1mindex f5cdfff1..d78cb70c 100644[m
[1m--- a/topaz.psy[m
[1m+++ b/topaz.psy[m
[36m@@ -10,8 +10,11 @@[m [mwrangle_window_class ::= macro() -> v0[m
 	defer unregister_wndclass();[m
 };[m
 [m
[31m-setup_arenas ::= macro() -> v0[m
[32m+[m[32msetup_arenas ::= macro(favourite_number : s64 weak) -> v0[m
 {[m
[32m+[m	[32mputs("my favourite number is: ");[m
[32m+[m	[32mputuint(favourite_number);[m
[32m+[m	[32mputchar(10);[m
 	permanent_arena_val : arena mut := arena_create(4096 * 1024);[m
 	permanent_arena ::= ref permanent_arena_val;[m
 	defer puts("arena free: ");[m
[36m@@ -28,7 +31,10 @@[m [msetup_arenas ::= macro() -> v0[m
 main ::= func() -> s32[m
 {[m
 	wrangle_window_class();[m
[31m-	setup_arenas();[m
[32m+[m	[32msetup_arenas(5);[m
[32m+[m
[32m+[m	[32mis_nora_cool ::= false;[m
[32m+[m	[32massert(is_nora_cool == true, "oh no! norman use divine shield!");[m
 [m
 	wnd ::= open_window(800, 600, "Topaz Test");[m
 	defer close_window(wnd);[m
[36m@@ -88,7 +94,7 @@[m [mmain ::= func() -> s32[m
 	{[m
 		.graphics := tz_gpu_graphics_state[m
 		{[m
[31m-			.clear_colour := vec4{.x := 1.0; .y := 0.0; .z := 1.0; .w := 1.0;};[m
[32m+[m			[32m.clear_colour := vec4{.x := 1.0; .y := 0.0; .z := 0.0; .w := 1.0;};[m
 			.scissor := vec4u32_zero();[m
 			.colour_targets_data := ref colour_target;[m
 			.colour_targets_count := 1;[m
[36m@@ -141,11 +147,12 @@[m [mmain ::= func() -> s32[m
 [m
 == build ==[m
 {[m
[32m+[m	[32madd_source_file("src/debug.psy");[m
 	add_source_file("src/wnd.psy");[m
 	add_source_file("src/tz_gpu.psy");[m
 	add_source_file("src/keyboard.psy");[m
 [m
 	set_output_directory("build");[m
 	set_executable("tz");[m
[31m-	set_optimisation(3);[m
[32m+[m	[32mset_optimisation(0);[m
 }[m

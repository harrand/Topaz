mat4 ::= struct
{
	data : f32 mut#16;
};

mat4_filled ::= func(val : f32) -> mat4
{
	ret : mat4 mut;
	counter : u64 mut;
	for(counter = 0, counter < 16, counter = counter + 1)
	{
		deref((ret.data) at counter) = val;
	}
	return ret;
};

mat4_zero ::= func() -> mat4
{
	return mat4_filled(0.0);
};

mat4_identity ::= func() -> mat4
{
	ret ::= mat4_filled(0.0);
	deref((ret.data) at 0) = 1.0;
	deref((ret.data) at 5) = 1.0;
	deref((ret.data) at 10) = 1.0;
	deref((ret.data) at 15) = 1.0;
	return ret;
};

mat4_transpose ::= func(m : mat4) -> mat4
{
	x : u32 mut;
	y : u32 mut;
	lhs : f32 mut& mut;
	rhs : f32 mut& mut;
	tmp : f32 mut;
	for(x = 0, x < 3, x = x + 1)
	{
		for(y = x + 1, y < 4, y = y + 1)
		{
			if(x != y)
			{
				lhs = (m.data) at ((x * 4) + y);	
				rhs = (m.data) at ((y * 4) + x);	
				tmp = deref lhs;
				deref lhs = deref rhs;
				deref rhs = tmp;
			}
		}
	}
	return m;
};

mat4_debug_print ::= func(m : mat4) -> v0
{
	r : u32 mut;
	for(r = 0, r < 4, r = r + 1)
	{
		putchar('|');
		putfloat(deref((m.data) at ((r * 4) + 0)));
		puts(", ");
		putfloat(deref((m.data) at ((r * 4) + 1)));
		puts(", ");
		putfloat(deref((m.data) at ((r * 4) + 2)));
		puts(", ");
		putfloat(deref((m.data) at ((r * 4) + 3)));
		putchar('|');
		putchar(10);
	}
};

== build ==
{
	add_source_file("io.psy");
}

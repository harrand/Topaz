shader(type = vertex);

#define MAX_TEX_COUNT 8
#define WEIGHT4_COUNT 1

struct vertex_t
{
	vec3 position;
	vec4 texcoord4[MAX_TEX_COUNT];
	vec3 normal;
	vec3 tangent;
	uvec4 joint_indices;
	vec4 joint_weights;
};

struct texture_locator
{
	vec3 colour_tint;
	uint texture_id;
};

struct object_t
{
	mat4 global_transform;
	mat4 _;
	texture_locator[MAX_TEX_COUNT] textures;
	uvec4 _2;
};

resource(id = 0) const buffer vertex_buffer
{
	vertex_t data[];
} vertices;

resource(id = 1) const buffer object_buffer
{
	object_t data[];
} objects;

resource(id = 2) const buffer camera_buffer
{
	mat4 view;
	mat4 projection;
} camera;

output(id = 0) vec2 out::texcoord[MAX_TEX_COUNT];
output(id = 9) vec3 out::normal;
output(id = 10) texture_locator out::textures[MAX_TEX_COUNT];

void main()
{
	vertex_t vtx = vertices.data[in::vertex_id];
	object_t obj = objects.data[in::draw_id + in::base_instance];	
	out::position = camera.projection * camera.view * obj.global_transform * vec4(vtx.position, 1.0f);

	out::normal = vtx.normal;
	for(uint i = 0; i < MAX_TEX_COUNT; i++)
	{
		out::texcoord[i] = vtx.texcoord4[i].xy;
		out::textures[i] = obj.textures[i];
	}
}
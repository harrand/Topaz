shader(type = compute);
kernel(1, 1, 1);

import <draw>
import <debug>

resource(id = 0) buffer draw_indirect_buffer
{
	uint count;
	tz::draw::DrawIndexedIndirectCommand commands[];
} draw_buffer;

struct mesh_locator
{
	uint vertex_offset;
	uint vertex_count;
	uint index_offset;
	uint index_count;
	uint max_index_value;
};

resource(id = 1) const buffer draw_list_buffer
{
	uint draw_count;
	mesh_locator mesh_locs[];
} draw_list;

resource(id = 2) const buffer visibility_buffer
{
	bool visibility[];
} object;

void main()
{
	uint draw_count = draw_list.draw_count;
	uint skip_count = 0;
	for(uint i = 0; i < draw_count; i++)
	{
		mesh_locator loc = draw_list.mesh_locs[i];
		// discard empty draws.
		if(!object.visibility[i] || loc.index_count == 0)
		{
			skip_count++;
			continue;
		}
		draw_buffer.commands[i - skip_count] = tz::draw::DrawIndexedIndirectCommand::new();
		draw_buffer.commands[i - skip_count].index_count = loc.index_count;
		draw_buffer.commands[i - skip_count].instance_count = 1;
		draw_buffer.commands[i - skip_count].first_index = loc.index_offset;
		draw_buffer.commands[i - skip_count].vertex_offset = int(loc.max_index_value);
		draw_buffer.commands[i - skip_count].first_instance = skip_count;
	}
	draw_buffer.count = draw_count - skip_count;
}
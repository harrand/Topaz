shader(type = vertex);

import <mesh>
import <debug>

struct string_locator
{
	uint offset;
	uint count;
	uint font_id;
	vec3 colour;
	mat4 model;
};

struct glyph_data
{
	uint image_id;
	float advance;
	float bearingx;
	float bearingy;
};

struct glyph_render_data
{
	glyph_data char;
	uint string_id;
};

#define FONT_ALPHABET_COUNT 95

struct font_data
{
	glyph_data glyphs[96];
};

resource(id = 0) const buffer misc_buffer
{
	vec2 mondims;
} misc;


resource(id = 1) const buffer render_buffer
{
	glyph_render_data glyphs[];
} render;

resource(id = 2) const buffer char_buffer
{
	uint data[];
} char;

resource(id = 3) const buffer string_buffer
{
	string_locator data[];
} string;

resource(id = 4) const buffer font_buffer
{
	font_data list[];
} font;

output(id = 0) uint out::image_id;
output(id = 1) vec2 out::texcoord;
output(id = 2) vec3 out::colour;

vec2 quad_positions[6] = vec2[](
	vec2(-1.0, -1.0), vec2(1.0, 1.0), vec2(1.0, -1.0),
	vec2(-1.0, -1.0), vec2(-1.0, 1.0), vec2(1.0, 1.0)
);

vec2 quad_texcoords[6] = vec2[](
	vec2(0.0, 1.0), vec2(1.0, 0.0), vec2(1.0, 1.0),
	vec2(0.0, 1.0), vec2(0.0, 0.0), vec2(1.0, 0.0)
);

void main()
{
	uint char_id = in::vertex_id / 6;
	vec2 quadpos = quad_positions[in::vertex_id % 6];

	glyph_render_data glyph = render.glyphs[char_id];
	string_locator sloc = string.data[glyph.string_id];
	// advance is in pixels? presumably.	
	// get it in normalised.
	float advance_amt = glyph.char.advance;
	quadpos.x += advance_amt * 4.0f;
	quadpos += vec2(glyph.char.bearingx, glyph.char.bearingy) * 4.0f;
	vec4 worldpos = sloc.model * vec4(quadpos, 0.0f, 1.0f);
	worldpos.xy /= misc.mondims * 0.5f;
	worldpos.xy -= vec2(1.0, 1.0);

	out::position = vec4(worldpos.xy, 0.0, 1.0);
	out::image_id = glyph.char.image_id;
	out::texcoord = quad_texcoords[in::vertex_id % 6];
	out::colour = sloc.colour;
}
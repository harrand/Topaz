shader(type = vertex);

import <mesh>
import <debug>

struct string_locator
{
	uint offset;
	uint count;
	uint font_id;
	vec3 colour;
	mat4 model;
};

struct glyph_data
{
	uint image_id;
	float advance;
	float bearingx;
	float bearingy;
};

#define FONT_ALPHABET_COUNT 95

struct font_data
{
	glyph_data glyphs[96];
};

resource(id = 0) const buffer misc_buffer
{
	vec2 mondims;
} misc;


resource(id = 1) const buffer char_buffer
{
	uint data[];
} char;

resource(id = 2) const buffer string_buffer
{
	string_locator data[];
} string;

resource(id = 3) const buffer font_buffer
{
	font_data list[];
} font;

output(id = 0) uint out::image_id;
output(id = 1) vec2 out::texcoord;
output(id = 2) vec3 out::colour;

vec2 quad_positions[6] = vec2[](
	vec2(-1.0, -1.0), vec2(1.0, 1.0), vec2(1.0, -1.0),
	vec2(-1.0, -1.0), vec2(-1.0, 1.0), vec2(1.0, 1.0)
);

vec2 quad_texcoords[6] = vec2[](
	vec2(0.0, 1.0), vec2(1.0, 0.0), vec2(1.0, 1.0),
	vec2(0.0, 1.0), vec2(0.0, 0.0), vec2(1.0, 0.0)
);

void main()
{
	uint char_id = in::vertex_id / 6;
	vec2 quadpos = quad_positions[in::vertex_id % 6];

	uint string_id = 0;
	string_locator drawn_string = string.data[string_id];
	uint cumulative_char_count = drawn_string.offset;
	uint string_char_offset = 0;
	do
	{
		drawn_string = string.data[string_id];
		cumulative_char_count += drawn_string.count;
		string_char_offset = char_id - drawn_string.offset;
		string_id++;
	}
	while(cumulative_char_count < char_id + 1);
	// this is because we increment string id even if the condition is about to be false - a side-effect of do-while.
	string_id--;
	uint offset = drawn_string.offset + string_char_offset;
	uint char4 = char.data[offset / 4];
	uint alphabet_id = (char4 >> (8 * (offset % 4))) & 0xFF;

	// drawn_string is the string locator we're currently in.
	// string_char_offset is the nth character within the string we want to draw.
	glyph_data glyph = font.list[drawn_string.font_id].glyphs[alphabet_id];
	//quadpos -= misc.mondims / 8.0f;
	quadpos.x += string_char_offset * 1.25f;

	quadpos += vec2(glyph.bearingx, glyph.bearingy) * 3.0f;
	vec4 worldpos = drawn_string.model * vec4(quadpos, 0.0f, 1.0f);

	// quadpos is the local space position
	// todo: pretend glyph.position represents a model martix, and transform.
	// note: glyph.position is intended to be in pixels, not NDC.

	out::position = vec4(worldpos.xy / misc.mondims, 0.0, 1.0);
	out::image_id = glyph.image_id;
	out::texcoord = quad_texcoords[in::vertex_id % 6];
	out::colour = drawn_string.colour;
}
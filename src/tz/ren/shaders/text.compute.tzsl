shader(type = compute);

kernel(1, 1, 1);

struct string_locator
{
	uint offset;
	uint count;
	uint font_id;
	float string_width_pixels;
	vec3 colour;
	mat4 model;
};

struct glyph_data
{
	uint image_id;
	float advance;
	float bearingx;
	float bearingy;
	float minx;
	float miny;
};

struct glyph_render_data
{
	glyph_data chard;
	uint string_id;
};

#define FONT_ALPHABET_COUNT 95

struct font_data
{
	glyph_data glyphs[96];
};

resource(id = 0) const buffer char_buffer
{
	uint data[];
} chars;

resource(id = 1) buffer string_buffer
{
	string_locator data[];
} string;

resource(id = 2) const buffer font_buffer
{
	font_data list[];
} font;

// we write into this.
resource(id = 3) buffer render_buffer
{
	glyph_render_data glyphs[];
} render;


int get_first_string()
{
	int ret = -1;
	int min_offset = 2147483647;
	for(uint i = 0; i < string.data.length(); i++)
	{
		string_locator cur = string.data[i];
		if(cur.offset < min_offset)
		{
			min_offset = int(cur.offset);
			ret = int(i);
		}
	}
	return ret;
}

int get_next_string(uint prev_string_id)
{
	string_locator prev = string.data[prev_string_id];

	int ret = -1;	
	int min_diff = 2147483647;
	for(uint i = 0; i < string.data.length(); i++)
	{
		string_locator cur = string.data[i];
		int diff = int(cur.offset + cur.count) - int(prev.offset + prev.count);
		diff = max(0, diff);
		if(cur.count > 0 && diff < min_diff && diff > 0)
		{
			// cur is further along than the previous string, but closer than any other so far.
			// this is our new candidate.
			min_diff = diff;
			ret = int(i);
		}
	}
	return ret;
}

void main()
{
	uint char_index = in::global_id.x;

	// we know which char we are.
	// we need to go through all the strings, and figure out which string we're in.
	int string_char_offset = 0;
	float advance = 0.0f;
	glyph_render_data glyph;
	int first = get_first_string();
	if(first >= 0)
	{
		glyph.string_id = uint(first);
		for(uint i = 0; i <= char_index; i++, string_char_offset++)
		{
			if(string_char_offset >= string.data[glyph.string_id].count)
			{
				// we're at the end of the string.
				// reset advance because we're at the start of a new string.
				advance = 0.0f;
				// same with char offset.
				string_char_offset = 0;
				// next string.

				int next = get_next_string(glyph.string_id);
				if(next < 0)
				{
					// no next one. early out.
					tz::debug::printf("early out");
					break;
				}
				glyph.string_id = uint(next);
			}

			string_locator str = string.data[glyph.string_id];
			uint cur_char = str.offset + string_char_offset;
			uint char4 = chars.data[cur_char / 4];
			uint alphabet_id = (char4 >> (8 * (cur_char % 4))) & 0xFF;
			// get the char metrics for this glyph and add it.
			glyph.chard = font.list[str.font_id].glyphs[alphabet_id];

			advance += glyph.chard.advance;
		}
	}
	else
	{
		tz::debug::printf("early out");
	}

	// we now have the glyph data we need.
	render.glyphs[char_index] = glyph;
	// overwrite the advance to be the total advance so far.
	render.glyphs[char_index].chard.advance = advance;

	// write string lengths (we just want to know this for every string.)
	for(uint i = 0; i < string.data.length(); i++)
	{
		// multiply complete advance by 3. it's magic?
		float cumulative_advance = 0.0f;
		string_locator str = string.data[i];
		for(uint j = str.offset; j < (str.offset + str.count); j++)
		{
			uint char4 = chars.data[j / 4];
			uint alphabet_id = (char4 >> (8 * (j % 4))) & 0xFF;
			cumulative_advance += font.list[str.font_id].glyphs[alphabet_id].advance;
		}
		string.data[i].string_width_pixels = cumulative_advance * str.model[2][2] * 3.0f;
	}
}
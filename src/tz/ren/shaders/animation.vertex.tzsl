shader(type = vertex);

#define MAX_TEX_COUNT 8
#define WEIGHT4_COUNT 1

struct vertex_t
{
	vec3 position;
	vec4 texcoord4;
	vec3 normal;
	vec3 tangent;
	uvec4 joint_indices;
	vec4 joint_weights;
};

struct texture_locator
{
	vec3 colour_tint;
	uint texture_id;
	float texture_scale;
};

struct object_t
{
	mat4 global_transform;
	mat4 inverse_bind_matrix;
	vec3 colour_tint;
	texture_locator[MAX_TEX_COUNT] textures;
	uvec4 joint_span;
};

resource(id = 0) const buffer vertex_buffer
{
	vertex_t data[];
} vertices;

resource(id = 1) const buffer object_buffer
{
	object_t data[];
} objects;

resource(id = 2) const buffer camera_buffer
{
	mat4 view;
	mat4 projection;
} camera;

resource(id = 3) const buffer joint_object_id_buffer
{
	uint object[];
} joint_to;

output(id = 0) vec3 out_position;
output(id = 1) vec2 out::texcoord;
output(id = 2) vec3 out::normal;
output(id = 3) vec3 out::colour;
output(id = 4) uvec2 out::joint_suffix;
output(id = 5) texture_locator out::textures[MAX_TEX_COUNT];

mat4 obj_get_joint_matrix(uint object_id)
{
	object_t o = objects.data[object_id];
	return o.global_transform * o.inverse_bind_matrix;
}

mat4 get_joint_matrix(object_t o, uint joint_id)
{
	uint joint_array_offset = o.joint_span.x;
	uint object_id = joint_to.object[joint_array_offset + joint_id];
	return obj_get_joint_matrix(object_id);
}

void main()
{
	vertex_t vtx = vertices.data[in::vertex_id];
	object_t obj = objects.data[in::draw_id + in::base_instance];	

	mat4 skin_mat =
		vtx.joint_weights.x * get_joint_matrix(obj, vtx.joint_indices.x) +
		vtx.joint_weights.y * get_joint_matrix(obj, vtx.joint_indices.y) +
		vtx.joint_weights.z * get_joint_matrix(obj, vtx.joint_indices.z) +
		vtx.joint_weights.w * get_joint_matrix(obj, vtx.joint_indices.w);
	if(vtx.joint_weights == vec4(0.0))
	{
		// it's probably not a skinned mesh.
		skin_mat = obj.global_transform;
	}
	out::position = camera.projection * camera.view * skin_mat * vec4(vtx.position, 1.0f);

	out_position = (skin_mat * vec4(vtx.position, 1.0f)).xyz;
	out::normal = (skin_mat * vec4(vtx.normal, 0.0f)).xyz;
	//out::normal = vtx.normal;
	out::texcoord = vtx.texcoord4.xy;
	out::colour = obj.colour_tint;
	out::joint_suffix = obj.joint_span.zw;
	for(uint i = 0; i < MAX_TEX_COUNT; i++)
	{
		out::textures[i] = obj.textures[i];
	}
}
shader(type = vertex);

struct quad_data
{
	mat4 model;
	vec3 colour;
	uint texture_id;
	int layer;
	uint unused[3];
};

buffer(id = 0) const quad
{
	quad_data data[];
};

buffer(id = 1) const camera
{
	mat4 projection;	
};

buffer(id = 2) const settings
{
	uint value;
};

output(id = 0) vec3 out::tint;
output(id = 1) vec2 out::uv;
output(id = 2) uint out::texture_id;
output(id = 3) uint out::alpha_clipping;

vec2 quad_positions[6] = vec2[](
	vec2(1.0, -1.0), vec2(1.0, 1.0), vec2(-1.0, -1.0),
	vec2(1.0, 1.0), vec2(-1.0, 1.0), vec2(-1.0, -1.0)
);

vec2 quad_texcoords[6] = vec2[](
	vec2(1.0, 1.0), vec2(1.0, 0.0), vec2(0.0, 1.0),
	vec2(1.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 1.0)
);

void main()
{
	const uint quad_id = in::vertex_id / 6;
	vec2 local_pos = quad_positions[in::vertex_id % 6];
	quad_data cur_quad = quad.data[quad_id];

	uint layering_enabled = settings.value & 0x08;

	float zcoord = 0.0;
	if(layering_enabled > 0)
	{
		zcoord = -1.0 + ((cur_quad.layer + 100) / 200.0);
	}
	out::position = camera.projection * cur_quad.model * vec4(local_pos, zcoord, 1);	
	out::tint = vec3(cur_quad.colour);
	out::uv = quad_texcoords[in::vertex_id % 6];
	out::texture_id = cur_quad.texture_id;
	out::alpha_clipping = settings.value & 0x01;
}
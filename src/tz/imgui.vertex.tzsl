shader(type = vertex);

struct ImGuiVertex
{
	float px, py;
	float uvx, uvy;
	uint col;
};

resource(id = 0) const buffer vertex
{
	ImGuiVertex data[];
};

resource(id = 1) const buffer index
{
	uint data[];
};

resource(id = 2) const buffer render
{
	mat4 vp;
	uint index_offset;
	uint vertex_offset;	
	uint texture_id;
};

output(id = 0) vec2 vtx_uv;
output(id = 1) vec4 vtx_col;
output(id = 2) uint vtx_texid;

void main()
{
	uint index = index.data[in::vertex_id + render.index_offset];	
	ImGuiVertex vtx = vertex.data[index + render.vertex_offset];
	out::position = render.vp * vec4(vtx.px, vtx.py, 0.0f, 1.0f);	

	vtx_uv = vec2(vtx.uvx, vtx.uvy);

	vtx_col = vec4(0.0);
	vtx_col.a = ((vtx.col >> 24) & 0xFF) / 255.0f;
	vtx_col.b = ((vtx.col >> 16) & 0xFF) / 255.0f;
	vtx_col.g = ((vtx.col >> 8) & 0xFF) / 255.0f;
	vtx_col.r = ((vtx.col) & 0xFF) / 255.0f;

	vtx_texid = render.texture_id;
}
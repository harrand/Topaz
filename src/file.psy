if static(__is_windows)
{
	GetFileAttributesA ::= func(lpFileName : u8&) -> u32 := extern;
	CreateFileA ::= func(
		lpFileName : u8&,
		dwDesiredAccess : u32,
		dwShareMode : u32,
		lpSecurityAttributes : u64,
		dwCreationDisposition : u32,
		dwFlagsAndAttributes : u32,
		hTemplateFile : u64) -> u64 := extern;
	GetFileSizeEx ::= func(hFile : u64, lpFileSize : s64 mut&) -> s32 := extern;
	CloseHandle ::= func(hObject : u64) -> s32 := extern;
	ReadFile ::= func(
		hFile : u64,
		lpBuffer : u8 mut&,
		nNumberOfBytesToRead : u32,
		lpNumberOfBytesRead : u32 mut&,
		lpOverlapped : u64) -> s32 := extern;
	WriteFile ::= func(
		hFile : u64,
		lpBuffer : u8&,
		nNumberOfBytesToWrite : u32,
		lpNumberOfBytesWritten : u32 mut&,
		lpOverlapped : u64) -> s32 := extern;
	DeleteFileA ::= func(lpFileName : u8&) -> s32 := extern;
	CreateDirectoryA ::= func(lpPathName : u8&, lpSecurityAttributes : u64) -> s32 := extern;

	SHFILEOPSTRUCTA ::= struct
	{
		hwnd : u64;
		wFunc : u32;
		pFrom : u8&;
		pTo : u8&;
		fFlags : s32;
		fAnyOperationsAborted : s32;
		hNameMappings : v0&;
		lpszProgressTitle : u8&;
	};

	SHFileOperationA ::= func(lpFileOp : SHFILEOPSTRUCTA&) -> s32 := extern;

	FILETIME ::= struct
	{
		dwLowDateTime : u32;
		dwHighDateTime : u32;
	};

	WIN32_FIND_DATAA ::= struct
	{
		dwFileAttributes : u32;
		ftCreationTime : FILETIME;
		ftLastAccessTime : FILETIME;
		ftLastWriteTime : FILETIME;
		nFileSizeHigh : u32;
		nFileSizeLow : u32;
		dwReserved0 : u32;
		dwReserved1 : u32;
		cFileName : u8#260;
		cAlternateFileName : u8#14;
		dwFileType : u32;
		dwCreatorType : u32;
		wFinderFlags : u32;
	};

	FindFirstFileA ::= func(lpFileName : u8&, lpFindFileData : WIN32_FIND_DATAA mut&) -> u64 := extern;
	FindNextFileA ::= func(hFindFile : u64, lpFindFileData : WIN32_FIND_DATAA mut&) -> s32 := extern;
	FindClose ::= func(hFindFile : u64) -> s32 := extern;
}

file_exists ::= func(path : u8&) -> bool
{
	if static(__is_windows)
	{
		attribs ::= GetFileAttributesA(path);
		return attribs != 0xFFFFFFFF;
	}
	if static(__is_linux)
	{
		__error("file_exists linux support NYI");
	}
};

file_size_bytes ::= func(path : u8&) -> u64
{
	if static(__is_windows)
	{
		// CreateFile in this context is cheap, don't worry.
		handle ::= CreateFileA(path, 0x80000000, 3, 0, 3, 128, 0);
		defer CloseHandle(handle);
		if(handle == -1)
		{
			// probably file didnt exist.
			return 0;
		}

		size : s64 mut;
		if(GetFileSizeEx(handle, ref size) == 0)
		{
			// failed for some reason.
			CloseHandle(handle);
			return 0;
		}
		return size@_;
	}
	if static(__is_linux)
	{
		__error("file_size_bytes linux support NYI");
	}
};

file_read ::= func(path : u8&, buf : u8 mut&, buflen : u64) -> v0
{
	if static(__is_windows)
	{
		handle ::= CreateFileA(path, 0x80000000, 3, 0, 3, 128, 0);
		defer CloseHandle(handle);
		if(handle == (-1@u64)@_)
		{
			return;
		}

		ReadFile(handle, buf, buflen@_, null, 0);
	}
	if static(__is_linux)
	{
		__error("file_read linux support NYI");
	}
};

file_write ::= func(path : u8&, buf : u8&, buflen : u64) -> v0
{
	if static(__is_windows)
	{
		handle ::= CreateFileA(path, 0x40000000, 3, 0, 3, 128, 0);
		defer CloseHandle(handle);
		if(handle == (-1@u64)@_)
		{
			return;
		}

		WriteFile(handle, buf, buflen@_, null, 0);
	}
	if static(__is_linux)
	{
		__error("file_read linux support NYI");
	}
};

file_create ::= func(path : u8&) -> bool
{
	if static(__is_windows)
	{
		handle ::= CreateFileA(path, 0x40000000, 3, 0, 1, 128, 0);
		defer CloseHandle(handle);
		if(handle == (-1@u64)@_)
		{
			return false;
		}
		return true;
	}
	if static(__is_linux)
	{
		__error("file_create linux support NYI");
	}
};

file_delete ::= func(path : u8&) -> bool
{
	if static(__is_windows)
	{
		return DeleteFileA(path) != 0;
	}
	if static(__is_linux)
	{
		__error("file_delete linux support NYI");
	}
};

directory_create ::= func(path : u8&) -> bool
{
	if static(__is_windows)
	{
		winbool ::= CreateDirectoryA(path, 0);
		return winbool != 0;
	}
	if static(__is_linux)
	{
		__error("directory_create linux support NYI");
	}
};

directory_delete ::= func(path : u8&, a : arena mut&) -> bool
{
	if static(__is_windows)
	{
		// note: pFrom must be *double* null terminated.
		// pain.
		strlen ::= cstrlen(path);
		pathbuf : u8 mut& := arena_push(a, strlen + 2);
		strcpy(pathbuf, path, strlen);
		deref(pathbuf at strlen) = 0;
		deref(pathbuf at (strlen + 1)) = 0;

		file_op ::= SHFILEOPSTRUCTA
		{
			.hwnd := 0;
			.wFunc := 3;
			.pFrom := pathbuf;
			.pTo := "";
			.fFlags := 0x0414;
			.fAnyOperationsAborted := 0;
			.hNameMappings := null;
			.lpszProgressTitle := "";

		};
		return SHFileOperationA(ref file_op) == 0;
	}
	if static(__is_linux)
	{
		__error("directory_delete linux support NYI");
	}
};

[[private]]
private_dir_iter ::= func(find : WIN32_FIND_DATAA mut&, callback : func(path : u8&) -> v0) -> v0
{
	if(cstreql(find->cFileName at 0, ".") == false)
	{
		if(cstreql(find->cFileName at 0, "..") == false)
		{
			callback(find->cFileName at 0);
		}
	}
};

directory_iterate ::= func(path : u8&, callback : func(path : u8&) -> v0, a : arena mut&) -> v0
{
	// we're given a directory name
	// we want to search dirname/*
	bufsize ::= cstrlen(path) + 2;
	buf : u8 mut& := arena_push(a, bufsize);
	strcpy(buf, path, bufsize - 2);
	deref(buf at (bufsize - 2)) = '/';
	deref(buf at (bufsize - 1)) = '*';

	find : WIN32_FIND_DATAA mut;
	handle ::= FindFirstFileA(buf, ref find);
	if(handle == -1)
	{
		return;
	}
	private_dir_iter(ref find, callback);
	while(FindNextFileA(handle, ref find) != 0)
	{
		private_dir_iter(ref find, callback);
	}
	FindClose(handle);
};

== build ==
{
	if static(__is_windows)
	{
		add_link_library("Kernel32.lib");
		add_link_library("Shell32.lib");
	}
}

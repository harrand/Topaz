arena ::= struct
{
	ptr : v0&;
	cap : u64;
	cursor : u64;
};

VirtualAlloc ::= func(lpAddress : v0&, dwSize : u64, flAllocationType : s64, flProtect : s64) -> v0& := extern;
VirtualFree ::= func(lpAddress : v0&, dwSize : u64, dwFreeType : s64) -> v0 := extern;
ARENA_ADDR_RESERVE ::= 8000000000;
MEM_RESERVE ::= 8192;
MEM_COMMIT ::= 4096;
MEM_RELEASE ::= 32768;
PAGE_READWRITE ::= 4;

arena_create ::= func(initial_capacity : u64) -> arena
{
	ptr ::= VirtualAlloc(null, ARENA_ADDR_RESERVE, MEM_RESERVE, PAGE_READWRITE);
	VirtualAlloc(ptr, initial_capacity, MEM_COMMIT, PAGE_READWRITE);
	return arena{.ptr := ptr; .cap := initial_capacity; .cursor := 0;};
};

arena_destroy ::= func(a : arena) -> v0
{
	VirtualFree(a.ptr, 0, MEM_RELEASE);
};

permanent_arena : arena mut := arena{};

== build ==
{
	add_link_library("Kernel32.lib");
}

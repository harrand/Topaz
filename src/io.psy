GetStdHandle ::= func(handle : u32) -> u64 := extern;
WriteConsoleA ::= func(hConsoleOutput : u64, lpBuffer : u8&, write_count : u32, chars_written : u32 mut& weak, reserved : v0&) -> s32 := extern;

putchar ::= func(chr : u8) -> v0
{
	handle ::= GetStdHandle(4294967285@u32);
	WriteConsoleA(handle, ref chr, 1@u32, null, null);
};

putuint ::= func(v : u64 mut weak) -> v0
{
	if(v > 9)
	{
		putuint(v / 10);
	}
	digit ::= v - ((v / 10) * 10);
	putchar('0' + digit);
};

putsint ::= func(v : s64 mut weak) -> v0
{
	if(v < 0)
	{
		putchar('-');
		v = v * -1;
	}
	putuint(v);
};

// print a float, correct to 2 decimal places.
putfloat ::= func(f : f32 mut) -> v0
{
	if(f < 0)
	{
		putchar('-');
		f = (-f);
	}
	scaledf ::= ((f * 100.0) + 0.5);
	scaled ::= scaledf@s32;
	int_part ::= scaled / 100;
	decimal_part ::= scaled % 100;
	putuint(int_part);
	putchar('.');
	if(decimal_part < 10)
	{
		putchar('0');
	}
	putuint(decimal_part);
};

cstrlen ::= func(cstr : u8&) -> u64
{
	c : u64 mut := 0;
	if(cstr == null)
	{
		return c;
	}
	while((deref (cstr at c)) != 0)
	{
		c = c + 1;
	}
	return c;
};


puts ::= func(str : u8&) -> v0
{
	i : u64 mut := 0;
	len ::= cstrlen(str);
	chr : u8& mut := null;
	while(i < len)
	{
		chr = (str at i);
		putchar(deref chr);
		i = i + 1;
	}
};

print ::= macro(T : auto) -> v0
{
	if static(__is_a(T, u8&))
	{
		puts(T);
	}
	if static(__is_a(T, u64))
	{
		putuint(T);
	}
	if static(__is_a(T, u32))
	{
		putuint(T);
	}
	if static(__is_a(T, u16))
	{
		putuint(T);
	}
	if static(__is_a(T, u8))
	{
		putchar(T);
	}
	if static(__is_a(T, s64))
	{
		putsint(T);
	}
	if static(__is_a(T, s32))
	{
		putsint(T);
	}
	if static(__is_a(T, s16))
	{
		putsint(T);
	}
	if static(__is_a(T, s8))
	{
		putchar(T);
	}
};

== build ==
{
	add_link_library("Kernel32.lib");
}

// open a window using winapi.
WNDCLASSEXA ::= struct
{
	cbSize : u32;
	style : u32;
	wndproc : func(hwnd : u64, msg : u32, wparam : u64, lparam : s64) -> s64;
	cbClsExtra : s32;
	cbWndExtra : s32;
	hInstance : u64;
	hIcon : u64;
	hCursor : u64;
	hbrBackground : u64;
	lpszMenuName : u8&;
	lpszClassName : u8&;
	hIconSm : u64;
};

if static(__is_linux)
{
	__error("wnd.psy is not yet supported on linux");
}

window_handle ::= enum{};

main_window : u64 mut := 0;
window_is_open : bool mut := false;

PostMessageA ::= func(hwnd : u64, msg : u32, wparam : u64, lparam : s64) -> s32 := extern;
DefWindowProcA ::= func(hwnd : u64, msg : u32, wparam : u64, lparam : s64) -> s64 := extern;
LoadIconA ::= func(hinstance : u64, lpIconName : u8&) -> u64 := extern;
LoadCursorA ::= func(hinstance : u64, lpIconName : u8&) -> u64 := extern;
RegisterClassExA ::= func(class : WNDCLASSEXA&) -> u16 := extern;
CreateWindowExA ::= func
(
	dwExStyle : u32,
	lpClassName : u8&,
	lpWindowName : u8&,
	dwStyle : u32,
	x : s32,
	y : s32,
	nWidth : s32,
	nHeight : s32,
	hWndParent : u64,
	hMenu : u64,
	hInstance : u64,
	lpParam : v0&
) -> u64 := extern;
ShowWindow ::= func(hwnd : u64, nCmdShow : s32) -> s32 := extern;

DestroyWindow ::= func(hwnd : u64) -> s32 := extern;
PostQuitMessage ::= func(nExitCode : s32) -> v0 := extern;

RECT ::= struct
{
	left : s32;
	top : s32;
	right : s32;
	bottom : s32;
};
GetClientRect ::= func(hwnd : u64, lpRect : RECT mut&) -> s32 := extern;

wndproc ::= func(hwnd : u64, msg : u32, wparam : u64, lparam : s64) -> s64
{
	if(msg == 16) // WM_CLOSE
	{
		DestroyWindow(hwnd);
		if(hwnd == main_window)
		{
			window_is_open = false;
		}
		return 0;
	}
	if(msg == 2) // WM_DESTROY
	{
		PostQuitMessage(0);
		return 0;
	}
	return DefWindowProcA(hwnd, msg, wparam, lparam);
};

GetModuleHandleA ::= func(lpModuleName : u8&) -> u64 := extern;

window_classname ::= "psy window";

POINT ::= struct
{
	x : s64;
	y : s64;
};

WINMSG ::= struct
{
	hwnd : u64;
	message : u32;
	wparam : u64;
	lparam : s64;
	time : u64;
	pt : POINT;
};

wndclass_registered : bool mut := false;

register_wndclass ::= func() -> v0
{
	hinst ::= GetModuleHandleA(null);
	magic_int_resource ::= (32512@u64)@u8&;
	COLOR_WINDOW ::= 5;
	window_class ::= WNDCLASSEXA
	{
		.cbSize := __sizeof(WNDCLASSEXA);
		.style := 43;
		.wndproc := wndproc;
		.cbClsExtra := __sizeof(u64);
		.cbWndExtra := 0;
		.hInstance := hinst;
		.hIcon := LoadIconA(0, magic_int_resource);
		.hCursor := LoadCursorA(0, magic_int_resource);
		.hbrBackground := COLOR_WINDOW + 1;
		.lpszMenuName := null;
		.lpszClassName := window_classname;
		.hIconSm := LoadIconA(0, magic_int_resource);
	};
	RegisterClassExA(ref window_class);
	wndclass_registered = true;
};

unregister_wndclass ::= func() -> v0
{
	wndclass_registered = false;
};
CW_USEDEFAULT ::= -2147483648;

open_window ::= func(w : u32 weak, h : u32 weak, title : u8&) -> window_handle
{
	hinst ::= GetModuleHandleA(null);
	ret ::= CreateWindowExA(768, window_classname, title, 13565952, CW_USEDEFAULT, CW_USEDEFAULT, w, h, 0, 0, hinst, null);
	if(ret == 0)
	{
		__debugbreak();
	}

	ShowWindow(ret, 5);
	window_is_open = true;
	main_window = ret;
	return ret@_;
};

close_window ::= func(wnd : window_handle) -> v0
{
	window_is_open = false;
	DestroyWindow(wnd@s64@u64);
};

window_is_open ::= func(wnd : window_handle) -> bool
{
	return window_is_open;
};

window_update ::= func() -> v0
{
	PeekMessageA ::= func(lpMsg : WINMSG mut&, hwnd : u64, wMsgFilterMin : u32, wMsgFilterMax : u32, wRemoveMsg : u32) -> s32 := extern;
	TranslateMessage ::= func(lpMsg : WINMSG&) -> s32 := extern;
	DispatchMessageA ::= func(lpMsg : WINMSG&) -> s64 := extern;

	msg : WINMSG mut := WINMSG{};
	mybool ::= PeekMessageA(ref msg, 0, 0, 0, 1);
	if(mybool@bool)
	{
		TranslateMessage(ref msg);
		DispatchMessageA(ref msg);
	}
};

window_get_dimensions ::= func(wnd : window_handle) -> vec2u32
{
	rect : RECT mut;
	if(GetClientRect(wnd@s64@u64, ref rect) != 0)
	{
		return vec2u32{.x := (rect.right - rect.left)@_; .y := (rect.bottom - rect.top)@_;};
	}
	return vec2u32{.x := 0; .y := 0;};
};

== build ==
{
	add_source_file("src/string.psy");
	add_source_file("src/vec.psy");
	add_link_library("User32.lib");
	add_link_library("Kernel32.lib");
}

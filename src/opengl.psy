/*
	strap the fuck in.
*/

GetDC ::= func(wnd : u64) -> u64 := extern;

PIXELFORMATDESCRIPTOR ::= struct
{
	nSize : u16;
	nVersion : u16;
	dwFlags : u32;
	iPixelType : u8;
	cColorBits : u8;
	cRedBits : u8;
	cRedShift : u8;
	cGreenBits : u8;
	cGreenShift : u8;
	cBlueBits : u8;
	cBlueShift : u8;
	cAlphaBits : u8;
	cAlphaShift : u8;
	cAccumBits : u8;
	cAccumRedBits : u8;
	cAccumGreenBits : u8;
	cAccumBlueBits : u8;
	cAccumAlphaBits : u8;
	cDepthBits : u8;
	cStencilBits : u8;
	cAuxBuffers : u8;
	iLayerType : u8;
	bReserved : u8;
	dwLayerMask : u32;
	dwVisibleMask : u32;
	dwDamageMask : u32;
};

ReleaseDC ::= func(wnd : u64, hdc : u64) -> s32 := extern;
ChoosePixelFormat ::= func(hdc : u64, ppfd : PIXELFORMATDESCRIPTOR&) -> s32 := extern;
SetPixelFormat ::= func(hdc : u64, fmt : s32, ppfd : PIXELFORMATDESCRIPTOR&) -> s32 := extern;
wglCreateContext ::= func(unnamedParam1 : u64) -> u64 := extern;
wglMakeCurrent ::= func(unnamedParam1 : u64, unnamedParam2 : u64) -> s32 := extern;
wglDeleteContext ::= func(unnamedParam1 : u64) -> s32 := extern;

load_wgl_functions ::= func() -> v0
{
	dummy ::= CreateWindowExA(0, "STATIC", "Dummy Window", 0, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, 0, 0, 0, null);
	hdc ::= GetDC(dummy);
	pfd ::= PIXELFORMATDESCRIPTOR
	{
		.nSize := __sizeof(PIXELFORMATDESCRIPTOR);
		.nVersion := 1;
		.dwFlags := 37;
		.iPixelType := 0;
		.cColorBits := 24;
		.cRedBits := 0;
		.cRedShift := 0;
		.cGreenBits := 0;
		.cGreenShift := 0;
		.cBlueBits := 0;
		.cBlueShift := 0;
		.cAlphaBits := 0;
		.cAlphaShift := 0;
		.cAccumBits := 0;
		.cAccumRedBits := 0;
		.cAccumGreenBits := 0;
		.cAccumBlueBits := 0;
		.cAccumAlphaBits := 0;
		.cDepthBits := 0;
		.cStencilBits := 0;
		.cAuxBuffers := 0;
		.iLayerType := 0;
		.bReserved := 0;
		.dwLayerMask := 0;
		.dwVisibleMask := 0;
		.dwDamageMask := 0;
	};

	fmt ::= ChoosePixelFormat(hdc, ref pfd);
	/*
	if(fmt == 0)
	{
		__debugbreak();
	}
	if(SetPixelFormat(hdc, fmt, ref pfd) == 0)
	{
		__debugbreak();
	}
	hglrc ::= wglCreateContext(hdc);
	if(hglrc == 0)
	{
		__debugbreak();
	}
	ok ::= wglMakeCurrent(hdc, hglrc);
	if(ok == 0)
	{
		__debugbreak();
	}

	wglMakeCurrent(0, 0);
	wglDeleteContext(hglrc);
	*/
	ReleaseDC(dummy, hdc);
	DestroyWindow(dummy);
};

opengl_init ::= func() -> v0
{
	/*
	hdc ::= GetDC(wnd);
	if(hdc == 0)
	{
		__debugbreak();
	}
	*/
};

opengl_terminate ::= func() -> v0
{
};


== build ==
{
	add_source_file("src/wnd.psy");
	add_link_library("OpenGL32.lib");
	add_link_library("User32.lib");
	add_link_library("Gdi32.lib");
}

/*
	strap the fuck in.
*/

GetDC ::= func(wnd : u64) -> u64 := extern;
GetLastError ::= func() -> u32 := extern;

PIXELFORMATDESCRIPTOR ::= struct
{
	nSize : u16;
	nVersion : u16;
	dwFlags : u32;
	iPixelType : u8;
	cColorBits : u8;
	cRedBits : u8;
	cRedShift : u8;
	cGreenBits : u8;
	cGreenShift : u8;
	cBlueBits : u8;
	cBlueShift : u8;
	cAlphaBits : u8;
	cAlphaShift : u8;
	cAccumBits : u8;
	cAccumRedBits : u8;
	cAccumGreenBits : u8;
	cAccumBlueBits : u8;
	cAccumAlphaBits : u8;
	cDepthBits : u8;
	cStencilBits : u8;
	cAuxBuffers : u8;
	iLayerType : u8;
	bReserved : u8;
	dwLayerMask : u32;
	dwVisibleMask : u32;
	dwDamageMask : u32;
};

ReleaseDC ::= func(wnd : u64, hdc : u64) -> s32 := extern;
ChoosePixelFormat ::= func(hdc : u64, ppfd : PIXELFORMATDESCRIPTOR&) -> s32 := extern;
SetPixelFormat ::= func(hdc : u64, fmt : s32, ppfd : PIXELFORMATDESCRIPTOR&) -> s32 := extern;
wglCreateContext ::= func(unnamedParam1 : u64) -> u64 := extern;
wglMakeCurrent ::= func(unnamedParam1 : u64, unnamedParam2 : u64) -> s32 := extern;
wglDeleteContext ::= func(unnamedParam1 : u64) -> s32 := extern;

wglGetProcAddress ::= func(unnamedParam1 : u8&) -> u64 weak := extern;

wgl_functions_t ::= struct
{
	wglChoosePixelFormatARB : func(hdc : u64, piAttribIList : s32&, pfAttribFList : f32&, nMaxFormats : u32, piFormats : s32 mut&, nNumFormats : u32 mut&) -> s32;
	wglCreateContextAttribsARB : func(hdc : u64, hShareContext : u64, attribList : s32&) -> u64;
	wglSwapIntervalEXT : func(interval : s32) -> s32;
	wglGetSwapIntervalEXT : func() -> s32;
	loaded : bool mut;
};

wgl_functions : wgl_functions_t mut := wgl_functions_t{.loaded := false;};

opengl_functions_t ::= struct
{
	clear : func(mask : s32) -> v0;
	clear_colour : func(r : f32, g : f32, b : f32, a : f32) -> v0;
	enable : func(cap : s32) -> v0;
	disable : func(cap : s32) -> v0;
	viewport : func(x : s32, y : s32, width : u32, height : u32) -> v0;
	polygon_mode : func(face : s32, mode : s32) -> v0;

	create_vertex_arrays : func(n : u32, arrays : u32 mut&) -> v0;
	bind_vertex_array : func(vao : u32) -> v0;
	create_shader : func(shaderType : s32) -> u32;
	delete_shader : func(shader : u32) -> v0;
	shader_source : func(shader : u32, count : u32, string : u8&&, len : s32&) -> v0;
	compile_shader : func(shader : u32) -> v0;
	get_shader_iv : func(shader : u32, pname : s32, params : s32 mut&) -> v0;
	get_program_iv : func(program : u32, pname : s32, params : s32 mut&) -> v0;
	create_program : func() -> u32;
	attach_shader : func(program : u32, shader : u32) -> v0;
	link_program : func(program : u32) -> v0;
	use_program : func(program : u32) -> v0;
	draw_arrays : func(mode : s32, first : s32, count : u32) -> v0;

	create_buffers : func(n : u32, buffers : u32 mut&) -> v0;
	delete_buffers : func(n : u32, buffers : u32&) -> v0;

	debug_message_callback : func(callback : u64 weak, userparam : v0&) -> v0;
	debug_message_insert : func(source : s32, type : s32, id : u32, severity : s32, length : u32, msg : u8&) -> v0;
};

gl : opengl_functions_t mut;

load_ogl_function ::= func(funcname : u8&) -> u64 weak
{
	addr ::= wglGetProcAddress(funcname);
	if(addr == 0)
	{
		__debugbreak();
	}
	return addr;
};

load_wgl_functions ::= func() -> v0
{
	dummy ::= CreateWindowExA(0, "STATIC", "Dummy Window", 0, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, 0, 0, 0, null);
	hdc ::= GetDC(dummy);
	pfd ::= PIXELFORMATDESCRIPTOR
	{
		.nSize := __sizeof(PIXELFORMATDESCRIPTOR);
		.nVersion := 1;
		.dwFlags := 37;
		.iPixelType := 0;
		.cColorBits := 24;
		.cRedBits := 0;
		.cRedShift := 0;
		.cGreenBits := 0;
		.cGreenShift := 0;
		.cBlueBits := 0;
		.cBlueShift := 0;
		.cAlphaBits := 0;
		.cAlphaShift := 0;
		.cAccumBits := 0;
		.cAccumRedBits := 0;
		.cAccumGreenBits := 0;
		.cAccumBlueBits := 0;
		.cAccumAlphaBits := 0;
		.cDepthBits := 0;
		.cStencilBits := 0;
		.cAuxBuffers := 0;
		.iLayerType := 0;
		.bReserved := 0;
		.dwLayerMask := 0;
		.dwVisibleMask := 0;
		.dwDamageMask := 0;
	};

	fmt ::= ChoosePixelFormat(hdc, ref pfd);
	if(fmt == 0)
	{
		__debugbreak();
	}
	if(SetPixelFormat(hdc, fmt, ref pfd) == 0)
	{
		__debugbreak();
	}
	hglrc ::= wglCreateContext(hdc);
	if(hglrc == 0)
	{
		__debugbreak();
	}
	ok ::= wglMakeCurrent(hdc, hglrc);
	if(ok == 0)
	{
		__debugbreak();
	}

	// get wgl functions here.
	wglGetExtensionsStringARB : func(hglrc : u64) -> u8 mut& := load_ogl_function("wglGetExtensionsStringARB");
	ext ::= wglGetExtensionsStringARB(hdc);
	if(ext == null)
	{
		err ::= GetLastError();
		putuint(err);
		__debugbreak();
	}
	// todo: confirm ext contains the extensions we need.
	// right now i'm just assuming this is the case.
	wgl_functions.wglChoosePixelFormatARB = load_ogl_function("wglChoosePixelFormatARB");
	wgl_functions.wglCreateContextAttribsARB = load_ogl_function("wglCreateContextAttribsARB");
	wgl_functions.wglSwapIntervalEXT = load_ogl_function("wglSwapIntervalEXT");
	wgl_functions.wglGetSwapIntervalEXT = load_ogl_function("wglGetSwapIntervalEXT");
	wgl_functions.loaded = true;

	wglMakeCurrent(0, 0);
	wglDeleteContext(hglrc);
	ReleaseDC(dummy, hdc);
	DestroyWindow(dummy);
};

DescribePixelFormat ::= func(hdc : u64, iPixelFormat : s32, nBytes : u32, ppfd : PIXELFORMATDESCRIPTOR mut&) -> s32 := extern; 

[[private]]
glClear ::= func(mask : s32) -> v0 := extern;
[[private]]
glClearColor ::= func(r : f32, g : f32, b : f32, a : f32) -> v0 := extern;
[[private]]
glEnable ::= func(cap : s32) -> v0 := extern;
[[private]]
glDisable ::= func(cap : s32) -> v0 := extern;
[[private]]
glViewport ::= func(x : s32, y : s32, width : u32, height : u32) -> v0 := extern;
[[private]]
glPolygonMode ::= func(face : s32, mode : s32) -> v0 := extern;

SwapBuffers ::= func(hdc : u64) -> s32 := extern;

opengl_init_context ::= func(wnd : window_handle) -> v0
{
	if(wgl_functions.loaded == false)
	{
		load_wgl_functions();
	}
	if(wgl_functions.wglChoosePixelFormatARB == null)
	{
		__debugbreak();
	}
	if(wgl_functions.wglCreateContextAttribsARB == null)
	{
		__debugbreak();
	}
	if(wgl_functions.wglSwapIntervalEXT == null)
	{
		__debugbreak();
	}
	if(wgl_functions.wglGetSwapIntervalEXT == null)
	{
		__debugbreak();
	}

	// ready for pain?
	// step 1: set proper correct pixel format

	hdc ::= GetDC(wnd@s64@u64);

	attribs : s32 mut#23;
	deref (attribs at 0) = 8193;
	deref (attribs at 1) = 1;

	deref (attribs at 2) = 8208;
	deref (attribs at 3) = 1;

	deref (attribs at 4) = 8195;
	deref (attribs at 5) = 8231;

	deref (attribs at 6) = 8209;
	deref (attribs at 7) = 1;

	deref (attribs at 8) = 8211;
	deref (attribs at 9) = 8235;

	deref (attribs at 10) = 8202;
	deref (attribs at 11) = 1;

	deref (attribs at 12) = 8212;
	deref (attribs at 13) = 24;

	deref (attribs at 14) = 8219;
	deref (attribs at 15) = 8;

	deref (attribs at 16) = 8226;
	deref (attribs at 17) = 24;

	deref (attribs at 18) = 8227;
	deref (attribs at 19) = 8;

	deref (attribs at 20) = 8361;
	deref (attribs at 21) = 1;

	deref (attribs at 22) = 0;

	fmt : s32 mut;
	fmts : u32 mut;
	if(wgl_functions.wglChoosePixelFormatARB(hdc, attribs at 0, null, 1, ref fmt, ref fmts) == 0)
	{
		__debugbreak();
	}

	dsc : PIXELFORMATDESCRIPTOR mut;
	dsc.nSize = __sizeof(PIXELFORMATDESCRIPTOR);
	if(DescribePixelFormat(hdc, fmt, __sizeof(PIXELFORMATDESCRIPTOR), ref dsc) == 0)
	{
		__debugbreak();
	}
	if(SetPixelFormat(hdc, fmt, ref dsc) == 0) 
	{
		__debugbreak();
	}

	// step 2: create modern opengl context.
	// that means its time for another "int array" aka wall of nightmares.
	ctx_attribs : s32 mut#9;
	deref (ctx_attribs at 0) = 8337;
	deref (ctx_attribs at 1) = 4;

	deref (ctx_attribs at 2) = 8338;
	deref (ctx_attribs at 3) = 6;

	deref (ctx_attribs at 4) = 37158;
	deref (ctx_attribs at 5) = 1;

	deref (ctx_attribs at 6) = 8340;
	deref (ctx_attribs at 7) = 1;

	deref (ctx_attribs at 8) = 0;

	magic_hglrc ::= wgl_functions.wglCreateContextAttribsARB(hdc, null, ctx_attribs at 0);
	if(magic_hglrc == 0)
	{
		__debugbreak();
	}
	wglMakeCurrent(hdc, magic_hglrc);
	wgl_functions.wglSwapIntervalEXT(0);

	gl.clear = glClear;
	gl.clear_colour = glClearColor;
	gl.enable = glEnable;
	gl.disable = glDisable;
	gl.viewport = glViewport;
	gl.polygon_mode = glPolygonMode;

	gl.create_vertex_arrays = load_ogl_function("glCreateVertexArrays");
	gl.bind_vertex_array = load_ogl_function("glBindVertexArray");
	gl.create_shader = load_ogl_function("glCreateShader");
	gl.delete_shader = load_ogl_function("glDeleteShader");
	gl.shader_source = load_ogl_function("glShaderSource");
	gl.compile_shader = load_ogl_function("glCompileShader");
	gl.get_shader_iv = load_ogl_function("glGetShaderiv");
	gl.get_program_iv = load_ogl_function("glGetProgramiv");
	gl.create_program = load_ogl_function("glCreateProgram");
	gl.attach_shader = load_ogl_function("glAttachShader");
	gl.link_program = load_ogl_function("glLinkProgram");
	gl.use_program = load_ogl_function("glUseProgram");
	gl.draw_arrays = load_ogl_function("glDrawArrays");

	gl.create_buffers = load_ogl_function("glCreateBuffers");
	gl.delete_buffers = load_ogl_function("glDeleteBuffers");

	gl.debug_message_callback = load_ogl_function("glDebugMessageCallback");
	gl.debug_message_insert = load_ogl_function("glDebugMessageInsert");
};

opengl_swap_buffers ::= func(wnd : window_handle) -> v0
{
	wndval ::= wnd@s64@u64;
	dc ::= GetDC(wndval);
	defer ReleaseDC(wndval, dc);
	SwapBuffers(dc);
};

== build ==
{
	add_source_file("src/wnd.psy");
	add_link_library("OpenGL32.lib");
	add_link_library("User32.lib");
	add_link_library("Gdi32.lib");
}

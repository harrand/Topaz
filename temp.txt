llvm IR is as follows:
[1;34m; ModuleID = 'topaz.psy'
source_filename = "topaz.psy"

%vk_functions_t = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%vallocator_t = type { %valloc_t, %valloc_t, %valloc_t }
%valloc_t = type { i64, i64, i64, ptr }
%scratch_data = type { i64, i64, i64 }
%frame_data = type { i64, i64, i64, i64 }
%vec2 = type { float, float }
%vec2u32 = type { i32, i32 }
%vec3 = type { float, float, float }
%vec4 = type { float, float, float, float }
%vec4u32 = type { i32, i32, i32, i32 }
%arena = type { ptr, i64, i64 }
%string = type { [32 x i8], ptr, i64, i64 }
%srcloc = type { ptr, ptr, i64, i64 }
%window_data_t = type { i64, i1 }
%WNDCLASSEXA = type { i32, i32, ptr, i32, i32, i64, i64, i64, i64, ptr, ptr, i64 }
%WINMSG = type { i64, i32, i64, i64, i64, %POINT }
%POINT = type { i64, i64 }
%RECT = type { i32, i32, i32, i32 }
%SHFILEOPSTRUCTA = type { i64, i32, ptr, ptr, i32, i32, ptr, ptr }
%WIN32_FIND_DATAA = type { i32, %FILETIME, %FILETIME, %FILETIME, i32, i32, i32, i32, [260 x i8], [14 x i8], i32, i32, i32 }
%FILETIME = type { i32, i32 }
%resource_data_t = type { %tz_gpu_resource_info, i1, i64, i64, i64, i64, ptr }
%tz_gpu_resource_info = type { ptr, i64, %vec2u32, i64, i64, i64, i64 }
%VkDescriptorPoolSize = type { i32, i32 }
%VkDescriptorPoolCreateInfo = type { i32, ptr, i32, i32, i32, ptr }
%VkDescriptorSetVariableDescriptorCountAllocateInfo = type { i32, ptr, i32, ptr }
%VkDescriptorSetAllocateInfo = type { i32, ptr, i64, i32, ptr }
%pass_data_t = type { %tz_gpu_pass_info, i64, i64, i1, i64, i1, %vec2u32, [2 x i64] }
%tz_gpu_pass_info = type { %tz_gpu_graphics_state, %tz_gpu_compute_state, i64, ptr, i64, ptr }
%tz_gpu_graphics_state = type { %vec4, %vec4u32, ptr, i64, i64, i64, i64, i64, i64 }
%tz_gpu_compute_state = type { i32, i32, i32 }
%VkDescriptorBufferInfo = type { i64, i64, i64 }
%VkWriteDescriptorSet = type { i32, ptr, i64, i32, i32, i32, i32, ptr, ptr, ptr }
%VkDescriptorImageInfo = type { i64, i64, i32 }
%shader_data_t = type { i1, i64, i64, i64 }
%VkCommandBufferBeginInfo = type { i32, ptr, i32, ptr }
%VkSubmitInfo = type { i32, ptr, i32, ptr, ptr, i32, ptr, i32, ptr }
%VkPipelineShaderStageCreateInfo = type { i32, ptr, i32, i32, i64, ptr, ptr }
%VkPipelineVertexInputStateCreateInfo = type { i32, ptr, i32, i32, ptr, i32, ptr }
%VkPipelineInputAssemblyStateCreateInfo = type { i32, ptr, i32, i32, i32 }
%VkPipelineTessellationStateCreateInfo = type { i32, ptr, i32, i32 }
%VkPipelineViewportStateCreateInfo = type { i32, ptr, i32, i32, ptr, i32, ptr }
%VkPipelineRasterizationStateCreateInfo = type { i32, ptr, i32, i32, i32, i32, i32, i32, i32, float, float, float, float }
%VkPipelineMultisampleStateCreateInfo = type { i32, ptr, i32, i32, i32, float, ptr, i32, i32 }
%VkStencilOpState = type { i32, i32, i32, i32, i32, i32, i32 }
%VkPipelineDepthStencilStateCreateInfo = type { i32, ptr, i32, i32, i32, i32, i32, i32, %VkStencilOpState, %VkStencilOpState, float, float }
%VkPipelineColorBlendAttachmentState = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%VkPipelineColorBlendStateCreateInfo = type { i32, ptr, i32, i32, i32, i32, ptr, [4 x float] }
%VkPipelineRenderingCreateInfo = type { i32, ptr, i32, i32, ptr, i32, i32 }
%VkPipelineDynamicStateCreateInfo = type { i32, ptr, i32, i32, ptr }
%VkGraphicsPipelineCreateInfo = type { i32, ptr, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, i32, i64, i32 }
%VkComputePipelineCreateInfo = type { i32, ptr, i32, %VkPipelineShaderStageCreateInfo, i64, i64, i32 }
%VkMemoryRequirements = type { i64, i64, i32 }
%VkWin32SurfaceCreateInfoKHR = type { i32, ptr, i32, i64, i64 }
%VkSurfaceCapabilitiesKHR = type { i32, i32, %VkExtent2D, %VkExtent2D, %VkExtent2D, i32, i32, i32, i32, i32 }
%VkExtent2D = type { i32, i32 }
%VkSwapchainCreateInfoKHR = type { i32, ptr, i32, i64, i32, i32, i32, %VkExtent2D, i32, i32, i32, i32, ptr, i32, i32, i32, i32, i64 }
%VkImageViewCreateInfo = type { i32, ptr, i32, i64, i32, i32, %VkComponentMapping, %VkImageSubresourceRange }
%VkComponentMapping = type { i32, i32, i32, i32 }
%VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%VkExtent3D = type { i32, i32, i32 }
%VkImageCreateInfo = type { i32, ptr, i32, i32, i32, %VkExtent3D, i32, i32, i32, i32, i32, i32, i32, ptr, i32 }
%VkRenderingAttachmentInfo = type { i32, ptr, i64, i32, i32, i64, i32, i32, i32, %VkClearValue }
%VkClearValue = type { %VkClearColorValue }
%VkClearColorValue = type { %vec4 }
%VkImageMemoryBarrier = type { i32, ptr, i32, i32, i32, i32, i32, i32, i64, %VkImageSubresourceRange }
%VkRect2D = type { %VkOffset2D, %VkExtent2D }
%VkOffset2D = type { i32, i32 }
%VkRenderingInfo = type { i32, ptr, i32, %VkRect2D, i32, i32, i32, ptr, ptr, ptr }
%VkViewport = type { float, float, float, float, float, float }
%graph_data_t = type { %string, ptr, i64, i64 }
%graph_entry = type { i64, i1 }
%VkMemoryAllocateFlagsInfo = type { i32, ptr, i32, i32 }
%VkMemoryAllocateInfo = type { i32, ptr, i64, i32 }
%VkBufferCreateInfo = type { i32, ptr, i32, i64, i32, i32, i32, ptr }
%VkBufferCopy = type { i64, i64, i64 }
%VkImageSubresourceLayers = type { i32, i32, i32, i32 }
%VkBufferImageCopy = type { i64, i32, i32, %VkImageSubresourceLayers, %VkOffset3D, %VkExtent3D }
%VkOffset3D = type { i32, i32, i32 }
%VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, ptr }
%VkDescriptorSetLayoutBindingFlagsCreateInfo = type { i32, ptr, i32, ptr }
%VkDescriptorSetLayoutCreateInfo = type { i32, ptr, i32, i32, ptr }
%VkPipelineLayoutCreateInfo = type { i32, ptr, i32, i32, ptr, i32, ptr }
%VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %VkPhysicalDeviceLimits, %VkPhysicalDeviceSparseProperties }
%VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%VkPhysicalDeviceMemoryProperties = type { i32, [32 x %VkMemoryType], i32, [32 x %VkMemoryHeap] }
%VkMemoryType = type { i32, i32 }
%VkMemoryHeap = type { i64, i32 }
%tz_gpu_hardware = type { %string, i64, i64, i64, i64, i64, i32, i64 }
%VkQueueFamilyProperties = type { i32, i32, i32, %VkExtent3D }
%tz_gpu_appinfo = type { ptr, i32, i32 }
%VkApplicationInfo = type { i32, ptr, ptr, i32, ptr, i32, i32 }
%VkInstanceCreateInfo = type { i32, ptr, i32, ptr, i32, ptr, i32, ptr }
%VkDeviceQueueCreateInfo = type { i32, ptr, i32, i32, i32, ptr }
%VkPhysicalDeviceVulkan13Features = type { i32, ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%VkPhysicalDeviceVulkan12Features = type { i32, ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%VkPhysicalDeviceFeatures2 = type { i32, ptr, %VkPhysicalDeviceFeatures }
%VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%VkDeviceCreateInfo = type { i32, ptr, i32, i32, ptr, i32, ptr, i32, ptr, ptr }
%VkCommandPoolCreateInfo = type { i32, ptr, i32, i32 }
%VkCommandBufferAllocateInfo = type { i32, ptr, i64, i32, i32 }
%VkSemaphoreCreateInfo = type { i32, ptr, i32 }
%VkBufferDeviceAddressInfo = type { i32, ptr, i64 }
%VkSamplerCreateInfo = type { i32, ptr, i32, i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32 }
%tz_gpu_shader_sources = type { ptr, i64, ptr, i64 }
%VkShaderModuleCreateInfo = type { i32, ptr, i32, i64, ptr }
%VkImageBlit = type { %VkImageSubresourceLayers, [2 x %VkOffset3D], %VkImageSubresourceLayers, [2 x %VkOffset3D] }
%VkPresentInfoKHR = type { i32, ptr, i32, ptr, i32, ptr, ptr, ptr }
%single_draw = type { i32, %tz_gpu_draw_indexed_indirect_command }
%tz_gpu_draw_indexed_indirect_command = type { i32, i32, i32, i32, i32 }

@null = private global ptr null
@__is_windows = private global i1 true
@__is_linux = private global i1 false
@strlit = private unnamed_addr constant [61 x i8] c"C:/Users/Harry/Documents/psyc/build/Windows_release/psyc.exe\00", align 1
@__psyc = private global ptr @strlit
@strlit.1 = private unnamed_addr constant [32 x i8] c"C:/Users/Harry/Documents/psypaz\00", align 1
@__cwd = private global ptr @strlit.1
@__pi = private global double 3.141590e+00
@_fltused = global i32 0
@strlit.2 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@strlit.3 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@strlit.4 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@strlit.5 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@ARENA_ADDR_RESERVE = private global i64 8000000000
@MEM_RESERVE = private global i64 8192
@MEM_COMMIT = private global i64 4096
@MEM_RELEASE = private global i64 32768
@PAGE_READWRITE = private global i64 4
@strlit.6 = private unnamed_addr constant [14 x i8] c"src/debug.psy\00", align 1
@strlit.7 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@strlit.8 = private unnamed_addr constant [10 x i8] c"error at \00", align 1
@VkSystemAllocationScope.COMMAND = global i64 0
@VkSystemAllocationScope.OBJECT = global i64 1
@VkSystemAllocationScope.INSTANCE = global i64 4
@VkSystemAllocationScope.CACHE = global i64 2
@VkSystemAllocationScope.DEVICE = global i64 3
@VkInternalAllocationType.EXECUTABLE = global i64 0
@vk = private global %vk_functions_t zeroinitializer
@vulkan_driver = private global i64 -1
@vulkan_driver_initialised = private global i1 false
@strlit.9 = private unnamed_addr constant [32 x i8] c"failed to load driver function \00", align 1
@strlit.10 = private unnamed_addr constant [25 x i8] c"failed to load function \00", align 1
@strlit.11 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1
@donestr = private global ptr @strlit.11
@strlit.12 = private unnamed_addr constant [13 x i8] c"vulkan-1.dll\00", align 1
@strlit.13 = private unnamed_addr constant [30 x i8] c"loading from vulkan driver...\00", align 1
@strlit.14 = private unnamed_addr constant [17 x i8] c"vkCreateInstance\00", align 1
@strlit.15 = private unnamed_addr constant [18 x i8] c"vkDestroyInstance\00", align 1
@strlit.16 = private unnamed_addr constant [22 x i8] c"vkGetInstanceProcAddr\00", align 1
@strlit.17 = private unnamed_addr constant [17 x i8] c"vkAllocateMemory\00", align 1
@strlit.18 = private unnamed_addr constant [13 x i8] c"vkFreeMemory\00", align 1
@strlit.19 = private unnamed_addr constant [19 x i8] c"vkBindBufferMemory\00", align 1
@strlit.20 = private unnamed_addr constant [18 x i8] c"vkBindImageMemory\00", align 1
@strlit.21 = private unnamed_addr constant [24 x i8] c"vkCreateWin32SurfaceKHR\00", align 1
@strlit.22 = private unnamed_addr constant [20 x i8] c"vkDestroySurfaceKHR\00", align 1
@strlit.23 = private unnamed_addr constant [21 x i8] c"vkCreateSwapchainKHR\00", align 1
@strlit.24 = private unnamed_addr constant [22 x i8] c"vkDestroySwapchainKHR\00", align 1
@strlit.25 = private unnamed_addr constant [24 x i8] c"vkGetSwapchainImagesKHR\00", align 1
@strlit.26 = private unnamed_addr constant [22 x i8] c"vkAcquireNextImageKHR\00", align 1
@strlit.27 = private unnamed_addr constant [18 x i8] c"vkQueuePresentKHR\00", align 1
@strlit.28 = private unnamed_addr constant [14 x i8] c"vkCreateImage\00", align 1
@strlit.29 = private unnamed_addr constant [15 x i8] c"vkDestroyImage\00", align 1
@strlit.30 = private unnamed_addr constant [18 x i8] c"vkCreateImageView\00", align 1
@strlit.31 = private unnamed_addr constant [19 x i8] c"vkDestroyImageView\00", align 1
@strlit.32 = private unnamed_addr constant [16 x i8] c"vkCreateSampler\00", align 1
@strlit.33 = private unnamed_addr constant [17 x i8] c"vkDestroySampler\00", align 1
@strlit.34 = private unnamed_addr constant [27 x i8] c"vkEnumeratePhysicalDevices\00", align 1
@strlit.35 = private unnamed_addr constant [30 x i8] c"vkGetPhysicalDeviceProperties\00", align 1
@strlit.36 = private unnamed_addr constant [36 x i8] c"vkGetPhysicalDeviceMemoryProperties\00", align 1
@strlit.37 = private unnamed_addr constant [41 x i8] c"vkGetPhysicalDeviceQueueFamilyProperties\00", align 1
@strlit.38 = private unnamed_addr constant [42 x i8] c"vkGetPhysicalDeviceSurfaceCapabilitiesKHR\00", align 1
@strlit.39 = private unnamed_addr constant [15 x i8] c"vkCreateDevice\00", align 1
@strlit.40 = private unnamed_addr constant [16 x i8] c"vkDestroyDevice\00", align 1
@strlit.41 = private unnamed_addr constant [17 x i8] c"vkGetDeviceQueue\00", align 1
@strlit.42 = private unnamed_addr constant [20 x i8] c"vkCreateCommandPool\00", align 1
@strlit.43 = private unnamed_addr constant [21 x i8] c"vkDestroyCommandPool\00", align 1
@strlit.44 = private unnamed_addr constant [25 x i8] c"vkAllocateCommandBuffers\00", align 1
@strlit.45 = private unnamed_addr constant [14 x i8] c"vkCreateFence\00", align 1
@strlit.46 = private unnamed_addr constant [15 x i8] c"vkDestroyFence\00", align 1
@strlit.47 = private unnamed_addr constant [18 x i8] c"vkCreateSemaphore\00", align 1
@strlit.48 = private unnamed_addr constant [19 x i8] c"vkDestroySemaphore\00", align 1
@strlit.49 = private unnamed_addr constant [28 x i8] c"vkCreateDescriptorSetLayout\00", align 1
@strlit.50 = private unnamed_addr constant [29 x i8] c"vkDestroyDescriptorSetLayout\00", align 1
@strlit.51 = private unnamed_addr constant [23 x i8] c"vkCreatePipelineLayout\00", align 1
@strlit.52 = private unnamed_addr constant [24 x i8] c"vkDestroyPipelineLayout\00", align 1
@strlit.53 = private unnamed_addr constant [23 x i8] c"vkCreateDescriptorPool\00", align 1
@strlit.54 = private unnamed_addr constant [24 x i8] c"vkDestroyDescriptorPool\00", align 1
@strlit.55 = private unnamed_addr constant [25 x i8] c"vkAllocateDescriptorSets\00", align 1
@strlit.56 = private unnamed_addr constant [23 x i8] c"vkUpdateDescriptorSets\00", align 1
@strlit.57 = private unnamed_addr constant [15 x i8] c"vkCreateBuffer\00", align 1
@strlit.58 = private unnamed_addr constant [16 x i8] c"vkDestroyBuffer\00", align 1
@strlit.59 = private unnamed_addr constant [25 x i8] c"vkGetBufferDeviceAddress\00", align 1
@strlit.60 = private unnamed_addr constant [21 x i8] c"vkCreateShaderModule\00", align 1
@strlit.61 = private unnamed_addr constant [22 x i8] c"vkDestroyShaderModule\00", align 1
@strlit.62 = private unnamed_addr constant [25 x i8] c"vkCreateComputePipelines\00", align 1
@strlit.63 = private unnamed_addr constant [26 x i8] c"vkCreateGraphicsPipelines\00", align 1
@strlit.64 = private unnamed_addr constant [18 x i8] c"vkDestroyPipeline\00", align 1
@strlit.65 = private unnamed_addr constant [21 x i8] c"vkBeginCommandBuffer\00", align 1
@strlit.66 = private unnamed_addr constant [19 x i8] c"vkEndCommandBuffer\00", align 1
@strlit.67 = private unnamed_addr constant [21 x i8] c"vkResetCommandBuffer\00", align 1
@strlit.68 = private unnamed_addr constant [29 x i8] c"vkGetImageMemoryRequirements\00", align 1
@strlit.69 = private unnamed_addr constant [30 x i8] c"vkGetBufferMemoryRequirements\00", align 1
@strlit.70 = private unnamed_addr constant [12 x i8] c"vkMapMemory\00", align 1
@strlit.71 = private unnamed_addr constant [14 x i8] c"vkQueueSubmit\00", align 1
@strlit.72 = private unnamed_addr constant [16 x i8] c"vkWaitForFences\00", align 1
@strlit.73 = private unnamed_addr constant [14 x i8] c"vkResetFences\00", align 1
@strlit.74 = private unnamed_addr constant [18 x i8] c"vkCmdBindPipeline\00", align 1
@strlit.75 = private unnamed_addr constant [24 x i8] c"vkCmdBindDescriptorSets\00", align 1
@strlit.76 = private unnamed_addr constant [14 x i8] c"vkCmdDispatch\00", align 1
@strlit.77 = private unnamed_addr constant [21 x i8] c"vkCmdPipelineBarrier\00", align 1
@strlit.78 = private unnamed_addr constant [20 x i8] c"vkCmdBeginRendering\00", align 1
@strlit.79 = private unnamed_addr constant [18 x i8] c"vkCmdEndRendering\00", align 1
@strlit.80 = private unnamed_addr constant [17 x i8] c"vkCmdSetViewport\00", align 1
@strlit.81 = private unnamed_addr constant [16 x i8] c"vkCmdSetScissor\00", align 1
@strlit.82 = private unnamed_addr constant [15 x i8] c"vkCmdBlitImage\00", align 1
@strlit.83 = private unnamed_addr constant [21 x i8] c"vkCmdBindIndexBuffer\00", align 1
@strlit.84 = private unnamed_addr constant [10 x i8] c"vkCmdDraw\00", align 1
@strlit.85 = private unnamed_addr constant [17 x i8] c"vkCmdDrawIndexed\00", align 1
@strlit.86 = private unnamed_addr constant [23 x i8] c"vkCmdDrawIndirectCount\00", align 1
@strlit.87 = private unnamed_addr constant [30 x i8] c"vkCmdDrawIndexedIndirectCount\00", align 1
@strlit.88 = private unnamed_addr constant [16 x i8] c"vkCmdCopyBuffer\00", align 1
@strlit.89 = private unnamed_addr constant [23 x i8] c"vkCmdCopyBufferToImage\00", align 1
@strlit.90 = private unnamed_addr constant [17 x i8] c"vkDeviceWaitIdle\00", align 1
@VkResult.VK_TIMEOUT = global i64 2
@VkResult.VK_THREAD_IDLE_KHR = global i64 1000268000
@VkResult.VK_SUCCESS = global i64 0
@VkResult.VK_NOT_READY = global i64 1
@VkResult.VK_ERROR_INCOMPATIBLE_DRIVER = global i64 -9
@VkResult.VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = global i64 -1000023002
@VkResult.VK_EVENT_SET = global i64 3
@VkResult.VK_EVENT_RESET = global i64 4
@VkResult.VK_ERROR_OUT_OF_DEVICE_MEMORY = global i64 -2
@VkResult.VK_INCOMPLETE = global i64 5
@VkResult.VK_ERROR_OUT_OF_HOST_MEMORY = global i64 -1
@VkResult.VK_ERROR_INITIALIZATION_FAILED = global i64 -3
@VkResult.VK_PIPELINE_BINARY_MISSING_KHR = global i64 1000483000
@VkResult.VK_ERROR_DEVICE_LOST = global i64 -4
@VkResult.VK_ERROR_MEMORY_MAP_FAILED = global i64 -5
@VkResult.VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR = global i64 -1000299000
@VkResult.VK_ERROR_LAYER_NOT_PRESENT = global i64 -6
@VkResult.VK_ERROR_EXTENSION_NOT_PRESENT = global i64 -7
@VkResult.VK_ERROR_FEATURE_NOT_PRESENT = global i64 -8
@VkResult.VK_ERROR_TOO_MANY_OBJECTS = global i64 -10
@VkResult.VK_ERROR_OUT_OF_POOL_MEMORY = global i64 -1000069000
@VkResult.VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = global i64 -1000023004
@VkResult.VK_ERROR_FORMAT_NOT_SUPPORTED = global i64 -11
@VkResult.VK_ERROR_FRAGMENTED_POOL = global i64 -12
@VkResult.VK_ERROR_UNKNOWN = global i64 -13
@VkResult.VK_ERROR_INVALID_SHADER_NV = global i64 -1000012000
@VkResult.VK_INCOMPATIBLE_SHADER_BINARY_EXT = global i64 1000482000
@VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE = global i64 -1000072003
@VkResult.VK_ERROR_FRAGMENTATION = global i64 -1000161000
@VkResult.VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = global i64 -1000257000
@VkResult.VK_ERROR_OUT_OF_DATE_KHR = global i64 -1000001004
@VkResult.VK_PIPELINE_COMPILE_REQUIRED = global i64 1000297000
@VkResult.VK_ERROR_NOT_PERMITTED = global i64 -1000174001
@VkResult.VK_ERROR_SURFACE_LOST_KHR = global i64 -1000000000
@VkResult.VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = global i64 -1000000001
@VkResult.VK_SUBOPTIMAL_KHR = global i64 1000001003
@VkResult.VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = global i64 -1000003001
@VkResult.VK_ERROR_VALIDATION_FAILED_EXT = global i64 -1000011001
@VkResult.VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = global i64 -1000023005
@VkResult.VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = global i64 -1000023000
@VkResult.VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = global i64 -1000023001
@VkResult.VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = global i64 -1000023003
@VkResult.VK_OPERATION_DEFERRED_KHR = global i64 1000268002
@VkResult.VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = global i64 -1000158000
@VkResult.VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = global i64 -1000255000
@VkResult.VK_THREAD_DONE_KHR = global i64 1000268001
@VkResult.VK_OPERATION_NOT_DEFERRED_KHR = global i64 1000268003
@VkResult.VK_ERROR_COMPRESSION_EXHAUSTED_EXT = global i64 -1000338000
@VkResult.VK_ERROR_NOT_ENOUGH_SPACE_KHR = global i64 -1000483000
@strlit.91 = private unnamed_addr constant [33 x i8] c"vulkan call returned error code \00", align 1
@strlit.92 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@strlit.93 = private unnamed_addr constant [8 x i8] c"badenum\00", align 1
@strlit.94 = private unnamed_addr constant [19 x i8] c"VK_THREAD_IDLE_KHR\00", align 1
@strlit.95 = private unnamed_addr constant [11 x i8] c"VK_TIMEOUT\00", align 1
@strlit.96 = private unnamed_addr constant [11 x i8] c"VK_SUCCESS\00", align 1
@strlit.97 = private unnamed_addr constant [51 x i8] c"VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR\00", align 1
@strlit.98 = private unnamed_addr constant [29 x i8] c"VK_ERROR_INCOMPATIBLE_DRIVER\00", align 1
@strlit.99 = private unnamed_addr constant [13 x i8] c"VK_NOT_READY\00", align 1
@strlit.100 = private unnamed_addr constant [13 x i8] c"VK_EVENT_SET\00", align 1
@strlit.101 = private unnamed_addr constant [15 x i8] c"VK_EVENT_RESET\00", align 1
@strlit.102 = private unnamed_addr constant [30 x i8] c"VK_ERROR_OUT_OF_DEVICE_MEMORY\00", align 1
@strlit.103 = private unnamed_addr constant [14 x i8] c"VK_INCOMPLETE\00", align 1
@strlit.104 = private unnamed_addr constant [28 x i8] c"VK_ERROR_OUT_OF_HOST_MEMORY\00", align 1
@strlit.105 = private unnamed_addr constant [31 x i8] c"VK_PIPELINE_BINARY_MISSING_KHR\00", align 1
@strlit.106 = private unnamed_addr constant [31 x i8] c"VK_ERROR_INITIALIZATION_FAILED\00", align 1
@strlit.107 = private unnamed_addr constant [21 x i8] c"VK_ERROR_DEVICE_LOST\00", align 1
@strlit.108 = private unnamed_addr constant [42 x i8] c"VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR\00", align 1
@strlit.109 = private unnamed_addr constant [27 x i8] c"VK_ERROR_MEMORY_MAP_FAILED\00", align 1
@strlit.110 = private unnamed_addr constant [27 x i8] c"VK_ERROR_LAYER_NOT_PRESENT\00", align 1
@strlit.111 = private unnamed_addr constant [31 x i8] c"VK_ERROR_EXTENSION_NOT_PRESENT\00", align 1
@strlit.112 = private unnamed_addr constant [29 x i8] c"VK_ERROR_FEATURE_NOT_PRESENT\00", align 1
@strlit.113 = private unnamed_addr constant [47 x i8] c"VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR\00", align 1
@strlit.114 = private unnamed_addr constant [28 x i8] c"VK_ERROR_OUT_OF_POOL_MEMORY\00", align 1
@strlit.115 = private unnamed_addr constant [26 x i8] c"VK_ERROR_TOO_MANY_OBJECTS\00", align 1
@strlit.116 = private unnamed_addr constant [30 x i8] c"VK_ERROR_FORMAT_NOT_SUPPORTED\00", align 1
@strlit.117 = private unnamed_addr constant [25 x i8] c"VK_ERROR_FRAGMENTED_POOL\00", align 1
@strlit.118 = private unnamed_addr constant [34 x i8] c"VK_INCOMPATIBLE_SHADER_BINARY_EXT\00", align 1
@strlit.119 = private unnamed_addr constant [27 x i8] c"VK_ERROR_INVALID_SHADER_NV\00", align 1
@strlit.120 = private unnamed_addr constant [17 x i8] c"VK_ERROR_UNKNOWN\00", align 1
@strlit.121 = private unnamed_addr constant [33 x i8] c"VK_ERROR_INVALID_EXTERNAL_HANDLE\00", align 1
@strlit.122 = private unnamed_addr constant [23 x i8] c"VK_ERROR_FRAGMENTATION\00", align 1
@strlit.123 = private unnamed_addr constant [25 x i8] c"VK_ERROR_OUT_OF_DATE_KHR\00", align 1
@strlit.124 = private unnamed_addr constant [40 x i8] c"VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS\00", align 1
@strlit.125 = private unnamed_addr constant [29 x i8] c"VK_PIPELINE_COMPILE_REQUIRED\00", align 1
@strlit.126 = private unnamed_addr constant [23 x i8] c"VK_ERROR_NOT_PERMITTED\00", align 1
@strlit.127 = private unnamed_addr constant [26 x i8] c"VK_ERROR_SURFACE_LOST_KHR\00", align 1
@strlit.128 = private unnamed_addr constant [34 x i8] c"VK_ERROR_NATIVE_WINDOW_IN_USE_KHR\00", align 1
@strlit.129 = private unnamed_addr constant [18 x i8] c"VK_SUBOPTIMAL_KHR\00", align 1
@strlit.130 = private unnamed_addr constant [34 x i8] c"VK_ERROR_INCOMPATIBLE_DISPLAY_KHR\00", align 1
@strlit.131 = private unnamed_addr constant [45 x i8] c"VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR\00", align 1
@strlit.132 = private unnamed_addr constant [31 x i8] c"VK_ERROR_VALIDATION_FAILED_EXT\00", align 1
@strlit.133 = private unnamed_addr constant [39 x i8] c"VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR\00", align 1
@strlit.134 = private unnamed_addr constant [48 x i8] c"VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR\00", align 1
@strlit.135 = private unnamed_addr constant [26 x i8] c"VK_OPERATION_DEFERRED_KHR\00", align 1
@strlit.136 = private unnamed_addr constant [48 x i8] c"VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR\00", align 1
@strlit.137 = private unnamed_addr constant [54 x i8] c"VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT\00", align 1
@strlit.138 = private unnamed_addr constant [45 x i8] c"VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT\00", align 1
@strlit.139 = private unnamed_addr constant [19 x i8] c"VK_THREAD_DONE_KHR\00", align 1
@strlit.140 = private unnamed_addr constant [30 x i8] c"VK_OPERATION_NOT_DEFERRED_KHR\00", align 1
@strlit.141 = private unnamed_addr constant [35 x i8] c"VK_ERROR_COMPRESSION_EXHAUSTED_EXT\00", align 1
@strlit.142 = private unnamed_addr constant [30 x i8] c"VK_ERROR_NOT_ENOUGH_SPACE_KHR\00", align 1
@strlit.143 = private unnamed_addr constant [2 x i8] c")\00", align 1
@CW_USEDEFAULT = private global i64 -2147483648
@windows = private global ptr null
@window_count = private global i64 0
@window_cap = private global i64 0
@strlit.144 = private unnamed_addr constant [6 x i8] c"Topaz\00", align 1
@window_classname = private global ptr @strlit.144
@window_class_registered = private global i1 false
@tz_wnd_window.invalid = global i64 -1
@strlit.145 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@strlit.146 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@strlit.147 = private unnamed_addr constant [2 x i8] c".\00", align 1
@strlit.148 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@tz_gpu_err.none = global i64 0
@tz_gpu_err.unknown = global i64 1
@tz_gpu_hardware_type.gpu = global i64 0
@tz_gpu_hardware_type.igpu = global i64 1
@tz_gpu_hardware_type.cpu = global i64 2
@tz_gpu_hardware_type.unknown = global i64 3
@tz_gpu_hardware_caps.graphics_compute = global i64 0
@tz_gpu_hardware_caps.graphics_only = global i64 1
@tz_gpu_hardware_caps.compute_only = global i64 2
@tz_gpu_hardware_caps.none = global i64 3
@tz_gpu_buffer_flag.none = global i64 0
@tz_gpu_buffer_flag.dynamic = global i64 1
@tz_gpu_buffer_flag.index_buffer = global i64 2
@tz_gpu_buffer_flag.draw_buffer = global i64 4
@tz_gpu_image_flag.none = global i64 0
@tz_gpu_resource_flag.none = global i64 0
@tz_gpu_resource_flag.zero_memory = global i64 1
@tz_gpu_image_type.rgba = global i64 0
@tz_gpu_image_type.depth = global i64 1
@tz_gpu_resource.invalid = global i64 -1
@tz_gpu_resource.window_resource = global i64 -2
@tz_gpu_shader.invalid = global i64 -1
@tz_gpu_cull.back = global i64 0
@tz_gpu_cull.both = global i64 3
@tz_gpu_cull.front = global i64 1
@tz_gpu_cull.none = global i64 2
@tz_gpu_pass.invalid = global i64 -1
@tz_gpu_pass.present = global i64 -2
@tz_gpu_graph.invalid = global i64 -1
@valloc_initial_size = private global i64 33554432
@MAX_GLOBAL_IMAGE_COUNT = private global i64 8192
@MAX_IMAGE_COUNT_PER_PASS = private global i64 4096
@vallocator = private global %vallocator_t zeroinitializer
@scratch = private global %scratch_data zeroinitializer
@frame_overlap = private global i64 2
@frames = private global [2 x %frame_data] zeroinitializer
@set_layouts = private global [2 x i64] zeroinitializer
@descriptor_pools_data = private global ptr null
@descriptor_pools_count = private global i64 0
@descriptor_pools_cap = private global i64 0
@vkinst = private global i64 0
@used_device = private global i64 0
@used_hardware = private global i64 0
@used_qfi = private global i32 0
@used_mti_gpu = private global i32 0
@used_mti_cpu = private global i32 0
@graphics_queue = private global i64 0
@compute_queue = private global i64 0
@pipeline_layout = private global i64 0
@surface = private global i64 0
@swapchain = private global i64 0
@swapchain_width = private global i64 0
@swapchain_height = private global i64 0
@swapchain_image_count = private global i32 0
@swapchain_images = private global ptr null
@swapchain_images_cap = private global i64 0
@swapchain_views = private global ptr null
@swapchain_views_cap = private global i64 0
@swapchain_format = private global i64 44
@rgba_format = private global i64 37
@depth_format = private global i64 126
@target_window = private global i64 0
@system_image = private global i64 0
@system_image_view = private global i64 0
@current_frame = private global i64 0
@resources = private global ptr null
@resource_count = private global i64 0
@resource_cap = private global i64 0
@shaders = private global ptr null
@shaders_count = private global i64 0
@shaders_cap = private global i64 0
@graphs = private global ptr null
@graph_count = private global i64 0
@graph_cap = private global i64 0
@passes = private global ptr null
@passes_count = private global i64 0
@passes_cap = private global i64 0
@strlit.149 = private unnamed_addr constant [51 x i8] c"todo: expand allocation of descriptor pool handles\00", align 1
@strlit.150 = private unnamed_addr constant [51 x i8] c"todo: expand allocation of descriptor pool handles\00", align 1
@strlit.151 = private unnamed_addr constant [22 x i8] c"invalid vertex shader\00", align 1
@strlit.152 = private unnamed_addr constant [24 x i8] c"invalid fragment shader\00", align 1
@strlit.153 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@strlit.154 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@strlit.155 = private unnamed_addr constant [23 x i8] c"invalid compute shader\00", align 1
@strlit.156 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@strlit.157 = private unnamed_addr constant [33 x i8] c"allocation too large. requested \00", align 1
@strlit.158 = private unnamed_addr constant [22 x i8] c"B but there was only \00", align 1
@strlit.159 = private unnamed_addr constant [13 x i8] c"B remaining.\00", align 1
@strlit.160 = private unnamed_addr constant [58 x i8] c"oom when binding image memory. todo: multiple allocations\00", align 1
@strlit.161 = private unnamed_addr constant [59 x i8] c"voom when binding image memory. todo: multiple allocations\00", align 1
@strlit.162 = private unnamed_addr constant [26 x i8] c"(re)creating swapchain...\00", align 1
@strlit.163 = private unnamed_addr constant [30 x i8] c"bad pass - no colour targets.\00", align 1
@strlit.164 = private unnamed_addr constant [20 x i8] c"compute work is NYI\00", align 1
@strlit.165 = private unnamed_addr constant [87 x i8] c"doesn't make sense to have a graphics pass with no colour attachments. please use one.\00", align 1
@strlit.166 = private unnamed_addr constant [42 x i8] c"ran out of pass capacity. todo: fix this.\00", align 1
@strlit.167 = private unnamed_addr constant [44 x i8] c"ran out of shader capacity. todo: fix this.\00", align 1
@strlit.168 = private unnamed_addr constant [38 x i8] c"ran out of resources. todo: fix this.\00", align 1
@strlit.169 = private unnamed_addr constant [35 x i8] c"ran out of graphs. todo: fix this.\00", align 1
@strlit.170 = private unnamed_addr constant [33 x i8] c"allocation too large. requested \00", align 1
@strlit.171 = private unnamed_addr constant [22 x i8] c"B but there was only \00", align 1
@strlit.172 = private unnamed_addr constant [13 x i8] c"B remaining.\00", align 1
@strlit.173 = private unnamed_addr constant [59 x i8] c"oom when binding buffer memory. todo: multiple allocations\00", align 1
@strlit.174 = private unnamed_addr constant [60 x i8] c"voom when binding buffer memory. todo: multiple allocations\00", align 1
@strlit.175 = private unnamed_addr constant [29 x i8] c"internal metabuf logic error\00", align 1
@strlit.176 = private unnamed_addr constant [7 x i8] c"tz_gpu\00", align 1
@strlit.177 = private unnamed_addr constant [15 x i8] c"VK_KHR_surface\00", align 1
@strlit.178 = private unnamed_addr constant [21 x i8] c"VK_KHR_win32_surface\00", align 1
@strlit.179 = private unnamed_addr constant [19 x i8] c"VK_EXT_debug_utils\00", align 1
@strlit.180 = private unnamed_addr constant [28 x i8] c"VK_LAYER_KHRONOS_validation\00", align 1
@strlit.181 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@strlit.182 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@strlit.183 = private unnamed_addr constant [26 x i8] c"validation layers enabled\00", align 1
@strlit.184 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@strlit.185 = private unnamed_addr constant [8 x i8] c"release\00", align 1
@strlit.186 = private unnamed_addr constant [17 x i8] c"VK_KHR_swapchain\00", align 1
@strlit.187 = private unnamed_addr constant [7 x i8] c"using \00", align 1
@strlit.188 = private unnamed_addr constant [21 x i8] c"error: draw_buffer (\00", align 1
@strlit.189 = private unnamed_addr constant [31 x i8] c") passed to graphics renderer \00", align 1
@strlit.190 = private unnamed_addr constant [46 x i8] c" did not have tz_gpu_buffer_flag.draw_buffer.\00", align 1
@strlit.191 = private unnamed_addr constant [66 x i8] c"graph ran out of entries in timeline. todo: expand timeline array\00", align 1
@strlit.192 = private unnamed_addr constant [34 x i8] c"subgraphs are not yet implemented\00", align 1
@key.left_alt = global i64 164
@key.num7 = global i64 55
@key.backspace = global i64 8
@key.left_ctrl = global i64 162
@key.a = global i64 65
@key.tab = global i64 9
@key.apps = global i64 93
@key.pause = global i64 19
@key.select = global i64 41
@key.winkey_right = global i64 92
@key.z = global i64 90
@key.enter = global i64 13
@key.p = global i64 80
@key.left_shift = global i64 160
@key.minus = global i64 189
@key.arrow_left = global i64 37
@key.caps_lock = global i64 20
@key.num1 = global i64 49
@key.escape = global i64 27
@key.spacebar = global i64 32
@key.x = global i64 88
@key.page_down = global i64 34
@key.num9 = global i64 57
@key.page_up = global i64 33
@key.k = global i64 75
@key.delete = global i64 46
@key.end = global i64 35
@key.home = global i64 36
@key.arrow_up = global i64 38
@key.arrow_right = global i64 39
@key.h = global i64 72
@key.arrow_down = global i64 40
@key.insert = global i64 45
@key.print = global i64 42
@key.print_screen = global i64 44
@key.num0 = global i64 48
@key.num2 = global i64 50
@key.num3 = global i64 51
@key.num4 = global i64 52
@key.num5 = global i64 53
@key.num6 = global i64 54
@key.num8 = global i64 56
@key.b = global i64 66
@key.c = global i64 67
@key.d = global i64 68
@key.e = global i64 69
@key.f = global i64 70
@key.g = global i64 71
@key.scroll_lock = global i64 145
@key.i = global i64 73
@key.j = global i64 74
@key.l = global i64 76
@key.m = global i64 77
@key.n = global i64 78
@key.o = global i64 79
@key.q = global i64 81
@key.r = global i64 82
@key.s = global i64 83
@key.t = global i64 84
@key.u = global i64 85
@key.v = global i64 86
@key.w = global i64 87
@key.y = global i64 89
@key.winkey_left = global i64 91
@key.sleep = global i64 95
@key.numpad0 = global i64 96
@key.numpad1 = global i64 97
@key.numpad2 = global i64 98
@key.numpad3 = global i64 99
@key.numpad4 = global i64 100
@key.numpad5 = global i64 101
@key.numpad6 = global i64 102
@key.numpad7 = global i64 103
@key.numpad8 = global i64 104
@key.numpad9 = global i64 105
@key.numpad_mul = global i64 106
@key.numpad_add = global i64 107
@key.numpad_separator = global i64 108
@key.numpad_subtract = global i64 109
@key.numpad_decimal = global i64 110
@key.numpad_divide = global i64 111
@key.f1 = global i64 112
@key.f2 = global i64 113
@key.f3 = global i64 114
@key.f4 = global i64 115
@key.f5 = global i64 116
@key.f6 = global i64 117
@key.f7 = global i64 118
@key.f8 = global i64 119
@key.f9 = global i64 120
@key.f10 = global i64 121
@key.f11 = global i64 122
@key.f12 = global i64 123
@key.f13 = global i64 124
@key.f14 = global i64 125
@key.period = global i64 190
@key.f15 = global i64 126
@key.f16 = global i64 127
@key.f17 = global i64 128
@key.f18 = global i64 129
@key.f19 = global i64 130
@key.f20 = global i64 131
@key.f21 = global i64 132
@key.f22 = global i64 133
@key.f23 = global i64 134
@key.f24 = global i64 135
@key.num_lock = global i64 144
@key.right_shift = global i64 161
@key.right_ctrl = global i64 163
@key.right_alt = global i64 165
@key.semicol = global i64 186
@key.plus = global i64 187
@key.obrack = global i64 219
@key.cbrack = global i64 221
@key.fslash = global i64 191
@key.bslash = global i64 220
@key.apostrophe = global i64 222
@key.grave = global i64 192
@strlit.193 = private unnamed_addr constant [15 x i8] c"type of '5' = \00", align 1
@strlit.194 = private unnamed_addr constant [16 x i8] c"s64 weak static\00", align 1
@strlit.195 = private unnamed_addr constant [16 x i8] c"s64 weak static\00", align 1
@strlit.196 = private unnamed_addr constant [16 x i8] c"s64 weak static\00", align 1
@strlit.197 = private unnamed_addr constant [16 x i8] c"s64 weak static\00", align 1
@strlit.198 = private unnamed_addr constant [16 x i8] c"s64 weak static\00", align 1
@strlit.199 = private unnamed_addr constant [16 x i8] c"s64 weak static\00", align 1
@strlit.200 = private unnamed_addr constant [16 x i8] c"s64 weak static\00", align 1
@strlit.201 = private unnamed_addr constant [16 x i8] c"s64 weak static\00", align 1
@strlit.202 = private unnamed_addr constant [16 x i8] c"s64 weak static\00", align 1
@strlit.203 = private unnamed_addr constant [16 x i8] c"s64 weak static\00", align 1
@strlit.204 = private unnamed_addr constant [11 x i8] c"Topaz Test\00", align 1
@strlit.205 = private unnamed_addr constant [24 x i8] c"watch as i count to 10!\00", align 1
@strlit.206 = private unnamed_addr constant [6 x i8] c"Topaz\00", align 1
@strlit.207 = private unnamed_addr constant [17 x i8] c"hardware count: \00", align 1
@strlit.208 = private unnamed_addr constant [24 x i8] c"failed to create buffer\00", align 1
@strlit.209 = private unnamed_addr constant [25 x i8] c"buffer resource handle: \00", align 1
@strlit.210 = private unnamed_addr constant [17 x i8] c"build/vertex.spv\00", align 1
@strlit.211 = private unnamed_addr constant [19 x i8] c"build/fragment.spv\00", align 1
@strlit.212 = private unnamed_addr constant [24 x i8] c"failed to create shader\00", align 1
@strlit.213 = private unnamed_addr constant [18 x i8] c"Triangle Renderer\00", align 1
@strlit.214 = private unnamed_addr constant [22 x i8] c"failed to create pass\00", align 1
@strlit.215 = private unnamed_addr constant [18 x i8] c"triangle renderer\00", align 1
@strlit.216 = private unnamed_addr constant [8 x i8] c"goodbye\00", align 1
@strlit.217 = private unnamed_addr constant [13 x i8] c"arena free: \00", align 1
@strlit.218 = private unnamed_addr constant [2 x i8] c"B\00", align 1

define void @__chkstk() !dbg !2 {
entry:
  ret void, !dbg !7
}

define %vec2 @vec2_zero() !dbg !8 {
entry:
  ret %vec2 zeroinitializer, !dbg !17
}

define %vec2 @vec2_filled(float %val_param) !dbg !18 {
entry:
  %val = alloca float, align 4
  store float %val_param, ptr %val, align 4
    #dbg_declare(ptr %val, !21, !DIExpression(), !22)
  %0 = load float, ptr %val, align 4, !dbg !23
  %1 = load float, ptr %val, align 4, !dbg !23
  %2 = insertvalue %vec2 undef, float %0, 0, !dbg !23
  %3 = insertvalue %vec2 %2, float %1, 1, !dbg !23
  ret %vec2 %3, !dbg !23
}

define float @vec2_sqlength(%vec2 %v_param) !dbg !24 {
entry:
  %v = alloca %vec2, align 8
  store %vec2 %v_param, ptr %v, align 4
    #dbg_declare(ptr %v, !27, !DIExpression(), !28)
  %0 = getelementptr inbounds nuw %vec2, ptr %v, i32 0, i32 0, !dbg !29
  %1 = getelementptr inbounds nuw %vec2, ptr %v, i32 0, i32 1, !dbg !29
  %2 = load float, ptr %0, align 4, !dbg !29
  %3 = load float, ptr %1, align 4, !dbg !29
  %4 = fadd float %2, %3, !dbg !29
  ret float %4, !dbg !29
}

define float @vec2_dot(%vec2 %lhs_param, %vec2 %rhs_param) !dbg !30 {
entry:
  %lhs = alloca %vec2, align 8
  store %vec2 %lhs_param, ptr %lhs, align 4
    #dbg_declare(ptr %lhs, !33, !DIExpression(), !34)
  %rhs = alloca %vec2, align 8
  store %vec2 %rhs_param, ptr %rhs, align 4
    #dbg_declare(ptr %rhs, !35, !DIExpression(), !34)
  %0 = getelementptr inbounds nuw %vec2, ptr %rhs, i32 0, i32 0, !dbg !36
  %1 = getelementptr inbounds nuw %vec2, ptr %rhs, i32 0, i32 1, !dbg !36
  %2 = load float, ptr %0, align 4, !dbg !36
  %3 = load float, ptr %1, align 4, !dbg !36
  %4 = fadd float %2, %3, !dbg !36
  ret float %4, !dbg !36
}

define %vec2u32 @vec2u32_zero() !dbg !37 {
entry:
  ret %vec2u32 zeroinitializer, !dbg !45
}

define %vec2u32 @vec2u32_filled(i32 %val_param) !dbg !46 {
entry:
  %val = alloca i32, align 4
  store i32 %val_param, ptr %val, align 4
    #dbg_declare(ptr %val, !49, !DIExpression(), !50)
  %0 = load i32, ptr %val, align 4, !dbg !51
  %1 = load i32, ptr %val, align 4, !dbg !51
  %2 = insertvalue %vec2u32 undef, i32 %0, 0, !dbg !51
  %3 = insertvalue %vec2u32 %2, i32 %1, 1, !dbg !51
  ret %vec2u32 %3, !dbg !51
}

define %vec3 @vec3_zero() !dbg !52 {
entry:
  ret %vec3 zeroinitializer, !dbg !60
}

define %vec3 @vec3_filled(float %val_param) !dbg !61 {
entry:
  %val = alloca float, align 4
  store float %val_param, ptr %val, align 4
    #dbg_declare(ptr %val, !64, !DIExpression(), !65)
  %0 = load float, ptr %val, align 4, !dbg !66
  %1 = load float, ptr %val, align 4, !dbg !66
  %2 = load float, ptr %val, align 4, !dbg !66
  %3 = insertvalue %vec3 undef, float %0, 0, !dbg !66
  %4 = insertvalue %vec3 %3, float %1, 1, !dbg !66
  %5 = insertvalue %vec3 %4, float %2, 2, !dbg !66
  ret %vec3 %5, !dbg !66
}

define float @vec3_sqlength(%vec3 %v_param) !dbg !67 {
entry:
  %v = alloca %vec3, align 8
  store %vec3 %v_param, ptr %v, align 4
    #dbg_declare(ptr %v, !70, !DIExpression(), !71)
  %0 = getelementptr inbounds nuw %vec3, ptr %v, i32 0, i32 0, !dbg !72
  %1 = getelementptr inbounds nuw %vec3, ptr %v, i32 0, i32 1, !dbg !72
  %2 = load float, ptr %0, align 4, !dbg !72
  %3 = load float, ptr %1, align 4, !dbg !72
  %4 = fadd float %2, %3, !dbg !72
  %5 = getelementptr inbounds nuw %vec3, ptr %v, i32 0, i32 2, !dbg !72
  %6 = load float, ptr %5, align 4, !dbg !72
  %7 = fadd float %4, %6, !dbg !72
  ret float %7, !dbg !72
}

define float @vec3_dot(%vec3 %lhs_param, %vec3 %rhs_param) !dbg !73 {
entry:
  %lhs = alloca %vec3, align 8
  store %vec3 %lhs_param, ptr %lhs, align 4
    #dbg_declare(ptr %lhs, !76, !DIExpression(), !77)
  %rhs = alloca %vec3, align 8
  store %vec3 %rhs_param, ptr %rhs, align 4
    #dbg_declare(ptr %rhs, !78, !DIExpression(), !77)
  %0 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 0, !dbg !79
  %1 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 1, !dbg !79
  %2 = load float, ptr %0, align 4, !dbg !79
  %3 = load float, ptr %1, align 4, !dbg !79
  %4 = fadd float %2, %3, !dbg !79
  %5 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 2, !dbg !79
  %6 = load float, ptr %5, align 4, !dbg !79
  %7 = fadd float %4, %6, !dbg !79
  ret float %7, !dbg !79
}

define %vec3 @vec3_cross(%vec3 %lhs_param, %vec3 %rhs_param) !dbg !80 {
entry:
  %lhs = alloca %vec3, align 8
  store %vec3 %lhs_param, ptr %lhs, align 4
    #dbg_declare(ptr %lhs, !83, !DIExpression(), !84)
  %rhs = alloca %vec3, align 8
  store %vec3 %rhs_param, ptr %rhs, align 4
    #dbg_declare(ptr %rhs, !85, !DIExpression(), !84)
  %result = alloca %vec3, align 8, !dbg !86
  store %vec3 undef, ptr %result, align 4, !dbg !86
    #dbg_declare(ptr %result, !87, !DIExpression(), !88)
  %0 = getelementptr inbounds nuw %vec3, ptr %result, i32 0, i32 0, !dbg !89
  %1 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 2, !dbg !89
  %2 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 1, !dbg !89
  %3 = load float, ptr %1, align 4, !dbg !89
  %4 = load float, ptr %2, align 4, !dbg !89
  %5 = fsub float %3, %4, !dbg !89
  store float %5, ptr %0, align 4, !dbg !89
  %6 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 1, !dbg !89
  %7 = load float, ptr %0, align 4, !dbg !89
  %8 = load float, ptr %6, align 4, !dbg !89
  %9 = fsub float %7, %8, !dbg !89
  %10 = getelementptr inbounds nuw %vec3, ptr %result, i32 0, i32 1, !dbg !90
  %11 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 0, !dbg !90
  %12 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 2, !dbg !90
  %13 = load float, ptr %11, align 4, !dbg !90
  %14 = load float, ptr %12, align 4, !dbg !90
  %15 = fsub float %13, %14, !dbg !90
  store float %15, ptr %10, align 4, !dbg !90
  %16 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 2, !dbg !90
  %17 = load float, ptr %10, align 4, !dbg !90
  %18 = load float, ptr %16, align 4, !dbg !90
  %19 = fsub float %17, %18, !dbg !90
  %20 = getelementptr inbounds nuw %vec3, ptr %result, i32 0, i32 2, !dbg !91
  %21 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 1, !dbg !91
  %22 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 0, !dbg !91
  %23 = load float, ptr %21, align 4, !dbg !91
  %24 = load float, ptr %22, align 4, !dbg !91
  %25 = fsub float %23, %24, !dbg !91
  store float %25, ptr %20, align 4, !dbg !91
  %26 = getelementptr inbounds nuw %vec3, ptr %rhs, i32 0, i32 0, !dbg !91
  %27 = load float, ptr %20, align 4, !dbg !91
  %28 = load float, ptr %26, align 4, !dbg !91
  %29 = fsub float %27, %28, !dbg !91
  %30 = load %vec3, ptr %result, align 4, !dbg !92
  ret %vec3 %30, !dbg !92
}

define %vec4 @vec4_zero() !dbg !93 {
entry:
  ret %vec4 zeroinitializer, !dbg !102
}

define %vec4 @vec4_filled(float %val_param) !dbg !103 {
entry:
  %val = alloca float, align 4
  store float %val_param, ptr %val, align 4
    #dbg_declare(ptr %val, !106, !DIExpression(), !107)
  %0 = load float, ptr %val, align 4, !dbg !108
  %1 = load float, ptr %val, align 4, !dbg !108
  %2 = load float, ptr %val, align 4, !dbg !108
  %3 = load float, ptr %val, align 4, !dbg !108
  %4 = insertvalue %vec4 undef, float %0, 0, !dbg !108
  %5 = insertvalue %vec4 %4, float %1, 1, !dbg !108
  %6 = insertvalue %vec4 %5, float %2, 2, !dbg !108
  %7 = insertvalue %vec4 %6, float %3, 3, !dbg !108
  ret %vec4 %7, !dbg !108
}

define float @vec4_sqlength(%vec4 %v_param) !dbg !109 {
entry:
  %v = alloca %vec4, align 8
  store %vec4 %v_param, ptr %v, align 4
    #dbg_declare(ptr %v, !112, !DIExpression(), !113)
  %0 = getelementptr inbounds nuw %vec4, ptr %v, i32 0, i32 0, !dbg !114
  %1 = getelementptr inbounds nuw %vec4, ptr %v, i32 0, i32 1, !dbg !114
  %2 = load float, ptr %0, align 4, !dbg !114
  %3 = load float, ptr %1, align 4, !dbg !114
  %4 = fadd float %2, %3, !dbg !114
  %5 = getelementptr inbounds nuw %vec4, ptr %v, i32 0, i32 2, !dbg !114
  %6 = load float, ptr %5, align 4, !dbg !114
  %7 = fadd float %4, %6, !dbg !114
  %8 = getelementptr inbounds nuw %vec4, ptr %v, i32 0, i32 3, !dbg !114
  %9 = load float, ptr %8, align 4, !dbg !114
  %10 = fadd float %7, %9, !dbg !114
  ret float %10, !dbg !114
}

define float @vec4_dot(%vec4 %lhs_param, %vec4 %rhs_param) !dbg !115 {
entry:
  %lhs = alloca %vec4, align 8
  store %vec4 %lhs_param, ptr %lhs, align 4
    #dbg_declare(ptr %lhs, !118, !DIExpression(), !119)
  %rhs = alloca %vec4, align 8
  store %vec4 %rhs_param, ptr %rhs, align 4
    #dbg_declare(ptr %rhs, !120, !DIExpression(), !119)
  %0 = getelementptr inbounds nuw %vec4, ptr %rhs, i32 0, i32 0, !dbg !121
  %1 = getelementptr inbounds nuw %vec4, ptr %rhs, i32 0, i32 1, !dbg !121
  %2 = load float, ptr %0, align 4, !dbg !121
  %3 = load float, ptr %1, align 4, !dbg !121
  %4 = fadd float %2, %3, !dbg !121
  %5 = getelementptr inbounds nuw %vec4, ptr %rhs, i32 0, i32 2, !dbg !121
  %6 = load float, ptr %5, align 4, !dbg !121
  %7 = fadd float %4, %6, !dbg !121
  %8 = getelementptr inbounds nuw %vec4, ptr %rhs, i32 0, i32 3, !dbg !121
  %9 = load float, ptr %8, align 4, !dbg !121
  %10 = fadd float %7, %9, !dbg !121
  ret float %10, !dbg !121
}

define %vec4u32 @vec4u32_zero() !dbg !122 {
entry:
  ret %vec4u32 zeroinitializer, !dbg !131
}

define %vec4u32 @vec4u32_filled(i32 %val_param) !dbg !132 {
entry:
  %val = alloca i32, align 4
  store i32 %val_param, ptr %val, align 4
    #dbg_declare(ptr %val, !135, !DIExpression(), !136)
  %0 = load i32, ptr %val, align 4, !dbg !137
  %1 = load i32, ptr %val, align 4, !dbg !137
  %2 = load i32, ptr %val, align 4, !dbg !137
  %3 = load i32, ptr %val, align 4, !dbg !137
  %4 = insertvalue %vec4u32 undef, i32 %0, 0, !dbg !137
  %5 = insertvalue %vec4u32 %4, i32 %1, 1, !dbg !137
  %6 = insertvalue %vec4u32 %5, i32 %2, 2, !dbg !137
  %7 = insertvalue %vec4u32 %6, i32 %3, 3, !dbg !137
  ret %vec4u32 %7, !dbg !137
}

declare i64 @GetStdHandle(i32)

declare i32 @WriteConsoleA(i64, ptr, i32, ptr, ptr)

define void @putchar(i8 %chr_param) !dbg !138 {
entry:
  %chr = alloca i8, align 1
  store i8 %chr_param, ptr %chr, align 1
    #dbg_declare(ptr %chr, !143, !DIExpression(), !144)
  %0 = call i64 @GetStdHandle(i32 -11), !dbg !145
  %handle = alloca i64, align 8, !dbg !145
  store i64 %0, ptr %handle, align 4, !dbg !145
    #dbg_declare(ptr %handle, !146, !DIExpression(), !148)
  %1 = load i64, ptr %handle, align 4, !dbg !149
  %2 = load ptr, ptr @null, align 8, !dbg !149
  %3 = load ptr, ptr @null, align 8, !dbg !149
  %4 = call i32 @WriteConsoleA(i64 %1, ptr %chr, i32 1, ptr %2, ptr %3), !dbg !149
  ret void, !dbg !150
}

define void @putuint(i64 %v_param) !dbg !151 {
entry:
  %v = alloca i64, align 8
  store i64 %v_param, ptr %v, align 4
    #dbg_declare(ptr %v, !154, !DIExpression(), !155)
  %0 = load i64, ptr %v, align 4, !dbg !156
  %1 = icmp ugt i64 %0, 9, !dbg !156
  br i1 %1, label %then, label %ifcont, !dbg !156

then:                                             ; preds = %entry
  %2 = load i64, ptr %v, align 4, !dbg !157
  %3 = udiv i64 %2, 10, !dbg !157
  call void @putuint(i64 %3), !dbg !157
  br label %ifcont, !dbg !157

ifcont:                                           ; preds = %then, %entry
  %4 = load i64, ptr %v, align 4, !dbg !157
  %5 = udiv i64 %4, 10, !dbg !157
  %6 = mul i64 %5, 10, !dbg !157
  %7 = load i64, ptr %v, align 4, !dbg !157
  %8 = sub i64 %7, %6, !dbg !157
  %digit = alloca i64, align 8, !dbg !158
  store i64 %8, ptr %digit, align 4, !dbg !158
    #dbg_declare(ptr %digit, !159, !DIExpression(), !160)
  %9 = load i64, ptr %digit, align 4, !dbg !161
  %10 = add i64 48, %9, !dbg !161
  %11 = trunc i64 %10 to i8, !dbg !161
  call void @putchar(i8 %11), !dbg !161
  ret void, !dbg !162
}

define void @putsint(i64 %v_param) !dbg !163 {
entry:
  %v = alloca i64, align 8
  store i64 %v_param, ptr %v, align 4
    #dbg_declare(ptr %v, !167, !DIExpression(), !168)
  %0 = load i64, ptr %v, align 4, !dbg !169
  %1 = icmp slt i64 %0, 0, !dbg !169
  br i1 %1, label %then, label %ifcont, !dbg !169

then:                                             ; preds = %entry
  call void @putchar(i8 45), !dbg !170
  %2 = load i64, ptr %v, align 4, !dbg !171
  %3 = mul i64 %2, -1, !dbg !171
  store i64 %3, ptr %v, align 4, !dbg !171
  %4 = load i64, ptr %v, align 4, !dbg !171
  %5 = mul i64 %4, -1, !dbg !171
  br label %ifcont, !dbg !171

ifcont:                                           ; preds = %then, %entry
  %6 = load i64, ptr %v, align 4, !dbg !172
  call void @putuint(i64 %6), !dbg !172
  ret void, !dbg !173
}

define i64 @cstrlen(ptr %cstr_param) !dbg !174 {
entry:
  %cstr = alloca ptr, align 8
  store ptr %cstr_param, ptr %cstr, align 8
    #dbg_declare(ptr %cstr, !178, !DIExpression(), !179)
  %c = alloca i64, align 8, !dbg !180
  store i64 0, ptr %c, align 4, !dbg !180
    #dbg_declare(ptr %c, !181, !DIExpression(), !182)
  %0 = load ptr, ptr %cstr, align 8, !dbg !183
  %1 = load ptr, ptr @null, align 8, !dbg !183
  %2 = icmp eq ptr %0, %1, !dbg !183
  br i1 %2, label %then, label %ifcont, !dbg !183

then:                                             ; preds = %entry
  %3 = load i64, ptr %c, align 4, !dbg !184
  ret i64 %3, !dbg !184

ifcont:                                           ; preds = %entry
  %4 = load i64, ptr %c, align 4, !dbg !185
  %5 = load ptr, ptr %cstr, align 8, !dbg !185
  %6 = getelementptr i8, ptr %5, i64 %4, !dbg !185
  %7 = load i8, ptr %6, align 1, !dbg !185
  %8 = icmp ne i8 %7, 0, !dbg !185
  br i1 %8, label %then1, label %whilecont, !dbg !185

then1:                                            ; preds = %then1, %ifcont
  %9 = load i64, ptr %c, align 4, !dbg !186
  %10 = add i64 %9, 1, !dbg !186
  store i64 %10, ptr %c, align 4, !dbg !186
  %11 = load i64, ptr %c, align 4, !dbg !186
  %12 = add i64 %11, 1, !dbg !186
  %13 = load i64, ptr %c, align 4, !dbg !186
  %14 = load ptr, ptr %cstr, align 8, !dbg !186
  %15 = getelementptr i8, ptr %14, i64 %13, !dbg !186
  %16 = load i8, ptr %15, align 1, !dbg !186
  %17 = icmp ne i8 %16, 0, !dbg !186
  br i1 %17, label %then1, label %whilecont, !dbg !186

whilecont:                                        ; preds = %then1, %ifcont
  %18 = load i64, ptr %c, align 4, !dbg !187
  ret i64 %18, !dbg !187
}

define void @puts(ptr %str_param) !dbg !188 {
entry:
  %str = alloca ptr, align 8
  store ptr %str_param, ptr %str, align 8
    #dbg_declare(ptr %str, !191, !DIExpression(), !192)
  %i = alloca i64, align 8, !dbg !193
  store i64 0, ptr %i, align 4, !dbg !193
    #dbg_declare(ptr %i, !194, !DIExpression(), !195)
  %0 = load ptr, ptr %str, align 8, !dbg !196
  %1 = call i64 @cstrlen(ptr %0), !dbg !196
  %len = alloca i64, align 8, !dbg !196
  store i64 %1, ptr %len, align 4, !dbg !196
    #dbg_declare(ptr %len, !197, !DIExpression(), !198)
  %2 = load ptr, ptr @null, align 8, !dbg !199
  %chr = alloca ptr, align 8, !dbg !199
  store ptr %2, ptr %chr, align 8, !dbg !199
    #dbg_declare(ptr %chr, !200, !DIExpression(), !201)
  %3 = load i64, ptr %i, align 4, !dbg !202
  %4 = load i64, ptr %len, align 4, !dbg !202
  %5 = icmp ult i64 %3, %4, !dbg !202
  br i1 %5, label %then, label %whilecont, !dbg !202

then:                                             ; preds = %then, %entry
  %6 = load i64, ptr %i, align 4, !dbg !203
  %7 = load ptr, ptr %str, align 8, !dbg !203
  %8 = getelementptr i8, ptr %7, i64 %6, !dbg !203
  store ptr %8, ptr %chr, align 8, !dbg !203
  %9 = load ptr, ptr %chr, align 8, !dbg !204
  %10 = load i8, ptr %9, align 1, !dbg !204
  call void @putchar(i8 %10), !dbg !204
  %11 = load i64, ptr %i, align 4, !dbg !205
  %12 = add i64 %11, 1, !dbg !205
  store i64 %12, ptr %i, align 4, !dbg !205
  %13 = load i64, ptr %i, align 4, !dbg !205
  %14 = add i64 %13, 1, !dbg !205
  %15 = load i64, ptr %i, align 4, !dbg !205
  %16 = load i64, ptr %len, align 4, !dbg !205
  %17 = icmp ult i64 %15, %16, !dbg !205
  br i1 %17, label %then, label %whilecont, !dbg !205

whilecont:                                        ; preds = %then, %entry
  ret void, !dbg !206
}

declare ptr @VirtualAlloc(ptr, i64, i64, i64)

declare void @VirtualFree(ptr, i64, i64)

define %arena @arena_create(i64 %initial_capacity_param) !dbg !207 {
entry:
  %initial_capacity = alloca i64, align 8
  store i64 %initial_capacity_param, ptr %initial_capacity, align 4
    #dbg_declare(ptr %initial_capacity, !217, !DIExpression(), !218)
  %0 = load ptr, ptr @null, align 8, !dbg !219
  %1 = load i64, ptr @ARENA_ADDR_RESERVE, align 4, !dbg !219
  %2 = load i64, ptr @MEM_RESERVE, align 4, !dbg !219
  %3 = load i64, ptr @PAGE_READWRITE, align 4, !dbg !219
  %4 = call ptr @VirtualAlloc(ptr %0, i64 %1, i64 %2, i64 %3), !dbg !219
  %ptr = alloca ptr, align 8, !dbg !219
  store ptr %4, ptr %ptr, align 8, !dbg !219
    #dbg_declare(ptr %ptr, !220, !DIExpression(), !221)
  %5 = load ptr, ptr %ptr, align 8, !dbg !222
  %6 = load i64, ptr %initial_capacity, align 4, !dbg !222
  %7 = load i64, ptr @MEM_COMMIT, align 4, !dbg !222
  %8 = load i64, ptr @PAGE_READWRITE, align 4, !dbg !222
  %9 = call ptr @VirtualAlloc(ptr %5, i64 %6, i64 %7, i64 %8), !dbg !222
  %10 = load ptr, ptr %ptr, align 8, !dbg !223
  %11 = load i64, ptr %initial_capacity, align 4, !dbg !223
  %12 = insertvalue %arena undef, ptr %10, 0, !dbg !223
  %13 = insertvalue %arena %12, i64 %11, 1, !dbg !223
  %14 = insertvalue %arena %13, i64 0, 2, !dbg !223
  ret %arena %14, !dbg !223
}

define void @_arena_double_capacity(ptr %a_param) !dbg !224 {
entry:
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !228, !DIExpression(), !229)
  %0 = load ptr, ptr %a, align 8, !dbg !230
  %1 = getelementptr inbounds nuw %arena, ptr %0, i32 0, i32 0, !dbg !230
  %2 = load ptr, ptr %1, align 8, !dbg !230
  %3 = ptrtoint ptr %2 to i64, !dbg !230
  %4 = inttoptr i64 %3 to ptr, !dbg !230
  %offset = alloca ptr, align 8, !dbg !231
  store ptr %4, ptr %offset, align 8, !dbg !231
    #dbg_declare(ptr %offset, !232, !DIExpression(), !233)
  %5 = load ptr, ptr %offset, align 8, !dbg !234
  %6 = load ptr, ptr %a, align 8, !dbg !234
  %7 = getelementptr inbounds nuw %arena, ptr %6, i32 0, i32 1, !dbg !234
  %8 = load i64, ptr %7, align 4, !dbg !234
  %9 = load i64, ptr @MEM_COMMIT, align 4, !dbg !234
  %10 = load i64, ptr @PAGE_READWRITE, align 4, !dbg !234
  %11 = call ptr @VirtualAlloc(ptr %5, i64 %8, i64 %9, i64 %10), !dbg !234
  %12 = load ptr, ptr %a, align 8, !dbg !235
  %13 = getelementptr inbounds nuw %arena, ptr %12, i32 0, i32 1, !dbg !235
  %14 = load ptr, ptr %a, align 8, !dbg !235
  %15 = getelementptr inbounds nuw %arena, ptr %14, i32 0, i32 1, !dbg !235
  %16 = load i64, ptr %15, align 4, !dbg !235
  %17 = mul i64 %16, 2, !dbg !235
  store i64 %17, ptr %13, align 4, !dbg !235
  %18 = load i64, ptr %13, align 4, !dbg !235
  %19 = mul i64 %18, 2, !dbg !235
  ret void, !dbg !230
}

define ptr @arena_push(ptr %a_param, i64 %bytes_param) !dbg !236 {
entry:
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !239, !DIExpression(), !240)
  %bytes = alloca i64, align 8
  store i64 %bytes_param, ptr %bytes, align 4
    #dbg_declare(ptr %bytes, !241, !DIExpression(), !240)
  %0 = load ptr, ptr %a, align 8, !dbg !242
  %1 = getelementptr inbounds nuw %arena, ptr %0, i32 0, i32 2, !dbg !242
  %2 = load ptr, ptr %a, align 8, !dbg !242
  %3 = getelementptr inbounds nuw %arena, ptr %2, i32 0, i32 1, !dbg !242
  %4 = load i64, ptr %3, align 4, !dbg !242
  %5 = load i64, ptr %bytes, align 4, !dbg !242
  %6 = add i64 %4, %5, !dbg !242
  %7 = load i64, ptr %1, align 4, !dbg !242
  %8 = icmp ugt i64 %7, %6, !dbg !242
  br i1 %8, label %then, label %whilecont, !dbg !242

then:                                             ; preds = %then, %entry
  %9 = load ptr, ptr %a, align 8, !dbg !243
  call void @_arena_double_capacity(ptr %9), !dbg !243
  %10 = load ptr, ptr %a, align 8, !dbg !243
  %11 = getelementptr inbounds nuw %arena, ptr %10, i32 0, i32 2, !dbg !243
  %12 = load ptr, ptr %a, align 8, !dbg !243
  %13 = getelementptr inbounds nuw %arena, ptr %12, i32 0, i32 1, !dbg !243
  %14 = load i64, ptr %13, align 4, !dbg !243
  %15 = load i64, ptr %bytes, align 4, !dbg !243
  %16 = add i64 %14, %15, !dbg !243
  %17 = load i64, ptr %11, align 4, !dbg !243
  %18 = icmp ugt i64 %17, %16, !dbg !243
  br i1 %18, label %then, label %whilecont, !dbg !243

whilecont:                                        ; preds = %then, %entry
  %19 = load ptr, ptr %a, align 8, !dbg !243
  %20 = getelementptr inbounds nuw %arena, ptr %19, i32 0, i32 0, !dbg !243
  %21 = load ptr, ptr %20, align 8, !dbg !243
  %22 = ptrtoint ptr %21 to i64, !dbg !243
  %addr = alloca i64, align 8, !dbg !244
  store i64 %22, ptr %addr, align 4, !dbg !244
    #dbg_declare(ptr %addr, !245, !DIExpression(), !246)
  %23 = load ptr, ptr %a, align 8, !dbg !247
  %24 = getelementptr inbounds nuw %arena, ptr %23, i32 0, i32 2, !dbg !247
  %25 = load i64, ptr %addr, align 4, !dbg !247
  %26 = load i64, ptr %24, align 4, !dbg !247
  %27 = add i64 %25, %26, !dbg !247
  store i64 %27, ptr %addr, align 4, !dbg !247
  %28 = load ptr, ptr %a, align 8, !dbg !247
  %29 = getelementptr inbounds nuw %arena, ptr %28, i32 0, i32 2, !dbg !247
  %30 = load i64, ptr %addr, align 4, !dbg !247
  %31 = load i64, ptr %29, align 4, !dbg !247
  %32 = add i64 %30, %31, !dbg !247
  %33 = load ptr, ptr %a, align 8, !dbg !248
  %34 = getelementptr inbounds nuw %arena, ptr %33, i32 0, i32 2, !dbg !248
  %35 = load ptr, ptr %a, align 8, !dbg !248
  %36 = getelementptr inbounds nuw %arena, ptr %35, i32 0, i32 2, !dbg !248
  %37 = load i64, ptr %36, align 4, !dbg !248
  %38 = load i64, ptr %bytes, align 4, !dbg !248
  %39 = add i64 %37, %38, !dbg !248
  store i64 %39, ptr %34, align 4, !dbg !248
  %40 = load i64, ptr %34, align 4, !dbg !248
  %41 = load i64, ptr %bytes, align 4, !dbg !248
  %42 = add i64 %40, %41, !dbg !248
  %43 = load i64, ptr %addr, align 4, !dbg !249
  %44 = inttoptr i64 %43 to ptr, !dbg !249
  ret ptr %44, !dbg !249
}

define void @arena_clear(ptr %a_param) !dbg !250 {
entry:
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !251, !DIExpression(), !252)
  %0 = load ptr, ptr %a, align 8, !dbg !253
  %1 = getelementptr inbounds nuw %arena, ptr %0, i32 0, i32 2, !dbg !253
  store i64 0, ptr %1, align 4, !dbg !253
  ret void, !dbg !254
}

define void @arena_destroy(%arena %a_param) !dbg !255 {
entry:
  %a = alloca %arena, align 8
  store %arena %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !258, !DIExpression(), !259)
  %0 = getelementptr inbounds nuw %arena, ptr %a, i32 0, i32 0, !dbg !260
  %1 = load ptr, ptr %0, align 8, !dbg !260
  %2 = load i64, ptr @MEM_RELEASE, align 4, !dbg !260
  call void @VirtualFree(ptr %1, i64 0, i64 %2), !dbg !260
  ret void, !dbg !261
}

define i1 @cstreql(ptr %lhs_param, ptr %rhs_param) !dbg !262 {
entry:
  %lhs = alloca ptr, align 8
  store ptr %lhs_param, ptr %lhs, align 8
    #dbg_declare(ptr %lhs, !267, !DIExpression(), !268)
  %rhs = alloca ptr, align 8
  store ptr %rhs_param, ptr %rhs, align 8
    #dbg_declare(ptr %rhs, !269, !DIExpression(), !268)
  %0 = load ptr, ptr %lhs, align 8, !dbg !270
  %1 = call i64 @cstrlen(ptr %0), !dbg !270
  %llen = alloca i64, align 8, !dbg !270
  store i64 %1, ptr %llen, align 4, !dbg !270
    #dbg_declare(ptr %llen, !271, !DIExpression(), !272)
  %2 = load ptr, ptr %rhs, align 8, !dbg !273
  %3 = call i64 @cstrlen(ptr %2), !dbg !273
  %rlen = alloca i64, align 8, !dbg !273
  store i64 %3, ptr %rlen, align 4, !dbg !273
    #dbg_declare(ptr %rlen, !274, !DIExpression(), !275)
  %4 = load i64, ptr %llen, align 4, !dbg !276
  %5 = load i64, ptr %rlen, align 4, !dbg !276
  %6 = icmp ne i64 %4, %5, !dbg !276
  br i1 %6, label %then, label %ifcont, !dbg !276

then:                                             ; preds = %entry
  ret i1 false, !dbg !277

ifcont:                                           ; preds = %entry
  %7 = load i64, ptr %rlen, align 4, !dbg !278
  %min = alloca i64, align 8, !dbg !278
  store i64 %7, ptr %min, align 4, !dbg !278
    #dbg_declare(ptr %min, !279, !DIExpression(), !280)
  %8 = load i64, ptr %llen, align 4, !dbg !281
  %9 = load i64, ptr %rlen, align 4, !dbg !281
  %10 = icmp ult i64 %8, %9, !dbg !281
  br i1 %10, label %then1, label %ifcont2, !dbg !281

then1:                                            ; preds = %ifcont
  %11 = load i64, ptr %llen, align 4, !dbg !282
  store i64 %11, ptr %min, align 4, !dbg !282
  br label %ifcont2, !dbg !282

ifcont2:                                          ; preds = %then1, %ifcont
  %i = alloca i64, align 8, !dbg !283
  store i64 0, ptr %i, align 4, !dbg !283
    #dbg_declare(ptr %i, !284, !DIExpression(), !285)
  %lchr = alloca i8, align 1, !dbg !286
    #dbg_declare(ptr %lchr, !287, !DIExpression(), !288)
  %rchr = alloca i8, align 1, !dbg !289
    #dbg_declare(ptr %rchr, !290, !DIExpression(), !291)
  %12 = load i64, ptr %i, align 4, !dbg !292
  %13 = load i64, ptr %min, align 4, !dbg !292
  %14 = icmp ult i64 %12, %13, !dbg !292
  br i1 %14, label %then3, label %whilecont, !dbg !292

then3:                                            ; preds = %ifcont5, %ifcont2
  %15 = load i64, ptr %i, align 4, !dbg !293
  %16 = load ptr, ptr %lhs, align 8, !dbg !293
  %17 = getelementptr i8, ptr %16, i64 %15, !dbg !293
  %18 = load i8, ptr %17, align 1, !dbg !293
  store i8 %18, ptr %lchr, align 1, !dbg !293
  %19 = load i64, ptr %i, align 4, !dbg !294
  %20 = load ptr, ptr %rhs, align 8, !dbg !294
  %21 = getelementptr i8, ptr %20, i64 %19, !dbg !294
  %22 = load i8, ptr %21, align 1, !dbg !294
  store i8 %22, ptr %rchr, align 1, !dbg !294
  %23 = load i8, ptr %lchr, align 1, !dbg !295
  %24 = load i8, ptr %rchr, align 1, !dbg !295
  %25 = icmp ne i8 %23, %24, !dbg !295
  br i1 %25, label %then4, label %ifcont5, !dbg !295

whilecont:                                        ; preds = %ifcont5, %ifcont2
  ret i1 true, !dbg !296

then4:                                            ; preds = %then3
  ret i1 false, !dbg !297

ifcont5:                                          ; preds = %then3
  %26 = load i64, ptr %i, align 4, !dbg !298
  %27 = add i64 %26, 1, !dbg !298
  store i64 %27, ptr %i, align 4, !dbg !298
  %28 = load i64, ptr %i, align 4, !dbg !298
  %29 = add i64 %28, 1, !dbg !298
  %30 = load i64, ptr %i, align 4, !dbg !298
  %31 = load i64, ptr %min, align 4, !dbg !298
  %32 = icmp ult i64 %30, %31, !dbg !298
  br i1 %32, label %then3, label %whilecont, !dbg !298
}

define void @strcpy(ptr %dst_param, ptr %src_param, i64 %count_param) !dbg !299 {
entry:
  %dst = alloca ptr, align 8
  store ptr %dst_param, ptr %dst, align 8
    #dbg_declare(ptr %dst, !302, !DIExpression(), !303)
  %src = alloca ptr, align 8
  store ptr %src_param, ptr %src, align 8
    #dbg_declare(ptr %src, !304, !DIExpression(), !303)
  %count = alloca i64, align 8
  store i64 %count_param, ptr %count, align 4
    #dbg_declare(ptr %count, !305, !DIExpression(), !303)
  %i = alloca i64, align 8, !dbg !306
  store i64 0, ptr %i, align 4, !dbg !306
    #dbg_declare(ptr %i, !307, !DIExpression(), !308)
  %0 = load ptr, ptr %dst, align 8, !dbg !309
  %dstcpy = alloca ptr, align 8, !dbg !309
  store ptr %0, ptr %dstcpy, align 8, !dbg !309
    #dbg_declare(ptr %dstcpy, !310, !DIExpression(), !311)
  %1 = load ptr, ptr %src, align 8, !dbg !312
  %srccpy = alloca ptr, align 8, !dbg !312
  store ptr %1, ptr %srccpy, align 8, !dbg !312
    #dbg_declare(ptr %srccpy, !313, !DIExpression(), !314)
  %2 = load i64, ptr %i, align 4, !dbg !315
  %3 = load i64, ptr %count, align 4, !dbg !315
  %4 = icmp ult i64 %2, %3, !dbg !315
  br i1 %4, label %then, label %whilecont, !dbg !315

then:                                             ; preds = %then, %entry
  %5 = load ptr, ptr %dstcpy, align 8, !dbg !316
  %6 = load i8, ptr %5, align 1, !dbg !316
  %7 = load ptr, ptr %srccpy, align 8, !dbg !316
  %8 = load i8, ptr %7, align 1, !dbg !316
  store i8 %8, ptr %5, align 1, !dbg !316
  %9 = load ptr, ptr %dstcpy, align 8, !dbg !317
  %10 = ptrtoint ptr %9 to i64, !dbg !317
  %11 = add i64 %10, 1, !dbg !317
  %12 = inttoptr i64 %11 to ptr, !dbg !317
  store ptr %12, ptr %dstcpy, align 8, !dbg !317
  %13 = load ptr, ptr %dstcpy, align 8, !dbg !317
  %14 = load ptr, ptr %srccpy, align 8, !dbg !318
  %15 = ptrtoint ptr %14 to i64, !dbg !318
  %16 = add i64 %15, 1, !dbg !318
  %17 = inttoptr i64 %16 to ptr, !dbg !318
  store ptr %17, ptr %srccpy, align 8, !dbg !318
  %18 = load ptr, ptr %srccpy, align 8, !dbg !318
  %19 = load i64, ptr %i, align 4, !dbg !319
  %20 = add i64 %19, 1, !dbg !319
  store i64 %20, ptr %i, align 4, !dbg !319
  %21 = load i64, ptr %i, align 4, !dbg !319
  %22 = add i64 %21, 1, !dbg !319
  %23 = load i64, ptr %i, align 4, !dbg !319
  %24 = load i64, ptr %count, align 4, !dbg !319
  %25 = icmp ult i64 %23, %24, !dbg !319
  br i1 %25, label %then, label %whilecont, !dbg !319

whilecont:                                        ; preds = %then, %entry
  ret void, !dbg !320
}

define %string @create_string(ptr %cstring_param, ptr %mem_param) !dbg !321 {
entry:
  %cstring = alloca ptr, align 8
  store ptr %cstring_param, ptr %cstring, align 8
    #dbg_declare(ptr %cstring, !330, !DIExpression(), !331)
  %mem = alloca ptr, align 8
  store ptr %mem_param, ptr %mem, align 8
    #dbg_declare(ptr %mem, !332, !DIExpression(), !331)
  %ret = alloca %string, align 8, !dbg !333
    #dbg_declare(ptr %ret, !334, !DIExpression(), !335)
  %0 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 2, !dbg !336
  %1 = load ptr, ptr %cstring, align 8, !dbg !336
  %2 = call i64 @cstrlen(ptr %1), !dbg !336
  store i64 %2, ptr %0, align 4, !dbg !336
  %sso_size = alloca i64, align 8, !dbg !337
  store i64 32, ptr %sso_size, align 4, !dbg !337
    #dbg_declare(ptr %sso_size, !338, !DIExpression(), !339)
  %3 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 2, !dbg !340
  %4 = load i64, ptr %3, align 4, !dbg !340
  %5 = load i64, ptr %sso_size, align 4, !dbg !340
  %6 = icmp ult i64 %4, %5, !dbg !340
  br i1 %6, label %then, label %ifcont, !dbg !340

then:                                             ; preds = %entry
  %7 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 1, !dbg !341
  %8 = load ptr, ptr @null, align 8, !dbg !341
  store ptr %8, ptr %7, align 8, !dbg !341
  %9 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 0, !dbg !342
  %10 = getelementptr [32 x i8], ptr %9, i64 0, i64 0, !dbg !342
  %11 = load ptr, ptr %cstring, align 8, !dbg !342
  %12 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 2, !dbg !342
  %13 = load i64, ptr %12, align 4, !dbg !342
  call void @strcpy(ptr %10, ptr %11, i64 %13), !dbg !342
  %14 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 3, !dbg !343
  %15 = load i64, ptr %sso_size, align 4, !dbg !343
  store i64 %15, ptr %14, align 4, !dbg !343
  %16 = load %string, ptr %ret, align 8, !dbg !344
  ret %string %16, !dbg !344

ifcont:                                           ; preds = %entry
  %17 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 1, !dbg !345
  %18 = load ptr, ptr %mem, align 8, !dbg !345
  %19 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 2, !dbg !345
  %20 = load i64, ptr %19, align 4, !dbg !345
  %21 = call ptr @arena_push(ptr %18, i64 %20), !dbg !345
  store ptr %21, ptr %17, align 8, !dbg !345
  %22 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 2, !dbg !346
  %23 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 1, !dbg !347
  %24 = load ptr, ptr %23, align 8, !dbg !347
  %25 = load ptr, ptr %cstring, align 8, !dbg !347
  %26 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 2, !dbg !347
  %27 = load i64, ptr %26, align 4, !dbg !347
  call void @strcpy(ptr %24, ptr %25, i64 %27), !dbg !347
  %28 = load %string, ptr %ret, align 8, !dbg !348
  ret %string %28, !dbg !348
}

define i1 @string_is_small(ptr %str_param) !dbg !349 {
entry:
  %str = alloca ptr, align 8
  store ptr %str_param, ptr %str, align 8
    #dbg_declare(ptr %str, !353, !DIExpression(), !354)
  %sso_size = alloca i64, align 8, !dbg !355
  store i64 32, ptr %sso_size, align 4, !dbg !355
    #dbg_declare(ptr %sso_size, !356, !DIExpression(), !357)
  %0 = load ptr, ptr %str, align 8, !dbg !358
  %1 = getelementptr inbounds nuw %string, ptr %0, i32 0, i32 2, !dbg !358
  %2 = load i64, ptr %1, align 4, !dbg !358
  %3 = load i64, ptr %sso_size, align 4, !dbg !358
  %4 = icmp ult i64 %2, %3, !dbg !358
  ret i1 %4, !dbg !358
}

define void @print_string(ptr %str_param) !dbg !359 {
entry:
  %str = alloca ptr, align 8
  store ptr %str_param, ptr %str, align 8
    #dbg_declare(ptr %str, !362, !DIExpression(), !363)
  %i = alloca i64, align 8, !dbg !364
  store i64 0, ptr %i, align 4, !dbg !364
    #dbg_declare(ptr %i, !365, !DIExpression(), !366)
  %0 = load ptr, ptr %str, align 8, !dbg !364
  %1 = getelementptr inbounds nuw %string, ptr %0, i32 0, i32 2, !dbg !364
  %2 = load i64, ptr %1, align 4, !dbg !367
  %len = alloca i64, align 8, !dbg !367
  store i64 %2, ptr %len, align 4, !dbg !367
    #dbg_declare(ptr %len, !368, !DIExpression(), !369)
  %3 = load ptr, ptr %str, align 8, !dbg !367
  %4 = getelementptr inbounds nuw %string, ptr %3, i32 0, i32 1, !dbg !367
  %5 = load ptr, ptr %4, align 8, !dbg !370
  %dst = alloca ptr, align 8, !dbg !370
  store ptr %5, ptr %dst, align 8, !dbg !370
    #dbg_declare(ptr %dst, !371, !DIExpression(), !372)
  %6 = load ptr, ptr %str, align 8, !dbg !373
  %7 = call i1 @string_is_small(ptr %6), !dbg !373
  br i1 %7, label %then, label %ifcont, !dbg !373

then:                                             ; preds = %entry
  %8 = load ptr, ptr %str, align 8, !dbg !374
  %9 = getelementptr inbounds nuw %string, ptr %8, i32 0, i32 0, !dbg !374
  %10 = getelementptr [32 x i8], ptr %9, i64 0, i64 0, !dbg !374
  store ptr %10, ptr %dst, align 8, !dbg !374
  %11 = load ptr, ptr %dst, align 8, !dbg !374
  %12 = getelementptr i8, ptr %11, i64 0, !dbg !374
  br label %ifcont, !dbg !374

ifcont:                                           ; preds = %then, %entry
  %13 = load i64, ptr %i, align 4, !dbg !375
  %14 = load i64, ptr %len, align 4, !dbg !375
  %15 = icmp ult i64 %13, %14, !dbg !375
  br i1 %15, label %then1, label %whilecont, !dbg !375

then1:                                            ; preds = %then1, %ifcont
  %16 = load i64, ptr %i, align 4, !dbg !376
  %17 = load ptr, ptr %dst, align 8, !dbg !376
  %18 = getelementptr i8, ptr %17, i64 %16, !dbg !376
  %19 = load i8, ptr %18, align 1, !dbg !376
  call void @putchar(i8 %19), !dbg !376
  %20 = load i64, ptr %i, align 4, !dbg !377
  %21 = add i64 %20, 1, !dbg !377
  store i64 %21, ptr %i, align 4, !dbg !377
  %22 = load i64, ptr %i, align 4, !dbg !377
  %23 = add i64 %22, 1, !dbg !377
  %24 = load i64, ptr %i, align 4, !dbg !377
  %25 = load i64, ptr %len, align 4, !dbg !377
  %26 = icmp ult i64 %24, %25, !dbg !377
  br i1 %26, label %then1, label %whilecont, !dbg !377

whilecont:                                        ; preds = %then1, %ifcont
  ret void, !dbg !378
}

define void @string_append(ptr %str_param, ptr %append_param, ptr %mem_param) !dbg !379 {
entry:
  %str = alloca ptr, align 8
  store ptr %str_param, ptr %str, align 8
    #dbg_declare(ptr %str, !382, !DIExpression(), !383)
  %append = alloca ptr, align 8
  store ptr %append_param, ptr %append, align 8
    #dbg_declare(ptr %append, !384, !DIExpression(), !383)
  %mem = alloca ptr, align 8
  store ptr %mem_param, ptr %mem, align 8
    #dbg_declare(ptr %mem, !385, !DIExpression(), !383)
  %0 = load ptr, ptr %append, align 8, !dbg !386
  %1 = getelementptr inbounds nuw %string, ptr %0, i32 0, i32 2, !dbg !386
  %2 = load i64, ptr %1, align 4, !dbg !386
  %3 = icmp eq i64 %2, 0, !dbg !386
  br i1 %3, label %then, label %ifcont, !dbg !386

then:                                             ; preds = %entry
  ret void, !dbg !387

ifcont:                                           ; preds = %entry
  %4 = load ptr, ptr %str, align 8, !dbg !387
  %5 = getelementptr inbounds nuw %string, ptr %4, i32 0, i32 2, !dbg !387
  %6 = load ptr, ptr %append, align 8, !dbg !387
  %7 = getelementptr inbounds nuw %string, ptr %6, i32 0, i32 2, !dbg !387
  %8 = load i64, ptr %5, align 4, !dbg !387
  %9 = load i64, ptr %7, align 4, !dbg !387
  %10 = add i64 %8, %9, !dbg !387
  %total_len = alloca i64, align 8, !dbg !388
  store i64 %10, ptr %total_len, align 4, !dbg !388
    #dbg_declare(ptr %total_len, !389, !DIExpression(), !390)
  %11 = load ptr, ptr %str, align 8, !dbg !388
  %12 = getelementptr inbounds nuw %string, ptr %11, i32 0, i32 1, !dbg !388
  %13 = load ptr, ptr %12, align 8, !dbg !391
  %old_data = alloca ptr, align 8, !dbg !391
  store ptr %13, ptr %old_data, align 8, !dbg !391
    #dbg_declare(ptr %old_data, !392, !DIExpression(), !393)
  %14 = load ptr, ptr %old_data, align 8, !dbg !394
  %15 = load ptr, ptr @null, align 8, !dbg !394
  %16 = icmp eq ptr %14, %15, !dbg !394
  br i1 %16, label %then1, label %ifcont2, !dbg !394

then1:                                            ; preds = %ifcont
  %17 = load ptr, ptr %str, align 8, !dbg !395
  %18 = getelementptr inbounds nuw %string, ptr %17, i32 0, i32 0, !dbg !395
  %19 = getelementptr [32 x i8], ptr %18, i64 0, i64 0, !dbg !395
  store ptr %19, ptr %old_data, align 8, !dbg !395
  %20 = load ptr, ptr %old_data, align 8, !dbg !395
  %21 = getelementptr i8, ptr %20, i64 0, !dbg !395
  br label %ifcont2, !dbg !395

ifcont2:                                          ; preds = %then1, %ifcont
  %22 = load ptr, ptr %str, align 8, !dbg !395
  %23 = getelementptr inbounds nuw %string, ptr %22, i32 0, i32 2, !dbg !395
  %24 = load i64, ptr %23, align 4, !dbg !396
  %old_len = alloca i64, align 8, !dbg !396
  store i64 %24, ptr %old_len, align 4, !dbg !396
    #dbg_declare(ptr %old_len, !397, !DIExpression(), !398)
  %25 = load ptr, ptr %append, align 8, !dbg !396
  %26 = getelementptr inbounds nuw %string, ptr %25, i32 0, i32 1, !dbg !396
  %27 = load ptr, ptr %26, align 8, !dbg !399
  %append_data = alloca ptr, align 8, !dbg !399
  store ptr %27, ptr %append_data, align 8, !dbg !399
    #dbg_declare(ptr %append_data, !400, !DIExpression(), !401)
  %28 = load ptr, ptr %append_data, align 8, !dbg !402
  %29 = load ptr, ptr @null, align 8, !dbg !402
  %30 = icmp eq ptr %28, %29, !dbg !402
  br i1 %30, label %then3, label %ifcont4, !dbg !402

then3:                                            ; preds = %ifcont2
  %31 = load ptr, ptr %append, align 8, !dbg !403
  %32 = getelementptr inbounds nuw %string, ptr %31, i32 0, i32 0, !dbg !403
  %33 = getelementptr [32 x i8], ptr %32, i64 0, i64 0, !dbg !403
  store ptr %33, ptr %append_data, align 8, !dbg !403
  %34 = load ptr, ptr %append_data, align 8, !dbg !403
  %35 = getelementptr i8, ptr %34, i64 0, !dbg !403
  br label %ifcont4, !dbg !403

ifcont4:                                          ; preds = %then3, %ifcont2
  %36 = load ptr, ptr %str, align 8, !dbg !404
  %37 = getelementptr inbounds nuw %string, ptr %36, i32 0, i32 3, !dbg !404
  %38 = load i64, ptr %total_len, align 4, !dbg !404
  %39 = load i64, ptr %37, align 4, !dbg !404
  %40 = icmp ugt i64 %38, %39, !dbg !404
  br i1 %40, label %then5, label %ifcont6, !dbg !404

then5:                                            ; preds = %ifcont4
  %41 = load ptr, ptr %str, align 8, !dbg !405
  %42 = getelementptr inbounds nuw %string, ptr %41, i32 0, i32 1, !dbg !405
  %43 = load ptr, ptr %mem, align 8, !dbg !405
  %44 = load i64, ptr %total_len, align 4, !dbg !405
  %45 = call ptr @arena_push(ptr %43, i64 %44), !dbg !405
  store ptr %45, ptr %42, align 8, !dbg !405
  %46 = load ptr, ptr %str, align 8, !dbg !406
  %47 = getelementptr inbounds nuw %string, ptr %46, i32 0, i32 1, !dbg !406
  %48 = load ptr, ptr %47, align 8, !dbg !406
  %49 = load ptr, ptr %old_data, align 8, !dbg !406
  %50 = load i64, ptr %old_len, align 4, !dbg !406
  call void @strcpy(ptr %48, ptr %49, i64 %50), !dbg !406
  %51 = load ptr, ptr %str, align 8, !dbg !407
  %52 = getelementptr inbounds nuw %string, ptr %51, i32 0, i32 1, !dbg !407
  %53 = load ptr, ptr %52, align 8, !dbg !407
  store ptr %53, ptr %old_data, align 8, !dbg !407
  %54 = load ptr, ptr %str, align 8, !dbg !408
  %55 = getelementptr inbounds nuw %string, ptr %54, i32 0, i32 3, !dbg !408
  %56 = load i64, ptr %total_len, align 4, !dbg !408
  store i64 %56, ptr %55, align 4, !dbg !408
  br label %ifcont6, !dbg !408

ifcont6:                                          ; preds = %then5, %ifcont4
  %57 = load i64, ptr %old_len, align 4, !dbg !409
  %58 = load ptr, ptr %old_data, align 8, !dbg !409
  %59 = getelementptr i8, ptr %58, i64 %57, !dbg !409
  %60 = load ptr, ptr %append_data, align 8, !dbg !409
  %61 = load ptr, ptr %append, align 8, !dbg !409
  %62 = getelementptr inbounds nuw %string, ptr %61, i32 0, i32 2, !dbg !409
  %63 = load i64, ptr %62, align 4, !dbg !409
  call void @strcpy(ptr %59, ptr %60, i64 %63), !dbg !409
  %64 = load ptr, ptr %str, align 8, !dbg !410
  %65 = getelementptr inbounds nuw %string, ptr %64, i32 0, i32 2, !dbg !410
  %66 = load i64, ptr %total_len, align 4, !dbg !410
  store i64 %66, ptr %65, align 4, !dbg !410
  ret void, !dbg !411
}

define void @string_append_cstr(ptr %str_param, ptr %append_param, ptr %mem_param) !dbg !412 {
entry:
  %str = alloca ptr, align 8
  store ptr %str_param, ptr %str, align 8
    #dbg_declare(ptr %str, !415, !DIExpression(), !416)
  %append = alloca ptr, align 8
  store ptr %append_param, ptr %append, align 8
    #dbg_declare(ptr %append, !417, !DIExpression(), !416)
  %mem = alloca ptr, align 8
  store ptr %mem_param, ptr %mem, align 8
    #dbg_declare(ptr %mem, !418, !DIExpression(), !416)
  %fake_str = alloca %string, align 8, !dbg !419
  store %string undef, ptr %fake_str, align 8, !dbg !419
    #dbg_declare(ptr %fake_str, !420, !DIExpression(), !421)
  %0 = getelementptr inbounds nuw %string, ptr %fake_str, i32 0, i32 2, !dbg !422
  %1 = load ptr, ptr %append, align 8, !dbg !422
  %2 = call i64 @cstrlen(ptr %1), !dbg !422
  store i64 %2, ptr %0, align 4, !dbg !422
  %3 = getelementptr inbounds nuw %string, ptr %fake_str, i32 0, i32 1, !dbg !423
  %4 = load ptr, ptr %append, align 8, !dbg !423
  store ptr %4, ptr %3, align 8, !dbg !423
  %5 = load ptr, ptr %3, align 8, !dbg !423
  %6 = load ptr, ptr %str, align 8, !dbg !424
  %7 = load ptr, ptr %mem, align 8, !dbg !424
  call void @string_append(ptr %6, ptr %fake_str, ptr %7), !dbg !424
  ret void, !dbg !425
}

define void @string_clear(ptr %str_param) !dbg !426 {
entry:
  %str = alloca ptr, align 8
  store ptr %str_param, ptr %str, align 8
    #dbg_declare(ptr %str, !427, !DIExpression(), !428)
  %0 = load ptr, ptr %str, align 8, !dbg !429
  %1 = getelementptr inbounds nuw %string, ptr %0, i32 0, i32 2, !dbg !429
  store i64 0, ptr %1, align 4, !dbg !429
  ret void, !dbg !430
}

define %string @string_duplicate(ptr %str_param, ptr %mem_param) !dbg !431 {
entry:
  %str = alloca ptr, align 8
  store ptr %str_param, ptr %str, align 8
    #dbg_declare(ptr %str, !434, !DIExpression(), !435)
  %mem = alloca ptr, align 8
  store ptr %mem_param, ptr %mem, align 8
    #dbg_declare(ptr %mem, !436, !DIExpression(), !435)
  %ret = alloca %string, align 8, !dbg !437
    #dbg_declare(ptr %ret, !438, !DIExpression(), !439)
  %0 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 2, !dbg !440
  %1 = load ptr, ptr %str, align 8, !dbg !440
  %2 = getelementptr inbounds nuw %string, ptr %1, i32 0, i32 2, !dbg !440
  %3 = load i64, ptr %2, align 4, !dbg !440
  store i64 %3, ptr %0, align 4, !dbg !440
  %4 = load ptr, ptr %str, align 8, !dbg !441
  %5 = call i1 @string_is_small(ptr %4), !dbg !441
  br i1 %5, label %then, label %ifcont, !dbg !441

then:                                             ; preds = %entry
  %6 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 0, !dbg !442
  %7 = getelementptr [32 x i8], ptr %6, i64 0, i64 0, !dbg !442
  %8 = load ptr, ptr %str, align 8, !dbg !442
  %9 = getelementptr inbounds nuw %string, ptr %8, i32 0, i32 0, !dbg !442
  %10 = getelementptr [32 x i8], ptr %9, i64 0, i64 0, !dbg !442
  %11 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 2, !dbg !442
  %12 = load i64, ptr %11, align 4, !dbg !442
  call void @strcpy(ptr %7, ptr %10, i64 %12), !dbg !442
  %13 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 1, !dbg !443
  %14 = load ptr, ptr @null, align 8, !dbg !443
  store ptr %14, ptr %13, align 8, !dbg !443
  %15 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 3, !dbg !444
  store i64 32, ptr %15, align 4, !dbg !444
  %16 = load i64, ptr %15, align 4, !dbg !444
  %17 = udiv i64 %16, 1, !dbg !444
  %18 = load %string, ptr %ret, align 8, !dbg !445
  ret %string %18, !dbg !445

ifcont:                                           ; preds = %entry
  %19 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 2, !dbg !446
  %20 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 1, !dbg !447
  %21 = load ptr, ptr %mem, align 8, !dbg !447
  %22 = getelementptr inbounds nuw %string, ptr %ret, i32 0, i32 2, !dbg !447
  %23 = load i64, ptr %22, align 4, !dbg !447
  %24 = call ptr @arena_push(ptr %21, i64 %23), !dbg !447
  store ptr %24, ptr %20, align 8, !dbg !447
  %25 = load %string, ptr %ret, align 8, !dbg !448
  ret %string %25, !dbg !448
}

define ptr @string_at(ptr %str_param, i64 %idx_param) !dbg !449 {
entry:
  %str = alloca ptr, align 8
  store ptr %str_param, ptr %str, align 8
    #dbg_declare(ptr %str, !452, !DIExpression(), !453)
  %idx = alloca i64, align 8
  store i64 %idx_param, ptr %idx, align 4
    #dbg_declare(ptr %idx, !454, !DIExpression(), !453)
  %0 = load ptr, ptr %str, align 8, !dbg !455
  %1 = call i1 @string_is_small(ptr %0), !dbg !455
  br i1 %1, label %then, label %ifcont, !dbg !455

then:                                             ; preds = %entry
  %2 = load ptr, ptr %str, align 8, !dbg !456
  %3 = getelementptr inbounds nuw %string, ptr %2, i32 0, i32 0, !dbg !456
  %4 = load i64, ptr %idx, align 4, !dbg !456
  %5 = getelementptr [32 x i8], ptr %3, i64 0, i64 %4, !dbg !456
  ret ptr %5, !dbg !456

ifcont:                                           ; preds = %entry
  %6 = load ptr, ptr %str, align 8, !dbg !457
  %7 = getelementptr inbounds nuw %string, ptr %6, i32 0, i32 1, !dbg !457
  %8 = load i64, ptr %idx, align 4, !dbg !457
  %9 = load ptr, ptr %7, align 8, !dbg !457
  %10 = getelementptr i8, ptr %9, i64 %8, !dbg !457
  ret ptr %10, !dbg !457
}

define void @assert(i1 %expr_param, ptr %errmsg_param) !dbg !458 {
entry:
  %expr = alloca i1, align 1
  store i1 %expr_param, ptr %expr, align 1
    #dbg_declare(ptr %expr, !462, !DIExpression(), !463)
  %errmsg = alloca ptr, align 8
  store ptr %errmsg_param, ptr %errmsg, align 8
    #dbg_declare(ptr %errmsg, !464, !DIExpression(), !463)
  %my_srcloc = alloca %srcloc, align 8, !dbg !465
  store %srcloc { ptr @strlit.6, ptr @strlit.7, i64 3, i64 2 }, ptr %my_srcloc, align 8, !dbg !465
    #dbg_declare(ptr %my_srcloc, !466, !DIExpression(), !473)
  %0 = load i1, ptr %expr, align 1, !dbg !474
  %1 = xor i1 %0, true, !dbg !474
  br i1 %1, label %then, label %ifcont, !dbg !474

then:                                             ; preds = %entry
  call void @puts(ptr @strlit.8), !dbg !475
  %2 = getelementptr inbounds nuw %srcloc, ptr %my_srcloc, i32 0, i32 0, !dbg !476
  %3 = load ptr, ptr %2, align 8, !dbg !476
  call void @puts(ptr %3), !dbg !476
  call void @putchar(i8 32), !dbg !477
  %4 = getelementptr inbounds nuw %srcloc, ptr %my_srcloc, i32 0, i32 1, !dbg !478
  %5 = load ptr, ptr %4, align 8, !dbg !478
  call void @puts(ptr %5), !dbg !478
  call void @putchar(i8 40), !dbg !479
  %6 = getelementptr inbounds nuw %srcloc, ptr %my_srcloc, i32 0, i32 2, !dbg !480
  %7 = load i64, ptr %6, align 4, !dbg !480
  call void @putuint(i64 %7), !dbg !480
  call void @putchar(i8 58), !dbg !481
  %8 = getelementptr inbounds nuw %srcloc, ptr %my_srcloc, i32 0, i32 3, !dbg !482
  %9 = load i64, ptr %8, align 4, !dbg !482
  call void @putuint(i64 %9), !dbg !482
  call void @putchar(i8 41), !dbg !483
  call void @putchar(i8 58), !dbg !484
  call void @putchar(i8 32), !dbg !485
  %10 = load ptr, ptr %errmsg, align 8, !dbg !486
  call void @puts(ptr %10), !dbg !486
  call void @putchar(i8 10), !dbg !487
  call void @llvm.debugtrap(), !dbg !488
  br label %ifcont, !dbg !488

ifcont:                                           ; preds = %then, %entry
  ret void, !dbg !489
}

; Function Attrs: nounwind
declare void @llvm.debugtrap() #0

declare i64 @LoadLibraryA(ptr)

declare i32 @FreeLibrary(i64)

declare i64 @GetProcAddress(i64, ptr)

define i64 @load_vk_driver_fn(ptr %funcname_param, i64 %module_param) !dbg !490 {
entry:
  %funcname = alloca ptr, align 8
  store ptr %funcname_param, ptr %funcname, align 8
    #dbg_declare(ptr %funcname, !494, !DIExpression(), !495)
  %module = alloca i64, align 8
  store i64 %module_param, ptr %module, align 4
    #dbg_declare(ptr %module, !496, !DIExpression(), !495)
  %0 = load i64, ptr %module, align 4, !dbg !497
  %1 = load ptr, ptr %funcname, align 8, !dbg !497
  %2 = call i64 @GetProcAddress(i64 %0, ptr %1), !dbg !497
  %addr = alloca i64, align 8, !dbg !497
  store i64 %2, ptr %addr, align 4, !dbg !497
    #dbg_declare(ptr %addr, !498, !DIExpression(), !499)
  %3 = load i64, ptr %addr, align 4, !dbg !500
  %4 = load ptr, ptr @null, align 8, !dbg !500
  %5 = ptrtoint ptr %4 to i64, !dbg !500
  %6 = icmp eq i64 %3, %5, !dbg !500
  br i1 %6, label %then, label %ifcont, !dbg !500

then:                                             ; preds = %entry
  call void @puts(ptr @strlit.9), !dbg !501
  %7 = load ptr, ptr %funcname, align 8, !dbg !502
  call void @puts(ptr %7), !dbg !502
  call void @putchar(i8 10), !dbg !503
  call void @llvm.debugtrap(), !dbg !504
  br label %ifcont, !dbg !504

ifcont:                                           ; preds = %then, %entry
  %8 = load i64, ptr %addr, align 4, !dbg !505
  ret i64 %8, !dbg !505
}

define i64 @load_vk_fn(ptr %funcname_param, i64 %instance_param) !dbg !506 {
entry:
  %funcname = alloca ptr, align 8
  store ptr %funcname_param, ptr %funcname, align 8
    #dbg_declare(ptr %funcname, !507, !DIExpression(), !508)
  %instance = alloca i64, align 8
  store i64 %instance_param, ptr %instance, align 4
    #dbg_declare(ptr %instance, !509, !DIExpression(), !508)
  %0 = load ptr, ptr @vk, align 8, !dbg !510
  %1 = load i64, ptr %instance, align 4, !dbg !510
  %2 = load ptr, ptr %funcname, align 8, !dbg !510
  %3 = call i64 %0(i64 %1, ptr %2), !dbg !510
  %addr = alloca i64, align 8, !dbg !511
  store i64 %3, ptr %addr, align 4, !dbg !511
    #dbg_declare(ptr %addr, !512, !DIExpression(), !513)
  %4 = load i64, ptr %addr, align 4, !dbg !514
  %5 = load ptr, ptr @null, align 8, !dbg !514
  %6 = ptrtoint ptr %5 to i64, !dbg !514
  %7 = icmp eq i64 %4, %6, !dbg !514
  br i1 %7, label %then, label %ifcont, !dbg !514

then:                                             ; preds = %entry
  call void @puts(ptr @strlit.10), !dbg !515
  %8 = load ptr, ptr %funcname, align 8, !dbg !516
  call void @puts(ptr %8), !dbg !516
  call void @putchar(i8 10), !dbg !517
  call void @llvm.debugtrap(), !dbg !518
  br label %ifcont, !dbg !518

ifcont:                                           ; preds = %then, %entry
  %9 = load i64, ptr %addr, align 4, !dbg !519
  ret i64 %9, !dbg !519
}

define void @vulkan_init() !dbg !520 {
entry:
  %initialised_driver = alloca i1, align 1, !dbg !521
  store i1 false, ptr %initialised_driver, align 1, !dbg !521
    #dbg_declare(ptr %initialised_driver, !522, !DIExpression(), !523)
  %0 = load i1, ptr @vulkan_driver_initialised, align 1, !dbg !524
  %1 = xor i1 %0, true, !dbg !524
  br i1 %1, label %then, label %ifcont, !dbg !524

then:                                             ; preds = %entry
  %2 = call i64 @LoadLibraryA(ptr @strlit.12), !dbg !525
  store i64 %2, ptr @vulkan_driver, align 4, !dbg !525
  %3 = load i64, ptr @vulkan_driver, align 4, !dbg !526
  %4 = icmp eq i64 %3, 0, !dbg !526
  br i1 %4, label %then1, label %ifcont2, !dbg !526

ifcont:                                           ; preds = %ifcont2, %entry
  %5 = load i64, ptr @vulkan_driver, align 4, !dbg !527
  %6 = call i64 @load_vk_driver_fn(ptr @strlit.14, i64 %5), !dbg !527
  %7 = inttoptr i64 %6 to ptr, !dbg !527
  store ptr %7, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 1), align 8, !dbg !527
  %8 = load i64, ptr @vulkan_driver, align 4, !dbg !528
  %9 = call i64 @load_vk_driver_fn(ptr @strlit.15, i64 %8), !dbg !528
  %10 = inttoptr i64 %9 to ptr, !dbg !528
  store ptr %10, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 2), align 8, !dbg !528
  %11 = load i64, ptr @vulkan_driver, align 4, !dbg !529
  %12 = call i64 @load_vk_driver_fn(ptr @strlit.16, i64 %11), !dbg !529
  %13 = inttoptr i64 %12 to ptr, !dbg !529
  store ptr %13, ptr @vk, align 8, !dbg !529
  %14 = load ptr, ptr @donestr, align 8, !dbg !530
  call void @puts(ptr %14), !dbg !530
  ret void, !dbg !531

then1:                                            ; preds = %then
  call void @llvm.debugtrap(), !dbg !532
  br label %ifcont2, !dbg !532

ifcont2:                                          ; preds = %then1, %then
  call void @puts(ptr @strlit.13), !dbg !533
  store i1 true, ptr @vulkan_driver_initialised, align 1, !dbg !534
  store i1 true, ptr %initialised_driver, align 1, !dbg !535
  br label %ifcont, !dbg !535
}

define void @vulkan_load_functions(i64 %instance_param) !dbg !536 {
entry:
  %instance = alloca i64, align 8
  store i64 %instance_param, ptr %instance, align 4
    #dbg_declare(ptr %instance, !537, !DIExpression(), !538)
  %0 = load i64, ptr %instance, align 4, !dbg !539
  %1 = call i64 @load_vk_fn(ptr @strlit.17, i64 %0), !dbg !539
  %2 = inttoptr i64 %1 to ptr, !dbg !539
  store ptr %2, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 3), align 8, !dbg !539
  %3 = load i64, ptr %instance, align 4, !dbg !540
  %4 = call i64 @load_vk_fn(ptr @strlit.18, i64 %3), !dbg !540
  %5 = inttoptr i64 %4 to ptr, !dbg !540
  store ptr %5, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 4), align 8, !dbg !540
  %6 = load i64, ptr %instance, align 4, !dbg !541
  %7 = call i64 @load_vk_fn(ptr @strlit.19, i64 %6), !dbg !541
  %8 = inttoptr i64 %7 to ptr, !dbg !541
  store ptr %8, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 5), align 8, !dbg !541
  %9 = load i64, ptr %instance, align 4, !dbg !542
  %10 = call i64 @load_vk_fn(ptr @strlit.20, i64 %9), !dbg !542
  %11 = inttoptr i64 %10 to ptr, !dbg !542
  store ptr %11, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 6), align 8, !dbg !542
  %12 = load i64, ptr %instance, align 4, !dbg !543
  %13 = call i64 @load_vk_fn(ptr @strlit.21, i64 %12), !dbg !543
  %14 = inttoptr i64 %13 to ptr, !dbg !543
  store ptr %14, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 7), align 8, !dbg !543
  %15 = load i64, ptr %instance, align 4, !dbg !544
  %16 = call i64 @load_vk_fn(ptr @strlit.22, i64 %15), !dbg !544
  %17 = inttoptr i64 %16 to ptr, !dbg !544
  store ptr %17, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 8), align 8, !dbg !544
  %18 = load i64, ptr %instance, align 4, !dbg !545
  %19 = call i64 @load_vk_fn(ptr @strlit.23, i64 %18), !dbg !545
  %20 = inttoptr i64 %19 to ptr, !dbg !545
  store ptr %20, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 9), align 8, !dbg !545
  %21 = load i64, ptr %instance, align 4, !dbg !546
  %22 = call i64 @load_vk_fn(ptr @strlit.24, i64 %21), !dbg !546
  %23 = inttoptr i64 %22 to ptr, !dbg !546
  store ptr %23, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 10), align 8, !dbg !546
  %24 = load i64, ptr %instance, align 4, !dbg !547
  %25 = call i64 @load_vk_fn(ptr @strlit.25, i64 %24), !dbg !547
  %26 = inttoptr i64 %25 to ptr, !dbg !547
  store ptr %26, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 11), align 8, !dbg !547
  %27 = load i64, ptr %instance, align 4, !dbg !548
  %28 = call i64 @load_vk_fn(ptr @strlit.26, i64 %27), !dbg !548
  %29 = inttoptr i64 %28 to ptr, !dbg !548
  store ptr %29, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 12), align 8, !dbg !548
  %30 = load i64, ptr %instance, align 4, !dbg !549
  %31 = call i64 @load_vk_fn(ptr @strlit.27, i64 %30), !dbg !549
  %32 = inttoptr i64 %31 to ptr, !dbg !549
  store ptr %32, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 13), align 8, !dbg !549
  %33 = load i64, ptr %instance, align 4, !dbg !550
  %34 = call i64 @load_vk_fn(ptr @strlit.28, i64 %33), !dbg !550
  %35 = inttoptr i64 %34 to ptr, !dbg !550
  store ptr %35, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 14), align 8, !dbg !550
  %36 = load i64, ptr %instance, align 4, !dbg !551
  %37 = call i64 @load_vk_fn(ptr @strlit.29, i64 %36), !dbg !551
  %38 = inttoptr i64 %37 to ptr, !dbg !551
  store ptr %38, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 15), align 8, !dbg !551
  %39 = load i64, ptr %instance, align 4, !dbg !552
  %40 = call i64 @load_vk_fn(ptr @strlit.30, i64 %39), !dbg !552
  %41 = inttoptr i64 %40 to ptr, !dbg !552
  store ptr %41, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 16), align 8, !dbg !552
  %42 = load i64, ptr %instance, align 4, !dbg !553
  %43 = call i64 @load_vk_fn(ptr @strlit.31, i64 %42), !dbg !553
  %44 = inttoptr i64 %43 to ptr, !dbg !553
  store ptr %44, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 17), align 8, !dbg !553
  %45 = load i64, ptr %instance, align 4, !dbg !554
  %46 = call i64 @load_vk_fn(ptr @strlit.32, i64 %45), !dbg !554
  %47 = inttoptr i64 %46 to ptr, !dbg !554
  store ptr %47, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 18), align 8, !dbg !554
  %48 = load i64, ptr %instance, align 4, !dbg !555
  %49 = call i64 @load_vk_fn(ptr @strlit.33, i64 %48), !dbg !555
  %50 = inttoptr i64 %49 to ptr, !dbg !555
  store ptr %50, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 19), align 8, !dbg !555
  %51 = load i64, ptr %instance, align 4, !dbg !556
  %52 = call i64 @load_vk_fn(ptr @strlit.34, i64 %51), !dbg !556
  %53 = inttoptr i64 %52 to ptr, !dbg !556
  store ptr %53, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 20), align 8, !dbg !556
  %54 = load i64, ptr %instance, align 4, !dbg !557
  %55 = call i64 @load_vk_fn(ptr @strlit.35, i64 %54), !dbg !557
  %56 = inttoptr i64 %55 to ptr, !dbg !557
  store ptr %56, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 21), align 8, !dbg !557
  %57 = load i64, ptr %instance, align 4, !dbg !558
  %58 = call i64 @load_vk_fn(ptr @strlit.36, i64 %57), !dbg !558
  %59 = inttoptr i64 %58 to ptr, !dbg !558
  store ptr %59, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 22), align 8, !dbg !558
  %60 = load i64, ptr %instance, align 4, !dbg !559
  %61 = call i64 @load_vk_fn(ptr @strlit.37, i64 %60), !dbg !559
  %62 = inttoptr i64 %61 to ptr, !dbg !559
  store ptr %62, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 23), align 8, !dbg !559
  %63 = load i64, ptr %instance, align 4, !dbg !560
  %64 = call i64 @load_vk_fn(ptr @strlit.38, i64 %63), !dbg !560
  %65 = inttoptr i64 %64 to ptr, !dbg !560
  store ptr %65, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 24), align 8, !dbg !560
  %66 = load i64, ptr %instance, align 4, !dbg !561
  %67 = call i64 @load_vk_fn(ptr @strlit.39, i64 %66), !dbg !561
  %68 = inttoptr i64 %67 to ptr, !dbg !561
  store ptr %68, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 25), align 8, !dbg !561
  %69 = load i64, ptr %instance, align 4, !dbg !562
  %70 = call i64 @load_vk_fn(ptr @strlit.40, i64 %69), !dbg !562
  %71 = inttoptr i64 %70 to ptr, !dbg !562
  store ptr %71, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 26), align 8, !dbg !562
  %72 = load i64, ptr %instance, align 4, !dbg !563
  %73 = call i64 @load_vk_fn(ptr @strlit.41, i64 %72), !dbg !563
  %74 = inttoptr i64 %73 to ptr, !dbg !563
  store ptr %74, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 27), align 8, !dbg !563
  %75 = load i64, ptr %instance, align 4, !dbg !564
  %76 = call i64 @load_vk_fn(ptr @strlit.42, i64 %75), !dbg !564
  %77 = inttoptr i64 %76 to ptr, !dbg !564
  store ptr %77, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 28), align 8, !dbg !564
  %78 = load i64, ptr %instance, align 4, !dbg !565
  %79 = call i64 @load_vk_fn(ptr @strlit.43, i64 %78), !dbg !565
  %80 = inttoptr i64 %79 to ptr, !dbg !565
  store ptr %80, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 29), align 8, !dbg !565
  %81 = load i64, ptr %instance, align 4, !dbg !566
  %82 = call i64 @load_vk_fn(ptr @strlit.44, i64 %81), !dbg !566
  %83 = inttoptr i64 %82 to ptr, !dbg !566
  store ptr %83, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 30), align 8, !dbg !566
  %84 = load i64, ptr %instance, align 4, !dbg !567
  %85 = call i64 @load_vk_fn(ptr @strlit.45, i64 %84), !dbg !567
  %86 = inttoptr i64 %85 to ptr, !dbg !567
  store ptr %86, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 31), align 8, !dbg !567
  %87 = load i64, ptr %instance, align 4, !dbg !568
  %88 = call i64 @load_vk_fn(ptr @strlit.46, i64 %87), !dbg !568
  %89 = inttoptr i64 %88 to ptr, !dbg !568
  store ptr %89, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 32), align 8, !dbg !568
  %90 = load i64, ptr %instance, align 4, !dbg !569
  %91 = call i64 @load_vk_fn(ptr @strlit.47, i64 %90), !dbg !569
  %92 = inttoptr i64 %91 to ptr, !dbg !569
  store ptr %92, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 33), align 8, !dbg !569
  %93 = load i64, ptr %instance, align 4, !dbg !570
  %94 = call i64 @load_vk_fn(ptr @strlit.48, i64 %93), !dbg !570
  %95 = inttoptr i64 %94 to ptr, !dbg !570
  store ptr %95, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 34), align 8, !dbg !570
  %96 = load i64, ptr %instance, align 4, !dbg !571
  %97 = call i64 @load_vk_fn(ptr @strlit.49, i64 %96), !dbg !571
  %98 = inttoptr i64 %97 to ptr, !dbg !571
  store ptr %98, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 35), align 8, !dbg !571
  %99 = load i64, ptr %instance, align 4, !dbg !572
  %100 = call i64 @load_vk_fn(ptr @strlit.50, i64 %99), !dbg !572
  %101 = inttoptr i64 %100 to ptr, !dbg !572
  store ptr %101, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 36), align 8, !dbg !572
  %102 = load i64, ptr %instance, align 4, !dbg !573
  %103 = call i64 @load_vk_fn(ptr @strlit.51, i64 %102), !dbg !573
  %104 = inttoptr i64 %103 to ptr, !dbg !573
  store ptr %104, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 37), align 8, !dbg !573
  %105 = load i64, ptr %instance, align 4, !dbg !574
  %106 = call i64 @load_vk_fn(ptr @strlit.52, i64 %105), !dbg !574
  %107 = inttoptr i64 %106 to ptr, !dbg !574
  store ptr %107, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 38), align 8, !dbg !574
  %108 = load i64, ptr %instance, align 4, !dbg !575
  %109 = call i64 @load_vk_fn(ptr @strlit.53, i64 %108), !dbg !575
  %110 = inttoptr i64 %109 to ptr, !dbg !575
  store ptr %110, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 39), align 8, !dbg !575
  %111 = load i64, ptr %instance, align 4, !dbg !576
  %112 = call i64 @load_vk_fn(ptr @strlit.54, i64 %111), !dbg !576
  %113 = inttoptr i64 %112 to ptr, !dbg !576
  store ptr %113, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 40), align 8, !dbg !576
  %114 = load i64, ptr %instance, align 4, !dbg !577
  %115 = call i64 @load_vk_fn(ptr @strlit.55, i64 %114), !dbg !577
  %116 = inttoptr i64 %115 to ptr, !dbg !577
  store ptr %116, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 41), align 8, !dbg !577
  %117 = load i64, ptr %instance, align 4, !dbg !578
  %118 = call i64 @load_vk_fn(ptr @strlit.56, i64 %117), !dbg !578
  %119 = inttoptr i64 %118 to ptr, !dbg !578
  store ptr %119, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 42), align 8, !dbg !578
  %120 = load i64, ptr %instance, align 4, !dbg !579
  %121 = call i64 @load_vk_fn(ptr @strlit.57, i64 %120), !dbg !579
  %122 = inttoptr i64 %121 to ptr, !dbg !579
  store ptr %122, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 43), align 8, !dbg !579
  %123 = load i64, ptr %instance, align 4, !dbg !580
  %124 = call i64 @load_vk_fn(ptr @strlit.58, i64 %123), !dbg !580
  %125 = inttoptr i64 %124 to ptr, !dbg !580
  store ptr %125, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 44), align 8, !dbg !580
  %126 = load i64, ptr %instance, align 4, !dbg !581
  %127 = call i64 @load_vk_fn(ptr @strlit.59, i64 %126), !dbg !581
  %128 = inttoptr i64 %127 to ptr, !dbg !581
  store ptr %128, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 45), align 8, !dbg !581
  %129 = load i64, ptr %instance, align 4, !dbg !582
  %130 = call i64 @load_vk_fn(ptr @strlit.60, i64 %129), !dbg !582
  %131 = inttoptr i64 %130 to ptr, !dbg !582
  store ptr %131, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 46), align 8, !dbg !582
  %132 = load i64, ptr %instance, align 4, !dbg !583
  %133 = call i64 @load_vk_fn(ptr @strlit.61, i64 %132), !dbg !583
  %134 = inttoptr i64 %133 to ptr, !dbg !583
  store ptr %134, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 47), align 8, !dbg !583
  %135 = load i64, ptr %instance, align 4, !dbg !584
  %136 = call i64 @load_vk_fn(ptr @strlit.62, i64 %135), !dbg !584
  %137 = inttoptr i64 %136 to ptr, !dbg !584
  store ptr %137, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 48), align 8, !dbg !584
  %138 = load i64, ptr %instance, align 4, !dbg !585
  %139 = call i64 @load_vk_fn(ptr @strlit.63, i64 %138), !dbg !585
  %140 = inttoptr i64 %139 to ptr, !dbg !585
  store ptr %140, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 49), align 8, !dbg !585
  %141 = load i64, ptr %instance, align 4, !dbg !586
  %142 = call i64 @load_vk_fn(ptr @strlit.64, i64 %141), !dbg !586
  %143 = inttoptr i64 %142 to ptr, !dbg !586
  store ptr %143, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 50), align 8, !dbg !586
  %144 = load i64, ptr %instance, align 4, !dbg !587
  %145 = call i64 @load_vk_fn(ptr @strlit.65, i64 %144), !dbg !587
  %146 = inttoptr i64 %145 to ptr, !dbg !587
  store ptr %146, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 51), align 8, !dbg !587
  %147 = load i64, ptr %instance, align 4, !dbg !588
  %148 = call i64 @load_vk_fn(ptr @strlit.66, i64 %147), !dbg !588
  %149 = inttoptr i64 %148 to ptr, !dbg !588
  store ptr %149, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 52), align 8, !dbg !588
  %150 = load i64, ptr %instance, align 4, !dbg !589
  %151 = call i64 @load_vk_fn(ptr @strlit.67, i64 %150), !dbg !589
  %152 = inttoptr i64 %151 to ptr, !dbg !589
  store ptr %152, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 53), align 8, !dbg !589
  %153 = load i64, ptr %instance, align 4, !dbg !590
  %154 = call i64 @load_vk_fn(ptr @strlit.68, i64 %153), !dbg !590
  %155 = inttoptr i64 %154 to ptr, !dbg !590
  store ptr %155, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 54), align 8, !dbg !590
  %156 = load i64, ptr %instance, align 4, !dbg !591
  %157 = call i64 @load_vk_fn(ptr @strlit.69, i64 %156), !dbg !591
  %158 = inttoptr i64 %157 to ptr, !dbg !591
  store ptr %158, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 55), align 8, !dbg !591
  %159 = load i64, ptr %instance, align 4, !dbg !592
  %160 = call i64 @load_vk_fn(ptr @strlit.70, i64 %159), !dbg !592
  %161 = inttoptr i64 %160 to ptr, !dbg !592
  store ptr %161, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 56), align 8, !dbg !592
  %162 = load i64, ptr %instance, align 4, !dbg !593
  %163 = call i64 @load_vk_fn(ptr @strlit.71, i64 %162), !dbg !593
  %164 = inttoptr i64 %163 to ptr, !dbg !593
  store ptr %164, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 57), align 8, !dbg !593
  %165 = load i64, ptr %instance, align 4, !dbg !594
  %166 = call i64 @load_vk_fn(ptr @strlit.72, i64 %165), !dbg !594
  %167 = inttoptr i64 %166 to ptr, !dbg !594
  store ptr %167, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 58), align 8, !dbg !594
  %168 = load i64, ptr %instance, align 4, !dbg !595
  %169 = call i64 @load_vk_fn(ptr @strlit.73, i64 %168), !dbg !595
  %170 = inttoptr i64 %169 to ptr, !dbg !595
  store ptr %170, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 59), align 8, !dbg !595
  %171 = load i64, ptr %instance, align 4, !dbg !596
  %172 = call i64 @load_vk_fn(ptr @strlit.74, i64 %171), !dbg !596
  %173 = inttoptr i64 %172 to ptr, !dbg !596
  store ptr %173, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 60), align 8, !dbg !596
  %174 = load i64, ptr %instance, align 4, !dbg !597
  %175 = call i64 @load_vk_fn(ptr @strlit.75, i64 %174), !dbg !597
  %176 = inttoptr i64 %175 to ptr, !dbg !597
  store ptr %176, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 61), align 8, !dbg !597
  %177 = load i64, ptr %instance, align 4, !dbg !598
  %178 = call i64 @load_vk_fn(ptr @strlit.76, i64 %177), !dbg !598
  %179 = inttoptr i64 %178 to ptr, !dbg !598
  store ptr %179, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 62), align 8, !dbg !598
  %180 = load i64, ptr %instance, align 4, !dbg !599
  %181 = call i64 @load_vk_fn(ptr @strlit.77, i64 %180), !dbg !599
  %182 = inttoptr i64 %181 to ptr, !dbg !599
  store ptr %182, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 63), align 8, !dbg !599
  %183 = load i64, ptr %instance, align 4, !dbg !600
  %184 = call i64 @load_vk_fn(ptr @strlit.78, i64 %183), !dbg !600
  %185 = inttoptr i64 %184 to ptr, !dbg !600
  store ptr %185, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 64), align 8, !dbg !600
  %186 = load i64, ptr %instance, align 4, !dbg !601
  %187 = call i64 @load_vk_fn(ptr @strlit.79, i64 %186), !dbg !601
  %188 = inttoptr i64 %187 to ptr, !dbg !601
  store ptr %188, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 65), align 8, !dbg !601
  %189 = load i64, ptr %instance, align 4, !dbg !602
  %190 = call i64 @load_vk_fn(ptr @strlit.80, i64 %189), !dbg !602
  %191 = inttoptr i64 %190 to ptr, !dbg !602
  store ptr %191, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 66), align 8, !dbg !602
  %192 = load i64, ptr %instance, align 4, !dbg !603
  %193 = call i64 @load_vk_fn(ptr @strlit.81, i64 %192), !dbg !603
  %194 = inttoptr i64 %193 to ptr, !dbg !603
  store ptr %194, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 67), align 8, !dbg !603
  %195 = load i64, ptr %instance, align 4, !dbg !604
  %196 = call i64 @load_vk_fn(ptr @strlit.82, i64 %195), !dbg !604
  %197 = inttoptr i64 %196 to ptr, !dbg !604
  store ptr %197, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 68), align 8, !dbg !604
  %198 = load i64, ptr %instance, align 4, !dbg !605
  %199 = call i64 @load_vk_fn(ptr @strlit.83, i64 %198), !dbg !605
  %200 = inttoptr i64 %199 to ptr, !dbg !605
  store ptr %200, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 69), align 8, !dbg !605
  %201 = load i64, ptr %instance, align 4, !dbg !606
  %202 = call i64 @load_vk_fn(ptr @strlit.84, i64 %201), !dbg !606
  %203 = inttoptr i64 %202 to ptr, !dbg !606
  store ptr %203, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 70), align 8, !dbg !606
  %204 = load i64, ptr %instance, align 4, !dbg !607
  %205 = call i64 @load_vk_fn(ptr @strlit.85, i64 %204), !dbg !607
  %206 = inttoptr i64 %205 to ptr, !dbg !607
  store ptr %206, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 71), align 8, !dbg !607
  %207 = load i64, ptr %instance, align 4, !dbg !608
  %208 = call i64 @load_vk_fn(ptr @strlit.86, i64 %207), !dbg !608
  %209 = inttoptr i64 %208 to ptr, !dbg !608
  store ptr %209, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 72), align 8, !dbg !608
  %210 = load i64, ptr %instance, align 4, !dbg !609
  %211 = call i64 @load_vk_fn(ptr @strlit.87, i64 %210), !dbg !609
  %212 = inttoptr i64 %211 to ptr, !dbg !609
  store ptr %212, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 73), align 8, !dbg !609
  %213 = load i64, ptr %instance, align 4, !dbg !610
  %214 = call i64 @load_vk_fn(ptr @strlit.88, i64 %213), !dbg !610
  %215 = inttoptr i64 %214 to ptr, !dbg !610
  store ptr %215, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 74), align 8, !dbg !610
  %216 = load i64, ptr %instance, align 4, !dbg !611
  %217 = call i64 @load_vk_fn(ptr @strlit.89, i64 %216), !dbg !611
  %218 = inttoptr i64 %217 to ptr, !dbg !611
  store ptr %218, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 75), align 8, !dbg !611
  %219 = load i64, ptr %instance, align 4, !dbg !612
  %220 = call i64 @load_vk_fn(ptr @strlit.90, i64 %219), !dbg !612
  %221 = inttoptr i64 %220 to ptr, !dbg !612
  store ptr %221, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 76), align 8, !dbg !612
  ret void, !dbg !613
}

define void @vulkan_term() !dbg !614 {
entry:
  %0 = load i1, ptr @vulkan_driver_initialised, align 1, !dbg !615
  br i1 %0, label %then, label %ifcont, !dbg !615

then:                                             ; preds = %entry
  %1 = load i64, ptr @vulkan_driver, align 4, !dbg !616
  %2 = call i32 @FreeLibrary(i64 %1), !dbg !616
  store i1 false, ptr @vulkan_driver_initialised, align 1, !dbg !617
  br label %ifcont, !dbg !617

ifcont:                                           ; preds = %then, %entry
  ret void, !dbg !618
}

define i32 @VK_MAKE_API_VERSION(i32 %variant_param, i32 %major_param, i32 %minor_param, i32 %patch_param) !dbg !619 {
entry:
  %variant = alloca i32, align 4
  store i32 %variant_param, ptr %variant, align 4
    #dbg_declare(ptr %variant, !622, !DIExpression(), !623)
  %major = alloca i32, align 4
  store i32 %major_param, ptr %major, align 4
    #dbg_declare(ptr %major, !624, !DIExpression(), !623)
  %minor = alloca i32, align 4
  store i32 %minor_param, ptr %minor, align 4
    #dbg_declare(ptr %minor, !625, !DIExpression(), !623)
  %patch = alloca i32, align 4
  store i32 %patch_param, ptr %patch, align 4
    #dbg_declare(ptr %patch, !626, !DIExpression(), !623)
  %0 = load i32, ptr %variant, align 4, !dbg !627
  %1 = sext i32 %0 to i64, !dbg !627
  %2 = mul i64 %1, 536870912, !dbg !627
  %3 = load i32, ptr %major, align 4, !dbg !627
  %4 = sext i32 %3 to i64, !dbg !627
  %5 = mul i64 %4, 4194304, !dbg !627
  %6 = or i64 %2, %5, !dbg !627
  %7 = load i32, ptr %minor, align 4, !dbg !627
  %8 = sext i32 %7 to i64, !dbg !627
  %9 = mul i64 %8, 4096, !dbg !627
  %10 = or i64 %6, %9, !dbg !627
  %11 = load i32, ptr %patch, align 4, !dbg !627
  %12 = sext i32 %11 to i64, !dbg !627
  %13 = or i64 %10, %12, !dbg !627
  %14 = trunc i64 %13 to i32, !dbg !627
  ret i32 %14, !dbg !627
}

define void @vk_check(i32 %result_param) !dbg !628 {
entry:
  %result = alloca i32, align 4
  store i32 %result_param, ptr %result, align 4
    #dbg_declare(ptr %result, !632, !DIExpression(), !633)
  %0 = load i32, ptr %result, align 4, !dbg !634
  %1 = sext i32 %0 to i64, !dbg !634
  %res = alloca i64, align 8, !dbg !635
  store i64 %1, ptr %res, align 4, !dbg !635
    #dbg_declare(ptr %res, !636, !DIExpression(), !637)
  %2 = load i32, ptr %result, align 4, !dbg !638
  %3 = icmp ne i32 %2, 0, !dbg !638
  br i1 %3, label %then, label %ifcont, !dbg !638

then:                                             ; preds = %entry
  call void @puts(ptr @strlit.91), !dbg !639
  %4 = load i32, ptr %result, align 4, !dbg !640
  %5 = sext i32 %4 to i64, !dbg !640
  call void @putsint(i64 %5), !dbg !640
  call void @puts(ptr @strlit.92), !dbg !641
  %6 = load i64, ptr %res, align 4, !dbg !642
  %_enumname_result = alloca ptr, align 8, !dbg !642
  store ptr @strlit.93, ptr %_enumname_result, align 8, !dbg !642
    #dbg_declare(ptr %_enumname_result, !643, !DIExpression(), !644)
  %7 = icmp eq i64 %6, 1000268000, !dbg !642
  br i1 %7, label %__enum_name_VK_THREAD_IDLE_KHR, label %"__enumname cont", !dbg !642

ifcont:                                           ; preds = %"__enumname cont48", %entry
  ret void, !dbg !634

__enum_name_VK_THREAD_IDLE_KHR:                   ; preds = %then
  store ptr @strlit.94, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont", !dbg !642

"__enumname cont":                                ; preds = %__enum_name_VK_THREAD_IDLE_KHR, %then
  %8 = icmp eq i64 %6, 2, !dbg !642
  br i1 %8, label %__enum_name_VK_TIMEOUT, label %"__enumname cont1", !dbg !642

__enum_name_VK_TIMEOUT:                           ; preds = %"__enumname cont"
  store ptr @strlit.95, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont1", !dbg !642

"__enumname cont1":                               ; preds = %__enum_name_VK_TIMEOUT, %"__enumname cont"
  %9 = icmp eq i64 %6, 0, !dbg !642
  br i1 %9, label %__enum_name_VK_SUCCESS, label %"__enumname cont2", !dbg !642

__enum_name_VK_SUCCESS:                           ; preds = %"__enumname cont1"
  store ptr @strlit.96, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont2", !dbg !642

"__enumname cont2":                               ; preds = %__enum_name_VK_SUCCESS, %"__enumname cont1"
  %10 = icmp eq i64 %6, -1000023002, !dbg !642
  br i1 %10, label %__enum_name_VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR, label %"__enumname cont3", !dbg !642

__enum_name_VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR: ; preds = %"__enumname cont2"
  store ptr @strlit.97, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont3", !dbg !642

"__enumname cont3":                               ; preds = %__enum_name_VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR, %"__enumname cont2"
  %11 = icmp eq i64 %6, -9, !dbg !642
  br i1 %11, label %__enum_name_VK_ERROR_INCOMPATIBLE_DRIVER, label %"__enumname cont4", !dbg !642

__enum_name_VK_ERROR_INCOMPATIBLE_DRIVER:         ; preds = %"__enumname cont3"
  store ptr @strlit.98, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont4", !dbg !642

"__enumname cont4":                               ; preds = %__enum_name_VK_ERROR_INCOMPATIBLE_DRIVER, %"__enumname cont3"
  %12 = icmp eq i64 %6, 1, !dbg !642
  br i1 %12, label %__enum_name_VK_NOT_READY, label %"__enumname cont5", !dbg !642

__enum_name_VK_NOT_READY:                         ; preds = %"__enumname cont4"
  store ptr @strlit.99, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont5", !dbg !642

"__enumname cont5":                               ; preds = %__enum_name_VK_NOT_READY, %"__enumname cont4"
  %13 = icmp eq i64 %6, 3, !dbg !642
  br i1 %13, label %__enum_name_VK_EVENT_SET, label %"__enumname cont6", !dbg !642

__enum_name_VK_EVENT_SET:                         ; preds = %"__enumname cont5"
  store ptr @strlit.100, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont6", !dbg !642

"__enumname cont6":                               ; preds = %__enum_name_VK_EVENT_SET, %"__enumname cont5"
  %14 = icmp eq i64 %6, 4, !dbg !642
  br i1 %14, label %__enum_name_VK_EVENT_RESET, label %"__enumname cont7", !dbg !642

__enum_name_VK_EVENT_RESET:                       ; preds = %"__enumname cont6"
  store ptr @strlit.101, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont7", !dbg !642

"__enumname cont7":                               ; preds = %__enum_name_VK_EVENT_RESET, %"__enumname cont6"
  %15 = icmp eq i64 %6, -2, !dbg !642
  br i1 %15, label %__enum_name_VK_ERROR_OUT_OF_DEVICE_MEMORY, label %"__enumname cont8", !dbg !642

__enum_name_VK_ERROR_OUT_OF_DEVICE_MEMORY:        ; preds = %"__enumname cont7"
  store ptr @strlit.102, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont8", !dbg !642

"__enumname cont8":                               ; preds = %__enum_name_VK_ERROR_OUT_OF_DEVICE_MEMORY, %"__enumname cont7"
  %16 = icmp eq i64 %6, 5, !dbg !642
  br i1 %16, label %__enum_name_VK_INCOMPLETE, label %"__enumname cont9", !dbg !642

__enum_name_VK_INCOMPLETE:                        ; preds = %"__enumname cont8"
  store ptr @strlit.103, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont9", !dbg !642

"__enumname cont9":                               ; preds = %__enum_name_VK_INCOMPLETE, %"__enumname cont8"
  %17 = icmp eq i64 %6, -1, !dbg !642
  br i1 %17, label %__enum_name_VK_ERROR_OUT_OF_HOST_MEMORY, label %"__enumname cont10", !dbg !642

__enum_name_VK_ERROR_OUT_OF_HOST_MEMORY:          ; preds = %"__enumname cont9"
  store ptr @strlit.104, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont10", !dbg !642

"__enumname cont10":                              ; preds = %__enum_name_VK_ERROR_OUT_OF_HOST_MEMORY, %"__enumname cont9"
  %18 = icmp eq i64 %6, 1000483000, !dbg !642
  br i1 %18, label %__enum_name_VK_PIPELINE_BINARY_MISSING_KHR, label %"__enumname cont11", !dbg !642

__enum_name_VK_PIPELINE_BINARY_MISSING_KHR:       ; preds = %"__enumname cont10"
  store ptr @strlit.105, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont11", !dbg !642

"__enumname cont11":                              ; preds = %__enum_name_VK_PIPELINE_BINARY_MISSING_KHR, %"__enumname cont10"
  %19 = icmp eq i64 %6, -3, !dbg !642
  br i1 %19, label %__enum_name_VK_ERROR_INITIALIZATION_FAILED, label %"__enumname cont12", !dbg !642

__enum_name_VK_ERROR_INITIALIZATION_FAILED:       ; preds = %"__enumname cont11"
  store ptr @strlit.106, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont12", !dbg !642

"__enumname cont12":                              ; preds = %__enum_name_VK_ERROR_INITIALIZATION_FAILED, %"__enumname cont11"
  %20 = icmp eq i64 %6, -4, !dbg !642
  br i1 %20, label %__enum_name_VK_ERROR_DEVICE_LOST, label %"__enumname cont13", !dbg !642

__enum_name_VK_ERROR_DEVICE_LOST:                 ; preds = %"__enumname cont12"
  store ptr @strlit.107, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont13", !dbg !642

"__enumname cont13":                              ; preds = %__enum_name_VK_ERROR_DEVICE_LOST, %"__enumname cont12"
  %21 = icmp eq i64 %6, -1000299000, !dbg !642
  br i1 %21, label %__enum_name_VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR, label %"__enumname cont14", !dbg !642

__enum_name_VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR: ; preds = %"__enumname cont13"
  store ptr @strlit.108, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont14", !dbg !642

"__enumname cont14":                              ; preds = %__enum_name_VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR, %"__enumname cont13"
  %22 = icmp eq i64 %6, -5, !dbg !642
  br i1 %22, label %__enum_name_VK_ERROR_MEMORY_MAP_FAILED, label %"__enumname cont15", !dbg !642

__enum_name_VK_ERROR_MEMORY_MAP_FAILED:           ; preds = %"__enumname cont14"
  store ptr @strlit.109, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont15", !dbg !642

"__enumname cont15":                              ; preds = %__enum_name_VK_ERROR_MEMORY_MAP_FAILED, %"__enumname cont14"
  %23 = icmp eq i64 %6, -6, !dbg !642
  br i1 %23, label %__enum_name_VK_ERROR_LAYER_NOT_PRESENT, label %"__enumname cont16", !dbg !642

__enum_name_VK_ERROR_LAYER_NOT_PRESENT:           ; preds = %"__enumname cont15"
  store ptr @strlit.110, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont16", !dbg !642

"__enumname cont16":                              ; preds = %__enum_name_VK_ERROR_LAYER_NOT_PRESENT, %"__enumname cont15"
  %24 = icmp eq i64 %6, -7, !dbg !642
  br i1 %24, label %__enum_name_VK_ERROR_EXTENSION_NOT_PRESENT, label %"__enumname cont17", !dbg !642

__enum_name_VK_ERROR_EXTENSION_NOT_PRESENT:       ; preds = %"__enumname cont16"
  store ptr @strlit.111, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont17", !dbg !642

"__enumname cont17":                              ; preds = %__enum_name_VK_ERROR_EXTENSION_NOT_PRESENT, %"__enumname cont16"
  %25 = icmp eq i64 %6, -8, !dbg !642
  br i1 %25, label %__enum_name_VK_ERROR_FEATURE_NOT_PRESENT, label %"__enumname cont18", !dbg !642

__enum_name_VK_ERROR_FEATURE_NOT_PRESENT:         ; preds = %"__enumname cont17"
  store ptr @strlit.112, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont18", !dbg !642

"__enumname cont18":                              ; preds = %__enum_name_VK_ERROR_FEATURE_NOT_PRESENT, %"__enumname cont17"
  %26 = icmp eq i64 %6, -1000023004, !dbg !642
  br i1 %26, label %__enum_name_VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR, label %"__enumname cont19", !dbg !642

__enum_name_VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR: ; preds = %"__enumname cont18"
  store ptr @strlit.113, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont19", !dbg !642

"__enumname cont19":                              ; preds = %__enum_name_VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR, %"__enumname cont18"
  %27 = icmp eq i64 %6, -1000069000, !dbg !642
  br i1 %27, label %__enum_name_VK_ERROR_OUT_OF_POOL_MEMORY, label %"__enumname cont20", !dbg !642

__enum_name_VK_ERROR_OUT_OF_POOL_MEMORY:          ; preds = %"__enumname cont19"
  store ptr @strlit.114, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont20", !dbg !642

"__enumname cont20":                              ; preds = %__enum_name_VK_ERROR_OUT_OF_POOL_MEMORY, %"__enumname cont19"
  %28 = icmp eq i64 %6, -10, !dbg !642
  br i1 %28, label %__enum_name_VK_ERROR_TOO_MANY_OBJECTS, label %"__enumname cont21", !dbg !642

__enum_name_VK_ERROR_TOO_MANY_OBJECTS:            ; preds = %"__enumname cont20"
  store ptr @strlit.115, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont21", !dbg !642

"__enumname cont21":                              ; preds = %__enum_name_VK_ERROR_TOO_MANY_OBJECTS, %"__enumname cont20"
  %29 = icmp eq i64 %6, -11, !dbg !642
  br i1 %29, label %__enum_name_VK_ERROR_FORMAT_NOT_SUPPORTED, label %"__enumname cont22", !dbg !642

__enum_name_VK_ERROR_FORMAT_NOT_SUPPORTED:        ; preds = %"__enumname cont21"
  store ptr @strlit.116, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont22", !dbg !642

"__enumname cont22":                              ; preds = %__enum_name_VK_ERROR_FORMAT_NOT_SUPPORTED, %"__enumname cont21"
  %30 = icmp eq i64 %6, -12, !dbg !642
  br i1 %30, label %__enum_name_VK_ERROR_FRAGMENTED_POOL, label %"__enumname cont23", !dbg !642

__enum_name_VK_ERROR_FRAGMENTED_POOL:             ; preds = %"__enumname cont22"
  store ptr @strlit.117, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont23", !dbg !642

"__enumname cont23":                              ; preds = %__enum_name_VK_ERROR_FRAGMENTED_POOL, %"__enumname cont22"
  %31 = icmp eq i64 %6, 1000482000, !dbg !642
  br i1 %31, label %__enum_name_VK_INCOMPATIBLE_SHADER_BINARY_EXT, label %"__enumname cont24", !dbg !642

__enum_name_VK_INCOMPATIBLE_SHADER_BINARY_EXT:    ; preds = %"__enumname cont23"
  store ptr @strlit.118, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont24", !dbg !642

"__enumname cont24":                              ; preds = %__enum_name_VK_INCOMPATIBLE_SHADER_BINARY_EXT, %"__enumname cont23"
  %32 = icmp eq i64 %6, -1000012000, !dbg !642
  br i1 %32, label %__enum_name_VK_ERROR_INVALID_SHADER_NV, label %"__enumname cont25", !dbg !642

__enum_name_VK_ERROR_INVALID_SHADER_NV:           ; preds = %"__enumname cont24"
  store ptr @strlit.119, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont25", !dbg !642

"__enumname cont25":                              ; preds = %__enum_name_VK_ERROR_INVALID_SHADER_NV, %"__enumname cont24"
  %33 = icmp eq i64 %6, -13, !dbg !642
  br i1 %33, label %__enum_name_VK_ERROR_UNKNOWN, label %"__enumname cont26", !dbg !642

__enum_name_VK_ERROR_UNKNOWN:                     ; preds = %"__enumname cont25"
  store ptr @strlit.120, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont26", !dbg !642

"__enumname cont26":                              ; preds = %__enum_name_VK_ERROR_UNKNOWN, %"__enumname cont25"
  %34 = icmp eq i64 %6, -1000072003, !dbg !642
  br i1 %34, label %__enum_name_VK_ERROR_INVALID_EXTERNAL_HANDLE, label %"__enumname cont27", !dbg !642

__enum_name_VK_ERROR_INVALID_EXTERNAL_HANDLE:     ; preds = %"__enumname cont26"
  store ptr @strlit.121, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont27", !dbg !642

"__enumname cont27":                              ; preds = %__enum_name_VK_ERROR_INVALID_EXTERNAL_HANDLE, %"__enumname cont26"
  %35 = icmp eq i64 %6, -1000161000, !dbg !642
  br i1 %35, label %__enum_name_VK_ERROR_FRAGMENTATION, label %"__enumname cont28", !dbg !642

__enum_name_VK_ERROR_FRAGMENTATION:               ; preds = %"__enumname cont27"
  store ptr @strlit.122, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont28", !dbg !642

"__enumname cont28":                              ; preds = %__enum_name_VK_ERROR_FRAGMENTATION, %"__enumname cont27"
  %36 = icmp eq i64 %6, -1000001004, !dbg !642
  br i1 %36, label %__enum_name_VK_ERROR_OUT_OF_DATE_KHR, label %"__enumname cont29", !dbg !642

__enum_name_VK_ERROR_OUT_OF_DATE_KHR:             ; preds = %"__enumname cont28"
  store ptr @strlit.123, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont29", !dbg !642

"__enumname cont29":                              ; preds = %__enum_name_VK_ERROR_OUT_OF_DATE_KHR, %"__enumname cont28"
  %37 = icmp eq i64 %6, -1000257000, !dbg !642
  br i1 %37, label %__enum_name_VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS, label %"__enumname cont30", !dbg !642

__enum_name_VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: ; preds = %"__enumname cont29"
  store ptr @strlit.124, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont30", !dbg !642

"__enumname cont30":                              ; preds = %__enum_name_VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS, %"__enumname cont29"
  %38 = icmp eq i64 %6, 1000297000, !dbg !642
  br i1 %38, label %__enum_name_VK_PIPELINE_COMPILE_REQUIRED, label %"__enumname cont31", !dbg !642

__enum_name_VK_PIPELINE_COMPILE_REQUIRED:         ; preds = %"__enumname cont30"
  store ptr @strlit.125, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont31", !dbg !642

"__enumname cont31":                              ; preds = %__enum_name_VK_PIPELINE_COMPILE_REQUIRED, %"__enumname cont30"
  %39 = icmp eq i64 %6, -1000174001, !dbg !642
  br i1 %39, label %__enum_name_VK_ERROR_NOT_PERMITTED, label %"__enumname cont32", !dbg !642

__enum_name_VK_ERROR_NOT_PERMITTED:               ; preds = %"__enumname cont31"
  store ptr @strlit.126, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont32", !dbg !642

"__enumname cont32":                              ; preds = %__enum_name_VK_ERROR_NOT_PERMITTED, %"__enumname cont31"
  %40 = icmp eq i64 %6, -1000000000, !dbg !642
  br i1 %40, label %__enum_name_VK_ERROR_SURFACE_LOST_KHR, label %"__enumname cont33", !dbg !642

__enum_name_VK_ERROR_SURFACE_LOST_KHR:            ; preds = %"__enumname cont32"
  store ptr @strlit.127, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont33", !dbg !642

"__enumname cont33":                              ; preds = %__enum_name_VK_ERROR_SURFACE_LOST_KHR, %"__enumname cont32"
  %41 = icmp eq i64 %6, -1000000001, !dbg !642
  br i1 %41, label %__enum_name_VK_ERROR_NATIVE_WINDOW_IN_USE_KHR, label %"__enumname cont34", !dbg !642

__enum_name_VK_ERROR_NATIVE_WINDOW_IN_USE_KHR:    ; preds = %"__enumname cont33"
  store ptr @strlit.128, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont34", !dbg !642

"__enumname cont34":                              ; preds = %__enum_name_VK_ERROR_NATIVE_WINDOW_IN_USE_KHR, %"__enumname cont33"
  %42 = icmp eq i64 %6, 1000001003, !dbg !642
  br i1 %42, label %__enum_name_VK_SUBOPTIMAL_KHR, label %"__enumname cont35", !dbg !642

__enum_name_VK_SUBOPTIMAL_KHR:                    ; preds = %"__enumname cont34"
  store ptr @strlit.129, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont35", !dbg !642

"__enumname cont35":                              ; preds = %__enum_name_VK_SUBOPTIMAL_KHR, %"__enumname cont34"
  %43 = icmp eq i64 %6, -1000003001, !dbg !642
  br i1 %43, label %__enum_name_VK_ERROR_INCOMPATIBLE_DISPLAY_KHR, label %"__enumname cont36", !dbg !642

__enum_name_VK_ERROR_INCOMPATIBLE_DISPLAY_KHR:    ; preds = %"__enumname cont35"
  store ptr @strlit.130, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont36", !dbg !642

"__enumname cont36":                              ; preds = %__enum_name_VK_ERROR_INCOMPATIBLE_DISPLAY_KHR, %"__enumname cont35"
  %44 = icmp eq i64 %6, -1000023005, !dbg !642
  br i1 %44, label %__enum_name_VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR, label %"__enumname cont37", !dbg !642

__enum_name_VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR: ; preds = %"__enumname cont36"
  store ptr @strlit.131, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont37", !dbg !642

"__enumname cont37":                              ; preds = %__enum_name_VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR, %"__enumname cont36"
  %45 = icmp eq i64 %6, -1000011001, !dbg !642
  br i1 %45, label %__enum_name_VK_ERROR_VALIDATION_FAILED_EXT, label %"__enumname cont38", !dbg !642

__enum_name_VK_ERROR_VALIDATION_FAILED_EXT:       ; preds = %"__enumname cont37"
  store ptr @strlit.132, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont38", !dbg !642

"__enumname cont38":                              ; preds = %__enum_name_VK_ERROR_VALIDATION_FAILED_EXT, %"__enumname cont37"
  %46 = icmp eq i64 %6, -1000023000, !dbg !642
  br i1 %46, label %__enum_name_VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR, label %"__enumname cont39", !dbg !642

__enum_name_VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR: ; preds = %"__enumname cont38"
  store ptr @strlit.133, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont39", !dbg !642

"__enumname cont39":                              ; preds = %__enum_name_VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR, %"__enumname cont38"
  %47 = icmp eq i64 %6, -1000023001, !dbg !642
  br i1 %47, label %__enum_name_VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR, label %"__enumname cont40", !dbg !642

__enum_name_VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR: ; preds = %"__enumname cont39"
  store ptr @strlit.134, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont40", !dbg !642

"__enumname cont40":                              ; preds = %__enum_name_VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR, %"__enumname cont39"
  %48 = icmp eq i64 %6, 1000268002, !dbg !642
  br i1 %48, label %__enum_name_VK_OPERATION_DEFERRED_KHR, label %"__enumname cont41", !dbg !642

__enum_name_VK_OPERATION_DEFERRED_KHR:            ; preds = %"__enumname cont40"
  store ptr @strlit.135, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont41", !dbg !642

"__enumname cont41":                              ; preds = %__enum_name_VK_OPERATION_DEFERRED_KHR, %"__enumname cont40"
  %49 = icmp eq i64 %6, -1000023003, !dbg !642
  br i1 %49, label %__enum_name_VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR, label %"__enumname cont42", !dbg !642

__enum_name_VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR: ; preds = %"__enumname cont41"
  store ptr @strlit.136, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont42", !dbg !642

"__enumname cont42":                              ; preds = %__enum_name_VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR, %"__enumname cont41"
  %50 = icmp eq i64 %6, -1000158000, !dbg !642
  br i1 %50, label %__enum_name_VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT, label %"__enumname cont43", !dbg !642

__enum_name_VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: ; preds = %"__enumname cont42"
  store ptr @strlit.137, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont43", !dbg !642

"__enumname cont43":                              ; preds = %__enum_name_VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT, %"__enumname cont42"
  %51 = icmp eq i64 %6, -1000255000, !dbg !642
  br i1 %51, label %__enum_name_VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT, label %"__enumname cont44", !dbg !642

__enum_name_VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: ; preds = %"__enumname cont43"
  store ptr @strlit.138, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont44", !dbg !642

"__enumname cont44":                              ; preds = %__enum_name_VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT, %"__enumname cont43"
  %52 = icmp eq i64 %6, 1000268001, !dbg !642
  br i1 %52, label %__enum_name_VK_THREAD_DONE_KHR, label %"__enumname cont45", !dbg !642

__enum_name_VK_THREAD_DONE_KHR:                   ; preds = %"__enumname cont44"
  store ptr @strlit.139, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont45", !dbg !642

"__enumname cont45":                              ; preds = %__enum_name_VK_THREAD_DONE_KHR, %"__enumname cont44"
  %53 = icmp eq i64 %6, 1000268003, !dbg !642
  br i1 %53, label %__enum_name_VK_OPERATION_NOT_DEFERRED_KHR, label %"__enumname cont46", !dbg !642

__enum_name_VK_OPERATION_NOT_DEFERRED_KHR:        ; preds = %"__enumname cont45"
  store ptr @strlit.140, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont46", !dbg !642

"__enumname cont46":                              ; preds = %__enum_name_VK_OPERATION_NOT_DEFERRED_KHR, %"__enumname cont45"
  %54 = icmp eq i64 %6, -1000338000, !dbg !642
  br i1 %54, label %__enum_name_VK_ERROR_COMPRESSION_EXHAUSTED_EXT, label %"__enumname cont47", !dbg !642

__enum_name_VK_ERROR_COMPRESSION_EXHAUSTED_EXT:   ; preds = %"__enumname cont46"
  store ptr @strlit.141, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont47", !dbg !642

"__enumname cont47":                              ; preds = %__enum_name_VK_ERROR_COMPRESSION_EXHAUSTED_EXT, %"__enumname cont46"
  %55 = icmp eq i64 %6, -1000483000, !dbg !642
  br i1 %55, label %__enum_name_VK_ERROR_NOT_ENOUGH_SPACE_KHR, label %"__enumname cont48", !dbg !642

__enum_name_VK_ERROR_NOT_ENOUGH_SPACE_KHR:        ; preds = %"__enumname cont47"
  store ptr @strlit.142, ptr %_enumname_result, align 8, !dbg !642
  br label %"__enumname cont48", !dbg !642

"__enumname cont48":                              ; preds = %__enum_name_VK_ERROR_NOT_ENOUGH_SPACE_KHR, %"__enumname cont47"
  %56 = load ptr, ptr %_enumname_result, align 8, !dbg !642
  call void @puts(ptr %56), !dbg !642
  call void @puts(ptr @strlit.143), !dbg !645
  call void @putchar(i8 10), !dbg !646
  call void @llvm.debugtrap(), !dbg !647
  br label %ifcont, !dbg !647
}

declare i32 @PostMessageA(i64, i32, i64, i64)

declare i64 @DefWindowProcA(i64, i32, i64, i64)

declare i64 @LoadIconA(i64, ptr)

declare i64 @LoadCursorA(i64, ptr)

declare i16 @RegisterClassExA(ptr)

declare i64 @CreateWindowExA(i32, ptr, ptr, i32, i32, i32, i32, i32, i64, i64, i64, ptr)

declare i32 @ShowWindow(i64, i32)

declare i32 @DestroyWindow(i64)

declare void @PostQuitMessage(i32)

declare i32 @GetClientRect(i64, ptr)

declare i64 @GetModuleHandleA(ptr)

declare i32 @PeekMessageA(ptr, i64, i32, i32, i32)

declare i32 @TranslateMessage(ptr)

declare i64 @DispatchMessageA(ptr)

declare i64 @SetWindowLongPtrA(i64, i32, i64)

declare i64 @GetWindowLongPtrA(i64, i32)

define void @impl_close_window(i64 %wndhandle_param) !dbg !648 {
entry:
  %wndhandle = alloca i64, align 8
  store i64 %wndhandle_param, ptr %wndhandle, align 4
    #dbg_declare(ptr %wndhandle, !650, !DIExpression(), !651)
  %0 = load i64, ptr %wndhandle, align 4, !dbg !652
  %1 = load ptr, ptr @windows, align 8, !dbg !652
  %2 = getelementptr %window_data_t, ptr %1, i64 %0, !dbg !652
  %wndptr = alloca ptr, align 8, !dbg !653
  store ptr %2, ptr %wndptr, align 8, !dbg !653
    #dbg_declare(ptr %wndptr, !654, !DIExpression(), !660)
  %3 = load ptr, ptr %wndptr, align 8, !dbg !661
  %4 = getelementptr inbounds nuw %window_data_t, ptr %3, i32 0, i32 1, !dbg !661
  store i1 false, ptr %4, align 1, !dbg !661
  %5 = load ptr, ptr %wndptr, align 8, !dbg !662
  %6 = getelementptr inbounds nuw %window_data_t, ptr %5, i32 0, i32 0, !dbg !662
  %7 = load i64, ptr %6, align 4, !dbg !662
  %8 = call i32 @DestroyWindow(i64 %7), !dbg !662
  ret void, !dbg !652
}

define i64 @wndproc(i64 %hwnd_param, i32 %msg_param, i64 %wparam_param, i64 %lparam_param) !dbg !663 {
entry:
  %hwnd = alloca i64, align 8
  store i64 %hwnd_param, ptr %hwnd, align 4
    #dbg_declare(ptr %hwnd, !666, !DIExpression(), !667)
  %msg = alloca i32, align 4
  store i32 %msg_param, ptr %msg, align 4
    #dbg_declare(ptr %msg, !668, !DIExpression(), !667)
  %wparam = alloca i64, align 8
  store i64 %wparam_param, ptr %wparam, align 4
    #dbg_declare(ptr %wparam, !669, !DIExpression(), !667)
  %lparam = alloca i64, align 8
  store i64 %lparam_param, ptr %lparam, align 4
    #dbg_declare(ptr %lparam, !670, !DIExpression(), !667)
  %0 = load i32, ptr %msg, align 4, !dbg !671
  %1 = icmp eq i32 %0, 16, !dbg !671
  br i1 %1, label %then, label %ifcont, !dbg !671

then:                                             ; preds = %entry
  %2 = load i64, ptr %hwnd, align 4, !dbg !672
  %3 = call i64 @GetWindowLongPtrA(i64 %2, i32 0), !dbg !672
  %wndhandle = alloca i64, align 8, !dbg !672
  store i64 %3, ptr %wndhandle, align 4, !dbg !672
    #dbg_declare(ptr %wndhandle, !673, !DIExpression(), !674)
  %4 = load i64, ptr %wndhandle, align 4, !dbg !675
  call void @impl_close_window(i64 %4), !dbg !675
  ret i64 0, !dbg !676

ifcont:                                           ; preds = %entry
  %5 = load i32, ptr %msg, align 4, !dbg !677
  %6 = icmp eq i32 %5, 2, !dbg !677
  br i1 %6, label %then1, label %ifcont2, !dbg !677

then1:                                            ; preds = %ifcont
  call void @PostQuitMessage(i32 0), !dbg !678
  ret i64 0, !dbg !679

ifcont2:                                          ; preds = %ifcont
  %7 = load i64, ptr %hwnd, align 4, !dbg !680
  %8 = load i32, ptr %msg, align 4, !dbg !680
  %9 = load i64, ptr %wparam, align 4, !dbg !680
  %10 = load i64, ptr %lparam, align 4, !dbg !680
  %11 = call i64 @DefWindowProcA(i64 %7, i32 %8, i64 %9, i64 %10), !dbg !680
  ret i64 %11, !dbg !680
}

define void @register_wndclass() !dbg !681 {
entry:
  %0 = load ptr, ptr @null, align 8, !dbg !682
  %1 = call i64 @GetModuleHandleA(ptr %0), !dbg !682
  %hinst = alloca i64, align 8, !dbg !682
  store i64 %1, ptr %hinst, align 4, !dbg !682
    #dbg_declare(ptr %hinst, !683, !DIExpression(), !684)
  %magic_int_resource = alloca ptr, align 8, !dbg !685
  store ptr inttoptr (i64 32512 to ptr), ptr %magic_int_resource, align 8, !dbg !685
    #dbg_declare(ptr %magic_int_resource, !686, !DIExpression(), !687)
  %COLOR_WINDOW = alloca i64, align 8, !dbg !688
  store i64 5, ptr %COLOR_WINDOW, align 4, !dbg !688
    #dbg_declare(ptr %COLOR_WINDOW, !689, !DIExpression(), !690)
  %2 = load i64, ptr %hinst, align 4, !dbg !691
  %3 = load ptr, ptr %magic_int_resource, align 8, !dbg !691
  %4 = call i64 @LoadIconA(i64 0, ptr %3), !dbg !691
  %5 = load ptr, ptr %magic_int_resource, align 8, !dbg !691
  %6 = call i64 @LoadCursorA(i64 0, ptr %5), !dbg !691
  %7 = load i64, ptr %COLOR_WINDOW, align 4, !dbg !691
  %8 = add i64 %7, 1, !dbg !691
  %9 = load ptr, ptr @null, align 8, !dbg !691
  %10 = load ptr, ptr @window_classname, align 8, !dbg !691
  %11 = load ptr, ptr %magic_int_resource, align 8, !dbg !691
  %12 = call i64 @LoadIconA(i64 0, ptr %11), !dbg !691
  %13 = insertvalue %WNDCLASSEXA { i32 80, i32 43, ptr @wndproc, i32 8, i32 0, i64 undef, i64 undef, i64 undef, i64 undef, ptr undef, ptr undef, i64 undef }, i64 %2, 5, !dbg !691
  %14 = insertvalue %WNDCLASSEXA %13, i64 %4, 6, !dbg !691
  %15 = insertvalue %WNDCLASSEXA %14, i64 %6, 7, !dbg !691
  %16 = insertvalue %WNDCLASSEXA %15, i64 %8, 8, !dbg !691
  %17 = insertvalue %WNDCLASSEXA %16, ptr %9, 9, !dbg !691
  %18 = insertvalue %WNDCLASSEXA %17, ptr %10, 10, !dbg !691
  %19 = insertvalue %WNDCLASSEXA %18, i64 %12, 11, !dbg !691
  %window_class = alloca %WNDCLASSEXA, align 8, !dbg !691
  store %WNDCLASSEXA %19, ptr %window_class, align 8, !dbg !691
    #dbg_declare(ptr %window_class, !692, !DIExpression(), !708)
  %20 = call i16 @RegisterClassExA(ptr %window_class), !dbg !709
  store i1 true, ptr @window_class_registered, align 1, !dbg !710
  ret void, !dbg !711
}

define void @unregister_wndclass() !dbg !712 {
entry:
  store i1 false, ptr @window_class_registered, align 1, !dbg !713
  ret void, !dbg !714
}

define i64 @tz_wnd_open_window(i64 %w_param, i64 %h_param, ptr %title_param, ptr %a_param) !dbg !715 {
entry:
  %w = alloca i64, align 8
  store i64 %w_param, ptr %w, align 4
    #dbg_declare(ptr %w, !718, !DIExpression(), !719)
  %h = alloca i64, align 8
  store i64 %h_param, ptr %h, align 4
    #dbg_declare(ptr %h, !720, !DIExpression(), !719)
  %title = alloca ptr, align 8
  store ptr %title_param, ptr %title, align 8
    #dbg_declare(ptr %title, !721, !DIExpression(), !719)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !722, !DIExpression(), !719)
  %0 = load i64, ptr @window_cap, align 4, !dbg !723
  %1 = icmp eq i64 %0, 0, !dbg !723
  br i1 %1, label %then, label %ifcont, !dbg !723

then:                                             ; preds = %entry
  %initial_window_capacity = alloca i64, align 8, !dbg !724
  store i64 8, ptr %initial_window_capacity, align 4, !dbg !724
    #dbg_declare(ptr %initial_window_capacity, !725, !DIExpression(), !726)
  %2 = load ptr, ptr %a, align 8, !dbg !727
  %3 = load i64, ptr %initial_window_capacity, align 4, !dbg !727
  %4 = mul i64 12, %3, !dbg !727
  %5 = call ptr @arena_push(ptr %2, i64 %4), !dbg !727
  store ptr %5, ptr @windows, align 8, !dbg !727
  %6 = load i64, ptr %initial_window_capacity, align 4, !dbg !728
  store i64 %6, ptr @window_cap, align 4, !dbg !728
  br label %ifcont, !dbg !728

ifcont:                                           ; preds = %then, %entry
  %7 = load i64, ptr @window_count, align 4, !dbg !729
  %8 = load i64, ptr @window_cap, align 4, !dbg !729
  %9 = icmp ule i64 %7, %8, !dbg !729
  br i1 %9, label %then1, label %ifcont2, !dbg !729

then1:                                            ; preds = %ifcont
  %10 = load i64, ptr @window_cap, align 4, !dbg !730
  %11 = mul i64 %10, 2, !dbg !730
  %new_capacity = alloca i64, align 8, !dbg !731
  store i64 %11, ptr %new_capacity, align 4, !dbg !731
    #dbg_declare(ptr %new_capacity, !732, !DIExpression(), !733)
  %12 = load ptr, ptr %a, align 8, !dbg !734
  %13 = load i64, ptr %new_capacity, align 4, !dbg !734
  %14 = mul i64 12, %13, !dbg !734
  %15 = call ptr @arena_push(ptr %12, i64 %14), !dbg !734
  store ptr %15, ptr @windows, align 8, !dbg !734
  %16 = load i64, ptr %new_capacity, align 4, !dbg !735
  store i64 %16, ptr @window_cap, align 4, !dbg !735
  br label %ifcont2, !dbg !735

ifcont2:                                          ; preds = %then1, %ifcont
  %17 = load i64, ptr @window_count, align 4, !dbg !736
  %retid = alloca i64, align 8, !dbg !736
  store i64 %17, ptr %retid, align 4, !dbg !736
    #dbg_declare(ptr %retid, !737, !DIExpression(), !738)
  %18 = load i64, ptr %retid, align 4, !dbg !736
  %19 = load ptr, ptr @windows, align 8, !dbg !736
  %20 = getelementptr %window_data_t, ptr %19, i64 %18, !dbg !736
  %wndptr = alloca ptr, align 8, !dbg !739
  store ptr %20, ptr %wndptr, align 8, !dbg !739
    #dbg_declare(ptr %wndptr, !740, !DIExpression(), !741)
  %21 = load i64, ptr @window_count, align 4, !dbg !742
  %22 = add i64 %21, 1, !dbg !742
  store i64 %22, ptr @window_count, align 4, !dbg !742
  %23 = load i64, ptr @window_count, align 4, !dbg !742
  %24 = add i64 %23, 1, !dbg !742
  %25 = load ptr, ptr @null, align 8, !dbg !743
  %26 = call i64 @GetModuleHandleA(ptr %25), !dbg !743
  %hinst = alloca i64, align 8, !dbg !743
  store i64 %26, ptr %hinst, align 4, !dbg !743
    #dbg_declare(ptr %hinst, !744, !DIExpression(), !745)
  %27 = load ptr, ptr @window_classname, align 8, !dbg !746
  %28 = load ptr, ptr %title, align 8, !dbg !746
  %29 = load i64, ptr @CW_USEDEFAULT, align 4, !dbg !746
  %30 = trunc i64 %29 to i32, !dbg !746
  %31 = load i64, ptr @CW_USEDEFAULT, align 4, !dbg !746
  %32 = trunc i64 %31 to i32, !dbg !746
  %33 = load i64, ptr %w, align 4, !dbg !746
  %34 = trunc i64 %33 to i32, !dbg !746
  %35 = load i64, ptr %h, align 4, !dbg !746
  %36 = trunc i64 %35 to i32, !dbg !746
  %37 = load i64, ptr %hinst, align 4, !dbg !746
  %38 = load ptr, ptr @null, align 8, !dbg !746
  %39 = call i64 @CreateWindowExA(i32 768, ptr %27, ptr %28, i32 13565952, i32 %30, i32 %32, i32 %34, i32 %36, i64 0, i64 0, i64 %37, ptr %38), !dbg !746
  %hwnd = alloca i64, align 8, !dbg !746
  store i64 %39, ptr %hwnd, align 4, !dbg !746
    #dbg_declare(ptr %hwnd, !747, !DIExpression(), !748)
  %40 = load i64, ptr %hwnd, align 4, !dbg !749
  %41 = icmp eq i64 %40, 0, !dbg !749
  br i1 %41, label %then3, label %ifcont4, !dbg !749

then3:                                            ; preds = %ifcont2
  call void @llvm.debugtrap(), !dbg !750
  br label %ifcont4, !dbg !750

ifcont4:                                          ; preds = %then3, %ifcont2
  %42 = load i64, ptr %hwnd, align 4, !dbg !751
  %43 = call i32 @ShowWindow(i64 %42, i32 5), !dbg !751
  %44 = load ptr, ptr %wndptr, align 8, !dbg !752
  %45 = load %window_data_t, ptr %44, align 4, !dbg !752
  %46 = load i64, ptr %hwnd, align 4, !dbg !752
  %47 = insertvalue %window_data_t undef, i64 %46, 0, !dbg !752
  %48 = insertvalue %window_data_t %47, i1 true, 1, !dbg !752
  store %window_data_t %48, ptr %44, align 4, !dbg !752
  %49 = load i64, ptr %hwnd, align 4, !dbg !753
  %50 = load i64, ptr %retid, align 4, !dbg !753
  %51 = call i64 @SetWindowLongPtrA(i64 %49, i32 0, i64 %50), !dbg !753
  %52 = load ptr, ptr %wndptr, align 8, !dbg !754
  %53 = getelementptr inbounds nuw %window_data_t, ptr %52, i32 0, i32 0, !dbg !754
  %54 = load i64, ptr %hwnd, align 4, !dbg !754
  store i64 %54, ptr %53, align 4, !dbg !754
  %55 = load i64, ptr %retid, align 4, !dbg !755
  ret i64 %55, !dbg !755
}

define void @tz_wnd_close_window(i64 %wnd_param) !dbg !756 {
entry:
  %wnd = alloca i64, align 8
  store i64 %wnd_param, ptr %wnd, align 4
    #dbg_declare(ptr %wnd, !757, !DIExpression(), !758)
  %0 = load i64, ptr %wnd, align 4, !dbg !759
  call void @impl_close_window(i64 %0), !dbg !759
  ret void <badref>, !dbg !759
  ret void, !dbg !760
}

define i1 @tz_wnd_is_open(i64 %wnd_param) !dbg !761 {
entry:
  %wnd = alloca i64, align 8
  store i64 %wnd_param, ptr %wnd, align 4
    #dbg_declare(ptr %wnd, !764, !DIExpression(), !765)
  %0 = load i64, ptr %wnd, align 4, !dbg !766
  %1 = load ptr, ptr @windows, align 8, !dbg !766
  %2 = getelementptr %window_data_t, ptr %1, i64 %0, !dbg !766
  %wndptr = alloca ptr, align 8, !dbg !767
  store ptr %2, ptr %wndptr, align 8, !dbg !767
    #dbg_declare(ptr %wndptr, !768, !DIExpression(), !769)
  %3 = load ptr, ptr %wndptr, align 8, !dbg !770
  %4 = getelementptr inbounds nuw %window_data_t, ptr %3, i32 0, i32 1, !dbg !770
  %5 = load i1, ptr %4, align 1, !dbg !770
  ret i1 %5, !dbg !770
}

define void @tz_wnd_update() !dbg !771 {
entry:
  %msg = alloca %WINMSG, align 8, !dbg !772
  store %WINMSG undef, ptr %msg, align 4, !dbg !772
    #dbg_declare(ptr %msg, !773, !DIExpression(), !786)
  %0 = call i32 @PeekMessageA(ptr %msg, i64 0, i32 0, i32 0, i32 1), !dbg !787
  %mybool = alloca i32, align 4, !dbg !787
  store i32 %0, ptr %mybool, align 4, !dbg !787
    #dbg_declare(ptr %mybool, !788, !DIExpression(), !789)
  %1 = load i32, ptr %mybool, align 4, !dbg !790
  %2 = icmp ne i32 %1, 0, !dbg !790
  br i1 %2, label %then, label %ifcont, !dbg !790

then:                                             ; preds = %entry
  %3 = call i32 @TranslateMessage(ptr %msg), !dbg !791
  %4 = call i64 @DispatchMessageA(ptr %msg), !dbg !792
  br label %ifcont, !dbg !792

ifcont:                                           ; preds = %then, %entry
  ret void, !dbg !793
}

define %vec2u32 @tz_wnd_get_dimensions(i64 %wnd_param) !dbg !794 {
entry:
  %wnd = alloca i64, align 8
  store i64 %wnd_param, ptr %wnd, align 4
    #dbg_declare(ptr %wnd, !797, !DIExpression(), !798)
  %0 = load i64, ptr %wnd, align 4, !dbg !799
  %1 = load ptr, ptr @windows, align 8, !dbg !799
  %2 = getelementptr %window_data_t, ptr %1, i64 %0, !dbg !799
  %wndptr = alloca ptr, align 8, !dbg !800
  store ptr %2, ptr %wndptr, align 8, !dbg !800
    #dbg_declare(ptr %wndptr, !801, !DIExpression(), !802)
  %rect = alloca %RECT, align 8, !dbg !803
    #dbg_declare(ptr %rect, !804, !DIExpression(), !811)
  %3 = load ptr, ptr %wndptr, align 8, !dbg !812
  %4 = getelementptr inbounds nuw %window_data_t, ptr %3, i32 0, i32 0, !dbg !812
  %5 = load i64, ptr %4, align 4, !dbg !812
  %6 = call i32 @GetClientRect(i64 %5, ptr %rect), !dbg !812
  %7 = icmp ne i32 %6, 0, !dbg !812
  br i1 %7, label %then, label %ifcont, !dbg !812

then:                                             ; preds = %entry
  %8 = getelementptr inbounds nuw %RECT, ptr %rect, i32 0, i32 2, !dbg !813
  %9 = getelementptr inbounds nuw %RECT, ptr %rect, i32 0, i32 0, !dbg !813
  %10 = load i32, ptr %9, align 4, !dbg !813
  %11 = load i32, ptr %8, align 4, !dbg !813
  %12 = sub i32 %11, %10, !dbg !813
  %13 = getelementptr inbounds nuw %RECT, ptr %rect, i32 0, i32 3, !dbg !813
  %14 = getelementptr inbounds nuw %RECT, ptr %rect, i32 0, i32 1, !dbg !813
  %15 = load i32, ptr %14, align 4, !dbg !813
  %16 = load i32, ptr %13, align 4, !dbg !813
  %17 = sub i32 %16, %15, !dbg !813
  %18 = insertvalue %vec2u32 undef, i32 %12, 0, !dbg !813
  %19 = insertvalue %vec2u32 %18, i32 %17, 1, !dbg !813
  ret %vec2u32 %19, !dbg !813

ifcont:                                           ; preds = %entry
  ret %vec2u32 zeroinitializer, !dbg !814
}

declare i32 @GetFileAttributesA(ptr)

declare i64 @CreateFileA(ptr, i32, i32, i64, i32, i32, i64)

declare i32 @GetFileSizeEx(i64, ptr)

declare i32 @CloseHandle(i64)

declare i32 @ReadFile(i64, ptr, i32, ptr, i64)

declare i32 @WriteFile(i64, ptr, i32, ptr, i64)

declare i32 @DeleteFileA(ptr)

declare i32 @CreateDirectoryA(ptr, i64)

declare i32 @SHFileOperationA(ptr)

declare i64 @FindFirstFileA(ptr, ptr)

declare i32 @FindNextFileA(i64, ptr)

declare i32 @FindClose(i64)

define i1 @file_exists(ptr %path_param) !dbg !815 {
entry:
  %path = alloca ptr, align 8
  store ptr %path_param, ptr %path, align 8
    #dbg_declare(ptr %path, !819, !DIExpression(), !820)
  %0 = load ptr, ptr %path, align 8, !dbg !821
  %1 = call i32 @GetFileAttributesA(ptr %0), !dbg !821
  %attribs = alloca i32, align 4, !dbg !821
  store i32 %1, ptr %attribs, align 4, !dbg !821
    #dbg_declare(ptr %attribs, !822, !DIExpression(), !823)
  %2 = load i32, ptr %attribs, align 4, !dbg !824
  %3 = icmp ne i32 %2, -1, !dbg !824
  ret i1 %3, !dbg !824
}

define i64 @file_size_bytes(ptr %path_param) !dbg !825 {
entry:
  %path = alloca ptr, align 8
  store ptr %path_param, ptr %path, align 8
    #dbg_declare(ptr %path, !826, !DIExpression(), !827)
  %0 = load ptr, ptr %path, align 8, !dbg !828
  %1 = call i64 @CreateFileA(ptr %0, i32 -2147483648, i32 3, i64 0, i32 3, i32 128, i64 0), !dbg !828
  %handle = alloca i64, align 8, !dbg !828
  store i64 %1, ptr %handle, align 4, !dbg !828
    #dbg_declare(ptr %handle, !829, !DIExpression(), !830)
  %2 = load i64, ptr %handle, align 4, !dbg !831
  %3 = icmp eq i64 %2, -1, !dbg !831
  br i1 %3, label %then, label %ifcont, !dbg !831

then:                                             ; preds = %entry
  ret i64 0, !dbg !832

ifcont:                                           ; preds = %entry
  %size = alloca i64, align 8, !dbg !833
    #dbg_declare(ptr %size, !834, !DIExpression(), !835)
  %4 = load i64, ptr %handle, align 4, !dbg !836
  %5 = call i32 @GetFileSizeEx(i64 %4, ptr %size), !dbg !836
  %6 = icmp eq i32 %5, 0, !dbg !836
  br i1 %6, label %then1, label %ifcont2, !dbg !836

then1:                                            ; preds = %ifcont
  %7 = load i64, ptr %handle, align 4, !dbg !837
  %8 = call i32 @CloseHandle(i64 %7), !dbg !837
  ret i64 0, !dbg !838

ifcont2:                                          ; preds = %ifcont
  %9 = load i64, ptr %handle, align 4, !dbg !839
  %10 = call i32 @CloseHandle(i64 %9), !dbg !839
  %11 = load i64, ptr %size, align 4, !dbg !840
  ret i64 %11, !dbg !840
}

define void @file_read(ptr %path_param, ptr %buf_param, i64 %buflen_param) !dbg !841 {
entry:
  %path = alloca ptr, align 8
  store ptr %path_param, ptr %path, align 8
    #dbg_declare(ptr %path, !842, !DIExpression(), !843)
  %buf = alloca ptr, align 8
  store ptr %buf_param, ptr %buf, align 8
    #dbg_declare(ptr %buf, !844, !DIExpression(), !843)
  %buflen = alloca i64, align 8
  store i64 %buflen_param, ptr %buflen, align 4
    #dbg_declare(ptr %buflen, !845, !DIExpression(), !843)
  %0 = load ptr, ptr %path, align 8, !dbg !846
  %1 = call i64 @CreateFileA(ptr %0, i32 -2147483648, i32 3, i64 0, i32 3, i32 128, i64 0), !dbg !846
  %handle = alloca i64, align 8, !dbg !846
  store i64 %1, ptr %handle, align 4, !dbg !846
    #dbg_declare(ptr %handle, !847, !DIExpression(), !848)
  %2 = load i64, ptr %handle, align 4, !dbg !849
  %3 = icmp eq i64 %2, -1, !dbg !849
  br i1 %3, label %then, label %ifcont, !dbg !849

then:                                             ; preds = %entry
  ret void, !dbg !850

ifcont:                                           ; preds = %entry
  %4 = load i64, ptr %handle, align 4, !dbg !851
  %5 = load ptr, ptr %buf, align 8, !dbg !851
  %6 = load i64, ptr %buflen, align 4, !dbg !851
  %7 = trunc i64 %6 to i32, !dbg !851
  %8 = load ptr, ptr @null, align 8, !dbg !851
  %9 = call i32 @ReadFile(i64 %4, ptr %5, i32 %7, ptr %8, i64 0), !dbg !851
  %10 = load i64, ptr %handle, align 4, !dbg !852
  %11 = call i32 @CloseHandle(i64 %10), !dbg !852
  ret void, !dbg !853
}

define void @file_write(ptr %path_param, ptr %buf_param, i64 %buflen_param) !dbg !854 {
entry:
  %path = alloca ptr, align 8
  store ptr %path_param, ptr %path, align 8
    #dbg_declare(ptr %path, !855, !DIExpression(), !856)
  %buf = alloca ptr, align 8
  store ptr %buf_param, ptr %buf, align 8
    #dbg_declare(ptr %buf, !857, !DIExpression(), !856)
  %buflen = alloca i64, align 8
  store i64 %buflen_param, ptr %buflen, align 4
    #dbg_declare(ptr %buflen, !858, !DIExpression(), !856)
  %0 = load ptr, ptr %path, align 8, !dbg !859
  %1 = call i64 @CreateFileA(ptr %0, i32 1073741824, i32 3, i64 0, i32 3, i32 128, i64 0), !dbg !859
  %handle = alloca i64, align 8, !dbg !859
  store i64 %1, ptr %handle, align 4, !dbg !859
    #dbg_declare(ptr %handle, !860, !DIExpression(), !861)
  %2 = load i64, ptr %handle, align 4, !dbg !862
  %3 = icmp eq i64 %2, -1, !dbg !862
  br i1 %3, label %then, label %ifcont, !dbg !862

then:                                             ; preds = %entry
  ret void, !dbg !863

ifcont:                                           ; preds = %entry
  %4 = load i64, ptr %handle, align 4, !dbg !864
  %5 = load ptr, ptr %buf, align 8, !dbg !864
  %6 = load i64, ptr %buflen, align 4, !dbg !864
  %7 = trunc i64 %6 to i32, !dbg !864
  %8 = load ptr, ptr @null, align 8, !dbg !864
  %9 = call i32 @WriteFile(i64 %4, ptr %5, i32 %7, ptr %8, i64 0), !dbg !864
  %10 = load i64, ptr %handle, align 4, !dbg !865
  %11 = call i32 @CloseHandle(i64 %10), !dbg !865
  ret void, !dbg !866
}

define i1 @file_create(ptr %path_param) !dbg !867 {
entry:
  %path = alloca ptr, align 8
  store ptr %path_param, ptr %path, align 8
    #dbg_declare(ptr %path, !868, !DIExpression(), !869)
  %0 = load ptr, ptr %path, align 8, !dbg !870
  %1 = call i64 @CreateFileA(ptr %0, i32 1073741824, i32 3, i64 0, i32 1, i32 128, i64 0), !dbg !870
  %handle = alloca i64, align 8, !dbg !870
  store i64 %1, ptr %handle, align 4, !dbg !870
    #dbg_declare(ptr %handle, !871, !DIExpression(), !872)
  %2 = load i64, ptr %handle, align 4, !dbg !873
  %3 = icmp eq i64 %2, -1, !dbg !873
  br i1 %3, label %then, label %ifcont, !dbg !873

then:                                             ; preds = %entry
  ret i1 false, !dbg !874

ifcont:                                           ; preds = %entry
  %4 = load i64, ptr %handle, align 4, !dbg !875
  %5 = call i32 @CloseHandle(i64 %4), !dbg !875
  ret i1 true, !dbg !876
}

define i1 @file_delete(ptr %path_param) !dbg !877 {
entry:
  %path = alloca ptr, align 8
  store ptr %path_param, ptr %path, align 8
    #dbg_declare(ptr %path, !878, !DIExpression(), !879)
  %0 = load ptr, ptr %path, align 8, !dbg !880
  %1 = call i32 @DeleteFileA(ptr %0), !dbg !880
  %2 = icmp ne i32 %1, 0, !dbg !880
  ret i1 %2, !dbg !880
}

define i1 @directory_create(ptr %path_param) !dbg !881 {
entry:
  %path = alloca ptr, align 8
  store ptr %path_param, ptr %path, align 8
    #dbg_declare(ptr %path, !882, !DIExpression(), !883)
  %0 = load ptr, ptr %path, align 8, !dbg !884
  %1 = call i32 @CreateDirectoryA(ptr %0, i64 0), !dbg !884
  %winbool = alloca i32, align 4, !dbg !884
  store i32 %1, ptr %winbool, align 4, !dbg !884
    #dbg_declare(ptr %winbool, !885, !DIExpression(), !886)
  %2 = load i32, ptr %winbool, align 4, !dbg !887
  %3 = icmp ne i32 %2, 0, !dbg !887
  ret i1 %3, !dbg !887
}

define i1 @directory_delete(ptr %path_param, ptr %a_param) !dbg !888 {
entry:
  %path = alloca ptr, align 8
  store ptr %path_param, ptr %path, align 8
    #dbg_declare(ptr %path, !891, !DIExpression(), !892)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !893, !DIExpression(), !892)
  %0 = load ptr, ptr %path, align 8, !dbg !894
  %1 = call i64 @cstrlen(ptr %0), !dbg !894
  %strlen = alloca i64, align 8, !dbg !894
  store i64 %1, ptr %strlen, align 4, !dbg !894
    #dbg_declare(ptr %strlen, !895, !DIExpression(), !896)
  %2 = load ptr, ptr %a, align 8, !dbg !897
  %3 = load i64, ptr %strlen, align 4, !dbg !897
  %4 = add i64 %3, 2, !dbg !897
  %5 = call ptr @arena_push(ptr %2, i64 %4), !dbg !897
  %pathbuf = alloca ptr, align 8, !dbg !897
  store ptr %5, ptr %pathbuf, align 8, !dbg !897
    #dbg_declare(ptr %pathbuf, !898, !DIExpression(), !899)
  %6 = load ptr, ptr %pathbuf, align 8, !dbg !900
  %7 = load ptr, ptr %path, align 8, !dbg !900
  %8 = load i64, ptr %strlen, align 4, !dbg !900
  call void @strcpy(ptr %6, ptr %7, i64 %8), !dbg !900
  %9 = load i64, ptr %strlen, align 4, !dbg !901
  %10 = load ptr, ptr %pathbuf, align 8, !dbg !901
  %11 = getelementptr i8, ptr %10, i64 %9, !dbg !901
  %12 = load i8, ptr %11, align 1, !dbg !901
  store i8 0, ptr %11, align 1, !dbg !901
  %13 = load i64, ptr %strlen, align 4, !dbg !902
  %14 = add i64 %13, 1, !dbg !902
  %15 = load ptr, ptr %pathbuf, align 8, !dbg !902
  %16 = getelementptr i8, ptr %15, i64 %14, !dbg !902
  %17 = load i8, ptr %16, align 1, !dbg !902
  store i8 0, ptr %16, align 1, !dbg !902
  %18 = load ptr, ptr %pathbuf, align 8, !dbg !903
  %19 = load ptr, ptr @null, align 8, !dbg !903
  %20 = insertvalue %SHFILEOPSTRUCTA { i64 0, i32 3, ptr undef, ptr undef, i32 undef, i32 undef, ptr undef, ptr undef }, ptr %18, 2, !dbg !903
  %21 = insertvalue %SHFILEOPSTRUCTA %20, ptr @strlit.145, 3, !dbg !903
  %22 = insertvalue %SHFILEOPSTRUCTA %21, i32 1044, 4, !dbg !903
  %23 = insertvalue %SHFILEOPSTRUCTA %22, i32 0, 5, !dbg !903
  %24 = insertvalue %SHFILEOPSTRUCTA %23, ptr %19, 6, !dbg !903
  %25 = insertvalue %SHFILEOPSTRUCTA %24, ptr @strlit.146, 7, !dbg !903
  %file_op = alloca %SHFILEOPSTRUCTA, align 8, !dbg !903
  store %SHFILEOPSTRUCTA %25, ptr %file_op, align 8, !dbg !903
    #dbg_declare(ptr %file_op, !904, !DIExpression(), !915)
  %26 = call i32 @SHFileOperationA(ptr %file_op), !dbg !916
  %27 = icmp eq i32 %26, 0, !dbg !916
  ret i1 %27, !dbg !916
}

define void @private_dir_iter(ptr %find_param, ptr %callback_param) !dbg !917 {
entry:
  %find = alloca ptr, align 8
  store ptr %find_param, ptr %find, align 8
    #dbg_declare(ptr %find, !940, !DIExpression(), !941)
  %callback = alloca ptr, align 8
  store ptr %callback_param, ptr %callback, align 8
    #dbg_declare(ptr %callback, !942, !DIExpression(), !941)
  %0 = load ptr, ptr %find, align 8, !dbg !943
  %1 = getelementptr inbounds nuw %WIN32_FIND_DATAA, ptr %0, i32 0, i32 8, !dbg !943
  %2 = getelementptr [260 x i8], ptr %1, i64 0, i64 0, !dbg !943
  %3 = call i1 @cstreql(ptr %2, ptr @strlit.147), !dbg !943
  %4 = xor i1 %3, true, !dbg !943
  br i1 %4, label %then, label %ifcont, !dbg !943

then:                                             ; preds = %entry
  %5 = load ptr, ptr %find, align 8, !dbg !944
  %6 = getelementptr inbounds nuw %WIN32_FIND_DATAA, ptr %5, i32 0, i32 8, !dbg !944
  %7 = getelementptr [260 x i8], ptr %6, i64 0, i64 0, !dbg !944
  %8 = call i1 @cstreql(ptr %7, ptr @strlit.148), !dbg !944
  %9 = xor i1 %8, true, !dbg !944
  br i1 %9, label %then1, label %ifcont2, !dbg !944

ifcont:                                           ; preds = %ifcont2, %entry
  ret void, !dbg !945

then1:                                            ; preds = %then
  %10 = load ptr, ptr %callback, align 8, !dbg !946
  %11 = load ptr, ptr %find, align 8, !dbg !946
  %12 = getelementptr inbounds nuw %WIN32_FIND_DATAA, ptr %11, i32 0, i32 8, !dbg !946
  %13 = getelementptr [260 x i8], ptr %12, i64 0, i64 0, !dbg !946
  call void %10(ptr %13), !dbg !946
  br label %ifcont2, !dbg !946

ifcont2:                                          ; preds = %then1, %then
  br label %ifcont, !dbg !946
}

define void @directory_iterate(ptr %path_param, ptr %callback_param, ptr %a_param) !dbg !947 {
entry:
  %path = alloca ptr, align 8
  store ptr %path_param, ptr %path, align 8
    #dbg_declare(ptr %path, !950, !DIExpression(), !951)
  %callback = alloca ptr, align 8
  store ptr %callback_param, ptr %callback, align 8
    #dbg_declare(ptr %callback, !952, !DIExpression(), !951)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !953, !DIExpression(), !951)
  %0 = load ptr, ptr %path, align 8, !dbg !954
  %1 = call i64 @cstrlen(ptr %0), !dbg !954
  %2 = add i64 %1, 2, !dbg !954
  %bufsize = alloca i64, align 8, !dbg !954
  store i64 %2, ptr %bufsize, align 4, !dbg !954
    #dbg_declare(ptr %bufsize, !955, !DIExpression(), !956)
  %3 = load ptr, ptr %a, align 8, !dbg !957
  %4 = load i64, ptr %bufsize, align 4, !dbg !957
  %5 = call ptr @arena_push(ptr %3, i64 %4), !dbg !957
  %buf = alloca ptr, align 8, !dbg !957
  store ptr %5, ptr %buf, align 8, !dbg !957
    #dbg_declare(ptr %buf, !958, !DIExpression(), !959)
  %6 = load ptr, ptr %buf, align 8, !dbg !960
  %7 = load ptr, ptr %path, align 8, !dbg !960
  %8 = load i64, ptr %bufsize, align 4, !dbg !960
  %9 = sub i64 %8, 2, !dbg !960
  call void @strcpy(ptr %6, ptr %7, i64 %9), !dbg !960
  %10 = load i64, ptr %bufsize, align 4, !dbg !961
  %11 = sub i64 %10, 2, !dbg !961
  %12 = load ptr, ptr %buf, align 8, !dbg !961
  %13 = getelementptr i8, ptr %12, i64 %11, !dbg !961
  %14 = load i8, ptr %13, align 1, !dbg !961
  store i8 47, ptr %13, align 1, !dbg !961
  %15 = load i64, ptr %bufsize, align 4, !dbg !962
  %16 = sub i64 %15, 1, !dbg !962
  %17 = load ptr, ptr %buf, align 8, !dbg !962
  %18 = getelementptr i8, ptr %17, i64 %16, !dbg !962
  %19 = load i8, ptr %18, align 1, !dbg !962
  store i8 42, ptr %18, align 1, !dbg !962
  %find = alloca %WIN32_FIND_DATAA, align 8, !dbg !963
    #dbg_declare(ptr %find, !964, !DIExpression(), !965)
  %20 = load ptr, ptr %buf, align 8, !dbg !966
  %21 = call i64 @FindFirstFileA(ptr %20, ptr %find), !dbg !966
  %handle = alloca i64, align 8, !dbg !966
  store i64 %21, ptr %handle, align 4, !dbg !966
    #dbg_declare(ptr %handle, !967, !DIExpression(), !968)
  %22 = load i64, ptr %handle, align 4, !dbg !969
  %23 = icmp eq i64 %22, -1, !dbg !969
  br i1 %23, label %then, label %ifcont, !dbg !969

then:                                             ; preds = %entry
  ret void, !dbg !970

ifcont:                                           ; preds = %entry
  %24 = load ptr, ptr %callback, align 8, !dbg !971
  call void @private_dir_iter(ptr %find, ptr %24), !dbg !971
  %25 = load i64, ptr %handle, align 4, !dbg !972
  %26 = call i32 @FindNextFileA(i64 %25, ptr %find), !dbg !972
  %27 = icmp ne i32 %26, 0, !dbg !972
  br i1 %27, label %then1, label %whilecont, !dbg !972

then1:                                            ; preds = %then1, %ifcont
  %28 = load ptr, ptr %callback, align 8, !dbg !973
  call void @private_dir_iter(ptr %find, ptr %28), !dbg !973
  %29 = load i64, ptr %handle, align 4, !dbg !974
  %30 = call i32 @FindNextFileA(i64 %29, ptr %find), !dbg !974
  %31 = icmp ne i32 %30, 0, !dbg !974
  br i1 %31, label %then1, label %whilecont, !dbg !974

whilecont:                                        ; preds = %then1, %ifcont
  %32 = load i64, ptr %handle, align 4, !dbg !975
  %33 = call i32 @FindClose(i64 %32), !dbg !975
  ret void, !dbg !976
}

define i64 @impl_resource_size_bytes(ptr %resptr_param) !dbg !977 {
entry:
  %resptr = alloca ptr, align 8
  store ptr %resptr_param, ptr %resptr, align 8
    #dbg_declare(ptr %resptr, !1000, !DIExpression(), !1001)
  %0 = load ptr, ptr %resptr, align 8, !dbg !1002
  %1 = getelementptr inbounds nuw %resource_data_t, ptr %0, i32 0, i32 0, !dbg !1002
  %2 = load %tz_gpu_resource_info, ptr %1, align 8, !dbg !1003
  %rinfo = alloca %tz_gpu_resource_info, align 8, !dbg !1003
  store %tz_gpu_resource_info %2, ptr %rinfo, align 8, !dbg !1003
    #dbg_declare(ptr %rinfo, !1004, !DIExpression(), !1005)
  %3 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %rinfo, i32 0, i32 1, !dbg !1006
  %4 = load i64, ptr %3, align 4, !dbg !1006
  ret i64 %4, !dbg !1006
}

define i64 @impl_new_descriptor_pool(ptr %a_param) !dbg !1007 {
entry:
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !1010, !DIExpression(), !1011)
  %0 = load i64, ptr @descriptor_pools_cap, align 4, !dbg !1012
  %1 = icmp eq i64 %0, 0, !dbg !1012
  br i1 %1, label %then, label %ifcont, !dbg !1012

then:                                             ; preds = %entry
  %2 = load ptr, ptr %a, align 8, !dbg !1013
  %3 = call ptr @arena_push(ptr %2, i64 32), !dbg !1013
  store ptr %3, ptr @descriptor_pools_data, align 8, !dbg !1013
  store i64 4, ptr @descriptor_pools_cap, align 4, !dbg !1014
  br label %ifcont, !dbg !1014

ifcont:                                           ; preds = %then, %entry
  %4 = load i64, ptr @descriptor_pools_count, align 4, !dbg !1015
  %5 = load i64, ptr @descriptor_pools_cap, align 4, !dbg !1015
  %6 = icmp ugt i64 %4, %5, !dbg !1015
  br i1 %6, label %then1, label %ifcont2, !dbg !1015

then1:                                            ; preds = %ifcont
  call void @puts(ptr @strlit.149), !dbg !1016
  call void @llvm.debugtrap(), !dbg !1017
  br label %ifcont2, !dbg !1017

ifcont2:                                          ; preds = %then1, %ifcont
  %7 = load i64, ptr @descriptor_pools_count, align 4, !dbg !1018
  %8 = load i64, ptr @descriptor_pools_cap, align 4, !dbg !1018
  %9 = icmp eq i64 %7, %8, !dbg !1018
  br i1 %9, label %then3, label %ifcont4, !dbg !1018

then3:                                            ; preds = %ifcont2
  call void @puts(ptr @strlit.150), !dbg !1019
  call void @llvm.debugtrap(), !dbg !1020
  br label %ifcont4, !dbg !1020

ifcont4:                                          ; preds = %then3, %ifcont2
  %10 = load i64, ptr @MAX_IMAGE_COUNT_PER_PASS, align 4, !dbg !1021
  %11 = trunc i64 %10 to i32, !dbg !1021
  %12 = insertvalue %VkDescriptorPoolSize { i32 1, i32 undef }, i32 %11, 1, !dbg !1021
  %image_limit = alloca %VkDescriptorPoolSize, align 8, !dbg !1021
  store %VkDescriptorPoolSize %12, ptr %image_limit, align 4, !dbg !1021
    #dbg_declare(ptr %image_limit, !1022, !DIExpression(), !1027)
  %13 = load ptr, ptr @null, align 8, !dbg !1028
  %14 = load i64, ptr @frame_overlap, align 4, !dbg !1028
  %15 = mul i64 %14, 256, !dbg !1028
  %16 = trunc i64 %15 to i32, !dbg !1028
  %17 = insertvalue %VkDescriptorPoolCreateInfo { i32 33, ptr undef, i32 undef, i32 undef, i32 undef, ptr undef }, ptr %13, 1, !dbg !1028
  %18 = insertvalue %VkDescriptorPoolCreateInfo %17, i32 2, 2, !dbg !1028
  %19 = insertvalue %VkDescriptorPoolCreateInfo %18, i32 %16, 3, !dbg !1028
  %20 = insertvalue %VkDescriptorPoolCreateInfo %19, i32 1, 4, !dbg !1028
  %21 = insertvalue %VkDescriptorPoolCreateInfo %20, ptr %image_limit, 5, !dbg !1028
  %create = alloca %VkDescriptorPoolCreateInfo, align 8, !dbg !1028
  store %VkDescriptorPoolCreateInfo %21, ptr %create, align 8, !dbg !1028
    #dbg_declare(ptr %create, !1029, !DIExpression(), !1039)
  %newpool = alloca i64, align 8, !dbg !1040
    #dbg_declare(ptr %newpool, !1041, !DIExpression(), !1042)
  %22 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 39), align 8, !dbg !1043
  %23 = load i64, ptr @used_device, align 4, !dbg !1043
  %24 = load ptr, ptr @null, align 8, !dbg !1043
  %25 = call i32 %22(i64 %23, ptr %create, ptr %24, ptr %newpool), !dbg !1043
  call void @vk_check(i32 %25), !dbg !1043
  %26 = load i64, ptr @descriptor_pools_count, align 4, !dbg !1044
  %27 = load ptr, ptr @descriptor_pools_data, align 8, !dbg !1044
  %28 = getelementptr i64, ptr %27, i64 %26, !dbg !1044
  %29 = load i64, ptr %28, align 4, !dbg !1044
  %30 = load i64, ptr %newpool, align 4, !dbg !1044
  store i64 %30, ptr %28, align 4, !dbg !1044
  %31 = load i64, ptr @descriptor_pools_count, align 4, !dbg !1045
  %32 = add i64 %31, 1, !dbg !1045
  store i64 %32, ptr @descriptor_pools_count, align 4, !dbg !1045
  %33 = load i64, ptr @descriptor_pools_count, align 4, !dbg !1045
  %34 = add i64 %33, 1, !dbg !1045
  %35 = load i64, ptr %newpool, align 4, !dbg !1046
  ret i64 %35, !dbg !1046
}

define i1 @impl_try_allocate_descriptors(i64 %pool_param, ptr %sets_data_param, i32 %image_count_param) !dbg !1047 {
entry:
  %pool = alloca i64, align 8
  store i64 %pool_param, ptr %pool, align 4
    #dbg_declare(ptr %pool, !1050, !DIExpression(), !1051)
  %sets_data = alloca ptr, align 8
  store ptr %sets_data_param, ptr %sets_data, align 8
    #dbg_declare(ptr %sets_data, !1052, !DIExpression(), !1051)
  %image_count = alloca i32, align 4
  store i32 %image_count_param, ptr %image_count, align 4
    #dbg_declare(ptr %image_count, !1053, !DIExpression(), !1051)
  %variable_counts = alloca [2 x i32], align 4, !dbg !1054
    #dbg_declare(ptr %variable_counts, !1055, !DIExpression(), !1057)
  %0 = getelementptr [2 x i32], ptr %variable_counts, i64 0, i64 0, !dbg !1058
  %1 = load i32, ptr %0, align 4, !dbg !1058
  %2 = load i32, ptr %image_count, align 4, !dbg !1058
  store i32 %2, ptr %0, align 4, !dbg !1058
  %3 = getelementptr [2 x i32], ptr %variable_counts, i64 0, i64 1, !dbg !1059
  %4 = load i32, ptr %3, align 4, !dbg !1059
  %5 = load i32, ptr %image_count, align 4, !dbg !1059
  store i32 %5, ptr %3, align 4, !dbg !1059
  %6 = load ptr, ptr @null, align 8, !dbg !1060
  %7 = getelementptr [2 x i32], ptr %variable_counts, i64 0, i64 0, !dbg !1060
  %8 = insertvalue %VkDescriptorSetVariableDescriptorCountAllocateInfo { i32 1000161003, ptr undef, i32 undef, ptr undef }, ptr %6, 1, !dbg !1060
  %9 = insertvalue %VkDescriptorSetVariableDescriptorCountAllocateInfo %8, i32 2, 2, !dbg !1060
  %10 = insertvalue %VkDescriptorSetVariableDescriptorCountAllocateInfo %9, ptr %7, 3, !dbg !1060
  %variable_alloc = alloca %VkDescriptorSetVariableDescriptorCountAllocateInfo, align 8, !dbg !1060
  store %VkDescriptorSetVariableDescriptorCountAllocateInfo %10, ptr %variable_alloc, align 8, !dbg !1060
    #dbg_declare(ptr %variable_alloc, !1061, !DIExpression(), !1068)
  %11 = load i64, ptr %pool, align 4, !dbg !1069
  %12 = insertvalue %VkDescriptorSetAllocateInfo { i32 34, ptr undef, i64 undef, i32 undef, ptr undef }, ptr %variable_alloc, 1, !dbg !1069
  %13 = insertvalue %VkDescriptorSetAllocateInfo %12, i64 %11, 2, !dbg !1069
  %14 = insertvalue %VkDescriptorSetAllocateInfo %13, i32 2, 3, !dbg !1069
  %15 = insertvalue %VkDescriptorSetAllocateInfo %14, ptr @set_layouts, 4, !dbg !1069
  %alloc = alloca %VkDescriptorSetAllocateInfo, align 8, !dbg !1069
  store %VkDescriptorSetAllocateInfo %15, ptr %alloc, align 8, !dbg !1069
    #dbg_declare(ptr %alloc, !1070, !DIExpression(), !1078)
  %16 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 41), align 8, !dbg !1079
  %17 = load i64, ptr @used_device, align 4, !dbg !1079
  %18 = load ptr, ptr %sets_data, align 8, !dbg !1079
  %19 = call i32 %16(i64 %17, ptr %alloc, ptr %18), !dbg !1079
  %20 = icmp eq i32 %19, 0, !dbg !1079
  ret i1 %20, !dbg !1079
}

define void @impl_populate_descriptors(ptr %passptr_param, ptr %long_param, ptr %short_param) !dbg !1080 {
entry:
  %passptr = alloca ptr, align 8
  store ptr %passptr_param, ptr %passptr, align 8
    #dbg_declare(ptr %passptr, !1119, !DIExpression(), !1120)
  %long = alloca ptr, align 8
  store ptr %long_param, ptr %long, align 8
    #dbg_declare(ptr %long, !1121, !DIExpression(), !1120)
  %short = alloca ptr, align 8
  store ptr %short_param, ptr %short, align 8
    #dbg_declare(ptr %short, !1122, !DIExpression(), !1120)
  %0 = load ptr, ptr %passptr, align 8, !dbg !1123
  %1 = getelementptr inbounds nuw %pass_data_t, ptr %0, i32 0, i32 0, !dbg !1123
  %2 = load %tz_gpu_pass_info, ptr %1, align 8, !dbg !1124
  %pinfo = alloca %tz_gpu_pass_info, align 8, !dbg !1124
  store %tz_gpu_pass_info %2, ptr %pinfo, align 8, !dbg !1124
    #dbg_declare(ptr %pinfo, !1125, !DIExpression(), !1126)
  %3 = load i64, ptr @descriptor_pools_count, align 4, !dbg !1127
  %4 = icmp eq i64 %3, 0, !dbg !1127
  br i1 %4, label %then, label %ifcont, !dbg !1127

then:                                             ; preds = %entry
  %5 = load ptr, ptr %long, align 8, !dbg !1128
  %6 = call i64 @impl_new_descriptor_pool(ptr %5), !dbg !1128
  br label %ifcont, !dbg !1128

ifcont:                                           ; preds = %then, %entry
  %7 = load i64, ptr @descriptor_pools_count, align 4, !dbg !1128
  %8 = sub i64 %7, 1, !dbg !1128
  %9 = load ptr, ptr @descriptor_pools_data, align 8, !dbg !1128
  %10 = getelementptr i64, ptr %9, i64 %8, !dbg !1128
  %11 = load i64, ptr %10, align 4, !dbg !1128
  %pool = alloca i64, align 8, !dbg !1129
  store i64 %11, ptr %pool, align 4, !dbg !1129
    #dbg_declare(ptr %pool, !1130, !DIExpression(), !1131)
  %image_count = alloca i32, align 4, !dbg !1132
  store i32 0, ptr %image_count, align 4, !dbg !1132
    #dbg_declare(ptr %image_count, !1133, !DIExpression(), !1134)
  %counter = alloca i64, align 8, !dbg !1135
    #dbg_declare(ptr %counter, !1136, !DIExpression(), !1137)
  %cur_resh = alloca i64, align 8, !dbg !1138
    #dbg_declare(ptr %cur_resh, !1139, !DIExpression(), !1140)
  %resptr = alloca ptr, align 8, !dbg !1141
    #dbg_declare(ptr %resptr, !1142, !DIExpression(), !1143)
  store i64 0, ptr %counter, align 4, !dbg !1144
  %12 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 4, !dbg !1144
  %13 = load i64, ptr %counter, align 4, !dbg !1144
  %14 = load i64, ptr %12, align 4, !dbg !1144
  %15 = icmp ult i64 %13, %14, !dbg !1144
  br i1 %15, label %then1, label %whilecont, !dbg !1144

then1:                                            ; preds = %ifcont3, %ifcont
  %16 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 3, !dbg !1145
  %17 = load i64, ptr %counter, align 4, !dbg !1145
  %18 = load ptr, ptr %16, align 8, !dbg !1145
  %19 = getelementptr i64, ptr %18, i64 %17, !dbg !1145
  %20 = load i64, ptr %19, align 4, !dbg !1145
  store i64 %20, ptr %cur_resh, align 4, !dbg !1145
  %21 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !1146
  %22 = load i64, ptr %cur_resh, align 4, !dbg !1146
  %23 = icmp ne i64 %22, %21, !dbg !1146
  br i1 %23, label %then2, label %ifcont3, !dbg !1146

whilecont:                                        ; preds = %ifcont3, %ifcont
  %24 = load i64, ptr %pool, align 4, !dbg !1147
  %25 = load ptr, ptr %passptr, align 8, !dbg !1147
  %26 = getelementptr inbounds nuw %pass_data_t, ptr %25, i32 0, i32 7, !dbg !1147
  %27 = getelementptr [2 x i64], ptr %26, i64 0, i64 0, !dbg !1147
  %28 = load i32, ptr %image_count, align 4, !dbg !1147
  %29 = call i1 @impl_try_allocate_descriptors(i64 %24, ptr %27, i32 %28), !dbg !1147
  %alloc_success = alloca i1, align 1, !dbg !1147
  store i1 %29, ptr %alloc_success, align 1, !dbg !1147
    #dbg_declare(ptr %alloc_success, !1148, !DIExpression(), !1149)
  %30 = load i1, ptr %alloc_success, align 1, !dbg !1150
  %31 = xor i1 %30, true, !dbg !1150
  br i1 %31, label %then10, label %whilecont11, !dbg !1150

then2:                                            ; preds = %then1
  %32 = load i64, ptr @tz_gpu_resource.window_resource, align 4, !dbg !1151
  %33 = load i64, ptr %cur_resh, align 4, !dbg !1151
  %34 = icmp eq i64 %33, %32, !dbg !1151
  br i1 %34, label %then4, label %ifcont5, !dbg !1151

ifcont3:                                          ; preds = %ifcont7, %then1
  %35 = load i64, ptr %counter, align 4, !dbg !1152
  %36 = add i64 %35, 1, !dbg !1152
  store i64 %36, ptr %counter, align 4, !dbg !1152
  %37 = load i64, ptr %counter, align 4, !dbg !1152
  %38 = add i64 %37, 1, !dbg !1152
  %39 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 4, !dbg !1152
  %40 = load i64, ptr %counter, align 4, !dbg !1152
  %41 = load i64, ptr %39, align 4, !dbg !1152
  %42 = icmp ult i64 %40, %41, !dbg !1152
  br i1 %42, label %then1, label %whilecont, !dbg !1152

then4:                                            ; preds = %then2
  %43 = load i32, ptr %image_count, align 4, !dbg !1153
  %44 = sext i32 %43 to i64, !dbg !1153
  %45 = add i64 %44, 1, !dbg !1153
  %46 = trunc i64 %45 to i32, !dbg !1153
  store i32 %46, ptr %image_count, align 4, !dbg !1153
  %47 = load i32, ptr %image_count, align 4, !dbg !1153
  %48 = sext i32 %47 to i64, !dbg !1153
  %49 = add i64 %48, 1, !dbg !1153
  br label %ifcont5, !dbg !1153

ifcont5:                                          ; preds = %then4, %then2
  %50 = load i64, ptr @tz_gpu_resource.window_resource, align 4, !dbg !1154
  %51 = load i64, ptr %cur_resh, align 4, !dbg !1154
  %52 = icmp ne i64 %51, %50, !dbg !1154
  br i1 %52, label %then6, label %ifcont7, !dbg !1154

then6:                                            ; preds = %ifcont5
  %53 = load i64, ptr %cur_resh, align 4, !dbg !1155
  %54 = load ptr, ptr @resources, align 8, !dbg !1155
  %55 = getelementptr %resource_data_t, ptr %54, i64 %53, !dbg !1155
  store ptr %55, ptr %resptr, align 8, !dbg !1155
  %56 = load i64, ptr %cur_resh, align 4, !dbg !1155
  %57 = load ptr, ptr %resptr, align 8, !dbg !1155
  %58 = getelementptr %resource_data_t, ptr %57, i64 %56, !dbg !1155
  %59 = load ptr, ptr %resptr, align 8, !dbg !1156
  %60 = getelementptr inbounds nuw %resource_data_t, ptr %59, i32 0, i32 1, !dbg !1156
  %61 = load i1, ptr %60, align 1, !dbg !1156
  %62 = xor i1 %61, true, !dbg !1156
  br i1 %62, label %then8, label %ifcont9, !dbg !1156

ifcont7:                                          ; preds = %ifcont9, %ifcont5
  br label %ifcont3, !dbg !1152

then8:                                            ; preds = %then6
  %63 = load i32, ptr %image_count, align 4, !dbg !1152
  %64 = sext i32 %63 to i64, !dbg !1152
  %65 = add i64 %64, 1, !dbg !1152
  %66 = trunc i64 %65 to i32, !dbg !1152
  store i32 %66, ptr %image_count, align 4, !dbg !1152
  %67 = load i32, ptr %image_count, align 4, !dbg !1152
  %68 = sext i32 %67 to i64, !dbg !1152
  %69 = add i64 %68, 1, !dbg !1152
  br label %ifcont9, !dbg !1152

ifcont9:                                          ; preds = %then8, %then6
  br label %ifcont7, !dbg !1152

then10:                                           ; preds = %then10, %whilecont
  %70 = load ptr, ptr %long, align 8, !dbg !1157
  %71 = call i64 @impl_new_descriptor_pool(ptr %70), !dbg !1157
  store i64 %71, ptr %pool, align 4, !dbg !1157
  %72 = load i64, ptr %pool, align 4, !dbg !1158
  %73 = load ptr, ptr %passptr, align 8, !dbg !1158
  %74 = getelementptr inbounds nuw %pass_data_t, ptr %73, i32 0, i32 7, !dbg !1158
  %75 = getelementptr [2 x i64], ptr %74, i64 0, i64 0, !dbg !1158
  %76 = load i32, ptr %image_count, align 4, !dbg !1158
  %77 = call i1 @impl_try_allocate_descriptors(i64 %72, ptr %75, i32 %76), !dbg !1158
  store i1 %77, ptr %alloc_success, align 1, !dbg !1158
  %78 = load i1, ptr %alloc_success, align 1, !dbg !1158
  %79 = xor i1 %78, true, !dbg !1158
  br i1 %79, label %then10, label %whilecont11, !dbg !1158

whilecont11:                                      ; preds = %then10, %whilecont
  %image_array_descriptor_binding = alloca i64, align 8, !dbg !1159
  store i64 1, ptr %image_array_descriptor_binding, align 4, !dbg !1159
    #dbg_declare(ptr %image_array_descriptor_binding, !1160, !DIExpression(), !1161)
  %80 = load ptr, ptr %short, align 8, !dbg !1162
  %81 = load i32, ptr %image_count, align 4, !dbg !1162
  %82 = load i64, ptr @frame_overlap, align 4, !dbg !1162
  %83 = sext i32 %81 to i64, !dbg !1162
  %84 = mul i64 %83, %82, !dbg !1162
  %85 = mul i64 20, %84, !dbg !1162
  %86 = call ptr @arena_push(ptr %80, i64 %85), !dbg !1162
  %image_writes = alloca ptr, align 8, !dbg !1162
  store ptr %86, ptr %image_writes, align 8, !dbg !1162
    #dbg_declare(ptr %image_writes, !1163, !DIExpression(), !1170)
  %87 = load ptr, ptr %passptr, align 8, !dbg !1171
  %88 = getelementptr inbounds nuw %pass_data_t, ptr %87, i32 0, i32 1, !dbg !1171
  %89 = load i64, ptr %88, align 4, !dbg !1171
  %90 = insertvalue %VkDescriptorBufferInfo undef, i64 %89, 0, !dbg !1171
  %91 = insertvalue %VkDescriptorBufferInfo %90, i64 0, 1, !dbg !1171
  %92 = insertvalue %VkDescriptorBufferInfo %91, i64 -1, 2, !dbg !1171
  %meta_buffer_write = alloca %VkDescriptorBufferInfo, align 8, !dbg !1171
  store %VkDescriptorBufferInfo %92, ptr %meta_buffer_write, align 4, !dbg !1171
    #dbg_declare(ptr %meta_buffer_write, !1172, !DIExpression(), !1178)
  %descriptor_writes = alloca [4 x %VkWriteDescriptorSet], align 8, !dbg !1179
    #dbg_declare(ptr %descriptor_writes, !1180, !DIExpression(), !1196)
  %93 = getelementptr [4 x %VkWriteDescriptorSet], ptr %descriptor_writes, i64 0, i64 0, !dbg !1197
  %94 = load %VkWriteDescriptorSet, ptr %93, align 8, !dbg !1197
  %95 = load ptr, ptr @null, align 8, !dbg !1197
  %96 = load ptr, ptr %passptr, align 8, !dbg !1197
  %97 = getelementptr inbounds nuw %pass_data_t, ptr %96, i32 0, i32 7, !dbg !1197
  %98 = getelementptr [2 x i64], ptr %97, i64 0, i64 0, !dbg !1197
  %99 = load i64, ptr %98, align 4, !dbg !1197
  %100 = load ptr, ptr @null, align 8, !dbg !1197
  %101 = load ptr, ptr @null, align 8, !dbg !1197
  %102 = insertvalue %VkWriteDescriptorSet { i32 35, ptr undef, i64 undef, i32 undef, i32 undef, i32 undef, i32 undef, ptr undef, ptr undef, ptr undef }, ptr %95, 1, !dbg !1197
  %103 = insertvalue %VkWriteDescriptorSet %102, i64 %99, 2, !dbg !1197
  %104 = insertvalue %VkWriteDescriptorSet %103, i32 0, 3, !dbg !1197
  %105 = insertvalue %VkWriteDescriptorSet %104, i32 0, 4, !dbg !1197
  %106 = insertvalue %VkWriteDescriptorSet %105, i32 1, 5, !dbg !1197
  %107 = insertvalue %VkWriteDescriptorSet %106, i32 7, 6, !dbg !1197
  %108 = insertvalue %VkWriteDescriptorSet %107, ptr %100, 7, !dbg !1197
  %109 = insertvalue %VkWriteDescriptorSet %108, ptr %meta_buffer_write, 8, !dbg !1197
  %110 = insertvalue %VkWriteDescriptorSet %109, ptr %101, 9, !dbg !1197
  store %VkWriteDescriptorSet %110, ptr %93, align 8, !dbg !1197
  %111 = getelementptr [4 x %VkWriteDescriptorSet], ptr %descriptor_writes, i64 0, i64 1, !dbg !1198
  %112 = load %VkWriteDescriptorSet, ptr %111, align 8, !dbg !1198
  %113 = load ptr, ptr @null, align 8, !dbg !1198
  %114 = load ptr, ptr %passptr, align 8, !dbg !1198
  %115 = getelementptr inbounds nuw %pass_data_t, ptr %114, i32 0, i32 7, !dbg !1198
  %116 = getelementptr [2 x i64], ptr %115, i64 0, i64 1, !dbg !1198
  %117 = load i64, ptr %116, align 4, !dbg !1198
  %118 = load ptr, ptr @null, align 8, !dbg !1198
  %119 = load ptr, ptr @null, align 8, !dbg !1198
  %120 = insertvalue %VkWriteDescriptorSet { i32 35, ptr undef, i64 undef, i32 undef, i32 undef, i32 undef, i32 undef, ptr undef, ptr undef, ptr undef }, ptr %113, 1, !dbg !1198
  %121 = insertvalue %VkWriteDescriptorSet %120, i64 %117, 2, !dbg !1198
  %122 = insertvalue %VkWriteDescriptorSet %121, i32 0, 3, !dbg !1198
  %123 = insertvalue %VkWriteDescriptorSet %122, i32 0, 4, !dbg !1198
  %124 = insertvalue %VkWriteDescriptorSet %123, i32 1, 5, !dbg !1198
  %125 = insertvalue %VkWriteDescriptorSet %124, i32 7, 6, !dbg !1198
  %126 = insertvalue %VkWriteDescriptorSet %125, ptr %118, 7, !dbg !1198
  %127 = insertvalue %VkWriteDescriptorSet %126, ptr %meta_buffer_write, 8, !dbg !1198
  %128 = insertvalue %VkWriteDescriptorSet %127, ptr %119, 9, !dbg !1198
  store %VkWriteDescriptorSet %128, ptr %111, align 8, !dbg !1198
  %i = alloca i32, align 4, !dbg !1199
    #dbg_declare(ptr %i, !1200, !DIExpression(), !1201)
  %j = alloca i64, align 8, !dbg !1202
    #dbg_declare(ptr %j, !1203, !DIExpression(), !1204)
  %img_cursor = alloca i64, align 8, !dbg !1205
  store i64 0, ptr %img_cursor, align 4, !dbg !1205
    #dbg_declare(ptr %img_cursor, !1206, !DIExpression(), !1207)
  store i32 0, ptr %i, align 4, !dbg !1208
  %129 = load i32, ptr %i, align 4, !dbg !1208
  %130 = load i64, ptr @frame_overlap, align 4, !dbg !1208
  %131 = trunc i64 %130 to i32, !dbg !1208
  %132 = icmp ult i32 %129, %131, !dbg !1208
  br i1 %132, label %then12, label %whilecont13, !dbg !1208

then12:                                           ; preds = %whilecont15, %whilecont11
  store i64 0, ptr %j, align 4, !dbg !1209
  %133 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 4, !dbg !1209
  %134 = load i64, ptr %j, align 4, !dbg !1209
  %135 = load i64, ptr %133, align 4, !dbg !1209
  %136 = icmp ult i64 %134, %135, !dbg !1209
  br i1 %136, label %then14, label %whilecont15, !dbg !1209

whilecont13:                                      ; preds = %whilecont15, %whilecont11
  %write_count = alloca i32, align 4, !dbg !1210
  store i32 4, ptr %write_count, align 4, !dbg !1210
    #dbg_declare(ptr %write_count, !1211, !DIExpression(), !1212)
  %137 = load i32, ptr %image_count, align 4, !dbg !1213
  %138 = icmp eq i32 %137, 0, !dbg !1213
  br i1 %138, label %then22, label %ifcont23, !dbg !1213

then14:                                           ; preds = %ifcont17, %then12
  %139 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 3, !dbg !1214
  %140 = load i64, ptr %j, align 4, !dbg !1214
  %141 = load ptr, ptr %139, align 8, !dbg !1214
  %142 = getelementptr i64, ptr %141, i64 %140, !dbg !1214
  %143 = load i64, ptr %142, align 4, !dbg !1214
  store i64 %143, ptr %cur_resh, align 4, !dbg !1214
  %144 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !1215
  %145 = load i64, ptr %cur_resh, align 4, !dbg !1215
  %146 = icmp ne i64 %145, %144, !dbg !1215
  br i1 %146, label %then16, label %ifcont17, !dbg !1215

whilecont15:                                      ; preds = %ifcont17, %then12
  %147 = load i32, ptr %i, align 4, !dbg !1216
  %148 = sext i32 %147 to i64, !dbg !1216
  %149 = add i64 2, %148, !dbg !1216
  %150 = getelementptr [4 x %VkWriteDescriptorSet], ptr %descriptor_writes, i64 0, i64 %149, !dbg !1216
  %151 = load %VkWriteDescriptorSet, ptr %150, align 8, !dbg !1216
  %152 = load ptr, ptr @null, align 8, !dbg !1216
  %153 = load ptr, ptr %passptr, align 8, !dbg !1216
  %154 = getelementptr inbounds nuw %pass_data_t, ptr %153, i32 0, i32 7, !dbg !1216
  %155 = load i32, ptr %i, align 4, !dbg !1216
  %156 = getelementptr [2 x i64], ptr %154, i64 0, i32 %155, !dbg !1216
  %157 = load i64, ptr %156, align 4, !dbg !1216
  %158 = load i64, ptr %image_array_descriptor_binding, align 4, !dbg !1216
  %159 = trunc i64 %158 to i32, !dbg !1216
  %160 = load i32, ptr %image_count, align 4, !dbg !1216
  %161 = load i32, ptr %i, align 4, !dbg !1216
  %162 = load i32, ptr %image_count, align 4, !dbg !1216
  %163 = mul i32 %161, %162, !dbg !1216
  %164 = load ptr, ptr %image_writes, align 8, !dbg !1216
  %165 = getelementptr %VkDescriptorImageInfo, ptr %164, i32 %163, !dbg !1216
  %166 = load ptr, ptr @null, align 8, !dbg !1216
  %167 = insertvalue %VkWriteDescriptorSet { i32 35, ptr undef, i64 undef, i32 undef, i32 undef, i32 undef, i32 undef, ptr undef, ptr undef, ptr undef }, ptr %152, 1, !dbg !1216
  %168 = insertvalue %VkWriteDescriptorSet %167, i64 %157, 2, !dbg !1216
  %169 = insertvalue %VkWriteDescriptorSet %168, i32 %159, 3, !dbg !1216
  %170 = insertvalue %VkWriteDescriptorSet %169, i32 0, 4, !dbg !1216
  %171 = insertvalue %VkWriteDescriptorSet %170, i32 %160, 5, !dbg !1216
  %172 = insertvalue %VkWriteDescriptorSet %171, i32 1, 6, !dbg !1216
  %173 = insertvalue %VkWriteDescriptorSet %172, ptr %165, 7, !dbg !1216
  %174 = insertvalue %VkWriteDescriptorSet %173, ptr %meta_buffer_write, 8, !dbg !1216
  %175 = insertvalue %VkWriteDescriptorSet %174, ptr %166, 9, !dbg !1216
  store %VkWriteDescriptorSet %175, ptr %150, align 8, !dbg !1216
  %176 = load i32, ptr %i, align 4, !dbg !1216
  %177 = sext i32 %176 to i64, !dbg !1216
  %178 = add i64 %177, 1, !dbg !1216
  %179 = trunc i64 %178 to i32, !dbg !1216
  store i32 %179, ptr %i, align 4, !dbg !1216
  %180 = load i32, ptr %i, align 4, !dbg !1216
  %181 = sext i32 %180 to i64, !dbg !1216
  %182 = add i64 %181, 1, !dbg !1216
  %183 = load i32, ptr %i, align 4, !dbg !1216
  %184 = load i64, ptr @frame_overlap, align 4, !dbg !1216
  %185 = trunc i64 %184 to i32, !dbg !1216
  %186 = icmp ult i32 %183, %185, !dbg !1216
  br i1 %186, label %then12, label %whilecont13, !dbg !1216

then16:                                           ; preds = %then14
  %187 = load i64, ptr @tz_gpu_resource.window_resource, align 4, !dbg !1217
  %188 = load i64, ptr %cur_resh, align 4, !dbg !1217
  %189 = icmp ne i64 %188, %187, !dbg !1217
  br i1 %189, label %then18, label %ifcont19, !dbg !1217

ifcont17:                                         ; preds = %ifcont19, %then14
  %190 = load i64, ptr %j, align 4, !dbg !1218
  %191 = add i64 %190, 1, !dbg !1218
  store i64 %191, ptr %j, align 4, !dbg !1218
  %192 = load i64, ptr %j, align 4, !dbg !1218
  %193 = add i64 %192, 1, !dbg !1218
  %194 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 4, !dbg !1218
  %195 = load i64, ptr %j, align 4, !dbg !1218
  %196 = load i64, ptr %194, align 4, !dbg !1218
  %197 = icmp ult i64 %195, %196, !dbg !1218
  br i1 %197, label %then14, label %whilecont15, !dbg !1218

then18:                                           ; preds = %then16
  %198 = load i64, ptr %cur_resh, align 4, !dbg !1219
  %199 = load ptr, ptr @resources, align 8, !dbg !1219
  %200 = getelementptr %resource_data_t, ptr %199, i64 %198, !dbg !1219
  store ptr %200, ptr %resptr, align 8, !dbg !1219
  %201 = load i64, ptr %cur_resh, align 4, !dbg !1219
  %202 = load ptr, ptr %resptr, align 8, !dbg !1219
  %203 = getelementptr %resource_data_t, ptr %202, i64 %201, !dbg !1219
  %204 = load ptr, ptr %resptr, align 8, !dbg !1220
  %205 = getelementptr inbounds nuw %resource_data_t, ptr %204, i32 0, i32 1, !dbg !1220
  %206 = load i1, ptr %205, align 1, !dbg !1220
  %207 = xor i1 %206, true, !dbg !1220
  br i1 %207, label %then20, label %ifcont21, !dbg !1220

ifcont19:                                         ; preds = %ifcont21, %then16
  br label %ifcont17, !dbg !1218

then20:                                           ; preds = %then18
  %208 = load i64, ptr %img_cursor, align 4, !dbg !1221
  %209 = load ptr, ptr %image_writes, align 8, !dbg !1221
  %210 = getelementptr %VkDescriptorImageInfo, ptr %209, i64 %208, !dbg !1221
  %211 = load %VkDescriptorImageInfo, ptr %210, align 4, !dbg !1221
  %212 = load ptr, ptr %resptr, align 8, !dbg !1221
  %213 = getelementptr inbounds nuw %resource_data_t, ptr %212, i32 0, i32 4, !dbg !1221
  %214 = load i64, ptr %213, align 4, !dbg !1221
  %215 = load ptr, ptr %resptr, align 8, !dbg !1221
  %216 = getelementptr inbounds nuw %resource_data_t, ptr %215, i32 0, i32 3, !dbg !1221
  %217 = load i64, ptr %216, align 4, !dbg !1221
  %218 = insertvalue %VkDescriptorImageInfo undef, i64 %214, 0, !dbg !1221
  %219 = insertvalue %VkDescriptorImageInfo %218, i64 %217, 1, !dbg !1221
  %220 = insertvalue %VkDescriptorImageInfo %219, i32 5, 2, !dbg !1221
  store %VkDescriptorImageInfo %220, ptr %210, align 4, !dbg !1221
  %221 = load i64, ptr %img_cursor, align 4, !dbg !1218
  %222 = add i64 %221, 1, !dbg !1218
  store i64 %222, ptr %img_cursor, align 4, !dbg !1218
  %223 = load i64, ptr %img_cursor, align 4, !dbg !1218
  %224 = add i64 %223, 1, !dbg !1218
  br label %ifcont21, !dbg !1218

ifcont21:                                         ; preds = %then20, %then18
  br label %ifcont19, !dbg !1218

then22:                                           ; preds = %whilecont13
  store i32 2, ptr %write_count, align 4, !dbg !1222
  br label %ifcont23, !dbg !1222

ifcont23:                                         ; preds = %then22, %whilecont13
  %225 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 42), align 8, !dbg !1223
  %226 = load i64, ptr @used_device, align 4, !dbg !1223
  %227 = load i32, ptr %write_count, align 4, !dbg !1223
  %228 = getelementptr [4 x %VkWriteDescriptorSet], ptr %descriptor_writes, i64 0, i64 0, !dbg !1223
  %229 = load ptr, ptr @null, align 8, !dbg !1223
  call void %225(i64 %226, i32 %227, ptr %228, i32 0, ptr %229), !dbg !1223
  ret void, !dbg !1123
}

define i1 @impl_shader_is_compute(i64 %shader_param) !dbg !1224 {
entry:
  %shader = alloca i64, align 8
  store i64 %shader_param, ptr %shader, align 4
    #dbg_declare(ptr %shader, !1225, !DIExpression(), !1226)
  %0 = load i64, ptr %shader, align 4, !dbg !1227
  %1 = load ptr, ptr @shaders, align 8, !dbg !1227
  %2 = getelementptr %shader_data_t, ptr %1, i64 %0, !dbg !1227
  %shadptr = alloca ptr, align 8, !dbg !1228
  store ptr %2, ptr %shadptr, align 8, !dbg !1228
    #dbg_declare(ptr %shadptr, !1229, !DIExpression(), !1237)
  %3 = load ptr, ptr %shadptr, align 8, !dbg !1238
  %4 = getelementptr inbounds nuw %shader_data_t, ptr %3, i32 0, i32 3, !dbg !1238
  %5 = load i64, ptr %4, align 4, !dbg !1238
  %6 = icmp ne i64 %5, 0, !dbg !1238
  ret i1 %6, !dbg !1238
}

define void @impl_begin_scratch_commands() !dbg !1239 {
entry:
  %0 = load ptr, ptr @null, align 8, !dbg !1240
  %1 = load ptr, ptr @null, align 8, !dbg !1240
  %2 = insertvalue %VkCommandBufferBeginInfo { i32 42, ptr undef, i32 undef, ptr undef }, ptr %0, 1, !dbg !1240
  %3 = insertvalue %VkCommandBufferBeginInfo %2, i32 1, 2, !dbg !1240
  %4 = insertvalue %VkCommandBufferBeginInfo %3, ptr %1, 3, !dbg !1240
  %create = alloca %VkCommandBufferBeginInfo, align 8, !dbg !1240
  store %VkCommandBufferBeginInfo %4, ptr %create, align 8, !dbg !1240
    #dbg_declare(ptr %create, !1241, !DIExpression(), !1248)
  %5 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 51), align 8, !dbg !1249
  %6 = load i64, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 1), align 4, !dbg !1249
  %7 = call i32 %5(i64 %6, ptr %create), !dbg !1249
  call void @vk_check(i32 %7), !dbg !1249
  ret void, !dbg !1250
}

define void @impl_end_and_execute_scratch_commands() !dbg !1251 {
entry:
  %0 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 52), align 8, !dbg !1252
  %1 = load i64, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 1), align 4, !dbg !1252
  %2 = call i32 %0(i64 %1), !dbg !1252
  call void @vk_check(i32 %2), !dbg !1252
  %3 = load ptr, ptr @null, align 8, !dbg !1253
  %4 = load ptr, ptr @null, align 8, !dbg !1253
  %5 = load ptr, ptr @null, align 8, !dbg !1253
  %6 = load ptr, ptr @null, align 8, !dbg !1253
  %7 = insertvalue %VkSubmitInfo { i32 4, ptr undef, i32 undef, ptr undef, ptr undef, i32 undef, ptr undef, i32 undef, ptr undef }, ptr %3, 1, !dbg !1253
  %8 = insertvalue %VkSubmitInfo %7, i32 0, 2, !dbg !1253
  %9 = insertvalue %VkSubmitInfo %8, ptr %4, 3, !dbg !1253
  %10 = insertvalue %VkSubmitInfo %9, ptr %5, 4, !dbg !1253
  %11 = insertvalue %VkSubmitInfo %10, i32 1, 5, !dbg !1253
  %12 = insertvalue %VkSubmitInfo %11, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 1), 6, !dbg !1253
  %13 = insertvalue %VkSubmitInfo %12, i32 0, 7, !dbg !1253
  %14 = insertvalue %VkSubmitInfo %13, ptr %6, 8, !dbg !1253
  %submit = alloca %VkSubmitInfo, align 8, !dbg !1253
  store %VkSubmitInfo %14, ptr %submit, align 8, !dbg !1253
    #dbg_declare(ptr %submit, !1254, !DIExpression(), !1266)
  %15 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 57), align 8, !dbg !1267
  %16 = load i64, ptr @graphics_queue, align 4, !dbg !1267
  %17 = load i64, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 2), align 4, !dbg !1267
  %18 = call i32 %15(i64 %16, i32 1, ptr %submit, i64 %17), !dbg !1267
  call void @vk_check(i32 %18), !dbg !1267
  %19 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 58), align 8, !dbg !1268
  %20 = load i64, ptr @used_device, align 4, !dbg !1268
  %21 = call i32 %19(i64 %20, i32 1, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 2), i32 1, i64 -1), !dbg !1268
  call void @vk_check(i32 %21), !dbg !1268
  %22 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 59), align 8, !dbg !1269
  %23 = load i64, ptr @used_device, align 4, !dbg !1269
  %24 = call i32 %22(i64 %23, i32 1, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 2)), !dbg !1269
  call void @vk_check(i32 %24), !dbg !1269
  ret void, !dbg !1270
}

define i64 @impl_create_graphics_pipeline(i64 %shader_param, %tz_gpu_graphics_state %graphics_param, ptr %a_param) !dbg !1271 {
entry:
  %shader = alloca i64, align 8
  store i64 %shader_param, ptr %shader, align 4
    #dbg_declare(ptr %shader, !1274, !DIExpression(), !1275)
  %graphics = alloca %tz_gpu_graphics_state, align 8
  store %tz_gpu_graphics_state %graphics_param, ptr %graphics, align 8
    #dbg_declare(ptr %graphics, !1276, !DIExpression(), !1275)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !1277, !DIExpression(), !1275)
  %0 = load i64, ptr %shader, align 4, !dbg !1278
  %1 = load ptr, ptr @shaders, align 8, !dbg !1278
  %2 = getelementptr %shader_data_t, ptr %1, i64 %0, !dbg !1278
  %shadptr = alloca ptr, align 8, !dbg !1279
  store ptr %2, ptr %shadptr, align 8, !dbg !1279
    #dbg_declare(ptr %shadptr, !1280, !DIExpression(), !1281)
  %3 = load ptr, ptr %shadptr, align 8, !dbg !1279
  %4 = getelementptr inbounds nuw %shader_data_t, ptr %3, i32 0, i32 1, !dbg !1279
  %5 = load i64, ptr %4, align 4, !dbg !1282
  %vertex_shader_module = alloca i64, align 8, !dbg !1282
  store i64 %5, ptr %vertex_shader_module, align 4, !dbg !1282
    #dbg_declare(ptr %vertex_shader_module, !1283, !DIExpression(), !1284)
  %6 = load i64, ptr %vertex_shader_module, align 4, !dbg !1285
  %7 = icmp eq i64 %6, 0, !dbg !1285
  br i1 %7, label %then, label %ifcont, !dbg !1285

then:                                             ; preds = %entry
  call void @puts(ptr @strlit.151), !dbg !1286
  call void @llvm.debugtrap(), !dbg !1287
  br label %ifcont, !dbg !1287

ifcont:                                           ; preds = %then, %entry
  %8 = load ptr, ptr %shadptr, align 8, !dbg !1287
  %9 = getelementptr inbounds nuw %shader_data_t, ptr %8, i32 0, i32 2, !dbg !1287
  %10 = load i64, ptr %9, align 4, !dbg !1288
  %fragment_shader_module = alloca i64, align 8, !dbg !1288
  store i64 %10, ptr %fragment_shader_module, align 4, !dbg !1288
    #dbg_declare(ptr %fragment_shader_module, !1289, !DIExpression(), !1290)
  %11 = load i64, ptr %fragment_shader_module, align 4, !dbg !1291
  %12 = icmp eq i64 %11, 0, !dbg !1291
  br i1 %12, label %then1, label %ifcont2, !dbg !1291

then1:                                            ; preds = %ifcont
  call void @puts(ptr @strlit.152), !dbg !1292
  call void @llvm.debugtrap(), !dbg !1293
  br label %ifcont2, !dbg !1293

ifcont2:                                          ; preds = %then1, %ifcont
  %shader_creates = alloca [2 x %VkPipelineShaderStageCreateInfo], align 8, !dbg !1294
    #dbg_declare(ptr %shader_creates, !1295, !DIExpression(), !1306)
  %13 = getelementptr [2 x %VkPipelineShaderStageCreateInfo], ptr %shader_creates, i64 0, i64 0, !dbg !1307
  %14 = load %VkPipelineShaderStageCreateInfo, ptr %13, align 8, !dbg !1307
  %15 = load ptr, ptr @null, align 8, !dbg !1307
  %16 = load i64, ptr %vertex_shader_module, align 4, !dbg !1307
  %17 = load ptr, ptr @null, align 8, !dbg !1307
  %18 = insertvalue %VkPipelineShaderStageCreateInfo { i32 18, ptr undef, i32 undef, i32 undef, i64 undef, ptr undef, ptr undef }, ptr %15, 1, !dbg !1307
  %19 = insertvalue %VkPipelineShaderStageCreateInfo %18, i32 0, 2, !dbg !1307
  %20 = insertvalue %VkPipelineShaderStageCreateInfo %19, i32 1, 3, !dbg !1307
  %21 = insertvalue %VkPipelineShaderStageCreateInfo %20, i64 %16, 4, !dbg !1307
  %22 = insertvalue %VkPipelineShaderStageCreateInfo %21, ptr @strlit.153, 5, !dbg !1307
  %23 = insertvalue %VkPipelineShaderStageCreateInfo %22, ptr %17, 6, !dbg !1307
  store %VkPipelineShaderStageCreateInfo %23, ptr %13, align 8, !dbg !1307
  %24 = getelementptr [2 x %VkPipelineShaderStageCreateInfo], ptr %shader_creates, i64 0, i64 1, !dbg !1308
  %25 = load %VkPipelineShaderStageCreateInfo, ptr %24, align 8, !dbg !1308
  %26 = load ptr, ptr @null, align 8, !dbg !1308
  %27 = load i64, ptr %fragment_shader_module, align 4, !dbg !1308
  %28 = load ptr, ptr @null, align 8, !dbg !1308
  %29 = insertvalue %VkPipelineShaderStageCreateInfo { i32 18, ptr undef, i32 undef, i32 undef, i64 undef, ptr undef, ptr undef }, ptr %26, 1, !dbg !1308
  %30 = insertvalue %VkPipelineShaderStageCreateInfo %29, i32 0, 2, !dbg !1308
  %31 = insertvalue %VkPipelineShaderStageCreateInfo %30, i32 16, 3, !dbg !1308
  %32 = insertvalue %VkPipelineShaderStageCreateInfo %31, i64 %27, 4, !dbg !1308
  %33 = insertvalue %VkPipelineShaderStageCreateInfo %32, ptr @strlit.154, 5, !dbg !1308
  %34 = insertvalue %VkPipelineShaderStageCreateInfo %33, ptr %28, 6, !dbg !1308
  store %VkPipelineShaderStageCreateInfo %34, ptr %24, align 8, !dbg !1308
  %35 = load ptr, ptr @null, align 8, !dbg !1309
  %36 = load ptr, ptr @null, align 8, !dbg !1309
  %37 = load ptr, ptr @null, align 8, !dbg !1309
  %38 = insertvalue %VkPipelineVertexInputStateCreateInfo { i32 19, ptr undef, i32 undef, i32 undef, ptr undef, i32 undef, ptr undef }, ptr %35, 1, !dbg !1309
  %39 = insertvalue %VkPipelineVertexInputStateCreateInfo %38, i32 0, 2, !dbg !1309
  %40 = insertvalue %VkPipelineVertexInputStateCreateInfo %39, i32 0, 3, !dbg !1309
  %41 = insertvalue %VkPipelineVertexInputStateCreateInfo %40, ptr %36, 4, !dbg !1309
  %42 = insertvalue %VkPipelineVertexInputStateCreateInfo %41, i32 0, 5, !dbg !1309
  %43 = insertvalue %VkPipelineVertexInputStateCreateInfo %42, ptr %37, 6, !dbg !1309
  %vtx = alloca %VkPipelineVertexInputStateCreateInfo, align 8, !dbg !1309
  store %VkPipelineVertexInputStateCreateInfo %43, ptr %vtx, align 8, !dbg !1309
    #dbg_declare(ptr %vtx, !1310, !DIExpression(), !1320)
  %44 = load ptr, ptr @null, align 8, !dbg !1321
  %45 = insertvalue %VkPipelineInputAssemblyStateCreateInfo { i32 20, ptr undef, i32 undef, i32 undef, i32 undef }, ptr %44, 1, !dbg !1321
  %46 = insertvalue %VkPipelineInputAssemblyStateCreateInfo %45, i32 0, 2, !dbg !1321
  %47 = insertvalue %VkPipelineInputAssemblyStateCreateInfo %46, i32 3, 3, !dbg !1321
  %48 = insertvalue %VkPipelineInputAssemblyStateCreateInfo %47, i32 0, 4, !dbg !1321
  %iasm = alloca %VkPipelineInputAssemblyStateCreateInfo, align 8, !dbg !1321
  store %VkPipelineInputAssemblyStateCreateInfo %48, ptr %iasm, align 8, !dbg !1321
    #dbg_declare(ptr %iasm, !1322, !DIExpression(), !1330)
  %49 = load ptr, ptr @null, align 8, !dbg !1331
  %50 = insertvalue %VkPipelineTessellationStateCreateInfo { i32 21, ptr undef, i32 undef, i32 undef }, ptr %49, 1, !dbg !1331
  %51 = insertvalue %VkPipelineTessellationStateCreateInfo %50, i32 0, 2, !dbg !1331
  %52 = insertvalue %VkPipelineTessellationStateCreateInfo %51, i32 3, 3, !dbg !1331
  %tess = alloca %VkPipelineTessellationStateCreateInfo, align 8, !dbg !1331
  store %VkPipelineTessellationStateCreateInfo %52, ptr %tess, align 8, !dbg !1331
    #dbg_declare(ptr %tess, !1332, !DIExpression(), !1339)
  %53 = load ptr, ptr @null, align 8, !dbg !1340
  %54 = load ptr, ptr @null, align 8, !dbg !1340
  %55 = load ptr, ptr @null, align 8, !dbg !1340
  %56 = insertvalue %VkPipelineViewportStateCreateInfo { i32 22, ptr undef, i32 undef, i32 undef, ptr undef, i32 undef, ptr undef }, ptr %53, 1, !dbg !1340
  %57 = insertvalue %VkPipelineViewportStateCreateInfo %56, i32 0, 2, !dbg !1340
  %58 = insertvalue %VkPipelineViewportStateCreateInfo %57, i32 1, 3, !dbg !1340
  %59 = insertvalue %VkPipelineViewportStateCreateInfo %58, ptr %54, 4, !dbg !1340
  %60 = insertvalue %VkPipelineViewportStateCreateInfo %59, i32 1, 5, !dbg !1340
  %61 = insertvalue %VkPipelineViewportStateCreateInfo %60, ptr %55, 6, !dbg !1340
  %vwprt = alloca %VkPipelineViewportStateCreateInfo, align 8, !dbg !1340
  store %VkPipelineViewportStateCreateInfo %61, ptr %vwprt, align 8, !dbg !1340
    #dbg_declare(ptr %vwprt, !1341, !DIExpression(), !1351)
  %cull_bits = alloca i32, align 4, !dbg !1352
    #dbg_declare(ptr %cull_bits, !1353, !DIExpression(), !1354)
  %62 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 7, !dbg !1355
  %63 = load i64, ptr @tz_gpu_cull.both, align 4, !dbg !1355
  %64 = load i64, ptr %62, align 4, !dbg !1355
  %65 = icmp eq i64 %64, %63, !dbg !1355
  br i1 %65, label %then3, label %ifcont4, !dbg !1355

then3:                                            ; preds = %ifcont2
  store i32 3, ptr %cull_bits, align 4, !dbg !1356
  br label %ifcont4, !dbg !1356

ifcont4:                                          ; preds = %then3, %ifcont2
  %66 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 7, !dbg !1357
  %67 = load i64, ptr @tz_gpu_cull.front, align 4, !dbg !1357
  %68 = load i64, ptr %66, align 4, !dbg !1357
  %69 = icmp eq i64 %68, %67, !dbg !1357
  br i1 %69, label %then5, label %ifcont6, !dbg !1357

then5:                                            ; preds = %ifcont4
  store i32 1, ptr %cull_bits, align 4, !dbg !1358
  br label %ifcont6, !dbg !1358

ifcont6:                                          ; preds = %then5, %ifcont4
  %70 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 7, !dbg !1359
  %71 = load i64, ptr @tz_gpu_cull.back, align 4, !dbg !1359
  %72 = load i64, ptr %70, align 4, !dbg !1359
  %73 = icmp eq i64 %72, %71, !dbg !1359
  br i1 %73, label %then7, label %ifcont8, !dbg !1359

then7:                                            ; preds = %ifcont6
  store i32 2, ptr %cull_bits, align 4, !dbg !1360
  br label %ifcont8, !dbg !1360

ifcont8:                                          ; preds = %then7, %ifcont6
  %74 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 7, !dbg !1361
  %75 = load i64, ptr @tz_gpu_cull.none, align 4, !dbg !1361
  %76 = load i64, ptr %74, align 4, !dbg !1361
  %77 = icmp eq i64 %76, %75, !dbg !1361
  br i1 %77, label %then9, label %ifcont10, !dbg !1361

then9:                                            ; preds = %ifcont8
  store i32 0, ptr %cull_bits, align 4, !dbg !1362
  br label %ifcont10, !dbg !1362

ifcont10:                                         ; preds = %then9, %ifcont8
  %78 = load ptr, ptr @null, align 8, !dbg !1363
  %79 = load i32, ptr %cull_bits, align 4, !dbg !1363
  %80 = insertvalue %VkPipelineRasterizationStateCreateInfo { i32 23, ptr undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef, float undef, float undef, float undef }, ptr %78, 1, !dbg !1363
  %81 = insertvalue %VkPipelineRasterizationStateCreateInfo %80, i32 0, 2, !dbg !1363
  %82 = insertvalue %VkPipelineRasterizationStateCreateInfo %81, i32 0, 3, !dbg !1363
  %83 = insertvalue %VkPipelineRasterizationStateCreateInfo %82, i32 0, 4, !dbg !1363
  %84 = insertvalue %VkPipelineRasterizationStateCreateInfo %83, i32 0, 5, !dbg !1363
  %85 = insertvalue %VkPipelineRasterizationStateCreateInfo %84, i32 %79, 6, !dbg !1363
  %86 = insertvalue %VkPipelineRasterizationStateCreateInfo %85, i32 0, 7, !dbg !1363
  %87 = insertvalue %VkPipelineRasterizationStateCreateInfo %86, i32 0, 8, !dbg !1363
  %88 = insertvalue %VkPipelineRasterizationStateCreateInfo %87, float 0.000000e+00, 9, !dbg !1363
  %89 = insertvalue %VkPipelineRasterizationStateCreateInfo %88, float 0.000000e+00, 10, !dbg !1363
  %90 = insertvalue %VkPipelineRasterizationStateCreateInfo %89, float 0.000000e+00, 11, !dbg !1363
  %91 = insertvalue %VkPipelineRasterizationStateCreateInfo %90, float 1.000000e+00, 12, !dbg !1363
  %raster = alloca %VkPipelineRasterizationStateCreateInfo, align 8, !dbg !1363
  store %VkPipelineRasterizationStateCreateInfo %91, ptr %raster, align 8, !dbg !1363
    #dbg_declare(ptr %raster, !1364, !DIExpression(), !1380)
  %92 = load ptr, ptr @null, align 8, !dbg !1381
  %93 = load ptr, ptr @null, align 8, !dbg !1381
  %94 = insertvalue %VkPipelineMultisampleStateCreateInfo { i32 24, ptr undef, i32 undef, i32 undef, i32 undef, float undef, ptr undef, i32 undef, i32 undef }, ptr %92, 1, !dbg !1381
  %95 = insertvalue %VkPipelineMultisampleStateCreateInfo %94, i32 0, 2, !dbg !1381
  %96 = insertvalue %VkPipelineMultisampleStateCreateInfo %95, i32 1, 3, !dbg !1381
  %97 = insertvalue %VkPipelineMultisampleStateCreateInfo %96, i32 0, 4, !dbg !1381
  %98 = insertvalue %VkPipelineMultisampleStateCreateInfo %97, float 1.000000e+00, 5, !dbg !1381
  %99 = insertvalue %VkPipelineMultisampleStateCreateInfo %98, ptr %93, 6, !dbg !1381
  %100 = insertvalue %VkPipelineMultisampleStateCreateInfo %99, i32 0, 7, !dbg !1381
  %101 = insertvalue %VkPipelineMultisampleStateCreateInfo %100, i32 0, 8, !dbg !1381
  %multi = alloca %VkPipelineMultisampleStateCreateInfo, align 8, !dbg !1381
  store %VkPipelineMultisampleStateCreateInfo %101, ptr %multi, align 8, !dbg !1381
    #dbg_declare(ptr %multi, !1382, !DIExpression(), !1394)
  %depthTestEnable = alloca i32, align 4, !dbg !1395
  store i32 0, ptr %depthTestEnable, align 4, !dbg !1395
    #dbg_declare(ptr %depthTestEnable, !1396, !DIExpression(), !1397)
  %depthWriteEnable = alloca i32, align 4, !dbg !1398
  store i32 1, ptr %depthWriteEnable, align 4, !dbg !1398
    #dbg_declare(ptr %depthWriteEnable, !1399, !DIExpression(), !1400)
  %stencil_op_state = alloca %VkStencilOpState, align 8, !dbg !1401
  store %VkStencilOpState zeroinitializer, ptr %stencil_op_state, align 4, !dbg !1401
    #dbg_declare(ptr %stencil_op_state, !1402, !DIExpression(), !1412)
  %102 = load ptr, ptr @null, align 8, !dbg !1413
  %103 = load i32, ptr %depthTestEnable, align 4, !dbg !1413
  %104 = load i32, ptr %depthWriteEnable, align 4, !dbg !1413
  %105 = load %VkStencilOpState, ptr %stencil_op_state, align 4, !dbg !1413
  %106 = load %VkStencilOpState, ptr %stencil_op_state, align 4, !dbg !1413
  %107 = insertvalue %VkPipelineDepthStencilStateCreateInfo { i32 25, ptr undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, %VkStencilOpState undef, %VkStencilOpState undef, float undef, float undef }, ptr %102, 1, !dbg !1413
  %108 = insertvalue %VkPipelineDepthStencilStateCreateInfo %107, i32 0, 2, !dbg !1413
  %109 = insertvalue %VkPipelineDepthStencilStateCreateInfo %108, i32 %103, 3, !dbg !1413
  %110 = insertvalue %VkPipelineDepthStencilStateCreateInfo %109, i32 %104, 4, !dbg !1413
  %111 = insertvalue %VkPipelineDepthStencilStateCreateInfo %110, i32 1, 5, !dbg !1413
  %112 = insertvalue %VkPipelineDepthStencilStateCreateInfo %111, i32 1, 6, !dbg !1413
  %113 = insertvalue %VkPipelineDepthStencilStateCreateInfo %112, i32 0, 7, !dbg !1413
  %114 = insertvalue %VkPipelineDepthStencilStateCreateInfo %113, %VkStencilOpState %105, 8, !dbg !1413
  %115 = insertvalue %VkPipelineDepthStencilStateCreateInfo %114, %VkStencilOpState %106, 9, !dbg !1413
  %116 = insertvalue %VkPipelineDepthStencilStateCreateInfo %115, float 0.000000e+00, 10, !dbg !1413
  %117 = insertvalue %VkPipelineDepthStencilStateCreateInfo %116, float 1.000000e+00, 11, !dbg !1413
  %depth_stencil = alloca %VkPipelineDepthStencilStateCreateInfo, align 8, !dbg !1413
  store %VkPipelineDepthStencilStateCreateInfo %117, ptr %depth_stencil, align 8, !dbg !1413
    #dbg_declare(ptr %depth_stencil, !1414, !DIExpression(), !1429)
  %counter = alloca i64, align 8, !dbg !1430
    #dbg_declare(ptr %counter, !1431, !DIExpression(), !1432)
  %118 = load ptr, ptr %a, align 8, !dbg !1433
  %119 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 3, !dbg !1433
  %120 = load i64, ptr %119, align 4, !dbg !1433
  %121 = mul i64 32, %120, !dbg !1433
  %122 = call ptr @arena_push(ptr %118, i64 %121), !dbg !1433
  %blend_states = alloca ptr, align 8, !dbg !1433
  store ptr %122, ptr %blend_states, align 8, !dbg !1433
    #dbg_declare(ptr %blend_states, !1434, !DIExpression(), !1446)
  store i64 0, ptr %counter, align 4, !dbg !1447
  %123 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 3, !dbg !1447
  %124 = load i64, ptr %counter, align 4, !dbg !1447
  %125 = load i64, ptr %123, align 4, !dbg !1447
  %126 = icmp ult i64 %124, %125, !dbg !1447
  br i1 %126, label %then11, label %whilecont, !dbg !1447

then11:                                           ; preds = %then11, %ifcont10
  %127 = load i64, ptr %counter, align 4, !dbg !1448
  %128 = load ptr, ptr %blend_states, align 8, !dbg !1448
  %129 = getelementptr %VkPipelineColorBlendAttachmentState, ptr %128, i64 %127, !dbg !1448
  %130 = load %VkPipelineColorBlendAttachmentState, ptr %129, align 4, !dbg !1448
  store %VkPipelineColorBlendAttachmentState { i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 15 }, ptr %129, align 4, !dbg !1448
  %131 = load i64, ptr %counter, align 4, !dbg !1448
  %132 = add i64 %131, 1, !dbg !1448
  store i64 %132, ptr %counter, align 4, !dbg !1448
  %133 = load i64, ptr %counter, align 4, !dbg !1448
  %134 = add i64 %133, 1, !dbg !1448
  %135 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 3, !dbg !1448
  %136 = load i64, ptr %counter, align 4, !dbg !1448
  %137 = load i64, ptr %135, align 4, !dbg !1448
  %138 = icmp ult i64 %136, %137, !dbg !1448
  br i1 %138, label %then11, label %whilecont, !dbg !1448

whilecont:                                        ; preds = %then11, %ifcont10
  %139 = load ptr, ptr @null, align 8, !dbg !1449
  %140 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 3, !dbg !1449
  %141 = load i64, ptr %140, align 4, !dbg !1449
  %142 = trunc i64 %141 to i32, !dbg !1449
  %143 = load ptr, ptr %blend_states, align 8, !dbg !1449
  %144 = getelementptr %VkPipelineColorBlendAttachmentState, ptr %143, i64 0, !dbg !1449
  %145 = insertvalue %VkPipelineColorBlendStateCreateInfo { i32 26, ptr undef, i32 undef, i32 undef, i32 undef, i32 undef, ptr undef, [4 x float] undef }, ptr %139, 1, !dbg !1449
  %146 = insertvalue %VkPipelineColorBlendStateCreateInfo %145, i32 0, 2, !dbg !1449
  %147 = insertvalue %VkPipelineColorBlendStateCreateInfo %146, i32 0, 3, !dbg !1449
  %148 = insertvalue %VkPipelineColorBlendStateCreateInfo %147, i32 0, 4, !dbg !1449
  %149 = insertvalue %VkPipelineColorBlendStateCreateInfo %148, i32 %142, 5, !dbg !1449
  %150 = insertvalue %VkPipelineColorBlendStateCreateInfo %149, ptr %144, 6, !dbg !1449
  %blend = alloca %VkPipelineColorBlendStateCreateInfo, align 8, !dbg !1449
  store %VkPipelineColorBlendStateCreateInfo %150, ptr %blend, align 8, !dbg !1449
    #dbg_declare(ptr %blend, !1450, !DIExpression(), !1462)
  %151 = getelementptr inbounds nuw %VkPipelineColorBlendStateCreateInfo, ptr %blend, i32 0, i32 7, !dbg !1463
  %152 = getelementptr [4 x float], ptr %151, i64 0, i64 0, !dbg !1463
  %153 = load float, ptr %152, align 4, !dbg !1463
  store float 0.000000e+00, ptr %152, align 4, !dbg !1463
  %154 = getelementptr inbounds nuw %VkPipelineColorBlendStateCreateInfo, ptr %blend, i32 0, i32 7, !dbg !1464
  %155 = getelementptr [4 x float], ptr %154, i64 0, i64 1, !dbg !1464
  %156 = load float, ptr %155, align 4, !dbg !1464
  store float 0.000000e+00, ptr %155, align 4, !dbg !1464
  %157 = getelementptr inbounds nuw %VkPipelineColorBlendStateCreateInfo, ptr %blend, i32 0, i32 7, !dbg !1465
  %158 = getelementptr [4 x float], ptr %157, i64 0, i64 2, !dbg !1465
  %159 = load float, ptr %158, align 4, !dbg !1465
  store float 0.000000e+00, ptr %158, align 4, !dbg !1465
  %160 = getelementptr inbounds nuw %VkPipelineColorBlendStateCreateInfo, ptr %blend, i32 0, i32 7, !dbg !1466
  %161 = getelementptr [4 x float], ptr %160, i64 0, i64 3, !dbg !1466
  %162 = load float, ptr %161, align 4, !dbg !1466
  store float 0.000000e+00, ptr %161, align 4, !dbg !1466
  %163 = load ptr, ptr %a, align 8, !dbg !1467
  %164 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 3, !dbg !1467
  %165 = load i64, ptr %164, align 4, !dbg !1467
  %166 = mul i64 4, %165, !dbg !1467
  %167 = call ptr @arena_push(ptr %163, i64 %166), !dbg !1467
  %color_formats = alloca ptr, align 8, !dbg !1467
  store ptr %167, ptr %color_formats, align 8, !dbg !1467
    #dbg_declare(ptr %color_formats, !1468, !DIExpression(), !1469)
  store i64 0, ptr %counter, align 4, !dbg !1470
  %168 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 3, !dbg !1470
  %169 = load i64, ptr %counter, align 4, !dbg !1470
  %170 = load i64, ptr %168, align 4, !dbg !1470
  %171 = icmp ult i64 %169, %170, !dbg !1470
  br i1 %171, label %then12, label %whilecont13, !dbg !1470

then12:                                           ; preds = %then12, %whilecont
  %172 = load i64, ptr %counter, align 4, !dbg !1471
  %173 = load ptr, ptr %color_formats, align 8, !dbg !1471
  %174 = getelementptr i32, ptr %173, i64 %172, !dbg !1471
  %175 = load i32, ptr %174, align 4, !dbg !1471
  %176 = load i64, ptr @rgba_format, align 4, !dbg !1471
  %177 = trunc i64 %176 to i32, !dbg !1471
  store i32 %177, ptr %174, align 4, !dbg !1471
  %178 = load i64, ptr %counter, align 4, !dbg !1471
  %179 = add i64 %178, 1, !dbg !1471
  store i64 %179, ptr %counter, align 4, !dbg !1471
  %180 = load i64, ptr %counter, align 4, !dbg !1471
  %181 = add i64 %180, 1, !dbg !1471
  %182 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 3, !dbg !1471
  %183 = load i64, ptr %counter, align 4, !dbg !1471
  %184 = load i64, ptr %182, align 4, !dbg !1471
  %185 = icmp ult i64 %183, %184, !dbg !1471
  br i1 %185, label %then12, label %whilecont13, !dbg !1471

whilecont13:                                      ; preds = %then12, %whilecont
  store i64 0, ptr %counter, align 4, !dbg !1472
  %186 = load ptr, ptr @null, align 8, !dbg !1473
  %187 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %graphics, i32 0, i32 3, !dbg !1473
  %188 = load i64, ptr %187, align 4, !dbg !1473
  %189 = trunc i64 %188 to i32, !dbg !1473
  %190 = load ptr, ptr %color_formats, align 8, !dbg !1473
  %191 = insertvalue %VkPipelineRenderingCreateInfo { i32 1000044002, ptr undef, i32 undef, i32 undef, ptr undef, i32 undef, i32 undef }, ptr %186, 1, !dbg !1473
  %192 = insertvalue %VkPipelineRenderingCreateInfo %191, i32 0, 2, !dbg !1473
  %193 = insertvalue %VkPipelineRenderingCreateInfo %192, i32 %189, 3, !dbg !1473
  %194 = insertvalue %VkPipelineRenderingCreateInfo %193, ptr %190, 4, !dbg !1473
  %195 = insertvalue %VkPipelineRenderingCreateInfo %194, i32 126, 5, !dbg !1473
  %196 = insertvalue %VkPipelineRenderingCreateInfo %195, i32 0, 6, !dbg !1473
  %rendering = alloca %VkPipelineRenderingCreateInfo, align 8, !dbg !1473
  store %VkPipelineRenderingCreateInfo %196, ptr %rendering, align 8, !dbg !1473
    #dbg_declare(ptr %rendering, !1474, !DIExpression(), !1484)
  %dynamic_states = alloca [2 x i32], align 4, !dbg !1485
    #dbg_declare(ptr %dynamic_states, !1486, !DIExpression(), !1487)
  %197 = getelementptr [2 x i32], ptr %dynamic_states, i64 0, i64 0, !dbg !1488
  %198 = load i32, ptr %197, align 4, !dbg !1488
  store i32 0, ptr %197, align 4, !dbg !1488
  %199 = getelementptr [2 x i32], ptr %dynamic_states, i64 0, i64 1, !dbg !1489
  %200 = load i32, ptr %199, align 4, !dbg !1489
  store i32 1, ptr %199, align 4, !dbg !1489
  %201 = load ptr, ptr @null, align 8, !dbg !1490
  %202 = getelementptr [2 x i32], ptr %dynamic_states, i64 0, i64 0, !dbg !1490
  %203 = insertvalue %VkPipelineDynamicStateCreateInfo { i32 27, ptr undef, i32 undef, i32 undef, ptr undef }, ptr %201, 1, !dbg !1490
  %204 = insertvalue %VkPipelineDynamicStateCreateInfo %203, i32 0, 2, !dbg !1490
  %205 = insertvalue %VkPipelineDynamicStateCreateInfo %204, i32 2, 3, !dbg !1490
  %206 = insertvalue %VkPipelineDynamicStateCreateInfo %205, ptr %202, 4, !dbg !1490
  %dyn = alloca %VkPipelineDynamicStateCreateInfo, align 8, !dbg !1490
  store %VkPipelineDynamicStateCreateInfo %206, ptr %dyn, align 8, !dbg !1490
    #dbg_declare(ptr %dyn, !1491, !DIExpression(), !1499)
  %207 = getelementptr [2 x %VkPipelineShaderStageCreateInfo], ptr %shader_creates, i64 0, i64 0, !dbg !1500
  %208 = load i64, ptr @pipeline_layout, align 4, !dbg !1500
  %209 = insertvalue %VkGraphicsPipelineCreateInfo { i32 28, ptr undef, i32 undef, i32 undef, ptr undef, ptr undef, ptr undef, ptr undef, ptr undef, ptr undef, ptr undef, ptr undef, ptr undef, ptr undef, i64 undef, i64 undef, i32 undef, i64 undef, i32 undef }, ptr %rendering, 1, !dbg !1500
  %210 = insertvalue %VkGraphicsPipelineCreateInfo %209, i32 0, 2, !dbg !1500
  %211 = insertvalue %VkGraphicsPipelineCreateInfo %210, i32 2, 3, !dbg !1500
  %212 = insertvalue %VkGraphicsPipelineCreateInfo %211, ptr %207, 4, !dbg !1500
  %213 = insertvalue %VkGraphicsPipelineCreateInfo %212, ptr %vtx, 5, !dbg !1500
  %214 = insertvalue %VkGraphicsPipelineCreateInfo %213, ptr %iasm, 6, !dbg !1500
  %215 = insertvalue %VkGraphicsPipelineCreateInfo %214, ptr %tess, 7, !dbg !1500
  %216 = insertvalue %VkGraphicsPipelineCreateInfo %215, ptr %vwprt, 8, !dbg !1500
  %217 = insertvalue %VkGraphicsPipelineCreateInfo %216, ptr %raster, 9, !dbg !1500
  %218 = insertvalue %VkGraphicsPipelineCreateInfo %217, ptr %multi, 10, !dbg !1500
  %219 = insertvalue %VkGraphicsPipelineCreateInfo %218, ptr %depth_stencil, 11, !dbg !1500
  %220 = insertvalue %VkGraphicsPipelineCreateInfo %219, ptr %blend, 12, !dbg !1500
  %221 = insertvalue %VkGraphicsPipelineCreateInfo %220, ptr %dyn, 13, !dbg !1500
  %222 = insertvalue %VkGraphicsPipelineCreateInfo %221, i64 %208, 14, !dbg !1500
  %223 = insertvalue %VkGraphicsPipelineCreateInfo %222, i64 0, 15, !dbg !1500
  %224 = insertvalue %VkGraphicsPipelineCreateInfo %223, i32 0, 16, !dbg !1500
  %225 = insertvalue %VkGraphicsPipelineCreateInfo %224, i64 0, 17, !dbg !1500
  %226 = insertvalue %VkGraphicsPipelineCreateInfo %225, i32 -1, 18, !dbg !1500
  %create = alloca %VkGraphicsPipelineCreateInfo, align 8, !dbg !1500
  store %VkGraphicsPipelineCreateInfo %226, ptr %create, align 8, !dbg !1500
    #dbg_declare(ptr %create, !1501, !DIExpression(), !1532)
  %ret = alloca i64, align 8, !dbg !1533
    #dbg_declare(ptr %ret, !1534, !DIExpression(), !1535)
  %227 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 49), align 8, !dbg !1536
  %228 = load i64, ptr @used_device, align 4, !dbg !1536
  %229 = load ptr, ptr @null, align 8, !dbg !1536
  %230 = call i32 %227(i64 %228, i64 0, i32 1, ptr %create, ptr %229, ptr %ret), !dbg !1536
  call void @vk_check(i32 %230), !dbg !1536
  %231 = load i64, ptr %ret, align 4, !dbg !1537
  ret i64 %231, !dbg !1537
}

define i64 @impl_create_compute_pipeline(i64 %shader_param, %tz_gpu_compute_state %compute_param) !dbg !1538 {
entry:
  %shader = alloca i64, align 8
  store i64 %shader_param, ptr %shader, align 4
    #dbg_declare(ptr %shader, !1541, !DIExpression(), !1542)
  %compute = alloca %tz_gpu_compute_state, align 8
  store %tz_gpu_compute_state %compute_param, ptr %compute, align 4
    #dbg_declare(ptr %compute, !1543, !DIExpression(), !1542)
  %0 = load i64, ptr %shader, align 4, !dbg !1544
  %1 = load ptr, ptr @shaders, align 8, !dbg !1544
  %2 = getelementptr %shader_data_t, ptr %1, i64 %0, !dbg !1544
  %shadptr = alloca ptr, align 8, !dbg !1545
  store ptr %2, ptr %shadptr, align 8, !dbg !1545
    #dbg_declare(ptr %shadptr, !1546, !DIExpression(), !1547)
  %3 = load ptr, ptr %shadptr, align 8, !dbg !1545
  %4 = getelementptr inbounds nuw %shader_data_t, ptr %3, i32 0, i32 3, !dbg !1545
  %5 = load i64, ptr %4, align 4, !dbg !1548
  %compute_shader_module = alloca i64, align 8, !dbg !1548
  store i64 %5, ptr %compute_shader_module, align 4, !dbg !1548
    #dbg_declare(ptr %compute_shader_module, !1549, !DIExpression(), !1550)
  %6 = load i64, ptr %compute_shader_module, align 4, !dbg !1551
  %7 = icmp eq i64 %6, 0, !dbg !1551
  br i1 %7, label %then, label %ifcont, !dbg !1551

then:                                             ; preds = %entry
  call void @puts(ptr @strlit.155), !dbg !1552
  call void @llvm.debugtrap(), !dbg !1553
  br label %ifcont, !dbg !1553

ifcont:                                           ; preds = %then, %entry
  %8 = load ptr, ptr @null, align 8, !dbg !1554
  %9 = load ptr, ptr @null, align 8, !dbg !1554
  %10 = load i64, ptr %compute_shader_module, align 4, !dbg !1554
  %11 = load ptr, ptr @null, align 8, !dbg !1554
  %12 = insertvalue %VkPipelineShaderStageCreateInfo { i32 18, ptr undef, i32 undef, i32 undef, i64 undef, ptr undef, ptr undef }, ptr %9, 1, !dbg !1554
  %13 = insertvalue %VkPipelineShaderStageCreateInfo %12, i32 0, 2, !dbg !1554
  %14 = insertvalue %VkPipelineShaderStageCreateInfo %13, i32 32, 3, !dbg !1554
  %15 = insertvalue %VkPipelineShaderStageCreateInfo %14, i64 %10, 4, !dbg !1554
  %16 = insertvalue %VkPipelineShaderStageCreateInfo %15, ptr @strlit.156, 5, !dbg !1554
  %17 = insertvalue %VkPipelineShaderStageCreateInfo %16, ptr %11, 6, !dbg !1554
  %18 = load i64, ptr @pipeline_layout, align 4, !dbg !1554
  %19 = insertvalue %VkComputePipelineCreateInfo { i32 29, ptr undef, i32 undef, %VkPipelineShaderStageCreateInfo undef, i64 undef, i64 undef, i32 undef }, ptr %8, 1, !dbg !1554
  %20 = insertvalue %VkComputePipelineCreateInfo %19, i32 0, 2, !dbg !1554
  %21 = insertvalue %VkComputePipelineCreateInfo %20, %VkPipelineShaderStageCreateInfo %17, 3, !dbg !1554
  %22 = insertvalue %VkComputePipelineCreateInfo %21, i64 %18, 4, !dbg !1554
  %23 = insertvalue %VkComputePipelineCreateInfo %22, i64 0, 5, !dbg !1554
  %24 = insertvalue %VkComputePipelineCreateInfo %23, i32 -1, 6, !dbg !1554
  %create = alloca %VkComputePipelineCreateInfo, align 8, !dbg !1554
  store %VkComputePipelineCreateInfo %24, ptr %create, align 8, !dbg !1554
    #dbg_declare(ptr %create, !1555, !DIExpression(), !1565)
  %ret = alloca i64, align 8, !dbg !1566
    #dbg_declare(ptr %ret, !1567, !DIExpression(), !1568)
  %25 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 48), align 8, !dbg !1569
  %26 = load i64, ptr @used_device, align 4, !dbg !1569
  %27 = load ptr, ptr @null, align 8, !dbg !1569
  %28 = call i32 %25(i64 %26, i64 0, i32 1, ptr %create, ptr %27, ptr %ret), !dbg !1569
  call void @vk_check(i32 %28), !dbg !1569
  %29 = load i64, ptr %ret, align 4, !dbg !1570
  ret i64 %29, !dbg !1570
}

define void @impl_bind_image_mem(i64 %image_param, i64 %imgsize_param) !dbg !1571 {
entry:
  %image = alloca i64, align 8
  store i64 %image_param, ptr %image, align 4
    #dbg_declare(ptr %image, !1574, !DIExpression(), !1575)
  %imgsize = alloca i64, align 8
  store i64 %imgsize_param, ptr %imgsize, align 4
    #dbg_declare(ptr %imgsize, !1576, !DIExpression(), !1575)
  %valloc = alloca ptr, align 8, !dbg !1577
  store ptr getelementptr inbounds nuw (%vallocator_t, ptr @vallocator, i32 0, i32 1), ptr %valloc, align 8, !dbg !1577
    #dbg_declare(ptr %valloc, !1578, !DIExpression(), !1586)
  %0 = load ptr, ptr %valloc, align 8, !dbg !1587
  %1 = getelementptr inbounds nuw %valloc_t, ptr %0, i32 0, i32 2, !dbg !1587
  %2 = load i64, ptr %1, align 4, !dbg !1587
  %3 = load i64, ptr %imgsize, align 4, !dbg !1587
  %4 = add i64 %2, %3, !dbg !1587
  %5 = load ptr, ptr %valloc, align 8, !dbg !1587
  %6 = getelementptr inbounds nuw %valloc_t, ptr %5, i32 0, i32 1, !dbg !1587
  %7 = load i64, ptr %6, align 4, !dbg !1587
  %8 = icmp ugt i64 %4, %7, !dbg !1587
  br i1 %8, label %then, label %ifcont, !dbg !1587

then:                                             ; preds = %entry
  call void @puts(ptr @strlit.157), !dbg !1588
  %9 = load ptr, ptr %valloc, align 8, !dbg !1589
  %10 = getelementptr inbounds nuw %valloc_t, ptr %9, i32 0, i32 2, !dbg !1589
  %11 = load i64, ptr %10, align 4, !dbg !1589
  %12 = load i64, ptr %imgsize, align 4, !dbg !1589
  %13 = add i64 %11, %12, !dbg !1589
  call void @putuint(i64 %13), !dbg !1589
  call void @puts(ptr @strlit.158), !dbg !1590
  %14 = load ptr, ptr %valloc, align 8, !dbg !1591
  %15 = getelementptr inbounds nuw %valloc_t, ptr %14, i32 0, i32 1, !dbg !1591
  %16 = load i64, ptr %15, align 4, !dbg !1591
  call void @putuint(i64 %16), !dbg !1591
  call void @puts(ptr @strlit.159), !dbg !1592
  call void @llvm.debugtrap(), !dbg !1593
  br label %ifcont, !dbg !1593

ifcont:                                           ; preds = %then, %entry
  %memreqs = alloca %VkMemoryRequirements, align 8, !dbg !1594
    #dbg_declare(ptr %memreqs, !1595, !DIExpression(), !1601)
  %17 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 54), align 8, !dbg !1602
  %18 = load i64, ptr @used_device, align 4, !dbg !1602
  %19 = load i64, ptr %image, align 4, !dbg !1602
  call void %17(i64 %18, i64 %19, ptr %memreqs), !dbg !1602
  %20 = getelementptr inbounds nuw %VkMemoryRequirements, ptr %memreqs, i32 0, i32 1, !dbg !1602
  %21 = load ptr, ptr %valloc, align 8, !dbg !1602
  %22 = getelementptr inbounds nuw %valloc_t, ptr %21, i32 0, i32 2, !dbg !1602
  %23 = getelementptr inbounds nuw %VkMemoryRequirements, ptr %memreqs, i32 0, i32 1, !dbg !1602
  %24 = load i64, ptr %22, align 4, !dbg !1602
  %25 = load i64, ptr %23, align 4, !dbg !1602
  %26 = urem i64 %24, %25, !dbg !1602
  %27 = load i64, ptr %20, align 4, !dbg !1602
  %28 = sub i64 %27, %26, !dbg !1602
  %29 = getelementptr inbounds nuw %VkMemoryRequirements, ptr %memreqs, i32 0, i32 1, !dbg !1602
  %30 = load i64, ptr %29, align 4, !dbg !1602
  %31 = urem i64 %28, %30, !dbg !1602
  %padding = alloca i64, align 8, !dbg !1603
  store i64 %31, ptr %padding, align 4, !dbg !1603
    #dbg_declare(ptr %padding, !1604, !DIExpression(), !1605)
  %32 = load ptr, ptr %valloc, align 8, !dbg !1606
  %33 = getelementptr inbounds nuw %valloc_t, ptr %32, i32 0, i32 2, !dbg !1606
  %34 = load ptr, ptr %valloc, align 8, !dbg !1606
  %35 = getelementptr inbounds nuw %valloc_t, ptr %34, i32 0, i32 2, !dbg !1606
  %36 = load i64, ptr %35, align 4, !dbg !1606
  %37 = load i64, ptr %padding, align 4, !dbg !1606
  %38 = add i64 %36, %37, !dbg !1606
  store i64 %38, ptr %33, align 4, !dbg !1606
  %39 = load i64, ptr %33, align 4, !dbg !1606
  %40 = load i64, ptr %padding, align 4, !dbg !1606
  %41 = add i64 %39, %40, !dbg !1606
  %42 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 6), align 8, !dbg !1606
  %43 = load i64, ptr @used_device, align 4, !dbg !1606
  %44 = load i64, ptr %image, align 4, !dbg !1606
  %45 = load ptr, ptr %valloc, align 8, !dbg !1606
  %46 = getelementptr inbounds nuw %valloc_t, ptr %45, i32 0, i32 0, !dbg !1606
  %47 = load i64, ptr %46, align 4, !dbg !1606
  %48 = load ptr, ptr %valloc, align 8, !dbg !1606
  %49 = getelementptr inbounds nuw %valloc_t, ptr %48, i32 0, i32 2, !dbg !1606
  %50 = load i64, ptr %49, align 4, !dbg !1606
  %51 = call i32 %42(i64 %43, i64 %44, i64 %47, i64 %50), !dbg !1606
  %ret = alloca i32, align 4, !dbg !1607
  store i32 %51, ptr %ret, align 4, !dbg !1607
    #dbg_declare(ptr %ret, !1608, !DIExpression(), !1609)
  %52 = load i32, ptr %ret, align 4, !dbg !1610
  %53 = icmp eq i32 %52, -1, !dbg !1610
  br i1 %53, label %then1, label %ifcont2, !dbg !1610

then1:                                            ; preds = %ifcont
  call void @puts(ptr @strlit.160), !dbg !1611
  call void @llvm.debugtrap(), !dbg !1612
  br label %ifcont2, !dbg !1612

ifcont2:                                          ; preds = %then1, %ifcont
  %54 = load i32, ptr %ret, align 4, !dbg !1613
  %55 = icmp eq i32 %54, -2, !dbg !1613
  br i1 %55, label %then3, label %ifcont4, !dbg !1613

then3:                                            ; preds = %ifcont2
  call void @puts(ptr @strlit.161), !dbg !1614
  call void @llvm.debugtrap(), !dbg !1615
  br label %ifcont4, !dbg !1615

ifcont4:                                          ; preds = %then3, %ifcont2
  %56 = load ptr, ptr %valloc, align 8, !dbg !1616
  %57 = getelementptr inbounds nuw %valloc_t, ptr %56, i32 0, i32 2, !dbg !1616
  %58 = load ptr, ptr %valloc, align 8, !dbg !1616
  %59 = getelementptr inbounds nuw %valloc_t, ptr %58, i32 0, i32 2, !dbg !1616
  %60 = load i64, ptr %59, align 4, !dbg !1616
  %61 = load i64, ptr %imgsize, align 4, !dbg !1616
  %62 = add i64 %60, %61, !dbg !1616
  store i64 %62, ptr %57, align 4, !dbg !1616
  %63 = load i64, ptr %57, align 4, !dbg !1616
  %64 = load i64, ptr %imgsize, align 4, !dbg !1616
  %65 = add i64 %63, %64, !dbg !1616
  ret void, !dbg !1617
}

define i1 @impl_need_swapchain(i64 %w_param, i64 %h_param, i64 %wnd_param, ptr %a_param) !dbg !1618 {
entry:
  %w = alloca i64, align 8
  store i64 %w_param, ptr %w, align 4
    #dbg_declare(ptr %w, !1621, !DIExpression(), !1622)
  %h = alloca i64, align 8
  store i64 %h_param, ptr %h, align 4
    #dbg_declare(ptr %h, !1623, !DIExpression(), !1622)
  %wnd = alloca i64, align 8
  store i64 %wnd_param, ptr %wnd, align 4
    #dbg_declare(ptr %wnd, !1624, !DIExpression(), !1622)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !1625, !DIExpression(), !1622)
  %0 = load i64, ptr @surface, align 4, !dbg !1626
  %1 = icmp eq i64 %0, 0, !dbg !1626
  br i1 %1, label %then, label %ifcont, !dbg !1626

then:                                             ; preds = %entry
  %2 = load ptr, ptr @null, align 8, !dbg !1627
  %3 = load ptr, ptr @null, align 8, !dbg !1627
  %4 = call i64 @GetModuleHandleA(ptr %3), !dbg !1627
  %5 = load i64, ptr %wnd, align 4, !dbg !1627
  %6 = insertvalue %VkWin32SurfaceCreateInfoKHR { i32 1000009000, ptr undef, i32 undef, i64 undef, i64 undef }, ptr %2, 1, !dbg !1627
  %7 = insertvalue %VkWin32SurfaceCreateInfoKHR %6, i32 0, 2, !dbg !1627
  %8 = insertvalue %VkWin32SurfaceCreateInfoKHR %7, i64 %4, 3, !dbg !1627
  %9 = insertvalue %VkWin32SurfaceCreateInfoKHR %8, i64 %5, 4, !dbg !1627
  %create = alloca %VkWin32SurfaceCreateInfoKHR, align 8, !dbg !1627
  store %VkWin32SurfaceCreateInfoKHR %9, ptr %create, align 8, !dbg !1627
    #dbg_declare(ptr %create, !1628, !DIExpression(), !1636)
  %10 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 7), align 8, !dbg !1637
  %11 = load i64, ptr @vkinst, align 4, !dbg !1637
  %12 = load ptr, ptr @null, align 8, !dbg !1637
  %13 = call i32 %10(i64 %11, ptr %create, ptr %12, ptr @surface), !dbg !1637
  call void @vk_check(i32 %13), !dbg !1637
  br label %ifcont, !dbg !1638

ifcont:                                           ; preds = %then, %entry
  %14 = load i64, ptr @swapchain_width, align 4, !dbg !1639
  %15 = load i64, ptr %w, align 4, !dbg !1639
  %16 = icmp eq i64 %14, %15, !dbg !1639
  br i1 %16, label %then1, label %ifcont2, !dbg !1639

then1:                                            ; preds = %ifcont
  %17 = load i64, ptr @swapchain_height, align 4, !dbg !1640
  %18 = load i64, ptr %h, align 4, !dbg !1640
  %19 = icmp eq i64 %17, %18, !dbg !1640
  br i1 %19, label %then3, label %ifcont4, !dbg !1640

ifcont2:                                          ; preds = %ifcont4, %ifcont
  call void @puts(ptr @strlit.162), !dbg !1641
  call void @putchar(i8 10), !dbg !1642
  %caps = alloca %VkSurfaceCapabilitiesKHR, align 8, !dbg !1643
    #dbg_declare(ptr %caps, !1644, !DIExpression(), !1661)
  %20 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 24), align 8, !dbg !1662
  %21 = load i64, ptr @used_hardware, align 4, !dbg !1662
  %22 = load i64, ptr @surface, align 4, !dbg !1662
  %23 = call i32 %20(i64 %21, i64 %22, ptr %caps), !dbg !1662
  %24 = load ptr, ptr @null, align 8, !dbg !1663
  %25 = load i64, ptr @surface, align 4, !dbg !1663
  %26 = load i64, ptr @swapchain_format, align 4, !dbg !1663
  %27 = trunc i64 %26 to i32, !dbg !1663
  %28 = load i64, ptr %w, align 4, !dbg !1663
  %29 = trunc i64 %28 to i32, !dbg !1663
  %30 = load i64, ptr %h, align 4, !dbg !1663
  %31 = trunc i64 %30 to i32, !dbg !1663
  %32 = insertvalue %VkExtent2D undef, i32 %29, 0, !dbg !1663
  %33 = insertvalue %VkExtent2D %32, i32 %31, 1, !dbg !1663
  %34 = getelementptr inbounds nuw %VkSurfaceCapabilitiesKHR, ptr %caps, i32 0, i32 7, !dbg !1663
  %35 = load i32, ptr %34, align 4, !dbg !1663
  %36 = load i64, ptr @swapchain, align 4, !dbg !1663
  %37 = insertvalue %VkSwapchainCreateInfoKHR { i32 1000001000, ptr undef, i32 undef, i64 undef, i32 undef, i32 undef, i32 undef, %VkExtent2D undef, i32 undef, i32 undef, i32 undef, i32 undef, ptr undef, i32 undef, i32 undef, i32 undef, i32 undef, i64 undef }, ptr %24, 1, !dbg !1663
  %38 = insertvalue %VkSwapchainCreateInfoKHR %37, i32 0, 2, !dbg !1663
  %39 = insertvalue %VkSwapchainCreateInfoKHR %38, i64 %25, 3, !dbg !1663
  %40 = insertvalue %VkSwapchainCreateInfoKHR %39, i32 2, 4, !dbg !1663
  %41 = insertvalue %VkSwapchainCreateInfoKHR %40, i32 %27, 5, !dbg !1663
  %42 = insertvalue %VkSwapchainCreateInfoKHR %41, i32 0, 6, !dbg !1663
  %43 = insertvalue %VkSwapchainCreateInfoKHR %42, %VkExtent2D %33, 7, !dbg !1663
  %44 = insertvalue %VkSwapchainCreateInfoKHR %43, i32 1, 8, !dbg !1663
  %45 = insertvalue %VkSwapchainCreateInfoKHR %44, i32 18, 9, !dbg !1663
  %46 = insertvalue %VkSwapchainCreateInfoKHR %45, i32 0, 10, !dbg !1663
  %47 = insertvalue %VkSwapchainCreateInfoKHR %46, i32 1, 11, !dbg !1663
  %48 = insertvalue %VkSwapchainCreateInfoKHR %47, ptr @used_qfi, 12, !dbg !1663
  %49 = insertvalue %VkSwapchainCreateInfoKHR %48, i32 %35, 13, !dbg !1663
  %50 = insertvalue %VkSwapchainCreateInfoKHR %49, i32 1, 14, !dbg !1663
  %51 = insertvalue %VkSwapchainCreateInfoKHR %50, i32 0, 15, !dbg !1663
  %52 = insertvalue %VkSwapchainCreateInfoKHR %51, i32 0, 16, !dbg !1663
  %53 = insertvalue %VkSwapchainCreateInfoKHR %52, i64 %36, 17, !dbg !1663
  %swch_create = alloca %VkSwapchainCreateInfoKHR, align 8, !dbg !1663
  store %VkSwapchainCreateInfoKHR %53, ptr %swch_create, align 8, !dbg !1663
    #dbg_declare(ptr %swch_create, !1664, !DIExpression(), !1685)
  %54 = load i64, ptr @swapchain, align 4, !dbg !1686
  %old_swapchain = alloca i64, align 8, !dbg !1686
  store i64 %54, ptr %old_swapchain, align 4, !dbg !1686
    #dbg_declare(ptr %old_swapchain, !1687, !DIExpression(), !1688)
  %55 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 9), align 8, !dbg !1689
  %56 = load i64, ptr @used_device, align 4, !dbg !1689
  %57 = load ptr, ptr @null, align 8, !dbg !1689
  %58 = call i32 %55(i64 %56, ptr %swch_create, ptr %57, ptr @swapchain), !dbg !1689
  call void @vk_check(i32 %58), !dbg !1689
  %59 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 11), align 8, !dbg !1690
  %60 = load i64, ptr @used_device, align 4, !dbg !1690
  %61 = load i64, ptr @swapchain, align 4, !dbg !1690
  %62 = load ptr, ptr @null, align 8, !dbg !1690
  %63 = call i32 %59(i64 %60, i64 %61, ptr @swapchain_image_count, ptr %62), !dbg !1690
  %64 = load i32, ptr @swapchain_image_count, align 4, !dbg !1691
  %65 = load i64, ptr @swapchain_images_cap, align 4, !dbg !1691
  %66 = zext i32 %64 to i64, !dbg !1691
  %67 = icmp ne i64 %65, %66, !dbg !1691
  br i1 %67, label %then5, label %ifcont6, !dbg !1691

then3:                                            ; preds = %then1
  ret i1 false, !dbg !1692

ifcont4:                                          ; preds = %then1
  br label %ifcont2, !dbg !1692

then5:                                            ; preds = %ifcont2
  %68 = load ptr, ptr %a, align 8, !dbg !1693
  %69 = load i32, ptr @swapchain_image_count, align 4, !dbg !1693
  %70 = sext i32 %69 to i64, !dbg !1693
  %71 = mul i64 8, %70, !dbg !1693
  %72 = call ptr @arena_push(ptr %68, i64 %71), !dbg !1693
  store ptr %72, ptr @swapchain_images, align 8, !dbg !1693
  %73 = load i32, ptr @swapchain_image_count, align 4, !dbg !1694
  %74 = zext i32 %73 to i64, !dbg !1694
  store i64 %74, ptr @swapchain_images_cap, align 4, !dbg !1694
  br label %ifcont6, !dbg !1694

ifcont6:                                          ; preds = %then5, %ifcont2
  %75 = load i32, ptr @swapchain_image_count, align 4, !dbg !1695
  %76 = load i64, ptr @swapchain_views_cap, align 4, !dbg !1695
  %77 = zext i32 %75 to i64, !dbg !1695
  %78 = icmp ne i64 %76, %77, !dbg !1695
  br i1 %78, label %then7, label %ifcont8, !dbg !1695

then7:                                            ; preds = %ifcont6
  %79 = load ptr, ptr %a, align 8, !dbg !1696
  %80 = load i32, ptr @swapchain_image_count, align 4, !dbg !1696
  %81 = sext i32 %80 to i64, !dbg !1696
  %82 = mul i64 8, %81, !dbg !1696
  %83 = call ptr @arena_push(ptr %79, i64 %82), !dbg !1696
  store ptr %83, ptr @swapchain_views, align 8, !dbg !1696
  %84 = load i32, ptr @swapchain_image_count, align 4, !dbg !1697
  %85 = zext i32 %84 to i64, !dbg !1697
  store i64 %85, ptr @swapchain_views_cap, align 4, !dbg !1697
  br label %ifcont8, !dbg !1697

ifcont8:                                          ; preds = %then7, %ifcont6
  %86 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 11), align 8, !dbg !1698
  %87 = load i64, ptr @used_device, align 4, !dbg !1698
  %88 = load i64, ptr @swapchain, align 4, !dbg !1698
  %89 = load ptr, ptr @swapchain_images, align 8, !dbg !1698
  %90 = call i32 %86(i64 %87, i64 %88, ptr @swapchain_image_count, ptr %89), !dbg !1698
  %counter = alloca i32, align 4, !dbg !1699
    #dbg_declare(ptr %counter, !1700, !DIExpression(), !1701)
  %91 = load i64, ptr %old_swapchain, align 4, !dbg !1702
  %92 = icmp ne i64 %91, 0, !dbg !1702
  br i1 %92, label %then9, label %ifcont10, !dbg !1702

then9:                                            ; preds = %ifcont8
  store i32 0, ptr %counter, align 4, !dbg !1703
  %93 = load i32, ptr %counter, align 4, !dbg !1703
  %94 = load i32, ptr @swapchain_image_count, align 4, !dbg !1703
  %95 = icmp ult i32 %93, %94, !dbg !1703
  br i1 %95, label %then11, label %whilecont, !dbg !1703

ifcont10:                                         ; preds = %whilecont, %ifcont8
  %96 = load ptr, ptr @null, align 8, !dbg !1704
  %97 = load i64, ptr @swapchain_format, align 4, !dbg !1704
  %98 = trunc i64 %97 to i32, !dbg !1704
  %99 = insertvalue %VkImageViewCreateInfo { i32 15, ptr undef, i32 undef, i64 undef, i32 undef, i32 undef, %VkComponentMapping undef, %VkImageSubresourceRange undef }, ptr %96, 1, !dbg !1704
  %100 = insertvalue %VkImageViewCreateInfo %99, i32 0, 2, !dbg !1704
  %101 = insertvalue %VkImageViewCreateInfo %100, i64 0, 3, !dbg !1704
  %102 = insertvalue %VkImageViewCreateInfo %101, i32 1, 4, !dbg !1704
  %103 = insertvalue %VkImageViewCreateInfo %102, i32 %98, 5, !dbg !1704
  %104 = insertvalue %VkImageViewCreateInfo %103, %VkComponentMapping zeroinitializer, 6, !dbg !1704
  %105 = insertvalue %VkImageViewCreateInfo %104, %VkImageSubresourceRange { i32 1, i32 0, i32 1, i32 0, i32 1 }, 7, !dbg !1704
  %view_create = alloca %VkImageViewCreateInfo, align 8, !dbg !1704
  store %VkImageViewCreateInfo %105, ptr %view_create, align 8, !dbg !1704
    #dbg_declare(ptr %view_create, !1705, !DIExpression(), !1729)
  store i32 0, ptr %counter, align 4, !dbg !1730
  %106 = load i32, ptr %counter, align 4, !dbg !1730
  %107 = load i32, ptr @swapchain_image_count, align 4, !dbg !1730
  %108 = icmp ult i32 %106, %107, !dbg !1730
  br i1 %108, label %then12, label %whilecont13, !dbg !1730

then11:                                           ; preds = %then11, %then9
  %109 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 17), align 8, !dbg !1731
  %110 = load i64, ptr @used_device, align 4, !dbg !1731
  %111 = load i32, ptr %counter, align 4, !dbg !1731
  %112 = load ptr, ptr @swapchain_views, align 8, !dbg !1731
  %113 = getelementptr i64, ptr %112, i32 %111, !dbg !1731
  %114 = load i64, ptr %113, align 4, !dbg !1731
  %115 = load ptr, ptr @null, align 8, !dbg !1731
  call void %109(i64 %110, i64 %114, ptr %115), !dbg !1731
  %116 = load i32, ptr %counter, align 4, !dbg !1731
  %117 = sext i32 %116 to i64, !dbg !1731
  %118 = add i64 %117, 1, !dbg !1731
  %119 = trunc i64 %118 to i32, !dbg !1731
  store i32 %119, ptr %counter, align 4, !dbg !1731
  %120 = load i32, ptr %counter, align 4, !dbg !1731
  %121 = sext i32 %120 to i64, !dbg !1731
  %122 = add i64 %121, 1, !dbg !1731
  %123 = load i32, ptr %counter, align 4, !dbg !1731
  %124 = load i32, ptr @swapchain_image_count, align 4, !dbg !1731
  %125 = icmp ult i32 %123, %124, !dbg !1731
  br i1 %125, label %then11, label %whilecont, !dbg !1731

whilecont:                                        ; preds = %then11, %then9
  %126 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 10), align 8, !dbg !1732
  %127 = load i64, ptr @used_device, align 4, !dbg !1732
  %128 = load i64, ptr %old_swapchain, align 4, !dbg !1732
  %129 = load ptr, ptr @null, align 8, !dbg !1732
  call void %126(i64 %127, i64 %128, ptr %129), !dbg !1732
  br label %ifcont10, !dbg !1732

then12:                                           ; preds = %then12, %ifcont10
  %130 = getelementptr inbounds nuw %VkImageViewCreateInfo, ptr %view_create, i32 0, i32 3, !dbg !1733
  %131 = load i32, ptr %counter, align 4, !dbg !1733
  %132 = load ptr, ptr @swapchain_images, align 8, !dbg !1733
  %133 = getelementptr i64, ptr %132, i32 %131, !dbg !1733
  %134 = load i64, ptr %133, align 4, !dbg !1733
  store i64 %134, ptr %130, align 4, !dbg !1733
  %135 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 16), align 8, !dbg !1734
  %136 = load i64, ptr @used_device, align 4, !dbg !1734
  %137 = load ptr, ptr @null, align 8, !dbg !1734
  %138 = load i32, ptr %counter, align 4, !dbg !1734
  %139 = load ptr, ptr @swapchain_views, align 8, !dbg !1734
  %140 = getelementptr i64, ptr %139, i32 %138, !dbg !1734
  %141 = call i32 %135(i64 %136, ptr %view_create, ptr %137, ptr %140), !dbg !1734
  call void @vk_check(i32 %141), !dbg !1734
  %142 = load i32, ptr %counter, align 4, !dbg !1734
  %143 = sext i32 %142 to i64, !dbg !1734
  %144 = add i64 %143, 1, !dbg !1734
  %145 = trunc i64 %144 to i32, !dbg !1734
  store i32 %145, ptr %counter, align 4, !dbg !1734
  %146 = load i32, ptr %counter, align 4, !dbg !1734
  %147 = sext i32 %146 to i64, !dbg !1734
  %148 = add i64 %147, 1, !dbg !1734
  %149 = load i32, ptr %counter, align 4, !dbg !1734
  %150 = load i32, ptr @swapchain_image_count, align 4, !dbg !1734
  %151 = icmp ult i32 %149, %150, !dbg !1734
  br i1 %151, label %then12, label %whilecont13, !dbg !1734

whilecont13:                                      ; preds = %then12, %ifcont10
  %152 = load i64, ptr @system_image, align 4, !dbg !1735
  %153 = icmp ne i64 %152, 0, !dbg !1735
  br i1 %153, label %then14, label %ifcont15, !dbg !1735

then14:                                           ; preds = %whilecont13
  %154 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 17), align 8, !dbg !1736
  %155 = load i64, ptr @used_device, align 4, !dbg !1736
  %156 = load i64, ptr @system_image_view, align 4, !dbg !1736
  %157 = load ptr, ptr @null, align 8, !dbg !1736
  call void %154(i64 %155, i64 %156, ptr %157), !dbg !1736
  %158 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 15), align 8, !dbg !1737
  %159 = load i64, ptr @used_device, align 4, !dbg !1737
  %160 = load i64, ptr @system_image, align 4, !dbg !1737
  %161 = load ptr, ptr @null, align 8, !dbg !1737
  call void %158(i64 %159, i64 %160, ptr %161), !dbg !1737
  br label %ifcont15, !dbg !1737

ifcont15:                                         ; preds = %then14, %whilecont13
  %162 = load ptr, ptr @null, align 8, !dbg !1738
  %163 = load i64, ptr @rgba_format, align 4, !dbg !1738
  %164 = trunc i64 %163 to i32, !dbg !1738
  %165 = load i64, ptr %w, align 4, !dbg !1738
  %166 = trunc i64 %165 to i32, !dbg !1738
  %167 = load i64, ptr %h, align 4, !dbg !1738
  %168 = trunc i64 %167 to i32, !dbg !1738
  %169 = insertvalue %VkExtent3D undef, i32 %166, 0, !dbg !1738
  %170 = insertvalue %VkExtent3D %169, i32 %168, 1, !dbg !1738
  %171 = insertvalue %VkExtent3D %170, i32 1, 2, !dbg !1738
  %172 = insertvalue %VkImageCreateInfo { i32 14, ptr undef, i32 undef, i32 undef, i32 undef, %VkExtent3D undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, ptr undef, i32 undef }, ptr %162, 1, !dbg !1738
  %173 = insertvalue %VkImageCreateInfo %172, i32 0, 2, !dbg !1738
  %174 = insertvalue %VkImageCreateInfo %173, i32 1, 3, !dbg !1738
  %175 = insertvalue %VkImageCreateInfo %174, i32 %164, 4, !dbg !1738
  %176 = insertvalue %VkImageCreateInfo %175, %VkExtent3D %171, 5, !dbg !1738
  %177 = insertvalue %VkImageCreateInfo %176, i32 1, 6, !dbg !1738
  %178 = insertvalue %VkImageCreateInfo %177, i32 1, 7, !dbg !1738
  %179 = insertvalue %VkImageCreateInfo %178, i32 1, 8, !dbg !1738
  %180 = insertvalue %VkImageCreateInfo %179, i32 0, 9, !dbg !1738
  %181 = insertvalue %VkImageCreateInfo %180, i32 17, 10, !dbg !1738
  %182 = insertvalue %VkImageCreateInfo %181, i32 0, 11, !dbg !1738
  %183 = insertvalue %VkImageCreateInfo %182, i32 1, 12, !dbg !1738
  %184 = insertvalue %VkImageCreateInfo %183, ptr @used_qfi, 13, !dbg !1738
  %185 = insertvalue %VkImageCreateInfo %184, i32 0, 14, !dbg !1738
  %system_image_create = alloca %VkImageCreateInfo, align 8, !dbg !1738
  store %VkImageCreateInfo %185, ptr %system_image_create, align 8, !dbg !1738
    #dbg_declare(ptr %system_image_create, !1739, !DIExpression(), !1762)
  %186 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 14), align 8, !dbg !1763
  %187 = load i64, ptr @used_device, align 4, !dbg !1763
  %188 = load ptr, ptr @null, align 8, !dbg !1763
  %189 = call i32 %186(i64 %187, ptr %system_image_create, ptr %188, ptr @system_image), !dbg !1763
  call void @vk_check(i32 %189), !dbg !1763
  %190 = load i64, ptr @system_image, align 4, !dbg !1764
  %191 = load i64, ptr %w, align 4, !dbg !1764
  %192 = load i64, ptr %h, align 4, !dbg !1764
  %193 = mul i64 %191, %192, !dbg !1764
  %194 = mul i64 %193, 4, !dbg !1764
  call void @impl_bind_image_mem(i64 %190, i64 %194), !dbg !1764
  %195 = getelementptr inbounds nuw %VkImageViewCreateInfo, ptr %view_create, i32 0, i32 3, !dbg !1765
  %196 = load i64, ptr @system_image, align 4, !dbg !1765
  store i64 %196, ptr %195, align 4, !dbg !1765
  %197 = getelementptr inbounds nuw %VkImageViewCreateInfo, ptr %view_create, i32 0, i32 5, !dbg !1766
  %198 = load i64, ptr @rgba_format, align 4, !dbg !1766
  %199 = trunc i64 %198 to i32, !dbg !1766
  store i32 %199, ptr %197, align 4, !dbg !1766
  %200 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 16), align 8, !dbg !1767
  %201 = load i64, ptr @used_device, align 4, !dbg !1767
  %202 = load ptr, ptr @null, align 8, !dbg !1767
  %203 = call i32 %200(i64 %201, ptr %view_create, ptr %202, ptr @system_image_view), !dbg !1767
  call void @vk_check(i32 %203), !dbg !1767
  %204 = load i64, ptr %w, align 4, !dbg !1768
  store i64 %204, ptr @swapchain_width, align 4, !dbg !1768
  %205 = load i64, ptr %h, align 4, !dbg !1769
  store i64 %205, ptr @swapchain_height, align 4, !dbg !1769
  ret i1 true, !dbg !1770
}

define i1 @impl_require_swapchain(ptr %a_param) !dbg !1771 {
entry:
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !1774, !DIExpression(), !1775)
  %0 = load i64, ptr @target_window, align 4, !dbg !1776
  %1 = call %vec2u32 @tz_wnd_get_dimensions(i64 %0), !dbg !1776
  %windims = alloca %vec2u32, align 8, !dbg !1776
  store %vec2u32 %1, ptr %windims, align 4, !dbg !1776
    #dbg_declare(ptr %windims, !1777, !DIExpression(), !1778)
  %2 = getelementptr inbounds nuw %vec2u32, ptr %windims, i32 0, i32 0, !dbg !1776
  %3 = load i32, ptr %2, align 4, !dbg !1779
  %x = alloca i32, align 4, !dbg !1779
  store i32 %3, ptr %x, align 4, !dbg !1779
    #dbg_declare(ptr %x, !1780, !DIExpression(), !1781)
  %4 = getelementptr inbounds nuw %vec2u32, ptr %windims, i32 0, i32 1, !dbg !1779
  %5 = load i32, ptr %4, align 4, !dbg !1782
  %y = alloca i32, align 4, !dbg !1782
  store i32 %5, ptr %y, align 4, !dbg !1782
    #dbg_declare(ptr %y, !1783, !DIExpression(), !1784)
  %6 = load i32, ptr %x, align 4, !dbg !1785
  %7 = icmp eq i32 %6, 0, !dbg !1785
  br i1 %7, label %then, label %ifcont, !dbg !1785

then:                                             ; preds = %entry
  store i64 0, ptr @swapchain_width, align 4, !dbg !1786
  store i64 0, ptr @swapchain_height, align 4, !dbg !1787
  br label %ifcont, !dbg !1787

ifcont:                                           ; preds = %then, %entry
  %8 = load i32, ptr %y, align 4, !dbg !1788
  %9 = icmp eq i32 %8, 0, !dbg !1788
  br i1 %9, label %then1, label %ifcont2, !dbg !1788

then1:                                            ; preds = %ifcont
  store i64 0, ptr @swapchain_width, align 4, !dbg !1789
  store i64 0, ptr @swapchain_height, align 4, !dbg !1790
  br label %ifcont2, !dbg !1790

ifcont2:                                          ; preds = %then1, %ifcont
  %10 = load i32, ptr %x, align 4, !dbg !1791
  %11 = zext i32 %10 to i64, !dbg !1791
  %12 = load i32, ptr %y, align 4, !dbg !1791
  %13 = zext i32 %12 to i64, !dbg !1791
  %14 = load i64, ptr @target_window, align 4, !dbg !1791
  %15 = load ptr, ptr %a, align 8, !dbg !1791
  %16 = call i1 @impl_need_swapchain(i64 %11, i64 %13, i64 %14, ptr %15), !dbg !1791
  ret i1 %16, !dbg !1791
}

define %vec2u32 @impl_get_pass_colour_target_dimensions(ptr %passptr_param) !dbg !1792 {
entry:
  %passptr = alloca ptr, align 8
  store ptr %passptr_param, ptr %passptr, align 8
    #dbg_declare(ptr %passptr, !1795, !DIExpression(), !1796)
  %0 = load ptr, ptr %passptr, align 8, !dbg !1797
  %1 = getelementptr inbounds nuw %pass_data_t, ptr %0, i32 0, i32 0, !dbg !1797
  %2 = load %tz_gpu_pass_info, ptr %1, align 8, !dbg !1798
  %pinfo = alloca %tz_gpu_pass_info, align 8, !dbg !1798
  store %tz_gpu_pass_info %2, ptr %pinfo, align 8, !dbg !1798
    #dbg_declare(ptr %pinfo, !1799, !DIExpression(), !1800)
  %3 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 0, !dbg !1798
  %4 = load %tz_gpu_graphics_state, ptr %3, align 8, !dbg !1801
  %ginfo = alloca %tz_gpu_graphics_state, align 8, !dbg !1801
  store %tz_gpu_graphics_state %4, ptr %ginfo, align 8, !dbg !1801
    #dbg_declare(ptr %ginfo, !1802, !DIExpression(), !1803)
  %5 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 3, !dbg !1804
  %6 = load i64, ptr %5, align 4, !dbg !1804
  %7 = icmp eq i64 %6, 0, !dbg !1804
  br i1 %7, label %then, label %ifcont, !dbg !1804

then:                                             ; preds = %entry
  call void @puts(ptr @strlit.163), !dbg !1805
  br label %ifcont, !dbg !1805

ifcont:                                           ; preds = %then, %entry
  %8 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 2, !dbg !1805
  %9 = load ptr, ptr %8, align 8, !dbg !1805
  %10 = getelementptr i64, ptr %9, i64 0, !dbg !1805
  %11 = load i64, ptr %10, align 4, !dbg !1805
  %first_colour_target = alloca i64, align 8, !dbg !1806
  store i64 %11, ptr %first_colour_target, align 4, !dbg !1806
    #dbg_declare(ptr %first_colour_target, !1807, !DIExpression(), !1808)
  %12 = load i64, ptr @tz_gpu_resource.window_resource, align 4, !dbg !1809
  %13 = load i64, ptr %first_colour_target, align 4, !dbg !1809
  %14 = icmp eq i64 %13, %12, !dbg !1809
  br i1 %14, label %then1, label %ifcont2, !dbg !1809

then1:                                            ; preds = %ifcont
  %15 = load i64, ptr @swapchain_width, align 4, !dbg !1810
  %16 = trunc i64 %15 to i32, !dbg !1810
  %17 = load i64, ptr @swapchain_height, align 4, !dbg !1810
  %18 = trunc i64 %17 to i32, !dbg !1810
  %19 = insertvalue %vec2u32 undef, i32 %16, 0, !dbg !1810
  %20 = insertvalue %vec2u32 %19, i32 %18, 1, !dbg !1810
  ret %vec2u32 %20, !dbg !1810

ifcont2:                                          ; preds = %ifcont
  %21 = load i64, ptr %first_colour_target, align 4, !dbg !1810
  %22 = load ptr, ptr @resources, align 8, !dbg !1810
  %23 = getelementptr %resource_data_t, ptr %22, i64 %21, !dbg !1810
  %res = alloca ptr, align 8, !dbg !1811
  store ptr %23, ptr %res, align 8, !dbg !1811
    #dbg_declare(ptr %res, !1812, !DIExpression(), !1813)
  %24 = load ptr, ptr %res, align 8, !dbg !1811
  %25 = getelementptr inbounds nuw %resource_data_t, ptr %24, i32 0, i32 0, !dbg !1811
  %26 = load %tz_gpu_resource_info, ptr %25, align 8, !dbg !1814
  %resinfo = alloca %tz_gpu_resource_info, align 8, !dbg !1814
  store %tz_gpu_resource_info %26, ptr %resinfo, align 8, !dbg !1814
    #dbg_declare(ptr %resinfo, !1815, !DIExpression(), !1816)
  %27 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %resinfo, i32 0, i32 2, !dbg !1817
  %28 = load %vec2u32, ptr %27, align 4, !dbg !1817
  ret %vec2u32 %28, !dbg !1817
}

define void @impl_record_compute_work(ptr %passptr_param, i64 %frame_id_param) !dbg !1818 {
entry:
  %passptr = alloca ptr, align 8
  store ptr %passptr_param, ptr %passptr, align 8
    #dbg_declare(ptr %passptr, !1821, !DIExpression(), !1822)
  %frame_id = alloca i64, align 8
  store i64 %frame_id_param, ptr %frame_id, align 4
    #dbg_declare(ptr %frame_id, !1823, !DIExpression(), !1822)
  call void @puts(ptr @strlit.164), !dbg !1824
  call void @llvm.debugtrap(), !dbg !1825
  ret void, !dbg !1826
}

define void @impl_record_graphics_work(ptr %passptr_param, i64 %frame_id_param, ptr %a_param) !dbg !1827 {
entry:
  %passptr = alloca ptr, align 8
  store ptr %passptr_param, ptr %passptr, align 8
    #dbg_declare(ptr %passptr, !1830, !DIExpression(), !1831)
  %frame_id = alloca i64, align 8
  store i64 %frame_id_param, ptr %frame_id, align 4
    #dbg_declare(ptr %frame_id, !1832, !DIExpression(), !1831)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !1833, !DIExpression(), !1831)
  %0 = load i64, ptr %frame_id, align 4, !dbg !1834
  %1 = getelementptr [2 x %frame_data], ptr @frames, i64 0, i64 %0, !dbg !1834
  %2 = load %frame_data, ptr %1, align 4, !dbg !1834
  %frame = alloca %frame_data, align 8, !dbg !1835
  store %frame_data %2, ptr %frame, align 4, !dbg !1835
    #dbg_declare(ptr %frame, !1836, !DIExpression(), !1843)
  %3 = load ptr, ptr %passptr, align 8, !dbg !1835
  %4 = getelementptr inbounds nuw %pass_data_t, ptr %3, i32 0, i32 0, !dbg !1835
  %5 = load %tz_gpu_pass_info, ptr %4, align 8, !dbg !1844
  %pinfo = alloca %tz_gpu_pass_info, align 8, !dbg !1844
  store %tz_gpu_pass_info %5, ptr %pinfo, align 8, !dbg !1844
    #dbg_declare(ptr %pinfo, !1845, !DIExpression(), !1846)
  %6 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 0, !dbg !1844
  %7 = load %tz_gpu_graphics_state, ptr %6, align 8, !dbg !1847
  %ginfo = alloca %tz_gpu_graphics_state, align 8, !dbg !1847
  store %tz_gpu_graphics_state %7, ptr %ginfo, align 8, !dbg !1847
    #dbg_declare(ptr %ginfo, !1848, !DIExpression(), !1849)
  %8 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 3, !dbg !1847
  %9 = load i64, ptr %8, align 4, !dbg !1850
  %ccount = alloca i64, align 8, !dbg !1850
  store i64 %9, ptr %ccount, align 4, !dbg !1850
    #dbg_declare(ptr %ccount, !1851, !DIExpression(), !1852)
  %10 = load i64, ptr %ccount, align 4, !dbg !1853
  %11 = icmp eq i64 %10, 0, !dbg !1853
  br i1 %11, label %then, label %ifcont, !dbg !1853

then:                                             ; preds = %entry
  call void @puts(ptr @strlit.165), !dbg !1854
  call void @llvm.debugtrap(), !dbg !1855
  br label %ifcont, !dbg !1855

ifcont:                                           ; preds = %then, %entry
  %12 = load ptr, ptr %a, align 8, !dbg !1856
  %13 = load i64, ptr %ccount, align 4, !dbg !1856
  %14 = mul i64 72, %13, !dbg !1856
  %15 = call ptr @arena_push(ptr %12, i64 %14), !dbg !1856
  %colour_attachments = alloca ptr, align 8, !dbg !1856
  store ptr %15, ptr %colour_attachments, align 8, !dbg !1856
    #dbg_declare(ptr %colour_attachments, !1857, !DIExpression(), !1877)
  %16 = load ptr, ptr %a, align 8, !dbg !1878
  %17 = load i64, ptr %ccount, align 4, !dbg !1878
  %18 = mul i64 72, %17, !dbg !1878
  %19 = call ptr @arena_push(ptr %16, i64 %18), !dbg !1878
  %colour_transitions = alloca ptr, align 8, !dbg !1878
  store ptr %19, ptr %colour_transitions, align 8, !dbg !1878
    #dbg_declare(ptr %colour_transitions, !1879, !DIExpression(), !1893)
  %colour_transition_count = alloca i64, align 8, !dbg !1894
  store i64 0, ptr %colour_transition_count, align 4, !dbg !1894
    #dbg_declare(ptr %colour_transition_count, !1895, !DIExpression(), !1896)
  %counter = alloca i64, align 8, !dbg !1897
  store i64 0, ptr %counter, align 4, !dbg !1897
    #dbg_declare(ptr %counter, !1898, !DIExpression(), !1899)
  %colour_target = alloca i64, align 8, !dbg !1900
    #dbg_declare(ptr %colour_target, !1901, !DIExpression(), !1902)
  %resptr = alloca ptr, align 8, !dbg !1903
    #dbg_declare(ptr %resptr, !1904, !DIExpression(), !1905)
  %render_target = alloca i64, align 8, !dbg !1906
    #dbg_declare(ptr %render_target, !1907, !DIExpression(), !1908)
  %render_target_view = alloca i64, align 8, !dbg !1909
    #dbg_declare(ptr %render_target_view, !1910, !DIExpression(), !1911)
  %20 = load ptr, ptr %passptr, align 8, !dbg !1912
  %21 = getelementptr inbounds nuw %pass_data_t, ptr %20, i32 0, i32 5, !dbg !1912
  %22 = load i1, ptr %21, align 1, !dbg !1912
  br i1 %22, label %then1, label %ifcont2, !dbg !1912

then1:                                            ; preds = %ifcont
  %23 = load ptr, ptr %a, align 8, !dbg !1913
  %24 = call i1 @impl_require_swapchain(ptr %23), !dbg !1913
  %25 = load ptr, ptr %passptr, align 8, !dbg !1913
  %26 = getelementptr inbounds nuw %pass_data_t, ptr %25, i32 0, i32 6, !dbg !1913
  %27 = load %vec2u32, ptr %26, align 4, !dbg !1914
  %dims = alloca %vec2u32, align 8, !dbg !1914
  store %vec2u32 %27, ptr %dims, align 4, !dbg !1914
    #dbg_declare(ptr %dims, !1915, !DIExpression(), !1916)
  %28 = getelementptr inbounds nuw %vec2u32, ptr %dims, i32 0, i32 0, !dbg !1917
  %29 = load i64, ptr @swapchain_width, align 4, !dbg !1917
  %30 = load i32, ptr %28, align 4, !dbg !1917
  %31 = trunc i64 %29 to i32, !dbg !1917
  %32 = icmp ne i32 %30, %31, !dbg !1917
  br i1 %32, label %then3, label %ifcont4, !dbg !1917

ifcont2:                                          ; preds = %ifcont6, %ifcont
  %33 = load ptr, ptr %passptr, align 8, !dbg !1918
  %34 = getelementptr inbounds nuw %pass_data_t, ptr %33, i32 0, i32 6, !dbg !1918
  %35 = load %vec2u32, ptr %34, align 4, !dbg !1919
  %dimensions = alloca %vec2u32, align 8, !dbg !1919
  store %vec2u32 %35, ptr %dimensions, align 4, !dbg !1919
    #dbg_declare(ptr %dimensions, !1920, !DIExpression(), !1921)
  store i64 0, ptr %counter, align 4, !dbg !1922
  %36 = load i64, ptr %counter, align 4, !dbg !1922
  %37 = load i64, ptr %ccount, align 4, !dbg !1922
  %38 = icmp ult i64 %36, %37, !dbg !1922
  br i1 %38, label %then7, label %whilecont, !dbg !1922

then3:                                            ; preds = %then1
  %39 = load ptr, ptr %passptr, align 8, !dbg !1923
  %40 = getelementptr inbounds nuw %pass_data_t, ptr %39, i32 0, i32 6, !dbg !1923
  %41 = load ptr, ptr %passptr, align 8, !dbg !1923
  %42 = call %vec2u32 @impl_get_pass_colour_target_dimensions(ptr %41), !dbg !1923
  store %vec2u32 %42, ptr %40, align 4, !dbg !1923
  br label %ifcont4, !dbg !1923

ifcont4:                                          ; preds = %then3, %then1
  %43 = getelementptr inbounds nuw %vec2u32, ptr %dims, i32 0, i32 1, !dbg !1924
  %44 = load i64, ptr @swapchain_height, align 4, !dbg !1924
  %45 = load i32, ptr %43, align 4, !dbg !1924
  %46 = trunc i64 %44 to i32, !dbg !1924
  %47 = icmp ne i32 %45, %46, !dbg !1924
  br i1 %47, label %then5, label %ifcont6, !dbg !1924

then5:                                            ; preds = %ifcont4
  %48 = load ptr, ptr %passptr, align 8, !dbg !1918
  %49 = getelementptr inbounds nuw %pass_data_t, ptr %48, i32 0, i32 6, !dbg !1918
  %50 = load ptr, ptr %passptr, align 8, !dbg !1918
  %51 = call %vec2u32 @impl_get_pass_colour_target_dimensions(ptr %50), !dbg !1918
  store %vec2u32 %51, ptr %49, align 4, !dbg !1918
  br label %ifcont6, !dbg !1918

ifcont6:                                          ; preds = %then5, %ifcont4
  br label %ifcont2, !dbg !1918

then7:                                            ; preds = %ifcont13, %ifcont2
  %52 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 2, !dbg !1925
  %53 = load i64, ptr %counter, align 4, !dbg !1925
  %54 = load ptr, ptr %52, align 8, !dbg !1925
  %55 = getelementptr i64, ptr %54, i64 %53, !dbg !1925
  %56 = load i64, ptr %55, align 4, !dbg !1925
  store i64 %56, ptr %colour_target, align 4, !dbg !1925
  store i64 0, ptr %render_target, align 4, !dbg !1926
  store i64 0, ptr %render_target_view, align 4, !dbg !1927
  %57 = load i64, ptr @tz_gpu_resource.window_resource, align 4, !dbg !1928
  %58 = load i64, ptr %colour_target, align 4, !dbg !1928
  %59 = icmp eq i64 %58, %57, !dbg !1928
  br i1 %59, label %then8, label %ifcont9, !dbg !1928

whilecont:                                        ; preds = %ifcont13, %ifcont2
  %60 = load i64, ptr %colour_transition_count, align 4, !dbg !1929
  %61 = icmp ugt i64 %60, 0, !dbg !1929
  br i1 %61, label %then14, label %ifcont15, !dbg !1929

then8:                                            ; preds = %then7
  %62 = load i64, ptr @system_image, align 4, !dbg !1930
  store i64 %62, ptr %render_target, align 4, !dbg !1930
  %63 = load i64, ptr @system_image_view, align 4, !dbg !1931
  store i64 %63, ptr %render_target_view, align 4, !dbg !1931
  br label %ifcont9, !dbg !1931

ifcont9:                                          ; preds = %then8, %then7
  %64 = load i64, ptr @tz_gpu_resource.window_resource, align 4, !dbg !1932
  %65 = load i64, ptr %colour_target, align 4, !dbg !1932
  %66 = icmp ne i64 %65, %64, !dbg !1932
  br i1 %66, label %then10, label %ifcont11, !dbg !1932

then10:                                           ; preds = %ifcont9
  %67 = load i64, ptr %colour_target, align 4, !dbg !1933
  %68 = load ptr, ptr @resources, align 8, !dbg !1933
  %69 = getelementptr %resource_data_t, ptr %68, i64 %67, !dbg !1933
  store ptr %69, ptr %resptr, align 8, !dbg !1933
  %70 = load ptr, ptr %resptr, align 8, !dbg !1934
  %71 = getelementptr inbounds nuw %resource_data_t, ptr %70, i32 0, i32 2, !dbg !1934
  %72 = load i64, ptr %71, align 4, !dbg !1934
  store i64 %72, ptr %render_target, align 4, !dbg !1934
  %73 = load ptr, ptr %resptr, align 8, !dbg !1935
  %74 = getelementptr inbounds nuw %resource_data_t, ptr %73, i32 0, i32 3, !dbg !1935
  %75 = load i64, ptr %74, align 4, !dbg !1935
  store i64 %75, ptr %render_target_view, align 4, !dbg !1935
  br label %ifcont11, !dbg !1935

ifcont11:                                         ; preds = %then10, %ifcont9
  %76 = load i64, ptr %counter, align 4, !dbg !1936
  %77 = load ptr, ptr %colour_attachments, align 8, !dbg !1936
  %78 = getelementptr %VkRenderingAttachmentInfo, ptr %77, i64 %76, !dbg !1936
  %79 = load %VkRenderingAttachmentInfo, ptr %78, align 8, !dbg !1936
  %80 = load ptr, ptr @null, align 8, !dbg !1936
  %81 = load i64, ptr %render_target_view, align 4, !dbg !1936
  %82 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 0, !dbg !1936
  %83 = load %vec4, ptr %82, align 4, !dbg !1936
  %84 = insertvalue %VkClearColorValue undef, %vec4 %83, 0, !dbg !1936
  %85 = insertvalue %VkClearValue undef, %VkClearColorValue %84, 0, !dbg !1936
  %86 = insertvalue %VkRenderingAttachmentInfo { i32 1000044001, ptr undef, i64 undef, i32 undef, i32 undef, i64 undef, i32 undef, i32 undef, i32 undef, %VkClearValue undef }, ptr %80, 1, !dbg !1936
  %87 = insertvalue %VkRenderingAttachmentInfo %86, i64 %81, 2, !dbg !1936
  %88 = insertvalue %VkRenderingAttachmentInfo %87, i32 2, 3, !dbg !1936
  %89 = insertvalue %VkRenderingAttachmentInfo %88, i32 0, 4, !dbg !1936
  %90 = insertvalue %VkRenderingAttachmentInfo %89, i64 0, 5, !dbg !1936
  %91 = insertvalue %VkRenderingAttachmentInfo %90, i32 0, 6, !dbg !1936
  %92 = insertvalue %VkRenderingAttachmentInfo %91, i32 1, 7, !dbg !1936
  %93 = insertvalue %VkRenderingAttachmentInfo %92, i32 0, 8, !dbg !1936
  %94 = insertvalue %VkRenderingAttachmentInfo %93, %VkClearValue %85, 9, !dbg !1936
  store %VkRenderingAttachmentInfo %94, ptr %78, align 8, !dbg !1936
  br i1 true, label %then12, label %ifcont13, !dbg !1937

then12:                                           ; preds = %ifcont11
  %95 = load i64, ptr %colour_transition_count, align 4, !dbg !1938
  %96 = load ptr, ptr %colour_transitions, align 8, !dbg !1938
  %97 = getelementptr %VkImageMemoryBarrier, ptr %96, i64 %95, !dbg !1938
  %98 = load %VkImageMemoryBarrier, ptr %97, align 8, !dbg !1938
  %99 = load ptr, ptr @null, align 8, !dbg !1938
  %100 = load i64, ptr %render_target, align 4, !dbg !1938
  %101 = insertvalue %VkImageMemoryBarrier { i32 45, ptr undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i64 undef, %VkImageSubresourceRange undef }, ptr %99, 1, !dbg !1938
  %102 = insertvalue %VkImageMemoryBarrier %101, i32 0, 2, !dbg !1938
  %103 = insertvalue %VkImageMemoryBarrier %102, i32 256, 3, !dbg !1938
  %104 = insertvalue %VkImageMemoryBarrier %103, i32 0, 4, !dbg !1938
  %105 = insertvalue %VkImageMemoryBarrier %104, i32 2, 5, !dbg !1938
  %106 = insertvalue %VkImageMemoryBarrier %105, i32 -1, 6, !dbg !1938
  %107 = insertvalue %VkImageMemoryBarrier %106, i32 -1, 7, !dbg !1938
  %108 = insertvalue %VkImageMemoryBarrier %107, i64 %100, 8, !dbg !1938
  %109 = insertvalue %VkImageMemoryBarrier %108, %VkImageSubresourceRange { i32 1, i32 0, i32 1, i32 0, i32 1 }, 9, !dbg !1938
  store %VkImageMemoryBarrier %109, ptr %97, align 8, !dbg !1938
  %110 = load i64, ptr %colour_transition_count, align 4, !dbg !1939
  %111 = add i64 %110, 1, !dbg !1939
  store i64 %111, ptr %colour_transition_count, align 4, !dbg !1939
  %112 = load i64, ptr %colour_transition_count, align 4, !dbg !1939
  %113 = add i64 %112, 1, !dbg !1939
  br label %ifcont13, !dbg !1939

ifcont13:                                         ; preds = %then12, %ifcont11
  %114 = load i64, ptr %counter, align 4, !dbg !1939
  %115 = add i64 %114, 1, !dbg !1939
  store i64 %115, ptr %counter, align 4, !dbg !1939
  %116 = load i64, ptr %counter, align 4, !dbg !1939
  %117 = add i64 %116, 1, !dbg !1939
  %118 = load i64, ptr %counter, align 4, !dbg !1939
  %119 = load i64, ptr %ccount, align 4, !dbg !1939
  %120 = icmp ult i64 %118, %119, !dbg !1939
  br i1 %120, label %then7, label %whilecont, !dbg !1939

then14:                                           ; preds = %whilecont
  %121 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 63), align 8, !dbg !1940
  %122 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !1940
  %123 = load i64, ptr %122, align 4, !dbg !1940
  %124 = load ptr, ptr @null, align 8, !dbg !1940
  %125 = load ptr, ptr @null, align 8, !dbg !1940
  %126 = load i64, ptr %colour_transition_count, align 4, !dbg !1940
  %127 = trunc i64 %126 to i32, !dbg !1940
  %128 = load ptr, ptr %colour_transitions, align 8, !dbg !1940
  call void %121(i64 %123, i32 8192, i32 1024, i32 0, i32 0, ptr %124, i32 0, ptr %125, i32 %127, ptr %128), !dbg !1940
  br label %ifcont15, !dbg !1940

ifcont15:                                         ; preds = %then14, %whilecont
  %129 = load ptr, ptr @null, align 8, !dbg !1941
  %130 = getelementptr inbounds nuw %vec2u32, ptr %dimensions, i32 0, i32 0, !dbg !1941
  %131 = load i32, ptr %130, align 4, !dbg !1941
  %132 = getelementptr inbounds nuw %vec2u32, ptr %dimensions, i32 0, i32 1, !dbg !1941
  %133 = load i32, ptr %132, align 4, !dbg !1941
  %134 = insertvalue %VkExtent2D undef, i32 %131, 0, !dbg !1941
  %135 = insertvalue %VkExtent2D %134, i32 %133, 1, !dbg !1941
  %136 = insertvalue %VkRect2D { %VkOffset2D zeroinitializer, %VkExtent2D undef }, %VkExtent2D %135, 1, !dbg !1941
  %137 = load i64, ptr %ccount, align 4, !dbg !1941
  %138 = trunc i64 %137 to i32, !dbg !1941
  %139 = load ptr, ptr %colour_attachments, align 8, !dbg !1941
  %140 = load ptr, ptr @null, align 8, !dbg !1941
  %141 = load ptr, ptr @null, align 8, !dbg !1941
  %142 = insertvalue %VkRenderingInfo { i32 1000044000, ptr undef, i32 undef, %VkRect2D undef, i32 undef, i32 undef, i32 undef, ptr undef, ptr undef, ptr undef }, ptr %129, 1, !dbg !1941
  %143 = insertvalue %VkRenderingInfo %142, i32 0, 2, !dbg !1941
  %144 = insertvalue %VkRenderingInfo %143, %VkRect2D %136, 3, !dbg !1941
  %145 = insertvalue %VkRenderingInfo %144, i32 1, 4, !dbg !1941
  %146 = insertvalue %VkRenderingInfo %145, i32 0, 5, !dbg !1941
  %147 = insertvalue %VkRenderingInfo %146, i32 %138, 6, !dbg !1941
  %148 = insertvalue %VkRenderingInfo %147, ptr %139, 7, !dbg !1941
  %149 = insertvalue %VkRenderingInfo %148, ptr %140, 8, !dbg !1941
  %150 = insertvalue %VkRenderingInfo %149, ptr %141, 9, !dbg !1941
  %render = alloca %VkRenderingInfo, align 8, !dbg !1941
  store %VkRenderingInfo %150, ptr %render, align 8, !dbg !1941
    #dbg_declare(ptr %render, !1942, !DIExpression(), !1963)
  %151 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 64), align 8, !dbg !1964
  %152 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !1964
  %153 = load i64, ptr %152, align 4, !dbg !1964
  call void %151(i64 %153, ptr %render), !dbg !1964
  %154 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 60), align 8, !dbg !1965
  %155 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !1965
  %156 = load i64, ptr %155, align 4, !dbg !1965
  %157 = load ptr, ptr %passptr, align 8, !dbg !1965
  %158 = getelementptr inbounds nuw %pass_data_t, ptr %157, i32 0, i32 4, !dbg !1965
  %159 = load i64, ptr %158, align 4, !dbg !1965
  call void %154(i64 %156, i32 0, i64 %159), !dbg !1965
  %160 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 61), align 8, !dbg !1966
  %161 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !1966
  %162 = load i64, ptr %161, align 4, !dbg !1966
  %163 = load i64, ptr @pipeline_layout, align 4, !dbg !1966
  %164 = load ptr, ptr %passptr, align 8, !dbg !1966
  %165 = getelementptr inbounds nuw %pass_data_t, ptr %164, i32 0, i32 7, !dbg !1966
  %166 = load i64, ptr @current_frame, align 4, !dbg !1966
  %167 = getelementptr [2 x i64], ptr %165, i64 0, i64 %166, !dbg !1966
  %168 = load ptr, ptr @null, align 8, !dbg !1966
  call void %160(i64 %162, i32 0, i64 %163, i32 0, i32 1, ptr %167, i32 0, ptr %168), !dbg !1966
  %169 = getelementptr inbounds nuw %vec2u32, ptr %dimensions, i32 0, i32 1, !dbg !1967
  %170 = load i32, ptr %169, align 4, !dbg !1967
  %171 = uitofp i32 %170 to float, !dbg !1967
  %172 = getelementptr inbounds nuw %vec2u32, ptr %dimensions, i32 0, i32 0, !dbg !1967
  %173 = load i32, ptr %172, align 4, !dbg !1967
  %174 = uitofp i32 %173 to float, !dbg !1967
  %175 = getelementptr inbounds nuw %vec2u32, ptr %dimensions, i32 0, i32 1, !dbg !1967
  %176 = load i32, ptr %175, align 4, !dbg !1967
  %177 = uitofp i32 %176 to double, !dbg !1967
  %178 = fmul double -1.000000e+00, %177, !dbg !1967
  %179 = fptrunc double %178 to float, !dbg !1967
  %180 = insertvalue %VkViewport { float 0.000000e+00, float undef, float undef, float undef, float undef, float undef }, float %171, 1, !dbg !1967
  %181 = insertvalue %VkViewport %180, float %174, 2, !dbg !1967
  %182 = insertvalue %VkViewport %181, float %179, 3, !dbg !1967
  %183 = insertvalue %VkViewport %182, float 0.000000e+00, 4, !dbg !1967
  %184 = insertvalue %VkViewport %183, float 1.000000e+00, 5, !dbg !1967
  %viewport = alloca %VkViewport, align 8, !dbg !1967
  store %VkViewport %184, ptr %viewport, align 4, !dbg !1967
    #dbg_declare(ptr %viewport, !1968, !DIExpression(), !1977)
  %185 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 66), align 8, !dbg !1978
  %186 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !1978
  %187 = load i64, ptr %186, align 4, !dbg !1978
  call void %185(i64 %187, i32 0, i32 1, ptr %viewport), !dbg !1978
  %188 = getelementptr inbounds nuw %vec2u32, ptr %dimensions, i32 0, i32 0, !dbg !1979
  %189 = load i32, ptr %188, align 4, !dbg !1979
  %190 = getelementptr inbounds nuw %vec2u32, ptr %dimensions, i32 0, i32 1, !dbg !1979
  %191 = load i32, ptr %190, align 4, !dbg !1979
  %192 = insertvalue %VkExtent2D undef, i32 %189, 0, !dbg !1979
  %193 = insertvalue %VkExtent2D %192, i32 %191, 1, !dbg !1979
  %194 = insertvalue %VkRect2D { %VkOffset2D zeroinitializer, %VkExtent2D undef }, %VkExtent2D %193, 1, !dbg !1979
  %scissor = alloca %VkRect2D, align 8, !dbg !1979
  store %VkRect2D %194, ptr %scissor, align 4, !dbg !1979
    #dbg_declare(ptr %scissor, !1980, !DIExpression(), !1981)
  %195 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 67), align 8, !dbg !1982
  %196 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !1982
  %197 = load i64, ptr %196, align 4, !dbg !1982
  call void %195(i64 %197, i32 0, i32 1, ptr %scissor), !dbg !1982
  %198 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 8, !dbg !1982
  %199 = load i64, ptr %198, align 4, !dbg !1983
  %tri_count = alloca i64, align 8, !dbg !1983
  store i64 %199, ptr %tri_count, align 4, !dbg !1983
    #dbg_declare(ptr %tri_count, !1984, !DIExpression(), !1985)
  %200 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 6, !dbg !1983
  %201 = load i64, ptr %200, align 4, !dbg !1986
  %drawbuf = alloca i64, align 8, !dbg !1986
  store i64 %201, ptr %drawbuf, align 4, !dbg !1986
    #dbg_declare(ptr %drawbuf, !1987, !DIExpression(), !1988)
  %202 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 5, !dbg !1986
  %203 = load i64, ptr %202, align 4, !dbg !1989
  %idxbuf = alloca i64, align 8, !dbg !1989
  store i64 %203, ptr %idxbuf, align 4, !dbg !1989
    #dbg_declare(ptr %idxbuf, !1990, !DIExpression(), !1991)
  %204 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !1992
  %205 = load i64, ptr %idxbuf, align 4, !dbg !1992
  %206 = icmp eq i64 %205, %204, !dbg !1992
  br i1 %206, label %then16, label %ifcont17, !dbg !1992

then16:                                           ; preds = %ifcont15
  %207 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !1993
  %208 = load i64, ptr %drawbuf, align 4, !dbg !1993
  %209 = icmp eq i64 %208, %207, !dbg !1993
  br i1 %209, label %then18, label %ifcont19, !dbg !1993

ifcont17:                                         ; preds = %ifcont21, %ifcont15
  %210 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !1994
  %211 = load i64, ptr %idxbuf, align 4, !dbg !1994
  %212 = icmp ne i64 %211, %210, !dbg !1994
  br i1 %212, label %then22, label %ifcont23, !dbg !1994

then18:                                           ; preds = %then16
  %213 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 70), align 8, !dbg !1995
  %214 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !1995
  %215 = load i64, ptr %214, align 4, !dbg !1995
  %216 = load i64, ptr %tri_count, align 4, !dbg !1995
  %217 = mul i64 %216, 3, !dbg !1995
  %218 = trunc i64 %217 to i32, !dbg !1995
  call void %213(i64 %215, i32 %218, i32 1, i32 0, i32 0), !dbg !1995
  br label %ifcont19, !dbg !1995

ifcont19:                                         ; preds = %then18, %then16
  %219 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !1996
  %220 = load i64, ptr %drawbuf, align 4, !dbg !1996
  %221 = icmp ne i64 %220, %219, !dbg !1996
  br i1 %221, label %then20, label %ifcont21, !dbg !1996

then20:                                           ; preds = %ifcont19
  %222 = load i64, ptr %drawbuf, align 4, !dbg !1997
  %223 = load ptr, ptr @resources, align 8, !dbg !1997
  %224 = getelementptr %resource_data_t, ptr %223, i64 %222, !dbg !1997
  %drawbufres = alloca ptr, align 8, !dbg !1998
  store ptr %224, ptr %drawbufres, align 8, !dbg !1998
    #dbg_declare(ptr %drawbufres, !1999, !DIExpression(), !2000)
  %225 = load ptr, ptr %drawbufres, align 8, !dbg !1998
  %226 = getelementptr inbounds nuw %resource_data_t, ptr %225, i32 0, i32 0, !dbg !1998
  %227 = load %tz_gpu_resource_info, ptr %226, align 8, !dbg !2001
  %drawbufinfo = alloca %tz_gpu_resource_info, align 8, !dbg !2001
  store %tz_gpu_resource_info %227, ptr %drawbufinfo, align 8, !dbg !2001
    #dbg_declare(ptr %drawbufinfo, !2002, !DIExpression(), !2003)
  %228 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %drawbufinfo, i32 0, i32 1, !dbg !2001
  %229 = load i64, ptr %228, align 4, !dbg !2004
  %230 = sub i64 %229, 4, !dbg !2004
  %231 = udiv i64 %230, 16, !dbg !2004
  %draw_buf_max_size_unindexed = alloca i64, align 8, !dbg !2004
  store i64 %231, ptr %draw_buf_max_size_unindexed, align 4, !dbg !2004
    #dbg_declare(ptr %draw_buf_max_size_unindexed, !2005, !DIExpression(), !2006)
  %232 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 72), align 8, !dbg !2007
  %233 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !2007
  %234 = load i64, ptr %233, align 4, !dbg !2007
  %235 = load ptr, ptr %drawbufres, align 8, !dbg !2007
  %236 = getelementptr inbounds nuw %resource_data_t, ptr %235, i32 0, i32 2, !dbg !2007
  %237 = load i64, ptr %236, align 4, !dbg !2007
  %238 = load ptr, ptr %drawbufres, align 8, !dbg !2007
  %239 = getelementptr inbounds nuw %resource_data_t, ptr %238, i32 0, i32 2, !dbg !2007
  %240 = load i64, ptr %239, align 4, !dbg !2007
  %241 = load i64, ptr %draw_buf_max_size_unindexed, align 4, !dbg !2007
  %242 = trunc i64 %241 to i32, !dbg !2007
  call void %232(i64 %234, i64 %237, i64 4, i64 %240, i64 0, i32 %242, i32 16), !dbg !2007
  br label %ifcont21, !dbg !2007

ifcont21:                                         ; preds = %then20, %ifcont19
  br label %ifcont17, !dbg !2007

then22:                                           ; preds = %ifcont17
  %243 = load i64, ptr %idxbuf, align 4, !dbg !2008
  %244 = load ptr, ptr @resources, align 8, !dbg !2008
  %245 = getelementptr %resource_data_t, ptr %244, i64 %243, !dbg !2008
  %idxbufres = alloca ptr, align 8, !dbg !2009
  store ptr %245, ptr %idxbufres, align 8, !dbg !2009
    #dbg_declare(ptr %idxbufres, !2010, !DIExpression(), !2011)
  %246 = load ptr, ptr %idxbufres, align 8, !dbg !2009
  %247 = getelementptr inbounds nuw %resource_data_t, ptr %246, i32 0, i32 0, !dbg !2009
  %248 = load %tz_gpu_resource_info, ptr %247, align 8, !dbg !2012
  %idxbufinfo = alloca %tz_gpu_resource_info, align 8, !dbg !2012
  store %tz_gpu_resource_info %248, ptr %idxbufinfo, align 8, !dbg !2012
    #dbg_declare(ptr %idxbufinfo, !2013, !DIExpression(), !2014)
  %249 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 69), align 8, !dbg !2015
  %250 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !2015
  %251 = load i64, ptr %250, align 4, !dbg !2015
  %252 = load ptr, ptr %idxbufres, align 8, !dbg !2015
  %253 = getelementptr inbounds nuw %resource_data_t, ptr %252, i32 0, i32 2, !dbg !2015
  %254 = load i64, ptr %253, align 4, !dbg !2015
  call void %249(i64 %251, i64 %254, i64 0, i32 1), !dbg !2015
  %255 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !2016
  %256 = load i64, ptr %drawbuf, align 4, !dbg !2016
  %257 = icmp eq i64 %256, %255, !dbg !2016
  br i1 %257, label %then24, label %ifcont25, !dbg !2016

ifcont23:                                         ; preds = %ifcont27, %ifcont17
  %258 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 65), align 8, !dbg !2017
  %259 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !2017
  %260 = load i64, ptr %259, align 4, !dbg !2017
  call void %258(i64 %260), !dbg !2017
  ret void, !dbg !1834

then24:                                           ; preds = %then22
  %261 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 71), align 8, !dbg !2018
  %262 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !2018
  %263 = load i64, ptr %262, align 4, !dbg !2018
  %264 = load i64, ptr %tri_count, align 4, !dbg !2018
  %265 = mul i64 %264, 3, !dbg !2018
  %266 = trunc i64 %265 to i32, !dbg !2018
  call void %261(i64 %263, i32 %266, i32 1, i32 0, i32 0, i32 0), !dbg !2018
  br label %ifcont25, !dbg !2018

ifcont25:                                         ; preds = %then24, %then22
  %267 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !2019
  %268 = load i64, ptr %drawbuf, align 4, !dbg !2019
  %269 = icmp ne i64 %268, %267, !dbg !2019
  br i1 %269, label %then26, label %ifcont27, !dbg !2019

then26:                                           ; preds = %ifcont25
  %270 = load i64, ptr %drawbuf, align 4, !dbg !2020
  %271 = load ptr, ptr @resources, align 8, !dbg !2020
  %272 = getelementptr %resource_data_t, ptr %271, i64 %270, !dbg !2020
  %drawbufres28 = alloca ptr, align 8, !dbg !2021
  store ptr %272, ptr %drawbufres28, align 8, !dbg !2021
    #dbg_declare(ptr %drawbufres28, !2022, !DIExpression(), !2023)
  %273 = load ptr, ptr %drawbufres28, align 8, !dbg !2021
  %274 = getelementptr inbounds nuw %resource_data_t, ptr %273, i32 0, i32 0, !dbg !2021
  %275 = load %tz_gpu_resource_info, ptr %274, align 8, !dbg !2024
  %drawbufinfo29 = alloca %tz_gpu_resource_info, align 8, !dbg !2024
  store %tz_gpu_resource_info %275, ptr %drawbufinfo29, align 8, !dbg !2024
    #dbg_declare(ptr %drawbufinfo29, !2025, !DIExpression(), !2026)
  %276 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %drawbufinfo29, i32 0, i32 1, !dbg !2024
  %277 = load i64, ptr %276, align 4, !dbg !2027
  %278 = sub i64 %277, 4, !dbg !2027
  %279 = udiv i64 %278, 20, !dbg !2027
  %draw_buf_max_size_indexed = alloca i64, align 8, !dbg !2027
  store i64 %279, ptr %draw_buf_max_size_indexed, align 4, !dbg !2027
    #dbg_declare(ptr %draw_buf_max_size_indexed, !2028, !DIExpression(), !2029)
  %280 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 73), align 8, !dbg !2030
  %281 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !2030
  %282 = load i64, ptr %281, align 4, !dbg !2030
  %283 = load ptr, ptr %drawbufres28, align 8, !dbg !2030
  %284 = getelementptr inbounds nuw %resource_data_t, ptr %283, i32 0, i32 2, !dbg !2030
  %285 = load i64, ptr %284, align 4, !dbg !2030
  %286 = load ptr, ptr %drawbufres28, align 8, !dbg !2030
  %287 = getelementptr inbounds nuw %resource_data_t, ptr %286, i32 0, i32 2, !dbg !2030
  %288 = load i64, ptr %287, align 4, !dbg !2030
  %289 = load i64, ptr %draw_buf_max_size_indexed, align 4, !dbg !2030
  %290 = trunc i64 %289 to i32, !dbg !2030
  call void %280(i64 %282, i64 %285, i64 4, i64 %288, i64 0, i32 %290, i32 20), !dbg !2030
  br label %ifcont27, !dbg !2030

ifcont27:                                         ; preds = %then26, %ifcont25
  br label %ifcont23, !dbg !2030
}

define void @impl_record_gpu_work(i64 %pass_param, i64 %frame_id_param, ptr %a_param) !dbg !2031 {
entry:
  %pass = alloca i64, align 8
  store i64 %pass_param, ptr %pass, align 4
    #dbg_declare(ptr %pass, !2034, !DIExpression(), !2035)
  %frame_id = alloca i64, align 8
  store i64 %frame_id_param, ptr %frame_id, align 4
    #dbg_declare(ptr %frame_id, !2036, !DIExpression(), !2035)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !2037, !DIExpression(), !2035)
  %0 = load i64, ptr @tz_gpu_pass.present, align 4, !dbg !2038
  %1 = load i64, ptr %pass, align 4, !dbg !2038
  %2 = icmp eq i64 %1, %0, !dbg !2038
  br i1 %2, label %then, label %ifcont, !dbg !2038

then:                                             ; preds = %entry
  ret void, !dbg !2039

ifcont:                                           ; preds = %entry
  %3 = load i64, ptr %pass, align 4, !dbg !2039
  %4 = load ptr, ptr @passes, align 8, !dbg !2039
  %5 = getelementptr %pass_data_t, ptr %4, i64 %3, !dbg !2039
  %passptr = alloca ptr, align 8, !dbg !2040
  store ptr %5, ptr %passptr, align 8, !dbg !2040
    #dbg_declare(ptr %passptr, !2041, !DIExpression(), !2042)
  %6 = load ptr, ptr %passptr, align 8, !dbg !2043
  %7 = getelementptr inbounds nuw %pass_data_t, ptr %6, i32 0, i32 3, !dbg !2043
  %8 = load i1, ptr %7, align 1, !dbg !2043
  br i1 %8, label %then1, label %ifcont2, !dbg !2043

then1:                                            ; preds = %ifcont
  %9 = load ptr, ptr %passptr, align 8, !dbg !2044
  %10 = load i64, ptr %frame_id, align 4, !dbg !2044
  call void @impl_record_compute_work(ptr %9, i64 %10), !dbg !2044
  br label %ifcont2, !dbg !2044

ifcont2:                                          ; preds = %then1, %ifcont
  %11 = load ptr, ptr %passptr, align 8, !dbg !2045
  %12 = getelementptr inbounds nuw %pass_data_t, ptr %11, i32 0, i32 3, !dbg !2045
  %13 = load i1, ptr %12, align 1, !dbg !2045
  %14 = xor i1 %13, true, !dbg !2045
  br i1 %14, label %then3, label %ifcont4, !dbg !2045

then3:                                            ; preds = %ifcont2
  %15 = load ptr, ptr %passptr, align 8, !dbg !2046
  %16 = load i64, ptr %frame_id, align 4, !dbg !2046
  %17 = load ptr, ptr %a, align 8, !dbg !2046
  call void @impl_record_graphics_work(ptr %15, i64 %16, ptr %17), !dbg !2046
  br label %ifcont4, !dbg !2046

ifcont4:                                          ; preds = %then3, %ifcont2
  ret void, !dbg !2047
}

define i1 @impl_graph_will_present(i64 %graph_param) !dbg !2048 {
entry:
  %graph = alloca i64, align 8
  store i64 %graph_param, ptr %graph, align 4
    #dbg_declare(ptr %graph, !2049, !DIExpression(), !2050)
  %0 = load i64, ptr %graph, align 4, !dbg !2051
  %1 = load ptr, ptr @graphs, align 8, !dbg !2051
  %2 = getelementptr %graph_data_t, ptr %1, i64 %0, !dbg !2051
  %graphptr = alloca ptr, align 8, !dbg !2052
  store ptr %2, ptr %graphptr, align 8, !dbg !2052
    #dbg_declare(ptr %graphptr, !2053, !DIExpression(), !2066)
  %3 = load ptr, ptr %graphptr, align 8, !dbg !2052
  %4 = getelementptr inbounds nuw %graph_data_t, ptr %3, i32 0, i32 2, !dbg !2052
  %5 = load i64, ptr %4, align 4, !dbg !2067
  %count = alloca i64, align 8, !dbg !2067
  store i64 %5, ptr %count, align 4, !dbg !2067
    #dbg_declare(ptr %count, !2068, !DIExpression(), !2069)
  %counter = alloca i64, align 8, !dbg !2070
    #dbg_declare(ptr %counter, !2071, !DIExpression(), !2072)
  %cur_entry = alloca %graph_entry, align 8, !dbg !2073
    #dbg_declare(ptr %cur_entry, !2074, !DIExpression(), !2075)
  store i64 0, ptr %counter, align 4, !dbg !2076
  %6 = load i64, ptr %counter, align 4, !dbg !2076
  %7 = load i64, ptr %count, align 4, !dbg !2076
  %8 = icmp ult i64 %6, %7, !dbg !2076
  br i1 %8, label %then, label %whilecont, !dbg !2076

then:                                             ; preds = %ifcont, %entry
  %9 = load ptr, ptr %graphptr, align 8, !dbg !2077
  %10 = getelementptr inbounds nuw %graph_data_t, ptr %9, i32 0, i32 1, !dbg !2077
  %11 = load i64, ptr %counter, align 4, !dbg !2077
  %12 = load ptr, ptr %10, align 8, !dbg !2077
  %13 = getelementptr %graph_entry, ptr %12, i64 %11, !dbg !2077
  %14 = load %graph_entry, ptr %13, align 4, !dbg !2077
  store %graph_entry %14, ptr %cur_entry, align 4, !dbg !2077
  %15 = getelementptr inbounds nuw %graph_entry, ptr %cur_entry, i32 0, i32 0, !dbg !2078
  %16 = load i64, ptr @tz_gpu_pass.present, align 4, !dbg !2078
  %17 = load i64, ptr %15, align 4, !dbg !2078
  %18 = icmp eq i64 %17, %16, !dbg !2078
  br i1 %18, label %then1, label %ifcont, !dbg !2078

whilecont:                                        ; preds = %ifcont, %entry
  ret i1 false, !dbg !2079

then1:                                            ; preds = %then
  ret i1 true, !dbg !2080

ifcont:                                           ; preds = %then
  %19 = load i64, ptr %counter, align 4, !dbg !2080
  %20 = add i64 %19, 1, !dbg !2080
  store i64 %20, ptr %counter, align 4, !dbg !2080
  %21 = load i64, ptr %counter, align 4, !dbg !2080
  %22 = add i64 %21, 1, !dbg !2080
  %23 = load i64, ptr %counter, align 4, !dbg !2080
  %24 = load i64, ptr %count, align 4, !dbg !2080
  %25 = icmp ult i64 %23, %24, !dbg !2080
  br i1 %25, label %then, label %whilecont, !dbg !2080
}

define i1 @impl_pass_writes_to_system_image(i64 %pass_param) !dbg !2081 {
entry:
  %pass = alloca i64, align 8
  store i64 %pass_param, ptr %pass, align 4
    #dbg_declare(ptr %pass, !2082, !DIExpression(), !2083)
  %0 = load i64, ptr @tz_gpu_pass.present, align 4, !dbg !2084
  %1 = load i64, ptr %pass, align 4, !dbg !2084
  %2 = icmp eq i64 %1, %0, !dbg !2084
  br i1 %2, label %then, label %ifcont, !dbg !2084

then:                                             ; preds = %entry
  ret i1 false, !dbg !2085

ifcont:                                           ; preds = %entry
  %3 = load i64, ptr %pass, align 4, !dbg !2085
  %4 = load ptr, ptr @passes, align 8, !dbg !2085
  %5 = getelementptr %pass_data_t, ptr %4, i64 %3, !dbg !2085
  %passptr = alloca ptr, align 8, !dbg !2086
  store ptr %5, ptr %passptr, align 8, !dbg !2086
    #dbg_declare(ptr %passptr, !2087, !DIExpression(), !2088)
  %6 = load ptr, ptr %passptr, align 8, !dbg !2086
  %7 = getelementptr inbounds nuw %pass_data_t, ptr %6, i32 0, i32 0, !dbg !2086
  %8 = load %tz_gpu_pass_info, ptr %7, align 8, !dbg !2089
  %passinfo = alloca %tz_gpu_pass_info, align 8, !dbg !2089
  store %tz_gpu_pass_info %8, ptr %passinfo, align 8, !dbg !2089
    #dbg_declare(ptr %passinfo, !2090, !DIExpression(), !2091)
  %9 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %passinfo, i32 0, i32 0, !dbg !2089
  %10 = load %tz_gpu_graphics_state, ptr %9, align 8, !dbg !2092
  %ginfo = alloca %tz_gpu_graphics_state, align 8, !dbg !2092
  store %tz_gpu_graphics_state %10, ptr %ginfo, align 8, !dbg !2092
    #dbg_declare(ptr %ginfo, !2093, !DIExpression(), !2094)
  %counter = alloca i64, align 8, !dbg !2095
  store i64 0, ptr %counter, align 4, !dbg !2095
    #dbg_declare(ptr %counter, !2096, !DIExpression(), !2097)
  %cur_colour_target = alloca i64, align 8, !dbg !2098
    #dbg_declare(ptr %cur_colour_target, !2099, !DIExpression(), !2100)
  %11 = load ptr, ptr %passptr, align 8, !dbg !2101
  %12 = getelementptr inbounds nuw %pass_data_t, ptr %11, i32 0, i32 3, !dbg !2101
  %13 = load i1, ptr %12, align 1, !dbg !2101
  %14 = xor i1 %13, true, !dbg !2101
  br i1 %14, label %then1, label %ifcont2, !dbg !2101

then1:                                            ; preds = %ifcont
  store i64 0, ptr %counter, align 4, !dbg !2102
  %15 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 3, !dbg !2102
  %16 = load i64, ptr %counter, align 4, !dbg !2102
  %17 = load i64, ptr %15, align 4, !dbg !2102
  %18 = icmp ult i64 %16, %17, !dbg !2102
  br i1 %18, label %then3, label %whilecont, !dbg !2102

ifcont2:                                          ; preds = %whilecont, %ifcont
  ret i1 false, !dbg !2103

then3:                                            ; preds = %ifcont5, %then1
  %19 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 2, !dbg !2104
  %20 = load i64, ptr %counter, align 4, !dbg !2104
  %21 = load ptr, ptr %19, align 8, !dbg !2104
  %22 = getelementptr i64, ptr %21, i64 %20, !dbg !2104
  %23 = load i64, ptr %22, align 4, !dbg !2104
  store i64 %23, ptr %cur_colour_target, align 4, !dbg !2104
  %24 = load i64, ptr @tz_gpu_resource.window_resource, align 4, !dbg !2105
  %25 = load i64, ptr %cur_colour_target, align 4, !dbg !2105
  %26 = icmp eq i64 %25, %24, !dbg !2105
  br i1 %26, label %then4, label %ifcont5, !dbg !2105

whilecont:                                        ; preds = %ifcont5, %then1
  br label %ifcont2, !dbg !2106

then4:                                            ; preds = %then3
  ret i1 true, !dbg !2106

ifcont5:                                          ; preds = %then3
  %27 = load i64, ptr %counter, align 4, !dbg !2106
  %28 = add i64 %27, 1, !dbg !2106
  store i64 %28, ptr %counter, align 4, !dbg !2106
  %29 = load i64, ptr %counter, align 4, !dbg !2106
  %30 = add i64 %29, 1, !dbg !2106
  %31 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 3, !dbg !2106
  %32 = load i64, ptr %counter, align 4, !dbg !2106
  %33 = load i64, ptr %31, align 4, !dbg !2106
  %34 = icmp ult i64 %32, %33, !dbg !2106
  br i1 %34, label %then3, label %whilecont, !dbg !2106
}

define i1 @impl_graph_writes_to_system_image(i64 %graph_param) !dbg !2107 {
entry:
  %graph = alloca i64, align 8
  store i64 %graph_param, ptr %graph, align 4
    #dbg_declare(ptr %graph, !2108, !DIExpression(), !2109)
  %0 = load i64, ptr %graph, align 4, !dbg !2110
  %1 = load ptr, ptr @graphs, align 8, !dbg !2110
  %2 = getelementptr %graph_data_t, ptr %1, i64 %0, !dbg !2110
  %graphptr = alloca ptr, align 8, !dbg !2111
  store ptr %2, ptr %graphptr, align 8, !dbg !2111
    #dbg_declare(ptr %graphptr, !2112, !DIExpression(), !2113)
  %3 = load ptr, ptr %graphptr, align 8, !dbg !2111
  %4 = getelementptr inbounds nuw %graph_data_t, ptr %3, i32 0, i32 2, !dbg !2111
  %5 = load i64, ptr %4, align 4, !dbg !2114
  %count = alloca i64, align 8, !dbg !2114
  store i64 %5, ptr %count, align 4, !dbg !2114
    #dbg_declare(ptr %count, !2115, !DIExpression(), !2116)
  %counter = alloca i64, align 8, !dbg !2117
    #dbg_declare(ptr %counter, !2118, !DIExpression(), !2119)
  %cur_entry = alloca %graph_entry, align 8, !dbg !2120
    #dbg_declare(ptr %cur_entry, !2121, !DIExpression(), !2122)
  %cur_pass = alloca i64, align 8, !dbg !2123
    #dbg_declare(ptr %cur_pass, !2124, !DIExpression(), !2125)
  store i64 0, ptr %counter, align 4, !dbg !2126
  %6 = load i64, ptr %counter, align 4, !dbg !2126
  %7 = load i64, ptr %count, align 4, !dbg !2126
  %8 = icmp ult i64 %6, %7, !dbg !2126
  br i1 %8, label %then, label %whilecont, !dbg !2126

then:                                             ; preds = %ifcont, %entry
  %9 = load ptr, ptr %graphptr, align 8, !dbg !2127
  %10 = getelementptr inbounds nuw %graph_data_t, ptr %9, i32 0, i32 1, !dbg !2127
  %11 = load i64, ptr %counter, align 4, !dbg !2127
  %12 = load ptr, ptr %10, align 8, !dbg !2127
  %13 = getelementptr %graph_entry, ptr %12, i64 %11, !dbg !2127
  %14 = load %graph_entry, ptr %13, align 4, !dbg !2127
  store %graph_entry %14, ptr %cur_entry, align 4, !dbg !2127
  %15 = getelementptr inbounds nuw %graph_entry, ptr %cur_entry, i32 0, i32 1, !dbg !2128
  %16 = load i1, ptr %15, align 1, !dbg !2128
  %17 = xor i1 %16, true, !dbg !2128
  br i1 %17, label %then1, label %ifcont, !dbg !2128

whilecont:                                        ; preds = %ifcont, %entry
  ret i1 false, !dbg !2129

then1:                                            ; preds = %then
  %18 = getelementptr inbounds nuw %graph_entry, ptr %cur_entry, i32 0, i32 0, !dbg !2130
  %19 = load i64, ptr %18, align 4, !dbg !2130
  store i64 %19, ptr %cur_pass, align 4, !dbg !2130
  %20 = load i64, ptr %cur_pass, align 4, !dbg !2131
  %21 = call i1 @impl_pass_writes_to_system_image(i64 %20), !dbg !2131
  br i1 %21, label %then2, label %ifcont3, !dbg !2131

ifcont:                                           ; preds = %ifcont3, %then
  %22 = load i64, ptr %counter, align 4, !dbg !2132
  %23 = add i64 %22, 1, !dbg !2132
  store i64 %23, ptr %counter, align 4, !dbg !2132
  %24 = load i64, ptr %counter, align 4, !dbg !2132
  %25 = add i64 %24, 1, !dbg !2132
  %26 = load i64, ptr %counter, align 4, !dbg !2132
  %27 = load i64, ptr %count, align 4, !dbg !2132
  %28 = icmp ult i64 %26, %27, !dbg !2132
  br i1 %28, label %then, label %whilecont, !dbg !2132

then2:                                            ; preds = %then1
  ret i1 true, !dbg !2132

ifcont3:                                          ; preds = %then1
  br label %ifcont, !dbg !2132
}

define ptr @impl_alloc_new_pass(ptr %a_param) !dbg !2133 {
entry:
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !2136, !DIExpression(), !2137)
  %0 = load i64, ptr @passes_cap, align 4, !dbg !2138
  %1 = icmp eq i64 %0, 0, !dbg !2138
  br i1 %1, label %then, label %ifcont, !dbg !2138

then:                                             ; preds = %entry
  %2 = load ptr, ptr %a, align 8, !dbg !2139
  %3 = call ptr @arena_push(ptr %2, i64 6144), !dbg !2139
  store ptr %3, ptr @passes, align 8, !dbg !2139
  store i64 32, ptr @passes_cap, align 4, !dbg !2140
  br label %ifcont, !dbg !2140

ifcont:                                           ; preds = %then, %entry
  %4 = load i64, ptr @passes_count, align 4, !dbg !2141
  %5 = load i64, ptr @passes_cap, align 4, !dbg !2141
  %6 = icmp ugt i64 %4, %5, !dbg !2141
  br i1 %6, label %then1, label %ifcont2, !dbg !2141

then1:                                            ; preds = %ifcont
  call void @puts(ptr @strlit.166), !dbg !2142
  call void @llvm.debugtrap(), !dbg !2143
  br label %ifcont2, !dbg !2143

ifcont2:                                          ; preds = %then1, %ifcont
  %7 = load i64, ptr @passes_count, align 4, !dbg !2144
  %id = alloca i64, align 8, !dbg !2144
  store i64 %7, ptr %id, align 4, !dbg !2144
    #dbg_declare(ptr %id, !2145, !DIExpression(), !2146)
  %8 = load i64, ptr @passes_count, align 4, !dbg !2147
  %9 = add i64 %8, 1, !dbg !2147
  store i64 %9, ptr @passes_count, align 4, !dbg !2147
  %10 = load i64, ptr @passes_count, align 4, !dbg !2147
  %11 = add i64 %10, 1, !dbg !2147
  %12 = load i64, ptr %id, align 4, !dbg !2148
  %13 = load ptr, ptr @passes, align 8, !dbg !2148
  %14 = getelementptr %pass_data_t, ptr %13, i64 %12, !dbg !2148
  ret ptr %14, !dbg !2148
}

define ptr @impl_alloc_new_shader(ptr %a_param) !dbg !2149 {
entry:
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !2152, !DIExpression(), !2153)
  %0 = load i64, ptr @shaders_cap, align 4, !dbg !2154
  %1 = icmp eq i64 %0, 0, !dbg !2154
  br i1 %1, label %then, label %ifcont, !dbg !2154

then:                                             ; preds = %entry
  %2 = load ptr, ptr %a, align 8, !dbg !2155
  %3 = call ptr @arena_push(ptr %2, i64 896), !dbg !2155
  store ptr %3, ptr @shaders, align 8, !dbg !2155
  store i64 32, ptr @shaders_cap, align 4, !dbg !2156
  br label %ifcont, !dbg !2156

ifcont:                                           ; preds = %then, %entry
  %4 = load i64, ptr @shaders_count, align 4, !dbg !2157
  %5 = load i64, ptr @shaders_cap, align 4, !dbg !2157
  %6 = icmp ugt i64 %4, %5, !dbg !2157
  br i1 %6, label %then1, label %ifcont2, !dbg !2157

then1:                                            ; preds = %ifcont
  call void @puts(ptr @strlit.167), !dbg !2158
  call void @llvm.debugtrap(), !dbg !2159
  br label %ifcont2, !dbg !2159

ifcont2:                                          ; preds = %then1, %ifcont
  %7 = load i64, ptr @shaders_count, align 4, !dbg !2160
  %id = alloca i64, align 8, !dbg !2160
  store i64 %7, ptr %id, align 4, !dbg !2160
    #dbg_declare(ptr %id, !2161, !DIExpression(), !2162)
  %8 = load i64, ptr @shaders_count, align 4, !dbg !2163
  %9 = add i64 %8, 1, !dbg !2163
  store i64 %9, ptr @shaders_count, align 4, !dbg !2163
  %10 = load i64, ptr @shaders_count, align 4, !dbg !2163
  %11 = add i64 %10, 1, !dbg !2163
  %12 = load i64, ptr %id, align 4, !dbg !2164
  %13 = load ptr, ptr @shaders, align 8, !dbg !2164
  %14 = getelementptr %shader_data_t, ptr %13, i64 %12, !dbg !2164
  ret ptr %14, !dbg !2164
}

define ptr @impl_alloc_new_resource(ptr %a_param) !dbg !2165 {
entry:
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !2168, !DIExpression(), !2169)
  %0 = load i64, ptr @resource_cap, align 4, !dbg !2170
  %1 = icmp eq i64 %0, 0, !dbg !2170
  br i1 %1, label %then, label %ifcont, !dbg !2170

then:                                             ; preds = %entry
  %2 = load ptr, ptr %a, align 8, !dbg !2171
  %3 = call ptr @arena_push(ptr %2, i64 106496), !dbg !2171
  store ptr %3, ptr @resources, align 8, !dbg !2171
  store i64 1024, ptr @resource_cap, align 4, !dbg !2172
  br label %ifcont, !dbg !2172

ifcont:                                           ; preds = %then, %entry
  %4 = load i64, ptr @resource_count, align 4, !dbg !2173
  %5 = load i64, ptr @resource_cap, align 4, !dbg !2173
  %6 = icmp ugt i64 %4, %5, !dbg !2173
  br i1 %6, label %then1, label %ifcont2, !dbg !2173

then1:                                            ; preds = %ifcont
  call void @puts(ptr @strlit.168), !dbg !2174
  call void @llvm.debugtrap(), !dbg !2175
  br label %ifcont2, !dbg !2175

ifcont2:                                          ; preds = %then1, %ifcont
  %7 = load i64, ptr @resource_count, align 4, !dbg !2176
  %id = alloca i64, align 8, !dbg !2176
  store i64 %7, ptr %id, align 4, !dbg !2176
    #dbg_declare(ptr %id, !2177, !DIExpression(), !2178)
  %8 = load i64, ptr @resource_count, align 4, !dbg !2179
  %9 = add i64 %8, 1, !dbg !2179
  store i64 %9, ptr @resource_count, align 4, !dbg !2179
  %10 = load i64, ptr @resource_count, align 4, !dbg !2179
  %11 = add i64 %10, 1, !dbg !2179
  %12 = load i64, ptr %id, align 4, !dbg !2180
  %13 = load ptr, ptr @resources, align 8, !dbg !2180
  %14 = getelementptr %resource_data_t, ptr %13, i64 %12, !dbg !2180
  ret ptr %14, !dbg !2180
}

define ptr @impl_alloc_new_graph(ptr %a_param) !dbg !2181 {
entry:
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !2184, !DIExpression(), !2185)
  %0 = load i64, ptr @graph_cap, align 4, !dbg !2186
  %1 = icmp eq i64 %0, 0, !dbg !2186
  br i1 %1, label %then, label %ifcont, !dbg !2186

then:                                             ; preds = %entry
  %2 = load ptr, ptr %a, align 8, !dbg !2187
  %3 = call ptr @arena_push(ptr %2, i64 5120), !dbg !2187
  store ptr %3, ptr @graphs, align 8, !dbg !2187
  store i64 64, ptr @graph_cap, align 4, !dbg !2188
  br label %ifcont, !dbg !2188

ifcont:                                           ; preds = %then, %entry
  %4 = load i64, ptr @graph_count, align 4, !dbg !2189
  %5 = load i64, ptr @graph_cap, align 4, !dbg !2189
  %6 = icmp ugt i64 %4, %5, !dbg !2189
  br i1 %6, label %then1, label %ifcont2, !dbg !2189

then1:                                            ; preds = %ifcont
  call void @puts(ptr @strlit.169), !dbg !2190
  call void @llvm.debugtrap(), !dbg !2191
  br label %ifcont2, !dbg !2191

ifcont2:                                          ; preds = %then1, %ifcont
  %7 = load i64, ptr @graph_count, align 4, !dbg !2192
  %id = alloca i64, align 8, !dbg !2192
  store i64 %7, ptr %id, align 4, !dbg !2192
    #dbg_declare(ptr %id, !2193, !DIExpression(), !2194)
  %8 = load i64, ptr @graph_count, align 4, !dbg !2195
  %9 = add i64 %8, 1, !dbg !2195
  store i64 %9, ptr @graph_count, align 4, !dbg !2195
  %10 = load i64, ptr @graph_count, align 4, !dbg !2195
  %11 = add i64 %10, 1, !dbg !2195
  %12 = load i64, ptr %id, align 4, !dbg !2196
  %13 = load ptr, ptr @graphs, align 8, !dbg !2196
  %14 = getelementptr %graph_data_t, ptr %13, i64 %12, !dbg !2196
  ret ptr %14, !dbg !2196
}

define void @impl_vallocator_initial_setup() !dbg !2197 {
entry:
  %0 = load ptr, ptr @null, align 8, !dbg !2198
  %1 = insertvalue %VkMemoryAllocateFlagsInfo { i32 1000060000, ptr undef, i32 undef, i32 undef }, ptr %0, 1, !dbg !2198
  %2 = insertvalue %VkMemoryAllocateFlagsInfo %1, i32 2, 2, !dbg !2198
  %3 = insertvalue %VkMemoryAllocateFlagsInfo %2, i32 0, 3, !dbg !2198
  %bda_flags = alloca %VkMemoryAllocateFlagsInfo, align 8, !dbg !2198
  store %VkMemoryAllocateFlagsInfo %3, ptr %bda_flags, align 8, !dbg !2198
    #dbg_declare(ptr %bda_flags, !2199, !DIExpression(), !2206)
  %4 = load i64, ptr @valloc_initial_size, align 4, !dbg !2207
  %5 = load i32, ptr @used_mti_gpu, align 4, !dbg !2207
  %6 = insertvalue %VkMemoryAllocateInfo { i32 5, ptr undef, i64 undef, i32 undef }, ptr %bda_flags, 1, !dbg !2207
  %7 = insertvalue %VkMemoryAllocateInfo %6, i64 %4, 2, !dbg !2207
  %8 = insertvalue %VkMemoryAllocateInfo %7, i32 %5, 3, !dbg !2207
  %gpucreate = alloca %VkMemoryAllocateInfo, align 8, !dbg !2207
  store %VkMemoryAllocateInfo %8, ptr %gpucreate, align 8, !dbg !2207
    #dbg_declare(ptr %gpucreate, !2208, !DIExpression(), !2215)
  %9 = load i64, ptr @valloc_initial_size, align 4, !dbg !2216
  %10 = load i32, ptr @used_mti_cpu, align 4, !dbg !2216
  %11 = insertvalue %VkMemoryAllocateInfo { i32 5, ptr undef, i64 undef, i32 undef }, ptr %bda_flags, 1, !dbg !2216
  %12 = insertvalue %VkMemoryAllocateInfo %11, i64 %9, 2, !dbg !2216
  %13 = insertvalue %VkMemoryAllocateInfo %12, i32 %10, 3, !dbg !2216
  %cpucreate = alloca %VkMemoryAllocateInfo, align 8, !dbg !2216
  store %VkMemoryAllocateInfo %13, ptr %cpucreate, align 8, !dbg !2216
    #dbg_declare(ptr %cpucreate, !2217, !DIExpression(), !2218)
  %bgpu = alloca ptr, align 8, !dbg !2219
  store ptr @vallocator, ptr %bgpu, align 8, !dbg !2219
    #dbg_declare(ptr %bgpu, !2220, !DIExpression(), !2221)
  %14 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 3), align 8, !dbg !2222
  %15 = load i64, ptr @used_device, align 4, !dbg !2222
  %16 = load ptr, ptr @null, align 8, !dbg !2222
  %17 = load ptr, ptr %bgpu, align 8, !dbg !2222
  %18 = getelementptr inbounds nuw %valloc_t, ptr %17, i32 0, i32 0, !dbg !2222
  %19 = call i32 %14(i64 %15, ptr %gpucreate, ptr %16, ptr %18), !dbg !2222
  call void @vk_check(i32 %19), !dbg !2222
  %20 = load ptr, ptr %bgpu, align 8, !dbg !2223
  %21 = getelementptr inbounds nuw %valloc_t, ptr %20, i32 0, i32 1, !dbg !2223
  %22 = load i64, ptr @valloc_initial_size, align 4, !dbg !2223
  store i64 %22, ptr %21, align 4, !dbg !2223
  %23 = load ptr, ptr %bgpu, align 8, !dbg !2224
  %24 = getelementptr inbounds nuw %valloc_t, ptr %23, i32 0, i32 2, !dbg !2224
  store i64 0, ptr %24, align 4, !dbg !2224
  %igpu = alloca ptr, align 8, !dbg !2225
  store ptr getelementptr inbounds nuw (%vallocator_t, ptr @vallocator, i32 0, i32 1), ptr %igpu, align 8, !dbg !2225
    #dbg_declare(ptr %igpu, !2226, !DIExpression(), !2227)
  %25 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 3), align 8, !dbg !2228
  %26 = load i64, ptr @used_device, align 4, !dbg !2228
  %27 = load ptr, ptr @null, align 8, !dbg !2228
  %28 = load ptr, ptr %igpu, align 8, !dbg !2228
  %29 = getelementptr inbounds nuw %valloc_t, ptr %28, i32 0, i32 0, !dbg !2228
  %30 = call i32 %25(i64 %26, ptr %gpucreate, ptr %27, ptr %29), !dbg !2228
  call void @vk_check(i32 %30), !dbg !2228
  %31 = load ptr, ptr %igpu, align 8, !dbg !2229
  %32 = getelementptr inbounds nuw %valloc_t, ptr %31, i32 0, i32 1, !dbg !2229
  %33 = load i64, ptr @valloc_initial_size, align 4, !dbg !2229
  store i64 %33, ptr %32, align 4, !dbg !2229
  %34 = load ptr, ptr %igpu, align 8, !dbg !2230
  %35 = getelementptr inbounds nuw %valloc_t, ptr %34, i32 0, i32 2, !dbg !2230
  store i64 0, ptr %35, align 4, !dbg !2230
  %bcpu = alloca ptr, align 8, !dbg !2231
  store ptr getelementptr inbounds nuw (%vallocator_t, ptr @vallocator, i32 0, i32 2), ptr %bcpu, align 8, !dbg !2231
    #dbg_declare(ptr %bcpu, !2232, !DIExpression(), !2233)
  %36 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 3), align 8, !dbg !2234
  %37 = load i64, ptr @used_device, align 4, !dbg !2234
  %38 = load ptr, ptr @null, align 8, !dbg !2234
  %39 = load ptr, ptr %bcpu, align 8, !dbg !2234
  %40 = getelementptr inbounds nuw %valloc_t, ptr %39, i32 0, i32 0, !dbg !2234
  %41 = call i32 %36(i64 %37, ptr %cpucreate, ptr %38, ptr %40), !dbg !2234
  call void @vk_check(i32 %41), !dbg !2234
  %42 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 56), align 8, !dbg !2235
  %43 = load i64, ptr @used_device, align 4, !dbg !2235
  %44 = load ptr, ptr %bcpu, align 8, !dbg !2235
  %45 = getelementptr inbounds nuw %valloc_t, ptr %44, i32 0, i32 0, !dbg !2235
  %46 = load i64, ptr %45, align 4, !dbg !2235
  %47 = load i64, ptr @valloc_initial_size, align 4, !dbg !2235
  %48 = load ptr, ptr %bcpu, align 8, !dbg !2235
  %49 = getelementptr inbounds nuw %valloc_t, ptr %48, i32 0, i32 3, !dbg !2235
  %50 = call i32 %42(i64 %43, i64 %46, i64 0, i64 %47, i32 0, ptr %49), !dbg !2235
  call void @vk_check(i32 %50), !dbg !2235
  %51 = load ptr, ptr %bcpu, align 8, !dbg !2236
  %52 = getelementptr inbounds nuw %valloc_t, ptr %51, i32 0, i32 1, !dbg !2236
  %53 = load i64, ptr @valloc_initial_size, align 4, !dbg !2236
  store i64 %53, ptr %52, align 4, !dbg !2236
  %54 = load ptr, ptr %bcpu, align 8, !dbg !2237
  %55 = getelementptr inbounds nuw %valloc_t, ptr %54, i32 0, i32 2, !dbg !2237
  store i64 0, ptr %55, align 4, !dbg !2237
  ret void, !dbg !2238
}

define void @impl_vallocator_free_all() !dbg !2239 {
entry:
  %0 = load %valloc_t, ptr @vallocator, align 8, !dbg !2240
  %bgpu = alloca %valloc_t, align 8, !dbg !2240
  store %valloc_t %0, ptr %bgpu, align 8, !dbg !2240
    #dbg_declare(ptr %bgpu, !2241, !DIExpression(), !2242)
  %1 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 4), align 8, !dbg !2243
  %2 = load i64, ptr @used_device, align 4, !dbg !2243
  %3 = getelementptr inbounds nuw %valloc_t, ptr %bgpu, i32 0, i32 0, !dbg !2243
  %4 = load i64, ptr %3, align 4, !dbg !2243
  %5 = load ptr, ptr @null, align 8, !dbg !2243
  call void %1(i64 %2, i64 %4, ptr %5), !dbg !2243
  %6 = load %valloc_t, ptr getelementptr inbounds nuw (%vallocator_t, ptr @vallocator, i32 0, i32 1), align 8, !dbg !2244
  %igpu = alloca %valloc_t, align 8, !dbg !2244
  store %valloc_t %6, ptr %igpu, align 8, !dbg !2244
    #dbg_declare(ptr %igpu, !2245, !DIExpression(), !2246)
  %7 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 4), align 8, !dbg !2247
  %8 = load i64, ptr @used_device, align 4, !dbg !2247
  %9 = getelementptr inbounds nuw %valloc_t, ptr %igpu, i32 0, i32 0, !dbg !2247
  %10 = load i64, ptr %9, align 4, !dbg !2247
  %11 = load ptr, ptr @null, align 8, !dbg !2247
  call void %7(i64 %8, i64 %10, ptr %11), !dbg !2247
  %12 = load %valloc_t, ptr getelementptr inbounds nuw (%vallocator_t, ptr @vallocator, i32 0, i32 2), align 8, !dbg !2248
  %bcpu = alloca %valloc_t, align 8, !dbg !2248
  store %valloc_t %12, ptr %bcpu, align 8, !dbg !2248
    #dbg_declare(ptr %bcpu, !2249, !DIExpression(), !2250)
  %13 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 4), align 8, !dbg !2251
  %14 = load i64, ptr @used_device, align 4, !dbg !2251
  %15 = getelementptr inbounds nuw %valloc_t, ptr %bcpu, i32 0, i32 0, !dbg !2251
  %16 = load i64, ptr %15, align 4, !dbg !2251
  %17 = load ptr, ptr @null, align 8, !dbg !2251
  call void %13(i64 %14, i64 %16, ptr %17), !dbg !2251
  ret void, !dbg !2252
}

define i64 @impl_bind_buffer_mem(i64 %buffer_param, i64 %bufsize_param, i1 %gpu_memory_param) !dbg !2253 {
entry:
  %buffer = alloca i64, align 8
  store i64 %buffer_param, ptr %buffer, align 4
    #dbg_declare(ptr %buffer, !2256, !DIExpression(), !2257)
  %bufsize = alloca i64, align 8
  store i64 %bufsize_param, ptr %bufsize, align 4
    #dbg_declare(ptr %bufsize, !2258, !DIExpression(), !2257)
  %gpu_memory = alloca i1, align 1
  store i1 %gpu_memory_param, ptr %gpu_memory, align 1
    #dbg_declare(ptr %gpu_memory, !2259, !DIExpression(), !2257)
  %valloc = alloca ptr, align 8, !dbg !2260
  store ptr getelementptr inbounds nuw (%vallocator_t, ptr @vallocator, i32 0, i32 2), ptr %valloc, align 8, !dbg !2260
    #dbg_declare(ptr %valloc, !2261, !DIExpression(), !2262)
  %0 = load i1, ptr %gpu_memory, align 1, !dbg !2263
  br i1 %0, label %then, label %ifcont, !dbg !2263

then:                                             ; preds = %entry
  store ptr @vallocator, ptr %valloc, align 8, !dbg !2264
  br label %ifcont, !dbg !2264

ifcont:                                           ; preds = %then, %entry
  %1 = load ptr, ptr %valloc, align 8, !dbg !2265
  %2 = getelementptr inbounds nuw %valloc_t, ptr %1, i32 0, i32 2, !dbg !2265
  %3 = load i64, ptr %2, align 4, !dbg !2265
  %4 = load i64, ptr %bufsize, align 4, !dbg !2265
  %5 = add i64 %3, %4, !dbg !2265
  %6 = load ptr, ptr %valloc, align 8, !dbg !2265
  %7 = getelementptr inbounds nuw %valloc_t, ptr %6, i32 0, i32 1, !dbg !2265
  %8 = load i64, ptr %7, align 4, !dbg !2265
  %9 = icmp ugt i64 %5, %8, !dbg !2265
  br i1 %9, label %then1, label %ifcont2, !dbg !2265

then1:                                            ; preds = %ifcont
  call void @puts(ptr @strlit.170), !dbg !2266
  %10 = load ptr, ptr %valloc, align 8, !dbg !2267
  %11 = getelementptr inbounds nuw %valloc_t, ptr %10, i32 0, i32 2, !dbg !2267
  %12 = load i64, ptr %11, align 4, !dbg !2267
  %13 = load i64, ptr %bufsize, align 4, !dbg !2267
  %14 = add i64 %12, %13, !dbg !2267
  call void @putuint(i64 %14), !dbg !2267
  call void @puts(ptr @strlit.171), !dbg !2268
  %15 = load ptr, ptr %valloc, align 8, !dbg !2269
  %16 = getelementptr inbounds nuw %valloc_t, ptr %15, i32 0, i32 1, !dbg !2269
  %17 = load i64, ptr %16, align 4, !dbg !2269
  call void @putuint(i64 %17), !dbg !2269
  call void @puts(ptr @strlit.172), !dbg !2270
  call void @llvm.debugtrap(), !dbg !2271
  br label %ifcont2, !dbg !2271

ifcont2:                                          ; preds = %then1, %ifcont
  %memreqs = alloca %VkMemoryRequirements, align 8, !dbg !2272
    #dbg_declare(ptr %memreqs, !2273, !DIExpression(), !2274)
  %18 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 55), align 8, !dbg !2275
  %19 = load i64, ptr @used_device, align 4, !dbg !2275
  %20 = load i64, ptr %buffer, align 4, !dbg !2275
  call void %18(i64 %19, i64 %20, ptr %memreqs), !dbg !2275
  %21 = getelementptr inbounds nuw %VkMemoryRequirements, ptr %memreqs, i32 0, i32 1, !dbg !2275
  %22 = load ptr, ptr %valloc, align 8, !dbg !2275
  %23 = getelementptr inbounds nuw %valloc_t, ptr %22, i32 0, i32 2, !dbg !2275
  %24 = getelementptr inbounds nuw %VkMemoryRequirements, ptr %memreqs, i32 0, i32 1, !dbg !2275
  %25 = load i64, ptr %23, align 4, !dbg !2275
  %26 = load i64, ptr %24, align 4, !dbg !2275
  %27 = urem i64 %25, %26, !dbg !2275
  %28 = load i64, ptr %21, align 4, !dbg !2275
  %29 = sub i64 %28, %27, !dbg !2275
  %30 = getelementptr inbounds nuw %VkMemoryRequirements, ptr %memreqs, i32 0, i32 1, !dbg !2275
  %31 = load i64, ptr %30, align 4, !dbg !2275
  %32 = urem i64 %29, %31, !dbg !2275
  %padding = alloca i64, align 8, !dbg !2276
  store i64 %32, ptr %padding, align 4, !dbg !2276
    #dbg_declare(ptr %padding, !2277, !DIExpression(), !2278)
  %33 = load ptr, ptr %valloc, align 8, !dbg !2279
  %34 = getelementptr inbounds nuw %valloc_t, ptr %33, i32 0, i32 2, !dbg !2279
  %35 = load ptr, ptr %valloc, align 8, !dbg !2279
  %36 = getelementptr inbounds nuw %valloc_t, ptr %35, i32 0, i32 2, !dbg !2279
  %37 = load i64, ptr %36, align 4, !dbg !2279
  %38 = load i64, ptr %padding, align 4, !dbg !2279
  %39 = add i64 %37, %38, !dbg !2279
  store i64 %39, ptr %34, align 4, !dbg !2279
  %40 = load i64, ptr %34, align 4, !dbg !2279
  %41 = load i64, ptr %padding, align 4, !dbg !2279
  %42 = add i64 %40, %41, !dbg !2279
  %43 = load ptr, ptr %valloc, align 8, !dbg !2279
  %44 = getelementptr inbounds nuw %valloc_t, ptr %43, i32 0, i32 2, !dbg !2279
  %45 = load i64, ptr %44, align 4, !dbg !2280
  %offset_from_zero = alloca i64, align 8, !dbg !2280
  store i64 %45, ptr %offset_from_zero, align 4, !dbg !2280
    #dbg_declare(ptr %offset_from_zero, !2281, !DIExpression(), !2282)
  %46 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 5), align 8, !dbg !2280
  %47 = load i64, ptr @used_device, align 4, !dbg !2280
  %48 = load i64, ptr %buffer, align 4, !dbg !2280
  %49 = load ptr, ptr %valloc, align 8, !dbg !2280
  %50 = getelementptr inbounds nuw %valloc_t, ptr %49, i32 0, i32 0, !dbg !2280
  %51 = load i64, ptr %50, align 4, !dbg !2280
  %52 = load ptr, ptr %valloc, align 8, !dbg !2280
  %53 = getelementptr inbounds nuw %valloc_t, ptr %52, i32 0, i32 2, !dbg !2280
  %54 = load i64, ptr %53, align 4, !dbg !2280
  %55 = call i32 %46(i64 %47, i64 %48, i64 %51, i64 %54), !dbg !2280
  %ret = alloca i32, align 4, !dbg !2283
  store i32 %55, ptr %ret, align 4, !dbg !2283
    #dbg_declare(ptr %ret, !2284, !DIExpression(), !2285)
  %56 = load i32, ptr %ret, align 4, !dbg !2286
  %57 = icmp eq i32 %56, -1, !dbg !2286
  br i1 %57, label %then3, label %ifcont4, !dbg !2286

then3:                                            ; preds = %ifcont2
  call void @puts(ptr @strlit.173), !dbg !2287
  call void @llvm.debugtrap(), !dbg !2288
  br label %ifcont4, !dbg !2288

ifcont4:                                          ; preds = %then3, %ifcont2
  %58 = load i32, ptr %ret, align 4, !dbg !2289
  %59 = icmp eq i32 %58, -2, !dbg !2289
  br i1 %59, label %then5, label %ifcont6, !dbg !2289

then5:                                            ; preds = %ifcont4
  call void @puts(ptr @strlit.174), !dbg !2290
  call void @llvm.debugtrap(), !dbg !2291
  br label %ifcont6, !dbg !2291

ifcont6:                                          ; preds = %then5, %ifcont4
  %60 = load ptr, ptr %valloc, align 8, !dbg !2292
  %61 = getelementptr inbounds nuw %valloc_t, ptr %60, i32 0, i32 2, !dbg !2292
  %62 = load ptr, ptr %valloc, align 8, !dbg !2292
  %63 = getelementptr inbounds nuw %valloc_t, ptr %62, i32 0, i32 2, !dbg !2292
  %64 = load i64, ptr %63, align 4, !dbg !2292
  %65 = load i64, ptr %bufsize, align 4, !dbg !2292
  %66 = add i64 %64, %65, !dbg !2292
  store i64 %66, ptr %61, align 4, !dbg !2292
  %67 = load i64, ptr %61, align 4, !dbg !2292
  %68 = load i64, ptr %bufsize, align 4, !dbg !2292
  %69 = add i64 %67, %68, !dbg !2292
  %70 = load i64, ptr %offset_from_zero, align 4, !dbg !2293
  ret i64 %70, !dbg !2293
}

define void @impl_cpu_gpu_transfer(i64 %dst_gpu_res_param, i1 %dst_gpu_is_buffer_param, ptr %src_data_param, i64 %src_data_size_param, %vec2u32 %image_dimensions_param) !dbg !2294 {
entry:
  %dst_gpu_res = alloca i64, align 8
  store i64 %dst_gpu_res_param, ptr %dst_gpu_res, align 4
    #dbg_declare(ptr %dst_gpu_res, !2297, !DIExpression(), !2298)
  %dst_gpu_is_buffer = alloca i1, align 1
  store i1 %dst_gpu_is_buffer_param, ptr %dst_gpu_is_buffer, align 1
    #dbg_declare(ptr %dst_gpu_is_buffer, !2299, !DIExpression(), !2298)
  %src_data = alloca ptr, align 8
  store ptr %src_data_param, ptr %src_data, align 8
    #dbg_declare(ptr %src_data, !2300, !DIExpression(), !2298)
  %src_data_size = alloca i64, align 8
  store i64 %src_data_size_param, ptr %src_data_size, align 4
    #dbg_declare(ptr %src_data_size, !2301, !DIExpression(), !2298)
  %image_dimensions = alloca %vec2u32, align 8
  store %vec2u32 %image_dimensions_param, ptr %image_dimensions, align 4
    #dbg_declare(ptr %image_dimensions, !2302, !DIExpression(), !2298)
  call void @impl_begin_scratch_commands(), !dbg !2303
  %0 = load ptr, ptr @null, align 8, !dbg !2304
  %1 = load i64, ptr %src_data_size, align 4, !dbg !2304
  %2 = insertvalue %VkBufferCreateInfo { i32 12, ptr undef, i32 undef, i64 undef, i32 undef, i32 undef, i32 undef, ptr undef }, ptr %0, 1, !dbg !2304
  %3 = insertvalue %VkBufferCreateInfo %2, i32 0, 2, !dbg !2304
  %4 = insertvalue %VkBufferCreateInfo %3, i64 %1, 3, !dbg !2304
  %5 = insertvalue %VkBufferCreateInfo %4, i32 1, 4, !dbg !2304
  %6 = insertvalue %VkBufferCreateInfo %5, i32 0, 5, !dbg !2304
  %7 = insertvalue %VkBufferCreateInfo %6, i32 1, 6, !dbg !2304
  %8 = insertvalue %VkBufferCreateInfo %7, ptr @used_qfi, 7, !dbg !2304
  %staging_create = alloca %VkBufferCreateInfo, align 8, !dbg !2304
  store %VkBufferCreateInfo %8, ptr %staging_create, align 8, !dbg !2304
    #dbg_declare(ptr %staging_create, !2305, !DIExpression(), !2316)
  %staging = alloca i64, align 8, !dbg !2317
    #dbg_declare(ptr %staging, !2318, !DIExpression(), !2319)
  %9 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 43), align 8, !dbg !2320
  %10 = load i64, ptr @used_device, align 4, !dbg !2320
  %11 = load ptr, ptr @null, align 8, !dbg !2320
  %12 = call i32 %9(i64 %10, ptr %staging_create, ptr %11, ptr %staging), !dbg !2320
  %13 = load %valloc_t, ptr getelementptr inbounds nuw (%vallocator_t, ptr @vallocator, i32 0, i32 2), align 8, !dbg !2321
  %old_cpumem = alloca %valloc_t, align 8, !dbg !2321
  store %valloc_t %13, ptr %old_cpumem, align 8, !dbg !2321
    #dbg_declare(ptr %old_cpumem, !2322, !DIExpression(), !2323)
  %14 = load i64, ptr %staging, align 4, !dbg !2324
  %15 = load i64, ptr %src_data_size, align 4, !dbg !2324
  %16 = call i64 @impl_bind_buffer_mem(i64 %14, i64 %15, i1 false), !dbg !2324
  %cursor = alloca i64, align 8, !dbg !2324
  store i64 %16, ptr %cursor, align 4, !dbg !2324
    #dbg_declare(ptr %cursor, !2325, !DIExpression(), !2326)
  %17 = load %valloc_t, ptr getelementptr inbounds nuw (%vallocator_t, ptr @vallocator, i32 0, i32 2), align 8, !dbg !2327
  %cpumem = alloca %valloc_t, align 8, !dbg !2327
  store %valloc_t %17, ptr %cpumem, align 8, !dbg !2327
    #dbg_declare(ptr %cpumem, !2328, !DIExpression(), !2329)
  %18 = getelementptr inbounds nuw %valloc_t, ptr %cpumem, i32 0, i32 3, !dbg !2327
  %19 = load ptr, ptr %18, align 8, !dbg !2327
  %mapped_ptr = alloca ptr, align 8, !dbg !2330
  store ptr %19, ptr %mapped_ptr, align 8, !dbg !2330
    #dbg_declare(ptr %mapped_ptr, !2331, !DIExpression(), !2332)
  %20 = load i64, ptr %cursor, align 4, !dbg !2333
  %21 = load ptr, ptr %mapped_ptr, align 8, !dbg !2333
  %22 = getelementptr i8, ptr %21, i64 %20, !dbg !2333
  %23 = load ptr, ptr %src_data, align 8, !dbg !2333
  %24 = load i64, ptr %src_data_size, align 4, !dbg !2333
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %22, ptr %23, i64 %24, i1 false), !dbg !2333
  %aspect_mask = alloca i32, align 4, !dbg !2334
  store i32 1, ptr %aspect_mask, align 4, !dbg !2334
    #dbg_declare(ptr %aspect_mask, !2335, !DIExpression(), !2336)
  %25 = load i1, ptr %dst_gpu_is_buffer, align 1, !dbg !2337
  br i1 %25, label %then, label %ifcont, !dbg !2337

then:                                             ; preds = %entry
  %26 = load i64, ptr %src_data_size, align 4, !dbg !2338
  %27 = insertvalue %VkBufferCopy { i64 0, i64 0, i64 undef }, i64 %26, 2, !dbg !2338
  %cpy = alloca %VkBufferCopy, align 8, !dbg !2338
  store %VkBufferCopy %27, ptr %cpy, align 4, !dbg !2338
    #dbg_declare(ptr %cpy, !2339, !DIExpression(), !2345)
  %28 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 74), align 8, !dbg !2346
  %29 = load i64, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 1), align 4, !dbg !2346
  %30 = load i64, ptr %staging, align 4, !dbg !2346
  %31 = load i64, ptr %dst_gpu_res, align 4, !dbg !2346
  call void %28(i64 %29, i64 %30, i64 %31, i32 1, ptr %cpy), !dbg !2346
  br label %ifcont, !dbg !2346

ifcont:                                           ; preds = %then, %entry
  %32 = load i1, ptr %dst_gpu_is_buffer, align 1, !dbg !2347
  %33 = xor i1 %32, true, !dbg !2347
  br i1 %33, label %then1, label %ifcont2, !dbg !2347

then1:                                            ; preds = %ifcont
  %34 = load i32, ptr %aspect_mask, align 4, !dbg !2348
  %35 = insertvalue %VkImageSubresourceLayers undef, i32 %34, 0, !dbg !2348
  %36 = insertvalue %VkImageSubresourceLayers %35, i32 0, 1, !dbg !2348
  %37 = insertvalue %VkImageSubresourceLayers %36, i32 0, 2, !dbg !2348
  %38 = insertvalue %VkImageSubresourceLayers %37, i32 1, 3, !dbg !2348
  %39 = getelementptr inbounds nuw %vec2u32, ptr %image_dimensions, i32 0, i32 0, !dbg !2348
  %40 = load i32, ptr %39, align 4, !dbg !2348
  %41 = getelementptr inbounds nuw %vec2u32, ptr %image_dimensions, i32 0, i32 1, !dbg !2348
  %42 = load i32, ptr %41, align 4, !dbg !2348
  %43 = insertvalue %VkExtent3D undef, i32 %40, 0, !dbg !2348
  %44 = insertvalue %VkExtent3D %43, i32 %42, 1, !dbg !2348
  %45 = insertvalue %VkExtent3D %44, i32 1, 2, !dbg !2348
  %46 = insertvalue %VkBufferImageCopy { i64 0, i32 0, i32 0, %VkImageSubresourceLayers undef, %VkOffset3D undef, %VkExtent3D undef }, %VkImageSubresourceLayers %38, 3, !dbg !2348
  %47 = insertvalue %VkBufferImageCopy %46, %VkOffset3D zeroinitializer, 4, !dbg !2348
  %48 = insertvalue %VkBufferImageCopy %47, %VkExtent3D %45, 5, !dbg !2348
  %cpy3 = alloca %VkBufferImageCopy, align 8, !dbg !2348
  store %VkBufferImageCopy %48, ptr %cpy3, align 4, !dbg !2348
    #dbg_declare(ptr %cpy3, !2349, !DIExpression(), !2369)
  %49 = load ptr, ptr @null, align 8, !dbg !2370
  %50 = load i64, ptr %dst_gpu_res, align 4, !dbg !2370
  %51 = load i32, ptr %aspect_mask, align 4, !dbg !2370
  %52 = insertvalue %VkImageSubresourceRange undef, i32 %51, 0, !dbg !2370
  %53 = insertvalue %VkImageSubresourceRange %52, i32 0, 1, !dbg !2370
  %54 = insertvalue %VkImageSubresourceRange %53, i32 1, 2, !dbg !2370
  %55 = insertvalue %VkImageSubresourceRange %54, i32 0, 3, !dbg !2370
  %56 = insertvalue %VkImageSubresourceRange %55, i32 1, 4, !dbg !2370
  %57 = insertvalue %VkImageMemoryBarrier { i32 45, ptr undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i64 undef, %VkImageSubresourceRange undef }, ptr %49, 1, !dbg !2370
  %58 = insertvalue %VkImageMemoryBarrier %57, i32 0, 2, !dbg !2370
  %59 = insertvalue %VkImageMemoryBarrier %58, i32 4096, 3, !dbg !2370
  %60 = insertvalue %VkImageMemoryBarrier %59, i32 0, 4, !dbg !2370
  %61 = insertvalue %VkImageMemoryBarrier %60, i32 7, 5, !dbg !2370
  %62 = insertvalue %VkImageMemoryBarrier %61, i32 -1, 6, !dbg !2370
  %63 = insertvalue %VkImageMemoryBarrier %62, i32 -1, 7, !dbg !2370
  %64 = insertvalue %VkImageMemoryBarrier %63, i64 %50, 8, !dbg !2370
  %65 = insertvalue %VkImageMemoryBarrier %64, %VkImageSubresourceRange %56, 9, !dbg !2370
  %barrier = alloca %VkImageMemoryBarrier, align 8, !dbg !2370
  store %VkImageMemoryBarrier %65, ptr %barrier, align 8, !dbg !2370
    #dbg_declare(ptr %barrier, !2371, !DIExpression(), !2372)
  %66 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 63), align 8, !dbg !2373
  %67 = load i64, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 1), align 4, !dbg !2373
  %68 = load ptr, ptr @null, align 8, !dbg !2373
  %69 = load ptr, ptr @null, align 8, !dbg !2373
  call void %66(i64 %67, i32 0, i32 4096, i32 0, i32 0, ptr %68, i32 0, ptr %69, i32 1, ptr %barrier), !dbg !2373
  %70 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 75), align 8, !dbg !2374
  %71 = load i64, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 1), align 4, !dbg !2374
  %72 = load i64, ptr %staging, align 4, !dbg !2374
  %73 = load i64, ptr %dst_gpu_res, align 4, !dbg !2374
  call void %70(i64 %71, i64 %72, i64 %73, i32 7, i32 1, ptr %cpy3), !dbg !2374
  br label %ifcont2, !dbg !2374

ifcont2:                                          ; preds = %then1, %ifcont
  call void @impl_end_and_execute_scratch_commands(), !dbg !2375
  %74 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 44), align 8, !dbg !2376
  %75 = load i64, ptr @used_device, align 4, !dbg !2376
  %76 = load i64, ptr %staging, align 4, !dbg !2376
  %77 = load ptr, ptr @null, align 8, !dbg !2376
  call void %74(i64 %75, i64 %76, ptr %77), !dbg !2376
  ret void, !dbg !2377
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

define void @impl_write_a_resource(ptr %resptr_param) !dbg !2378 {
entry:
  %resptr = alloca ptr, align 8
  store ptr %resptr_param, ptr %resptr, align 8
    #dbg_declare(ptr %resptr, !2381, !DIExpression(), !2382)
  %0 = load ptr, ptr %resptr, align 8, !dbg !2383
  %1 = getelementptr inbounds nuw %resource_data_t, ptr %0, i32 0, i32 0, !dbg !2383
  %2 = load %tz_gpu_resource_info, ptr %1, align 8, !dbg !2384
  %rinfo = alloca %tz_gpu_resource_info, align 8, !dbg !2384
  store %tz_gpu_resource_info %2, ptr %rinfo, align 8, !dbg !2384
    #dbg_declare(ptr %rinfo, !2385, !DIExpression(), !2386)
  %3 = load ptr, ptr %resptr, align 8, !dbg !2384
  %4 = getelementptr inbounds nuw %resource_data_t, ptr %3, i32 0, i32 1, !dbg !2384
  %5 = load i1, ptr %4, align 1, !dbg !2387
  %is_dynamic_buffer = alloca i1, align 1, !dbg !2387
  store i1 %5, ptr %is_dynamic_buffer, align 1, !dbg !2387
    #dbg_declare(ptr %is_dynamic_buffer, !2388, !DIExpression(), !2389)
  %6 = load i1, ptr %is_dynamic_buffer, align 1, !dbg !2390
  br i1 %6, label %then, label %ifcont, !dbg !2390

then:                                             ; preds = %entry
  %7 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %rinfo, i32 0, i32 5, !dbg !2391
  %8 = load i64, ptr @tz_gpu_buffer_flag.dynamic, align 4, !dbg !2391
  %9 = load i64, ptr %7, align 4, !dbg !2391
  %10 = and i64 %9, %8, !dbg !2391
  %11 = icmp sgt i64 %10, 0, !dbg !2391
  store i1 %11, ptr %is_dynamic_buffer, align 1, !dbg !2391
  br label %ifcont, !dbg !2391

ifcont:                                           ; preds = %then, %entry
  %12 = load i1, ptr %is_dynamic_buffer, align 1, !dbg !2392
  br i1 %12, label %then1, label %ifcont2, !dbg !2392

then1:                                            ; preds = %ifcont
  %13 = load ptr, ptr %resptr, align 8, !dbg !2393
  %14 = getelementptr inbounds nuw %resource_data_t, ptr %13, i32 0, i32 6, !dbg !2393
  %15 = load ptr, ptr %14, align 8, !dbg !2393
  %16 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %rinfo, i32 0, i32 0, !dbg !2393
  %17 = load ptr, ptr %16, align 8, !dbg !2393
  %18 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %rinfo, i32 0, i32 1, !dbg !2393
  %19 = load i64, ptr %18, align 4, !dbg !2393
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %15, ptr %17, i64 %19, i1 false), !dbg !2393
  br label %ifcont2, !dbg !2393

ifcont2:                                          ; preds = %then1, %ifcont
  %20 = load i1, ptr %is_dynamic_buffer, align 1, !dbg !2394
  %21 = xor i1 %20, true, !dbg !2394
  br i1 %21, label %then3, label %ifcont4, !dbg !2394

then3:                                            ; preds = %ifcont2
  %22 = load ptr, ptr %resptr, align 8, !dbg !2395
  %23 = getelementptr inbounds nuw %resource_data_t, ptr %22, i32 0, i32 2, !dbg !2395
  %24 = load i64, ptr %23, align 4, !dbg !2395
  %25 = load ptr, ptr %resptr, align 8, !dbg !2395
  %26 = getelementptr inbounds nuw %resource_data_t, ptr %25, i32 0, i32 1, !dbg !2395
  %27 = load i1, ptr %26, align 1, !dbg !2395
  %28 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %rinfo, i32 0, i32 0, !dbg !2395
  %29 = load ptr, ptr %28, align 8, !dbg !2395
  %30 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %rinfo, i32 0, i32 1, !dbg !2395
  %31 = load i64, ptr %30, align 4, !dbg !2395
  %32 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %rinfo, i32 0, i32 2, !dbg !2395
  %33 = load %vec2u32, ptr %32, align 4, !dbg !2395
  call void @impl_cpu_gpu_transfer(i64 %24, i1 %27, ptr %29, i64 %31, %vec2u32 %33), !dbg !2395
  br label %ifcont4, !dbg !2395

ifcont4:                                          ; preds = %then3, %ifcont2
  ret void, !dbg !2383
}

define void @impl_write_resources(ptr %passptr_param, ptr %long_param, ptr %short_param) !dbg !2396 {
entry:
  %passptr = alloca ptr, align 8
  store ptr %passptr_param, ptr %passptr, align 8
    #dbg_declare(ptr %passptr, !2397, !DIExpression(), !2398)
  %long = alloca ptr, align 8
  store ptr %long_param, ptr %long, align 8
    #dbg_declare(ptr %long, !2399, !DIExpression(), !2398)
  %short = alloca ptr, align 8
  store ptr %short_param, ptr %short, align 8
    #dbg_declare(ptr %short, !2400, !DIExpression(), !2398)
  %0 = load ptr, ptr %passptr, align 8, !dbg !2401
  %1 = getelementptr inbounds nuw %pass_data_t, ptr %0, i32 0, i32 0, !dbg !2401
  %2 = load %tz_gpu_pass_info, ptr %1, align 8, !dbg !2402
  %pinfo = alloca %tz_gpu_pass_info, align 8, !dbg !2402
  store %tz_gpu_pass_info %2, ptr %pinfo, align 8, !dbg !2402
    #dbg_declare(ptr %pinfo, !2403, !DIExpression(), !2404)
  %3 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 4, !dbg !2405
  %4 = load i64, ptr %3, align 4, !dbg !2405
  %5 = icmp eq i64 %4, 0, !dbg !2405
  br i1 %5, label %then, label %ifcont, !dbg !2405

then:                                             ; preds = %entry
  ret void, !dbg !2406

ifcont:                                           ; preds = %entry
  %6 = load ptr, ptr %short, align 8, !dbg !2407
  %7 = load ptr, ptr %passptr, align 8, !dbg !2407
  %8 = getelementptr inbounds nuw %pass_data_t, ptr %7, i32 0, i32 2, !dbg !2407
  %9 = load i64, ptr %8, align 4, !dbg !2407
  %10 = call ptr @arena_push(ptr %6, i64 %9), !dbg !2407
  %buffer_addresses = alloca ptr, align 8, !dbg !2407
  store ptr %10, ptr %buffer_addresses, align 8, !dbg !2407
    #dbg_declare(ptr %buffer_addresses, !2408, !DIExpression(), !2409)
  %bufcount = alloca i64, align 8, !dbg !2410
  store i64 0, ptr %bufcount, align 4, !dbg !2410
    #dbg_declare(ptr %bufcount, !2411, !DIExpression(), !2412)
  %i = alloca i64, align 8, !dbg !2413
  store i64 0, ptr %i, align 4, !dbg !2413
    #dbg_declare(ptr %i, !2414, !DIExpression(), !2415)
  %curres = alloca i64, align 8, !dbg !2416
    #dbg_declare(ptr %curres, !2417, !DIExpression(), !2418)
  %resdata = alloca %resource_data_t, align 8, !dbg !2419
    #dbg_declare(ptr %resdata, !2420, !DIExpression(), !2421)
  store i64 0, ptr %i, align 4, !dbg !2422
  %11 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 4, !dbg !2422
  %12 = load i64, ptr %i, align 4, !dbg !2422
  %13 = load i64, ptr %11, align 4, !dbg !2422
  %14 = icmp ult i64 %12, %13, !dbg !2422
  br i1 %14, label %then1, label %whilecont, !dbg !2422

then1:                                            ; preds = %ifcont3, %ifcont
  %15 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 3, !dbg !2423
  %16 = load i64, ptr %i, align 4, !dbg !2423
  %17 = load ptr, ptr %15, align 8, !dbg !2423
  %18 = getelementptr i64, ptr %17, i64 %16, !dbg !2423
  %19 = load i64, ptr %18, align 4, !dbg !2423
  store i64 %19, ptr %curres, align 4, !dbg !2423
  %20 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !2424
  %21 = load i64, ptr %curres, align 4, !dbg !2424
  %22 = icmp ne i64 %21, %20, !dbg !2424
  br i1 %22, label %then2, label %ifcont3, !dbg !2424

whilecont:                                        ; preds = %ifcont3, %ifcont
  %23 = load ptr, ptr %passptr, align 8, !dbg !2425
  %24 = getelementptr inbounds nuw %pass_data_t, ptr %23, i32 0, i32 2, !dbg !2425
  %25 = load i64, ptr %24, align 4, !dbg !2425
  %26 = udiv i64 %25, 8, !dbg !2425
  %27 = load i64, ptr %bufcount, align 4, !dbg !2425
  %28 = icmp ne i64 %27, %26, !dbg !2425
  br i1 %28, label %then10, label %ifcont11, !dbg !2425

then2:                                            ; preds = %then1
  %29 = load i64, ptr @tz_gpu_resource.window_resource, align 4, !dbg !2426
  %30 = load i64, ptr %curres, align 4, !dbg !2426
  %31 = icmp ne i64 %30, %29, !dbg !2426
  br i1 %31, label %then4, label %ifcont5, !dbg !2426

ifcont3:                                          ; preds = %ifcont5, %then1
  %32 = load i64, ptr %i, align 4, !dbg !2427
  %33 = add i64 %32, 1, !dbg !2427
  store i64 %33, ptr %i, align 4, !dbg !2427
  %34 = load i64, ptr %i, align 4, !dbg !2427
  %35 = add i64 %34, 1, !dbg !2427
  %36 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %pinfo, i32 0, i32 4, !dbg !2427
  %37 = load i64, ptr %i, align 4, !dbg !2427
  %38 = load i64, ptr %36, align 4, !dbg !2427
  %39 = icmp ult i64 %37, %38, !dbg !2427
  br i1 %39, label %then1, label %whilecont, !dbg !2427

then4:                                            ; preds = %then2
  %40 = load i64, ptr %curres, align 4, !dbg !2428
  %41 = load ptr, ptr @resources, align 8, !dbg !2428
  %42 = getelementptr %resource_data_t, ptr %41, i64 %40, !dbg !2428
  %43 = load %resource_data_t, ptr %42, align 8, !dbg !2428
  store %resource_data_t %43, ptr %resdata, align 8, !dbg !2428
  %44 = getelementptr inbounds nuw %resource_data_t, ptr %resdata, i32 0, i32 1, !dbg !2429
  %45 = load i1, ptr %44, align 1, !dbg !2429
  br i1 %45, label %then6, label %ifcont7, !dbg !2429

ifcont5:                                          ; preds = %ifcont9, %then2
  br label %ifcont3, !dbg !2427

then6:                                            ; preds = %then4
  %46 = load i64, ptr %bufcount, align 4, !dbg !2430
  %47 = load ptr, ptr %buffer_addresses, align 8, !dbg !2430
  %48 = getelementptr i64, ptr %47, i64 %46, !dbg !2430
  %49 = load i64, ptr %48, align 4, !dbg !2430
  %50 = getelementptr inbounds nuw %resource_data_t, ptr %resdata, i32 0, i32 5, !dbg !2430
  %51 = load i64, ptr %50, align 4, !dbg !2430
  store i64 %51, ptr %48, align 4, !dbg !2430
  %52 = load i64, ptr %bufcount, align 4, !dbg !2431
  %53 = add i64 %52, 1, !dbg !2431
  store i64 %53, ptr %bufcount, align 4, !dbg !2431
  %54 = load i64, ptr %bufcount, align 4, !dbg !2431
  %55 = add i64 %54, 1, !dbg !2431
  br label %ifcont7, !dbg !2431

ifcont7:                                          ; preds = %then6, %then4
  %56 = getelementptr inbounds nuw %resource_data_t, ptr %resdata, i32 0, i32 1, !dbg !2432
  %57 = load i1, ptr %56, align 1, !dbg !2432
  %58 = xor i1 %57, true, !dbg !2432
  br i1 %58, label %then8, label %ifcont9, !dbg !2432

then8:                                            ; preds = %ifcont7
  br label %ifcont9, !dbg !2427

ifcont9:                                          ; preds = %then8, %ifcont7
  br label %ifcont5, !dbg !2427

then10:                                           ; preds = %whilecont
  call void @puts(ptr @strlit.175), !dbg !2433
  call void @llvm.debugtrap(), !dbg !2434
  br label %ifcont11, !dbg !2434

ifcont11:                                         ; preds = %then10, %whilecont
  %59 = load i64, ptr %bufcount, align 4, !dbg !2435
  %60 = icmp ugt i64 %59, 0, !dbg !2435
  br i1 %60, label %then12, label %ifcont13, !dbg !2435

then12:                                           ; preds = %ifcont11
  %61 = load ptr, ptr %passptr, align 8, !dbg !2436
  %62 = getelementptr inbounds nuw %pass_data_t, ptr %61, i32 0, i32 1, !dbg !2436
  %63 = load i64, ptr %62, align 4, !dbg !2436
  %64 = load ptr, ptr %buffer_addresses, align 8, !dbg !2436
  %65 = load ptr, ptr %passptr, align 8, !dbg !2436
  %66 = getelementptr inbounds nuw %pass_data_t, ptr %65, i32 0, i32 2, !dbg !2436
  %67 = load i64, ptr %66, align 4, !dbg !2436
  %68 = call %vec2u32 @vec2u32_zero(), !dbg !2436
  call void @impl_cpu_gpu_transfer(i64 %63, i1 true, ptr %64, i64 %67, %vec2u32 %68), !dbg !2436
  br label %ifcont13, !dbg !2436

ifcont13:                                         ; preds = %then12, %ifcont11
  ret void, !dbg !2401
}

define i64 @impl_initialise_pipeline_layout() !dbg !2437 {
entry:
  %bindings = alloca [2 x %VkDescriptorSetLayoutBinding], align 8, !dbg !2440
    #dbg_declare(ptr %bindings, !2441, !DIExpression(), !2450)
  %0 = getelementptr [2 x %VkDescriptorSetLayoutBinding], ptr %bindings, i64 0, i64 0, !dbg !2451
  %1 = load %VkDescriptorSetLayoutBinding, ptr %0, align 8, !dbg !2451
  %2 = load ptr, ptr @null, align 8, !dbg !2451
  %3 = insertvalue %VkDescriptorSetLayoutBinding { i32 0, i32 7, i32 1, i32 2147483647, ptr undef }, ptr %2, 4, !dbg !2451
  store %VkDescriptorSetLayoutBinding %3, ptr %0, align 8, !dbg !2451
  %4 = getelementptr [2 x %VkDescriptorSetLayoutBinding], ptr %bindings, i64 0, i64 1, !dbg !2452
  %5 = load %VkDescriptorSetLayoutBinding, ptr %4, align 8, !dbg !2452
  %6 = load i64, ptr @MAX_GLOBAL_IMAGE_COUNT, align 4, !dbg !2452
  %7 = trunc i64 %6 to i32, !dbg !2452
  %8 = load ptr, ptr @null, align 8, !dbg !2452
  %9 = insertvalue %VkDescriptorSetLayoutBinding { i32 1, i32 1, i32 undef, i32 undef, ptr undef }, i32 %7, 2, !dbg !2452
  %10 = insertvalue %VkDescriptorSetLayoutBinding %9, i32 2147483647, 3, !dbg !2452
  %11 = insertvalue %VkDescriptorSetLayoutBinding %10, ptr %8, 4, !dbg !2452
  store %VkDescriptorSetLayoutBinding %11, ptr %4, align 8, !dbg !2452
  %bindings_size = alloca i32, align 4, !dbg !2453
  store i32 2, ptr %bindings_size, align 4, !dbg !2453
    #dbg_declare(ptr %bindings_size, !2454, !DIExpression(), !2455)
  %flags = alloca [2 x i32], align 4, !dbg !2456
    #dbg_declare(ptr %flags, !2457, !DIExpression(), !2458)
  %12 = getelementptr [2 x i32], ptr %flags, i64 0, i64 0, !dbg !2459
  %13 = load i32, ptr %12, align 4, !dbg !2459
  store i32 0, ptr %12, align 4, !dbg !2459
  %14 = getelementptr [2 x i32], ptr %flags, i64 0, i64 1, !dbg !2460
  %15 = load i32, ptr %14, align 4, !dbg !2460
  store i32 15, ptr %14, align 4, !dbg !2460
  %flags_size = alloca i32, align 4, !dbg !2461
  store i32 2, ptr %flags_size, align 4, !dbg !2461
    #dbg_declare(ptr %flags_size, !2462, !DIExpression(), !2463)
  %16 = load ptr, ptr @null, align 8, !dbg !2464
  %17 = load i32, ptr %flags_size, align 4, !dbg !2464
  %18 = getelementptr [2 x i32], ptr %flags, i64 0, i64 0, !dbg !2464
  %19 = insertvalue %VkDescriptorSetLayoutBindingFlagsCreateInfo { i32 1000161000, ptr undef, i32 undef, ptr undef }, ptr %16, 1, !dbg !2464
  %20 = insertvalue %VkDescriptorSetLayoutBindingFlagsCreateInfo %19, i32 %17, 2, !dbg !2464
  %21 = insertvalue %VkDescriptorSetLayoutBindingFlagsCreateInfo %20, ptr %18, 3, !dbg !2464
  %flags_create = alloca %VkDescriptorSetLayoutBindingFlagsCreateInfo, align 8, !dbg !2464
  store %VkDescriptorSetLayoutBindingFlagsCreateInfo %21, ptr %flags_create, align 8, !dbg !2464
    #dbg_declare(ptr %flags_create, !2465, !DIExpression(), !2472)
  %22 = load i32, ptr %bindings_size, align 4, !dbg !2473
  %23 = getelementptr [2 x %VkDescriptorSetLayoutBinding], ptr %bindings, i64 0, i64 0, !dbg !2473
  %24 = insertvalue %VkDescriptorSetLayoutCreateInfo { i32 32, ptr undef, i32 undef, i32 undef, ptr undef }, ptr %flags_create, 1, !dbg !2473
  %25 = insertvalue %VkDescriptorSetLayoutCreateInfo %24, i32 2, 2, !dbg !2473
  %26 = insertvalue %VkDescriptorSetLayoutCreateInfo %25, i32 %22, 3, !dbg !2473
  %27 = insertvalue %VkDescriptorSetLayoutCreateInfo %26, ptr %23, 4, !dbg !2473
  %layout_create = alloca %VkDescriptorSetLayoutCreateInfo, align 8, !dbg !2473
  store %VkDescriptorSetLayoutCreateInfo %27, ptr %layout_create, align 8, !dbg !2473
    #dbg_declare(ptr %layout_create, !2474, !DIExpression(), !2482)
  %counter = alloca i64, align 8, !dbg !2483
    #dbg_declare(ptr %counter, !2484, !DIExpression(), !2485)
  store i64 0, ptr %counter, align 4, !dbg !2486
  %28 = load i64, ptr %counter, align 4, !dbg !2486
  %29 = load i64, ptr @frame_overlap, align 4, !dbg !2486
  %30 = icmp ult i64 %28, %29, !dbg !2486
  br i1 %30, label %then, label %whilecont, !dbg !2486

then:                                             ; preds = %then, %entry
  %31 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 35), align 8, !dbg !2487
  %32 = load i64, ptr @used_device, align 4, !dbg !2487
  %33 = load ptr, ptr @null, align 8, !dbg !2487
  %34 = load i64, ptr %counter, align 4, !dbg !2487
  %35 = getelementptr [2 x i64], ptr @set_layouts, i64 0, i64 %34, !dbg !2487
  %36 = call i32 %31(i64 %32, ptr %layout_create, ptr %33, ptr %35), !dbg !2487
  call void @vk_check(i32 %36), !dbg !2487
  %37 = load i64, ptr %counter, align 4, !dbg !2487
  %38 = add i64 %37, 1, !dbg !2487
  store i64 %38, ptr %counter, align 4, !dbg !2487
  %39 = load i64, ptr %counter, align 4, !dbg !2487
  %40 = add i64 %39, 1, !dbg !2487
  %41 = load i64, ptr %counter, align 4, !dbg !2487
  %42 = load i64, ptr @frame_overlap, align 4, !dbg !2487
  %43 = icmp ult i64 %41, %42, !dbg !2487
  br i1 %43, label %then, label %whilecont, !dbg !2487

whilecont:                                        ; preds = %then, %entry
  %44 = load ptr, ptr @null, align 8, !dbg !2488
  %45 = load i64, ptr @frame_overlap, align 4, !dbg !2488
  %46 = trunc i64 %45 to i32, !dbg !2488
  %47 = load ptr, ptr @null, align 8, !dbg !2488
  %48 = insertvalue %VkPipelineLayoutCreateInfo { i32 30, ptr undef, i32 undef, i32 undef, ptr undef, i32 undef, ptr undef }, ptr %44, 1, !dbg !2488
  %49 = insertvalue %VkPipelineLayoutCreateInfo %48, i32 0, 2, !dbg !2488
  %50 = insertvalue %VkPipelineLayoutCreateInfo %49, i32 %46, 3, !dbg !2488
  %51 = insertvalue %VkPipelineLayoutCreateInfo %50, ptr @set_layouts, 4, !dbg !2488
  %52 = insertvalue %VkPipelineLayoutCreateInfo %51, i32 0, 5, !dbg !2488
  %53 = insertvalue %VkPipelineLayoutCreateInfo %52, ptr %47, 6, !dbg !2488
  %create = alloca %VkPipelineLayoutCreateInfo, align 8, !dbg !2488
  store %VkPipelineLayoutCreateInfo %53, ptr %create, align 8, !dbg !2488
    #dbg_declare(ptr %create, !2489, !DIExpression(), !2505)
  %ret = alloca i64, align 8, !dbg !2506
    #dbg_declare(ptr %ret, !2507, !DIExpression(), !2508)
  %54 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 37), align 8, !dbg !2509
  %55 = load i64, ptr @used_device, align 4, !dbg !2509
  %56 = load ptr, ptr @null, align 8, !dbg !2509
  %57 = call i32 %54(i64 %55, ptr %create, ptr %56, ptr %ret), !dbg !2509
  call void @vk_check(i32 %57), !dbg !2509
  %58 = load i64, ptr %ret, align 4, !dbg !2510
  ret i64 %58, !dbg !2510
}

define void @impl_fill_hardware_info(ptr %hw_param, i64 %pdev_param, ptr %a_param) !dbg !2511 {
entry:
  %hw = alloca ptr, align 8
  store ptr %hw_param, ptr %hw, align 8
    #dbg_declare(ptr %hw, !2525, !DIExpression(), !2526)
  %pdev = alloca i64, align 8
  store i64 %pdev_param, ptr %pdev, align 4
    #dbg_declare(ptr %pdev, !2527, !DIExpression(), !2526)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !2528, !DIExpression(), !2526)
  %props = alloca %VkPhysicalDeviceProperties, align 8, !dbg !2529
    #dbg_declare(ptr %props, !2530, !DIExpression(), !2657)
  %0 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 21), align 8, !dbg !2658
  %1 = load i64, ptr %pdev, align 4, !dbg !2658
  call void %0(i64 %1, ptr %props), !dbg !2658
  %memprops = alloca %VkPhysicalDeviceMemoryProperties, align 8, !dbg !2659
    #dbg_declare(ptr %memprops, !2660, !DIExpression(), !2677)
  %2 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 22), align 8, !dbg !2678
  %3 = load i64, ptr %pdev, align 4, !dbg !2678
  call void %2(i64 %3, ptr %memprops), !dbg !2678
  %4 = load ptr, ptr %hw, align 8, !dbg !2679
  %5 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %4, i32 0, i32 6, !dbg !2679
  store i32 -1, ptr %5, align 4, !dbg !2679
  %6 = load ptr, ptr %hw, align 8, !dbg !2680
  %7 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %6, i32 0, i32 7, !dbg !2680
  %8 = load i64, ptr %pdev, align 4, !dbg !2680
  store i64 %8, ptr %7, align 4, !dbg !2680
  %9 = load ptr, ptr %hw, align 8, !dbg !2681
  %10 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %9, i32 0, i32 3, !dbg !2681
  store i64 0, ptr %10, align 4, !dbg !2681
  %11 = load ptr, ptr %hw, align 8, !dbg !2682
  %12 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %11, i32 0, i32 1, !dbg !2682
  store i64 0, ptr %12, align 4, !dbg !2682
  %13 = load ptr, ptr %hw, align 8, !dbg !2683
  %14 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %13, i32 0, i32 2, !dbg !2683
  store i64 0, ptr %14, align 4, !dbg !2683
  %15 = load ptr, ptr %hw, align 8, !dbg !2684
  %16 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %15, i32 0, i32 4, !dbg !2684
  %17 = load i64, ptr @tz_gpu_hardware_type.unknown, align 4, !dbg !2684
  store i64 %17, ptr %16, align 4, !dbg !2684
  %18 = getelementptr inbounds nuw %VkPhysicalDeviceProperties, ptr %props, i32 0, i32 4, !dbg !2685
  %19 = load i32, ptr %18, align 4, !dbg !2685
  %20 = icmp eq i32 %19, 1, !dbg !2685
  br i1 %20, label %then, label %ifcont, !dbg !2685

then:                                             ; preds = %entry
  %21 = load ptr, ptr %hw, align 8, !dbg !2686
  %22 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %21, i32 0, i32 4, !dbg !2686
  %23 = load i64, ptr @tz_gpu_hardware_type.igpu, align 4, !dbg !2686
  store i64 %23, ptr %22, align 4, !dbg !2686
  br label %ifcont, !dbg !2686

ifcont:                                           ; preds = %then, %entry
  %24 = getelementptr inbounds nuw %VkPhysicalDeviceProperties, ptr %props, i32 0, i32 4, !dbg !2687
  %25 = load i32, ptr %24, align 4, !dbg !2687
  %26 = icmp eq i32 %25, 2, !dbg !2687
  br i1 %26, label %then1, label %ifcont2, !dbg !2687

then1:                                            ; preds = %ifcont
  %27 = load ptr, ptr %hw, align 8, !dbg !2688
  %28 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %27, i32 0, i32 4, !dbg !2688
  %29 = load i64, ptr @tz_gpu_hardware_type.gpu, align 4, !dbg !2688
  store i64 %29, ptr %28, align 4, !dbg !2688
  br label %ifcont2, !dbg !2688

ifcont2:                                          ; preds = %then1, %ifcont
  %30 = getelementptr inbounds nuw %VkPhysicalDeviceProperties, ptr %props, i32 0, i32 4, !dbg !2689
  %31 = load i32, ptr %30, align 4, !dbg !2689
  %32 = icmp eq i32 %31, 4, !dbg !2689
  br i1 %32, label %then3, label %ifcont4, !dbg !2689

then3:                                            ; preds = %ifcont2
  %33 = load ptr, ptr %hw, align 8, !dbg !2690
  %34 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %33, i32 0, i32 4, !dbg !2690
  %35 = load i64, ptr @tz_gpu_hardware_type.cpu, align 4, !dbg !2690
  store i64 %35, ptr %34, align 4, !dbg !2690
  br label %ifcont4, !dbg !2690

ifcont4:                                          ; preds = %then3, %ifcont2
  %counter = alloca i32, align 4, !dbg !2691
  store i32 0, ptr %counter, align 4, !dbg !2691
    #dbg_declare(ptr %counter, !2692, !DIExpression(), !2693)
  %cur_vk_heap = alloca %VkMemoryHeap, align 8, !dbg !2694
    #dbg_declare(ptr %cur_vk_heap, !2695, !DIExpression(), !2696)
  %cur_mem_ty = alloca %VkMemoryType, align 8, !dbg !2697
    #dbg_declare(ptr %cur_mem_ty, !2698, !DIExpression(), !2699)
  %size_gpu = alloca i64, align 8, !dbg !2700
  store i64 0, ptr %size_gpu, align 4, !dbg !2700
    #dbg_declare(ptr %size_gpu, !2701, !DIExpression(), !2702)
  %size_cpu = alloca i64, align 8, !dbg !2703
  store i64 0, ptr %size_cpu, align 4, !dbg !2703
    #dbg_declare(ptr %size_cpu, !2704, !DIExpression(), !2705)
  store i32 0, ptr %counter, align 4, !dbg !2706
  %36 = getelementptr inbounds nuw %VkPhysicalDeviceMemoryProperties, ptr %memprops, i32 0, i32 0, !dbg !2706
  %37 = load i32, ptr %counter, align 4, !dbg !2706
  %38 = load i32, ptr %36, align 4, !dbg !2706
  %39 = icmp ult i32 %37, %38, !dbg !2706
  br i1 %39, label %then5, label %whilecont, !dbg !2706

then5:                                            ; preds = %ifcont11, %ifcont4
  %40 = getelementptr inbounds nuw %VkPhysicalDeviceMemoryProperties, ptr %memprops, i32 0, i32 1, !dbg !2707
  %41 = load i32, ptr %counter, align 4, !dbg !2707
  %42 = getelementptr [32 x %VkMemoryType], ptr %40, i64 0, i32 %41, !dbg !2707
  %43 = load %VkMemoryType, ptr %42, align 4, !dbg !2707
  store %VkMemoryType %43, ptr %cur_mem_ty, align 4, !dbg !2707
  %44 = getelementptr inbounds nuw %VkPhysicalDeviceMemoryProperties, ptr %memprops, i32 0, i32 3, !dbg !2708
  %45 = getelementptr inbounds nuw %VkMemoryType, ptr %cur_mem_ty, i32 0, i32 1, !dbg !2708
  %46 = load i32, ptr %45, align 4, !dbg !2708
  %47 = getelementptr [32 x %VkMemoryHeap], ptr %44, i64 0, i32 %46, !dbg !2708
  %48 = load %VkMemoryHeap, ptr %47, align 4, !dbg !2708
  store %VkMemoryHeap %48, ptr %cur_vk_heap, align 4, !dbg !2708
  %49 = getelementptr inbounds nuw %VkMemoryType, ptr %cur_mem_ty, i32 0, i32 0, !dbg !2709
  %50 = load i32, ptr %49, align 4, !dbg !2709
  %51 = sext i32 %50 to i64, !dbg !2709
  %52 = and i64 %51, 2, !dbg !2709
  %53 = icmp ne i64 %52, 0, !dbg !2709
  br i1 %53, label %then6, label %ifcont7, !dbg !2709

whilecont:                                        ; preds = %ifcont11, %ifcont4
  store i32 0, ptr %counter, align 4, !dbg !2710
  store i32 0, ptr %counter, align 4, !dbg !2711
  %54 = getelementptr inbounds nuw %VkPhysicalDeviceMemoryProperties, ptr %memprops, i32 0, i32 2, !dbg !2711
  %55 = load i32, ptr %counter, align 4, !dbg !2711
  %56 = load i32, ptr %54, align 4, !dbg !2711
  %57 = icmp ult i32 %55, %56, !dbg !2711
  br i1 %57, label %then14, label %whilecont15, !dbg !2711

then6:                                            ; preds = %then5
  %58 = getelementptr inbounds nuw %VkMemoryHeap, ptr %cur_vk_heap, i32 0, i32 0, !dbg !2712
  %59 = load i64, ptr %size_cpu, align 4, !dbg !2712
  %60 = load i64, ptr %58, align 4, !dbg !2712
  %61 = icmp ult i64 %59, %60, !dbg !2712
  br i1 %61, label %then8, label %ifcont9, !dbg !2712

ifcont7:                                          ; preds = %ifcont9, %then5
  %62 = getelementptr inbounds nuw %VkMemoryType, ptr %cur_mem_ty, i32 0, i32 0, !dbg !2713
  %63 = load i32, ptr %62, align 4, !dbg !2713
  %64 = sext i32 %63 to i64, !dbg !2713
  %65 = and i64 %64, 1, !dbg !2713
  %66 = icmp ne i64 %65, 0, !dbg !2713
  br i1 %66, label %then10, label %ifcont11, !dbg !2713

then8:                                            ; preds = %then6
  %67 = load ptr, ptr %hw, align 8, !dbg !2714
  %68 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %67, i32 0, i32 2, !dbg !2714
  %69 = load i32, ptr %counter, align 4, !dbg !2714
  %70 = zext i32 %69 to i64, !dbg !2714
  store i64 %70, ptr %68, align 4, !dbg !2714
  %71 = load i64, ptr %68, align 4, !dbg !2714
  %72 = getelementptr inbounds nuw %VkMemoryHeap, ptr %cur_vk_heap, i32 0, i32 0, !dbg !2715
  %73 = load i64, ptr %72, align 4, !dbg !2715
  store i64 %73, ptr %size_cpu, align 4, !dbg !2715
  br label %ifcont9, !dbg !2715

ifcont9:                                          ; preds = %then8, %then6
  br label %ifcont7, !dbg !2715

then10:                                           ; preds = %ifcont7
  %74 = getelementptr inbounds nuw %VkMemoryHeap, ptr %cur_vk_heap, i32 0, i32 0, !dbg !2716
  %75 = load i64, ptr %size_gpu, align 4, !dbg !2716
  %76 = load i64, ptr %74, align 4, !dbg !2716
  %77 = icmp ult i64 %75, %76, !dbg !2716
  br i1 %77, label %then12, label %ifcont13, !dbg !2716

ifcont11:                                         ; preds = %ifcont13, %ifcont7
  %78 = load i32, ptr %counter, align 4, !dbg !2717
  %79 = sext i32 %78 to i64, !dbg !2717
  %80 = add i64 %79, 1, !dbg !2717
  %81 = trunc i64 %80 to i32, !dbg !2717
  store i32 %81, ptr %counter, align 4, !dbg !2717
  %82 = load i32, ptr %counter, align 4, !dbg !2717
  %83 = sext i32 %82 to i64, !dbg !2717
  %84 = add i64 %83, 1, !dbg !2717
  %85 = getelementptr inbounds nuw %VkPhysicalDeviceMemoryProperties, ptr %memprops, i32 0, i32 0, !dbg !2717
  %86 = load i32, ptr %counter, align 4, !dbg !2717
  %87 = load i32, ptr %85, align 4, !dbg !2717
  %88 = icmp ult i32 %86, %87, !dbg !2717
  br i1 %88, label %then5, label %whilecont, !dbg !2717

then12:                                           ; preds = %then10
  %89 = load ptr, ptr %hw, align 8, !dbg !2718
  %90 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %89, i32 0, i32 1, !dbg !2718
  %91 = load i32, ptr %counter, align 4, !dbg !2718
  %92 = zext i32 %91 to i64, !dbg !2718
  store i64 %92, ptr %90, align 4, !dbg !2718
  %93 = load i64, ptr %90, align 4, !dbg !2718
  %94 = getelementptr inbounds nuw %VkMemoryHeap, ptr %cur_vk_heap, i32 0, i32 0, !dbg !2717
  %95 = load i64, ptr %94, align 4, !dbg !2717
  store i64 %95, ptr %size_gpu, align 4, !dbg !2717
  br label %ifcont13, !dbg !2717

ifcont13:                                         ; preds = %then12, %then10
  br label %ifcont11, !dbg !2717

then14:                                           ; preds = %then14, %whilecont
  %96 = getelementptr inbounds nuw %VkPhysicalDeviceMemoryProperties, ptr %memprops, i32 0, i32 3, !dbg !2719
  %97 = load i32, ptr %counter, align 4, !dbg !2719
  %98 = getelementptr [32 x %VkMemoryHeap], ptr %96, i64 0, i32 %97, !dbg !2719
  %99 = load %VkMemoryHeap, ptr %98, align 4, !dbg !2719
  store %VkMemoryHeap %99, ptr %cur_vk_heap, align 4, !dbg !2719
  %100 = load ptr, ptr %hw, align 8, !dbg !2720
  %101 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %100, i32 0, i32 3, !dbg !2720
  %102 = load ptr, ptr %hw, align 8, !dbg !2720
  %103 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %102, i32 0, i32 3, !dbg !2720
  %104 = getelementptr inbounds nuw %VkMemoryHeap, ptr %cur_vk_heap, i32 0, i32 0, !dbg !2720
  %105 = load i64, ptr %103, align 4, !dbg !2720
  %106 = load i64, ptr %104, align 4, !dbg !2720
  %107 = add i64 %105, %106, !dbg !2720
  store i64 %107, ptr %101, align 4, !dbg !2720
  %108 = getelementptr inbounds nuw %VkMemoryHeap, ptr %cur_vk_heap, i32 0, i32 0, !dbg !2720
  %109 = load i64, ptr %101, align 4, !dbg !2720
  %110 = load i64, ptr %108, align 4, !dbg !2720
  %111 = add i64 %109, %110, !dbg !2720
  %112 = load i32, ptr %counter, align 4, !dbg !2720
  %113 = sext i32 %112 to i64, !dbg !2720
  %114 = add i64 %113, 1, !dbg !2720
  %115 = trunc i64 %114 to i32, !dbg !2720
  store i32 %115, ptr %counter, align 4, !dbg !2720
  %116 = load i32, ptr %counter, align 4, !dbg !2720
  %117 = sext i32 %116 to i64, !dbg !2720
  %118 = add i64 %117, 1, !dbg !2720
  %119 = getelementptr inbounds nuw %VkPhysicalDeviceMemoryProperties, ptr %memprops, i32 0, i32 2, !dbg !2720
  %120 = load i32, ptr %counter, align 4, !dbg !2720
  %121 = load i32, ptr %119, align 4, !dbg !2720
  %122 = icmp ult i32 %120, %121, !dbg !2720
  br i1 %122, label %then14, label %whilecont15, !dbg !2720

whilecont15:                                      ; preds = %then14, %whilecont
  %family_count = alloca i32, align 4, !dbg !2721
  store i32 0, ptr %family_count, align 4, !dbg !2721
    #dbg_declare(ptr %family_count, !2722, !DIExpression(), !2723)
  %123 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 23), align 8, !dbg !2724
  %124 = load i64, ptr %pdev, align 4, !dbg !2724
  %125 = load ptr, ptr @null, align 8, !dbg !2724
  call void %123(i64 %124, ptr %family_count, ptr %125), !dbg !2724
  %126 = load ptr, ptr %a, align 8, !dbg !2725
  %127 = load i32, ptr %family_count, align 4, !dbg !2725
  %128 = sext i32 %127 to i64, !dbg !2725
  %129 = mul i64 24, %128, !dbg !2725
  %130 = call ptr @arena_push(ptr %126, i64 %129), !dbg !2725
  %families = alloca ptr, align 8, !dbg !2725
  store ptr %130, ptr %families, align 8, !dbg !2725
    #dbg_declare(ptr %families, !2726, !DIExpression(), !2734)
  %131 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 23), align 8, !dbg !2735
  %132 = load i64, ptr %pdev, align 4, !dbg !2735
  %133 = load ptr, ptr %families, align 8, !dbg !2735
  call void %131(i64 %132, ptr %family_count, ptr %133), !dbg !2735
  %cur_fam = alloca %VkQueueFamilyProperties, align 8, !dbg !2736
    #dbg_declare(ptr %cur_fam, !2737, !DIExpression(), !2738)
  store i32 0, ptr %counter, align 4, !dbg !2739
  %134 = load i32, ptr %counter, align 4, !dbg !2739
  %135 = load i32, ptr %family_count, align 4, !dbg !2739
  %136 = icmp ult i32 %134, %135, !dbg !2739
  br i1 %136, label %then16, label %whilecont17, !dbg !2739

then16:                                           ; preds = %ifcont19, %whilecont15
  %137 = load i32, ptr %counter, align 4, !dbg !2740
  %138 = load ptr, ptr %families, align 8, !dbg !2740
  %139 = getelementptr %VkQueueFamilyProperties, ptr %138, i32 %137, !dbg !2740
  %140 = load %VkQueueFamilyProperties, ptr %139, align 4, !dbg !2740
  store %VkQueueFamilyProperties %140, ptr %cur_fam, align 4, !dbg !2740
  %141 = getelementptr inbounds nuw %VkQueueFamilyProperties, ptr %cur_fam, i32 0, i32 0, !dbg !2741
  %142 = load i32, ptr %141, align 4, !dbg !2741
  %143 = sext i32 %142 to i64, !dbg !2741
  %144 = and i64 %143, 3, !dbg !2741
  %145 = icmp ne i64 %144, 0, !dbg !2741
  br i1 %145, label %then18, label %ifcont19, !dbg !2741

whilecont17:                                      ; preds = %ifcont19, %whilecont15
  %146 = load ptr, ptr %hw, align 8, !dbg !2742
  %147 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %146, i32 0, i32 0, !dbg !2742
  %148 = getelementptr inbounds nuw %VkPhysicalDeviceProperties, ptr %props, i32 0, i32 5, !dbg !2742
  %149 = getelementptr [256 x i8], ptr %148, i64 0, i64 0, !dbg !2742
  %150 = load ptr, ptr %a, align 8, !dbg !2742
  %151 = call %string @create_string(ptr %149, ptr %150), !dbg !2742
  store %string %151, ptr %147, align 8, !dbg !2742
  ret void, !dbg !2743

then18:                                           ; preds = %then16
  %152 = load ptr, ptr %hw, align 8, !dbg !2744
  %153 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %152, i32 0, i32 6, !dbg !2744
  %154 = load i32, ptr %counter, align 4, !dbg !2744
  store i32 %154, ptr %153, align 4, !dbg !2744
  %155 = load i32, ptr %family_count, align 4, !dbg !2745
  store i32 %155, ptr %counter, align 4, !dbg !2745
  br label %ifcont19, !dbg !2745

ifcont19:                                         ; preds = %then18, %then16
  %156 = load i32, ptr %counter, align 4, !dbg !2745
  %157 = sext i32 %156 to i64, !dbg !2745
  %158 = add i64 %157, 1, !dbg !2745
  %159 = trunc i64 %158 to i32, !dbg !2745
  store i32 %159, ptr %counter, align 4, !dbg !2745
  %160 = load i32, ptr %counter, align 4, !dbg !2745
  %161 = sext i32 %160 to i64, !dbg !2745
  %162 = add i64 %161, 1, !dbg !2745
  %163 = load i32, ptr %counter, align 4, !dbg !2745
  %164 = load i32, ptr %family_count, align 4, !dbg !2745
  %165 = icmp ult i32 %163, %164, !dbg !2745
  br i1 %165, label %then16, label %whilecont17, !dbg !2745
}

define void @tz_gpu_init(%tz_gpu_appinfo %info_param) !dbg !2746 {
entry:
  %info = alloca %tz_gpu_appinfo, align 8
  store %tz_gpu_appinfo %info_param, ptr %info, align 8
    #dbg_declare(ptr %info, !2754, !DIExpression(), !2755)
  %0 = call i32 @VK_MAKE_API_VERSION(i32 0, i32 0, i32 1, i32 0), !dbg !2756
  %TZ_GPU_VERSION = alloca i32, align 4, !dbg !2756
  store i32 %0, ptr %TZ_GPU_VERSION, align 4, !dbg !2756
    #dbg_declare(ptr %TZ_GPU_VERSION, !2757, !DIExpression(), !2758)
  call void @vulkan_init(), !dbg !2759
  %1 = load ptr, ptr @null, align 8, !dbg !2760
  %2 = getelementptr inbounds nuw %tz_gpu_appinfo, ptr %info, i32 0, i32 0, !dbg !2760
  %3 = load ptr, ptr %2, align 8, !dbg !2760
  %4 = getelementptr inbounds nuw %tz_gpu_appinfo, ptr %info, i32 0, i32 1, !dbg !2760
  %5 = load i32, ptr %4, align 4, !dbg !2760
  %6 = getelementptr inbounds nuw %tz_gpu_appinfo, ptr %info, i32 0, i32 2, !dbg !2760
  %7 = load i32, ptr %6, align 4, !dbg !2760
  %8 = call i32 @VK_MAKE_API_VERSION(i32 0, i32 %5, i32 %7, i32 0), !dbg !2760
  %9 = load i32, ptr %TZ_GPU_VERSION, align 4, !dbg !2760
  %10 = call i32 @VK_MAKE_API_VERSION(i32 0, i32 1, i32 3, i32 0), !dbg !2760
  %11 = insertvalue %VkApplicationInfo { i32 0, ptr undef, ptr undef, i32 undef, ptr undef, i32 undef, i32 undef }, ptr %1, 1, !dbg !2760
  %12 = insertvalue %VkApplicationInfo %11, ptr %3, 2, !dbg !2760
  %13 = insertvalue %VkApplicationInfo %12, i32 %8, 3, !dbg !2760
  %14 = insertvalue %VkApplicationInfo %13, ptr @strlit.176, 4, !dbg !2760
  %15 = insertvalue %VkApplicationInfo %14, i32 %9, 5, !dbg !2760
  %16 = insertvalue %VkApplicationInfo %15, i32 %10, 6, !dbg !2760
  %appinfo = alloca %VkApplicationInfo, align 8, !dbg !2760
  store %VkApplicationInfo %16, ptr %appinfo, align 8, !dbg !2760
    #dbg_declare(ptr %appinfo, !2761, !DIExpression(), !2771)
  %extensions = alloca [3 x ptr], align 8, !dbg !2772
    #dbg_declare(ptr %extensions, !2773, !DIExpression(), !2775)
  %17 = getelementptr [3 x ptr], ptr %extensions, i64 0, i64 0, !dbg !2776
  %18 = load ptr, ptr %17, align 8, !dbg !2776
  store ptr @strlit.177, ptr %17, align 8, !dbg !2776
  %19 = getelementptr [3 x ptr], ptr %extensions, i64 0, i64 1, !dbg !2777
  %20 = load ptr, ptr %19, align 8, !dbg !2777
  store ptr @strlit.178, ptr %19, align 8, !dbg !2777
  %21 = getelementptr [3 x ptr], ptr %extensions, i64 0, i64 2, !dbg !2778
  %22 = load ptr, ptr %21, align 8, !dbg !2778
  store ptr @strlit.179, ptr %21, align 8, !dbg !2778
  %extension_count = alloca i32, align 4, !dbg !2779
  store i32 3, ptr %extension_count, align 4, !dbg !2779
    #dbg_declare(ptr %extension_count, !2780, !DIExpression(), !2781)
  %layers = alloca [1 x ptr], align 8, !dbg !2782
    #dbg_declare(ptr %layers, !2783, !DIExpression(), !2784)
  %23 = getelementptr [1 x ptr], ptr %layers, i64 0, i64 0, !dbg !2785
  %24 = load ptr, ptr %23, align 8, !dbg !2785
  store ptr @strlit.180, ptr %23, align 8, !dbg !2785
  %layer_count = alloca i64, align 8, !dbg !2786
  store i64 1, ptr %layer_count, align 4, !dbg !2786
    #dbg_declare(ptr %layer_count, !2787, !DIExpression(), !2788)
  call void @puts(ptr @strlit.183), !dbg !2789
  call void @putchar(i8 10), !dbg !2790
  %25 = load ptr, ptr @null, align 8, !dbg !2791
  %26 = load i64, ptr %layer_count, align 4, !dbg !2791
  %27 = trunc i64 %26 to i32, !dbg !2791
  %28 = getelementptr [1 x ptr], ptr %layers, i64 0, i64 0, !dbg !2791
  %29 = load i32, ptr %extension_count, align 4, !dbg !2791
  %30 = getelementptr [3 x ptr], ptr %extensions, i64 0, i64 0, !dbg !2791
  %31 = insertvalue %VkInstanceCreateInfo { i32 1, ptr undef, i32 undef, ptr undef, i32 undef, ptr undef, i32 undef, ptr undef }, ptr %25, 1, !dbg !2791
  %32 = insertvalue %VkInstanceCreateInfo %31, i32 0, 2, !dbg !2791
  %33 = insertvalue %VkInstanceCreateInfo %32, ptr %appinfo, 3, !dbg !2791
  %34 = insertvalue %VkInstanceCreateInfo %33, i32 %27, 4, !dbg !2791
  %35 = insertvalue %VkInstanceCreateInfo %34, ptr %28, 5, !dbg !2791
  %36 = insertvalue %VkInstanceCreateInfo %35, i32 %29, 6, !dbg !2791
  %37 = insertvalue %VkInstanceCreateInfo %36, ptr %30, 7, !dbg !2791
  %create = alloca %VkInstanceCreateInfo, align 8, !dbg !2791
  store %VkInstanceCreateInfo %37, ptr %create, align 8, !dbg !2791
    #dbg_declare(ptr %create, !2792, !DIExpression(), !2804)
  %38 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 1), align 8, !dbg !2805
  %39 = load ptr, ptr @null, align 8, !dbg !2805
  %40 = call i32 %38(ptr %create, ptr %39, ptr @vkinst), !dbg !2805
  call void @vk_check(i32 %40), !dbg !2805
  %41 = load i64, ptr @vkinst, align 4, !dbg !2806
  call void @vulkan_load_functions(i64 %41), !dbg !2806
  ret void, !dbg !2807
}

define void @tz_gpu_term() !dbg !2808 {
entry:
  %0 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 76), align 8, !dbg !2809
  %1 = load i64, ptr @used_device, align 4, !dbg !2809
  call void %0(i64 %1), !dbg !2809
  %2 = load i64, ptr @pipeline_layout, align 4, !dbg !2810
  %3 = icmp ne i64 %2, 0, !dbg !2810
  br i1 %3, label %then, label %ifcont, !dbg !2810

then:                                             ; preds = %entry
  %4 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 38), align 8, !dbg !2811
  %5 = load i64, ptr @used_device, align 4, !dbg !2811
  %6 = load i64, ptr @pipeline_layout, align 4, !dbg !2811
  %7 = load ptr, ptr @null, align 8, !dbg !2811
  call void %4(i64 %5, i64 %6, ptr %7), !dbg !2811
  store i64 0, ptr @pipeline_layout, align 4, !dbg !2812
  br label %ifcont, !dbg !2812

ifcont:                                           ; preds = %then, %entry
  %8 = load i64, ptr @scratch, align 4, !dbg !2813
  %9 = icmp ne i64 %8, 0, !dbg !2813
  br i1 %9, label %then1, label %ifcont2, !dbg !2813

then1:                                            ; preds = %ifcont
  %10 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 29), align 8, !dbg !2814
  %11 = load i64, ptr @used_device, align 4, !dbg !2814
  %12 = load i64, ptr @scratch, align 4, !dbg !2814
  %13 = load ptr, ptr @null, align 8, !dbg !2814
  call void %10(i64 %11, i64 %12, ptr %13), !dbg !2814
  store i64 0, ptr @scratch, align 4, !dbg !2815
  br label %ifcont2, !dbg !2815

ifcont2:                                          ; preds = %then1, %ifcont
  %14 = load i64, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 2), align 4, !dbg !2816
  %15 = icmp ne i64 %14, 0, !dbg !2816
  br i1 %15, label %then3, label %ifcont4, !dbg !2816

then3:                                            ; preds = %ifcont2
  %16 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 32), align 8, !dbg !2817
  %17 = load i64, ptr @used_device, align 4, !dbg !2817
  %18 = load i64, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 2), align 4, !dbg !2817
  %19 = load ptr, ptr @null, align 8, !dbg !2817
  call void %16(i64 %17, i64 %18, ptr %19), !dbg !2817
  br label %ifcont4, !dbg !2817

ifcont4:                                          ; preds = %then3, %ifcont2
  %counter = alloca i64, align 8, !dbg !2818
    #dbg_declare(ptr %counter, !2819, !DIExpression(), !2820)
  %frame_ptr = alloca ptr, align 8, !dbg !2821
    #dbg_declare(ptr %frame_ptr, !2822, !DIExpression(), !2824)
  store i64 0, ptr %counter, align 4, !dbg !2825
  %20 = load i64, ptr %counter, align 4, !dbg !2825
  %21 = load i64, ptr @frame_overlap, align 4, !dbg !2825
  %22 = icmp ult i64 %20, %21, !dbg !2825
  br i1 %22, label %then5, label %whilecont, !dbg !2825

then5:                                            ; preds = %ifcont11, %ifcont4
  %23 = load i64, ptr %counter, align 4, !dbg !2826
  %24 = getelementptr [2 x %frame_data], ptr @frames, i64 0, i64 %23, !dbg !2826
  store ptr %24, ptr %frame_ptr, align 8, !dbg !2826
  %25 = load ptr, ptr %frame_ptr, align 8, !dbg !2827
  %26 = getelementptr inbounds nuw %frame_data, ptr %25, i32 0, i32 0, !dbg !2827
  %27 = load i64, ptr %26, align 4, !dbg !2827
  %28 = icmp ne i64 %27, 0, !dbg !2827
  br i1 %28, label %then6, label %ifcont7, !dbg !2827

whilecont:                                        ; preds = %ifcont11, %ifcont4
  store i64 0, ptr %counter, align 4, !dbg !2828
  %29 = load i32, ptr @swapchain_image_count, align 4, !dbg !2828
  %30 = load i64, ptr %counter, align 4, !dbg !2828
  %31 = zext i32 %29 to i64, !dbg !2828
  %32 = icmp ult i64 %30, %31, !dbg !2828
  br i1 %32, label %then12, label %whilecont13, !dbg !2828

then6:                                            ; preds = %then5
  %33 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 29), align 8, !dbg !2829
  %34 = load i64, ptr @used_device, align 4, !dbg !2829
  %35 = load ptr, ptr %frame_ptr, align 8, !dbg !2829
  %36 = getelementptr inbounds nuw %frame_data, ptr %35, i32 0, i32 0, !dbg !2829
  %37 = load i64, ptr %36, align 4, !dbg !2829
  %38 = load ptr, ptr @null, align 8, !dbg !2829
  call void %33(i64 %34, i64 %37, ptr %38), !dbg !2829
  %39 = load ptr, ptr %frame_ptr, align 8, !dbg !2830
  %40 = getelementptr inbounds nuw %frame_data, ptr %39, i32 0, i32 0, !dbg !2830
  store i64 0, ptr %40, align 4, !dbg !2830
  br label %ifcont7, !dbg !2830

ifcont7:                                          ; preds = %then6, %then5
  %41 = load ptr, ptr %frame_ptr, align 8, !dbg !2831
  %42 = getelementptr inbounds nuw %frame_data, ptr %41, i32 0, i32 2, !dbg !2831
  %43 = load i64, ptr %42, align 4, !dbg !2831
  %44 = icmp ne i64 %43, 0, !dbg !2831
  br i1 %44, label %then8, label %ifcont9, !dbg !2831

then8:                                            ; preds = %ifcont7
  %45 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 32), align 8, !dbg !2832
  %46 = load i64, ptr @used_device, align 4, !dbg !2832
  %47 = load ptr, ptr %frame_ptr, align 8, !dbg !2832
  %48 = getelementptr inbounds nuw %frame_data, ptr %47, i32 0, i32 2, !dbg !2832
  %49 = load i64, ptr %48, align 4, !dbg !2832
  %50 = load ptr, ptr @null, align 8, !dbg !2832
  call void %45(i64 %46, i64 %49, ptr %50), !dbg !2832
  %51 = load ptr, ptr %frame_ptr, align 8, !dbg !2833
  %52 = getelementptr inbounds nuw %frame_data, ptr %51, i32 0, i32 2, !dbg !2833
  store i64 0, ptr %52, align 4, !dbg !2833
  br label %ifcont9, !dbg !2833

ifcont9:                                          ; preds = %then8, %ifcont7
  %53 = load ptr, ptr %frame_ptr, align 8, !dbg !2834
  %54 = getelementptr inbounds nuw %frame_data, ptr %53, i32 0, i32 3, !dbg !2834
  %55 = load i64, ptr %54, align 4, !dbg !2834
  %56 = icmp ne i64 %55, 0, !dbg !2834
  br i1 %56, label %then10, label %ifcont11, !dbg !2834

then10:                                           ; preds = %ifcont9
  %57 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 34), align 8, !dbg !2835
  %58 = load i64, ptr @used_device, align 4, !dbg !2835
  %59 = load ptr, ptr %frame_ptr, align 8, !dbg !2835
  %60 = getelementptr inbounds nuw %frame_data, ptr %59, i32 0, i32 3, !dbg !2835
  %61 = load i64, ptr %60, align 4, !dbg !2835
  %62 = load ptr, ptr @null, align 8, !dbg !2835
  call void %57(i64 %58, i64 %61, ptr %62), !dbg !2835
  %63 = load ptr, ptr %frame_ptr, align 8, !dbg !2836
  %64 = getelementptr inbounds nuw %frame_data, ptr %63, i32 0, i32 3, !dbg !2836
  store i64 0, ptr %64, align 4, !dbg !2836
  br label %ifcont11, !dbg !2836

ifcont11:                                         ; preds = %then10, %ifcont9
  %65 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 36), align 8, !dbg !2837
  %66 = load i64, ptr @used_device, align 4, !dbg !2837
  %67 = load i64, ptr %counter, align 4, !dbg !2837
  %68 = getelementptr [2 x i64], ptr @set_layouts, i64 0, i64 %67, !dbg !2837
  %69 = load i64, ptr %68, align 4, !dbg !2837
  %70 = load ptr, ptr @null, align 8, !dbg !2837
  call void %65(i64 %66, i64 %69, ptr %70), !dbg !2837
  %71 = load i64, ptr %counter, align 4, !dbg !2838
  %72 = getelementptr [2 x i64], ptr @set_layouts, i64 0, i64 %71, !dbg !2838
  %73 = load i64, ptr %72, align 4, !dbg !2838
  store i64 0, ptr %72, align 4, !dbg !2838
  %74 = load i64, ptr %counter, align 4, !dbg !2838
  %75 = add i64 %74, 1, !dbg !2838
  store i64 %75, ptr %counter, align 4, !dbg !2838
  %76 = load i64, ptr %counter, align 4, !dbg !2838
  %77 = add i64 %76, 1, !dbg !2838
  %78 = load i64, ptr %counter, align 4, !dbg !2838
  %79 = load i64, ptr @frame_overlap, align 4, !dbg !2838
  %80 = icmp ult i64 %78, %79, !dbg !2838
  br i1 %80, label %then5, label %whilecont, !dbg !2838

then12:                                           ; preds = %then12, %whilecont
  %81 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 17), align 8, !dbg !2839
  %82 = load i64, ptr @used_device, align 4, !dbg !2839
  %83 = load i64, ptr %counter, align 4, !dbg !2839
  %84 = load ptr, ptr @swapchain_views, align 8, !dbg !2839
  %85 = getelementptr i64, ptr %84, i64 %83, !dbg !2839
  %86 = load i64, ptr %85, align 4, !dbg !2839
  %87 = load ptr, ptr @null, align 8, !dbg !2839
  call void %81(i64 %82, i64 %86, ptr %87), !dbg !2839
  %88 = load i64, ptr %counter, align 4, !dbg !2839
  %89 = add i64 %88, 1, !dbg !2839
  store i64 %89, ptr %counter, align 4, !dbg !2839
  %90 = load i64, ptr %counter, align 4, !dbg !2839
  %91 = add i64 %90, 1, !dbg !2839
  %92 = load i32, ptr @swapchain_image_count, align 4, !dbg !2839
  %93 = load i64, ptr %counter, align 4, !dbg !2839
  %94 = zext i32 %92 to i64, !dbg !2839
  %95 = icmp ult i64 %93, %94, !dbg !2839
  br i1 %95, label %then12, label %whilecont13, !dbg !2839

whilecont13:                                      ; preds = %then12, %whilecont
  %96 = load i64, ptr @swapchain, align 4, !dbg !2840
  %97 = icmp ne i64 %96, 0, !dbg !2840
  br i1 %97, label %then14, label %ifcont15, !dbg !2840

then14:                                           ; preds = %whilecont13
  %98 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 10), align 8, !dbg !2841
  %99 = load i64, ptr @used_device, align 4, !dbg !2841
  %100 = load i64, ptr @swapchain, align 4, !dbg !2841
  %101 = load ptr, ptr @null, align 8, !dbg !2841
  call void %98(i64 %99, i64 %100, ptr %101), !dbg !2841
  br label %ifcont15, !dbg !2841

ifcont15:                                         ; preds = %then14, %whilecont13
  %102 = load i64, ptr @system_image_view, align 4, !dbg !2842
  %103 = icmp ne i64 %102, 0, !dbg !2842
  br i1 %103, label %then16, label %ifcont17, !dbg !2842

then16:                                           ; preds = %ifcont15
  %104 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 17), align 8, !dbg !2843
  %105 = load i64, ptr @used_device, align 4, !dbg !2843
  %106 = load i64, ptr @system_image_view, align 4, !dbg !2843
  %107 = load ptr, ptr @null, align 8, !dbg !2843
  call void %104(i64 %105, i64 %106, ptr %107), !dbg !2843
  store i64 0, ptr @system_image_view, align 4, !dbg !2844
  br label %ifcont17, !dbg !2844

ifcont17:                                         ; preds = %then16, %ifcont15
  %108 = load i64, ptr @system_image, align 4, !dbg !2845
  %109 = icmp ne i64 %108, 0, !dbg !2845
  br i1 %109, label %then18, label %ifcont19, !dbg !2845

then18:                                           ; preds = %ifcont17
  %110 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 15), align 8, !dbg !2846
  %111 = load i64, ptr @used_device, align 4, !dbg !2846
  %112 = load i64, ptr @system_image, align 4, !dbg !2846
  %113 = load ptr, ptr @null, align 8, !dbg !2846
  call void %110(i64 %111, i64 %112, ptr %113), !dbg !2846
  store i64 0, ptr @system_image, align 4, !dbg !2847
  br label %ifcont19, !dbg !2847

ifcont19:                                         ; preds = %then18, %ifcont17
  %passptr = alloca ptr, align 8, !dbg !2848
    #dbg_declare(ptr %passptr, !2849, !DIExpression(), !2850)
  store i64 0, ptr %counter, align 4, !dbg !2851
  %114 = load i64, ptr %counter, align 4, !dbg !2851
  %115 = load i64, ptr @passes_count, align 4, !dbg !2851
  %116 = icmp ult i64 %114, %115, !dbg !2851
  br i1 %116, label %then20, label %whilecont21, !dbg !2851

then20:                                           ; preds = %then20, %ifcont19
  %117 = load i64, ptr %counter, align 4, !dbg !2852
  %118 = load ptr, ptr @passes, align 8, !dbg !2852
  %119 = getelementptr %pass_data_t, ptr %118, i64 %117, !dbg !2852
  store ptr %119, ptr %passptr, align 8, !dbg !2852
  %120 = load i64, ptr %counter, align 4, !dbg !2852
  %121 = load ptr, ptr %passptr, align 8, !dbg !2852
  %122 = getelementptr %pass_data_t, ptr %121, i64 %120, !dbg !2852
  %123 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 44), align 8, !dbg !2853
  %124 = load i64, ptr @used_device, align 4, !dbg !2853
  %125 = load ptr, ptr %passptr, align 8, !dbg !2853
  %126 = getelementptr inbounds nuw %pass_data_t, ptr %125, i32 0, i32 1, !dbg !2853
  %127 = load i64, ptr %126, align 4, !dbg !2853
  %128 = load ptr, ptr @null, align 8, !dbg !2853
  call void %123(i64 %124, i64 %127, ptr %128), !dbg !2853
  %129 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 50), align 8, !dbg !2854
  %130 = load i64, ptr @used_device, align 4, !dbg !2854
  %131 = load ptr, ptr %passptr, align 8, !dbg !2854
  %132 = getelementptr inbounds nuw %pass_data_t, ptr %131, i32 0, i32 4, !dbg !2854
  %133 = load i64, ptr %132, align 4, !dbg !2854
  %134 = load ptr, ptr @null, align 8, !dbg !2854
  call void %129(i64 %130, i64 %133, ptr %134), !dbg !2854
  %135 = load i64, ptr %counter, align 4, !dbg !2854
  %136 = add i64 %135, 1, !dbg !2854
  store i64 %136, ptr %counter, align 4, !dbg !2854
  %137 = load i64, ptr %counter, align 4, !dbg !2854
  %138 = add i64 %137, 1, !dbg !2854
  %139 = load i64, ptr %counter, align 4, !dbg !2854
  %140 = load i64, ptr @passes_count, align 4, !dbg !2854
  %141 = icmp ult i64 %139, %140, !dbg !2854
  br i1 %141, label %then20, label %whilecont21, !dbg !2854

whilecont21:                                      ; preds = %then20, %ifcont19
  store i64 0, ptr @passes_count, align 4, !dbg !2855
  %resptr = alloca ptr, align 8, !dbg !2856
    #dbg_declare(ptr %resptr, !2857, !DIExpression(), !2858)
  store i64 0, ptr %counter, align 4, !dbg !2859
  %142 = load i64, ptr %counter, align 4, !dbg !2859
  %143 = load i64, ptr @resource_count, align 4, !dbg !2859
  %144 = icmp ult i64 %142, %143, !dbg !2859
  br i1 %144, label %then22, label %whilecont23, !dbg !2859

then22:                                           ; preds = %ifcont27, %whilecont21
  %145 = load i64, ptr %counter, align 4, !dbg !2860
  %146 = load ptr, ptr @resources, align 8, !dbg !2860
  %147 = getelementptr %resource_data_t, ptr %146, i64 %145, !dbg !2860
  store ptr %147, ptr %resptr, align 8, !dbg !2860
  %148 = load i64, ptr %counter, align 4, !dbg !2860
  %149 = load ptr, ptr %resptr, align 8, !dbg !2860
  %150 = getelementptr %resource_data_t, ptr %149, i64 %148, !dbg !2860
  %151 = load ptr, ptr %resptr, align 8, !dbg !2861
  %152 = getelementptr inbounds nuw %resource_data_t, ptr %151, i32 0, i32 1, !dbg !2861
  %153 = load i1, ptr %152, align 1, !dbg !2861
  br i1 %153, label %then24, label %ifcont25, !dbg !2861

whilecont23:                                      ; preds = %ifcont27, %whilecont21
  store i64 0, ptr @resource_count, align 4, !dbg !2862
  store i64 0, ptr %counter, align 4, !dbg !2863
  %154 = load i64, ptr %counter, align 4, !dbg !2863
  %155 = load i64, ptr @descriptor_pools_count, align 4, !dbg !2863
  %156 = icmp ult i64 %154, %155, !dbg !2863
  br i1 %156, label %then28, label %whilecont29, !dbg !2863

then24:                                           ; preds = %then22
  %157 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 44), align 8, !dbg !2864
  %158 = load i64, ptr @used_device, align 4, !dbg !2864
  %159 = load ptr, ptr %resptr, align 8, !dbg !2864
  %160 = getelementptr inbounds nuw %resource_data_t, ptr %159, i32 0, i32 2, !dbg !2864
  %161 = load i64, ptr %160, align 4, !dbg !2864
  %162 = load ptr, ptr @null, align 8, !dbg !2864
  call void %157(i64 %158, i64 %161, ptr %162), !dbg !2864
  %163 = load ptr, ptr %resptr, align 8, !dbg !2865
  %164 = getelementptr inbounds nuw %resource_data_t, ptr %163, i32 0, i32 2, !dbg !2865
  store i64 0, ptr %164, align 4, !dbg !2865
  br label %ifcont25, !dbg !2865

ifcont25:                                         ; preds = %then24, %then22
  %165 = load ptr, ptr %resptr, align 8, !dbg !2866
  %166 = getelementptr inbounds nuw %resource_data_t, ptr %165, i32 0, i32 1, !dbg !2866
  %167 = load i1, ptr %166, align 1, !dbg !2866
  %168 = xor i1 %167, true, !dbg !2866
  br i1 %168, label %then26, label %ifcont27, !dbg !2866

then26:                                           ; preds = %ifcont25
  %169 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 19), align 8, !dbg !2867
  %170 = load i64, ptr @used_device, align 4, !dbg !2867
  %171 = load ptr, ptr %resptr, align 8, !dbg !2867
  %172 = getelementptr inbounds nuw %resource_data_t, ptr %171, i32 0, i32 4, !dbg !2867
  %173 = load i64, ptr %172, align 4, !dbg !2867
  %174 = load ptr, ptr @null, align 8, !dbg !2867
  call void %169(i64 %170, i64 %173, ptr %174), !dbg !2867
  %175 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 17), align 8, !dbg !2868
  %176 = load i64, ptr @used_device, align 4, !dbg !2868
  %177 = load ptr, ptr %resptr, align 8, !dbg !2868
  %178 = getelementptr inbounds nuw %resource_data_t, ptr %177, i32 0, i32 3, !dbg !2868
  %179 = load i64, ptr %178, align 4, !dbg !2868
  %180 = load ptr, ptr @null, align 8, !dbg !2868
  call void %175(i64 %176, i64 %179, ptr %180), !dbg !2868
  %181 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 15), align 8, !dbg !2869
  %182 = load i64, ptr @used_device, align 4, !dbg !2869
  %183 = load ptr, ptr %resptr, align 8, !dbg !2869
  %184 = getelementptr inbounds nuw %resource_data_t, ptr %183, i32 0, i32 2, !dbg !2869
  %185 = load i64, ptr %184, align 4, !dbg !2869
  %186 = load ptr, ptr @null, align 8, !dbg !2869
  call void %181(i64 %182, i64 %185, ptr %186), !dbg !2869
  %187 = load ptr, ptr %resptr, align 8, !dbg !2870
  %188 = getelementptr inbounds nuw %resource_data_t, ptr %187, i32 0, i32 2, !dbg !2870
  store i64 0, ptr %188, align 4, !dbg !2870
  br label %ifcont27, !dbg !2870

ifcont27:                                         ; preds = %then26, %ifcont25
  %189 = load i64, ptr %counter, align 4, !dbg !2870
  %190 = add i64 %189, 1, !dbg !2870
  store i64 %190, ptr %counter, align 4, !dbg !2870
  %191 = load i64, ptr %counter, align 4, !dbg !2870
  %192 = add i64 %191, 1, !dbg !2870
  %193 = load i64, ptr %counter, align 4, !dbg !2870
  %194 = load i64, ptr @resource_count, align 4, !dbg !2870
  %195 = icmp ult i64 %193, %194, !dbg !2870
  br i1 %195, label %then22, label %whilecont23, !dbg !2870

then28:                                           ; preds = %then28, %whilecont23
  %196 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 40), align 8, !dbg !2871
  %197 = load i64, ptr @used_device, align 4, !dbg !2871
  %198 = load i64, ptr %counter, align 4, !dbg !2871
  %199 = load ptr, ptr @descriptor_pools_data, align 8, !dbg !2871
  %200 = getelementptr i64, ptr %199, i64 %198, !dbg !2871
  %201 = load i64, ptr %200, align 4, !dbg !2871
  %202 = load ptr, ptr @null, align 8, !dbg !2871
  call void %196(i64 %197, i64 %201, ptr %202), !dbg !2871
  %203 = load i64, ptr %counter, align 4, !dbg !2871
  %204 = add i64 %203, 1, !dbg !2871
  store i64 %204, ptr %counter, align 4, !dbg !2871
  %205 = load i64, ptr %counter, align 4, !dbg !2871
  %206 = add i64 %205, 1, !dbg !2871
  %207 = load i64, ptr %counter, align 4, !dbg !2871
  %208 = load i64, ptr @descriptor_pools_count, align 4, !dbg !2871
  %209 = icmp ult i64 %207, %208, !dbg !2871
  br i1 %209, label %then28, label %whilecont29, !dbg !2871

whilecont29:                                      ; preds = %then28, %whilecont23
  store i64 0, ptr @descriptor_pools_count, align 4, !dbg !2872
  %shad = alloca ptr, align 8, !dbg !2873
    #dbg_declare(ptr %shad, !2874, !DIExpression(), !2875)
  store i64 0, ptr %counter, align 4, !dbg !2876
  %210 = load i64, ptr %counter, align 4, !dbg !2876
  %211 = load i64, ptr @shaders_count, align 4, !dbg !2876
  %212 = icmp ult i64 %210, %211, !dbg !2876
  br i1 %212, label %then30, label %whilecont31, !dbg !2876

then30:                                           ; preds = %ifcont37, %whilecont29
  %213 = load i64, ptr %counter, align 4, !dbg !2877
  %214 = load ptr, ptr @shaders, align 8, !dbg !2877
  %215 = getelementptr %shader_data_t, ptr %214, i64 %213, !dbg !2877
  store ptr %215, ptr %shad, align 8, !dbg !2877
  %216 = load i64, ptr %counter, align 4, !dbg !2877
  %217 = load ptr, ptr %shad, align 8, !dbg !2877
  %218 = getelementptr %shader_data_t, ptr %217, i64 %216, !dbg !2877
  %219 = load ptr, ptr %shad, align 8, !dbg !2878
  %220 = getelementptr inbounds nuw %shader_data_t, ptr %219, i32 0, i32 1, !dbg !2878
  %221 = load i64, ptr %220, align 4, !dbg !2878
  %222 = icmp ne i64 %221, 0, !dbg !2878
  br i1 %222, label %then32, label %ifcont33, !dbg !2878

whilecont31:                                      ; preds = %ifcont37, %whilecont29
  store i64 0, ptr @shaders_count, align 4, !dbg !2879
  call void @impl_vallocator_free_all(), !dbg !2880
  %223 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 26), align 8, !dbg !2881
  %224 = load i64, ptr @used_device, align 4, !dbg !2881
  %225 = load ptr, ptr @null, align 8, !dbg !2881
  call void %223(i64 %224, ptr %225), !dbg !2881
  %226 = load i64, ptr @surface, align 4, !dbg !2882
  %227 = icmp ne i64 %226, 0, !dbg !2882
  br i1 %227, label %then38, label %ifcont39, !dbg !2882

then32:                                           ; preds = %then30
  %228 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 47), align 8, !dbg !2883
  %229 = load i64, ptr @used_device, align 4, !dbg !2883
  %230 = load ptr, ptr %shad, align 8, !dbg !2883
  %231 = getelementptr inbounds nuw %shader_data_t, ptr %230, i32 0, i32 1, !dbg !2883
  %232 = load i64, ptr %231, align 4, !dbg !2883
  %233 = load ptr, ptr @null, align 8, !dbg !2883
  call void %228(i64 %229, i64 %232, ptr %233), !dbg !2883
  %234 = load ptr, ptr %shad, align 8, !dbg !2884
  %235 = getelementptr inbounds nuw %shader_data_t, ptr %234, i32 0, i32 1, !dbg !2884
  store i64 0, ptr %235, align 4, !dbg !2884
  br label %ifcont33, !dbg !2884

ifcont33:                                         ; preds = %then32, %then30
  %236 = load ptr, ptr %shad, align 8, !dbg !2885
  %237 = getelementptr inbounds nuw %shader_data_t, ptr %236, i32 0, i32 2, !dbg !2885
  %238 = load i64, ptr %237, align 4, !dbg !2885
  %239 = icmp ne i64 %238, 0, !dbg !2885
  br i1 %239, label %then34, label %ifcont35, !dbg !2885

then34:                                           ; preds = %ifcont33
  %240 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 47), align 8, !dbg !2886
  %241 = load i64, ptr @used_device, align 4, !dbg !2886
  %242 = load ptr, ptr %shad, align 8, !dbg !2886
  %243 = getelementptr inbounds nuw %shader_data_t, ptr %242, i32 0, i32 2, !dbg !2886
  %244 = load i64, ptr %243, align 4, !dbg !2886
  %245 = load ptr, ptr @null, align 8, !dbg !2886
  call void %240(i64 %241, i64 %244, ptr %245), !dbg !2886
  %246 = load ptr, ptr %shad, align 8, !dbg !2887
  %247 = getelementptr inbounds nuw %shader_data_t, ptr %246, i32 0, i32 2, !dbg !2887
  store i64 0, ptr %247, align 4, !dbg !2887
  br label %ifcont35, !dbg !2887

ifcont35:                                         ; preds = %then34, %ifcont33
  %248 = load ptr, ptr %shad, align 8, !dbg !2888
  %249 = getelementptr inbounds nuw %shader_data_t, ptr %248, i32 0, i32 3, !dbg !2888
  %250 = load i64, ptr %249, align 4, !dbg !2888
  %251 = icmp ne i64 %250, 0, !dbg !2888
  br i1 %251, label %then36, label %ifcont37, !dbg !2888

then36:                                           ; preds = %ifcont35
  %252 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 47), align 8, !dbg !2889
  %253 = load i64, ptr @used_device, align 4, !dbg !2889
  %254 = load ptr, ptr %shad, align 8, !dbg !2889
  %255 = getelementptr inbounds nuw %shader_data_t, ptr %254, i32 0, i32 3, !dbg !2889
  %256 = load i64, ptr %255, align 4, !dbg !2889
  %257 = load ptr, ptr @null, align 8, !dbg !2889
  call void %252(i64 %253, i64 %256, ptr %257), !dbg !2889
  %258 = load ptr, ptr %shad, align 8, !dbg !2890
  %259 = getelementptr inbounds nuw %shader_data_t, ptr %258, i32 0, i32 3, !dbg !2890
  store i64 0, ptr %259, align 4, !dbg !2890
  br label %ifcont37, !dbg !2890

ifcont37:                                         ; preds = %then36, %ifcont35
  %260 = load i64, ptr %counter, align 4, !dbg !2890
  %261 = add i64 %260, 1, !dbg !2890
  store i64 %261, ptr %counter, align 4, !dbg !2890
  %262 = load i64, ptr %counter, align 4, !dbg !2890
  %263 = add i64 %262, 1, !dbg !2890
  %264 = load i64, ptr %counter, align 4, !dbg !2890
  %265 = load i64, ptr @shaders_count, align 4, !dbg !2890
  %266 = icmp ult i64 %264, %265, !dbg !2890
  br i1 %266, label %then30, label %whilecont31, !dbg !2890

then38:                                           ; preds = %whilecont31
  %267 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 8), align 8, !dbg !2891
  %268 = load i64, ptr @vkinst, align 4, !dbg !2891
  %269 = load i64, ptr @surface, align 4, !dbg !2891
  %270 = load ptr, ptr @null, align 8, !dbg !2891
  call void %267(i64 %268, i64 %269, ptr %270), !dbg !2891
  br label %ifcont39, !dbg !2891

ifcont39:                                         ; preds = %then38, %whilecont31
  %271 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 2), align 8, !dbg !2892
  %272 = load i64, ptr @vkinst, align 4, !dbg !2892
  %273 = load ptr, ptr @null, align 8, !dbg !2892
  call void %271(i64 %272, ptr %273), !dbg !2892
  call void @vulkan_term(), !dbg !2893
  ret void, !dbg !2894
}

define i64 @tz_gpu_hardware_count() !dbg !2895 {
entry:
  %ret = alloca i32, align 4, !dbg !2896
    #dbg_declare(ptr %ret, !2897, !DIExpression(), !2898)
  %0 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 20), align 8, !dbg !2899
  %1 = load i64, ptr @vkinst, align 4, !dbg !2899
  %2 = load ptr, ptr @null, align 8, !dbg !2899
  %3 = call i32 %0(i64 %1, ptr %ret, ptr %2), !dbg !2899
  call void @vk_check(i32 %3), !dbg !2899
  %4 = load i32, ptr %ret, align 4, !dbg !2900
  %5 = zext i32 %4 to i64, !dbg !2900
  ret i64 %5, !dbg !2900
}

define i64 @tz_gpu_iterate_hardware(ptr %array_param, i64 %array_size_param, ptr %a_param) !dbg !2901 {
entry:
  %array = alloca ptr, align 8
  store ptr %array_param, ptr %array, align 8
    #dbg_declare(ptr %array, !2904, !DIExpression(), !2905)
  %array_size = alloca i64, align 8
  store i64 %array_size_param, ptr %array_size, align 4
    #dbg_declare(ptr %array_size, !2906, !DIExpression(), !2905)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !2907, !DIExpression(), !2905)
  %0 = load ptr, ptr %a, align 8, !dbg !2908
  %1 = load i64, ptr %array_size, align 4, !dbg !2908
  %2 = mul i64 8, %1, !dbg !2908
  %3 = call ptr @arena_push(ptr %0, i64 %2), !dbg !2908
  %pdev_storage = alloca ptr, align 8, !dbg !2908
  store ptr %3, ptr %pdev_storage, align 8, !dbg !2908
    #dbg_declare(ptr %pdev_storage, !2909, !DIExpression(), !2910)
  %4 = load i64, ptr %array_size, align 4, !dbg !2908
  %5 = trunc i64 %4 to i32, !dbg !2911
  %physical_device_count = alloca i32, align 4, !dbg !2911
  store i32 %5, ptr %physical_device_count, align 4, !dbg !2911
    #dbg_declare(ptr %physical_device_count, !2912, !DIExpression(), !2913)
  %6 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 20), align 8, !dbg !2911
  %7 = load i64, ptr @vkinst, align 4, !dbg !2911
  %8 = load ptr, ptr %pdev_storage, align 8, !dbg !2911
  %9 = call i32 %6(i64 %7, ptr %physical_device_count, ptr %8), !dbg !2911
  %result = alloca i32, align 4, !dbg !2914
  store i32 %9, ptr %result, align 4, !dbg !2914
    #dbg_declare(ptr %result, !2915, !DIExpression(), !2916)
  %10 = load i32, ptr %result, align 4, !dbg !2917
  %11 = icmp ne i32 %10, 0, !dbg !2917
  br i1 %11, label %then, label %ifcont, !dbg !2917

then:                                             ; preds = %entry
  %12 = load i64, ptr @tz_gpu_err.unknown, align 4, !dbg !2918
  ret i64 %12, !dbg !2918

ifcont:                                           ; preds = %entry
  %counter = alloca i64, align 8, !dbg !2919
    #dbg_declare(ptr %counter, !2920, !DIExpression(), !2921)
  store i64 0, ptr %counter, align 4, !dbg !2922
  %13 = load i64, ptr %counter, align 4, !dbg !2922
  %14 = load i64, ptr %array_size, align 4, !dbg !2922
  %15 = icmp ult i64 %13, %14, !dbg !2922
  br i1 %15, label %then1, label %whilecont, !dbg !2922

then1:                                            ; preds = %then1, %ifcont
  %16 = load i64, ptr %counter, align 4, !dbg !2923
  %17 = load ptr, ptr %array, align 8, !dbg !2923
  %18 = getelementptr %tz_gpu_hardware, ptr %17, i64 %16, !dbg !2923
  %19 = load i64, ptr %counter, align 4, !dbg !2923
  %20 = load ptr, ptr %pdev_storage, align 8, !dbg !2923
  %21 = getelementptr i64, ptr %20, i64 %19, !dbg !2923
  %22 = load i64, ptr %21, align 4, !dbg !2923
  %23 = load ptr, ptr %a, align 8, !dbg !2923
  call void @impl_fill_hardware_info(ptr %18, i64 %22, ptr %23), !dbg !2923
  %24 = load i64, ptr %counter, align 4, !dbg !2923
  %25 = add i64 %24, 1, !dbg !2923
  store i64 %25, ptr %counter, align 4, !dbg !2923
  %26 = load i64, ptr %counter, align 4, !dbg !2923
  %27 = add i64 %26, 1, !dbg !2923
  %28 = load i64, ptr %counter, align 4, !dbg !2923
  %29 = load i64, ptr %array_size, align 4, !dbg !2923
  %30 = icmp ult i64 %28, %29, !dbg !2923
  br i1 %30, label %then1, label %whilecont, !dbg !2923

whilecont:                                        ; preds = %then1, %ifcont
  %31 = load i64, ptr @tz_gpu_err.none, align 4, !dbg !2924
  ret i64 %31, !dbg !2924
}

define void @tz_gpu_use_hardware(%tz_gpu_hardware %hardware_param, i64 %window_param) !dbg !2925 {
entry:
  %hardware = alloca %tz_gpu_hardware, align 8
  store %tz_gpu_hardware %hardware_param, ptr %hardware, align 8
    #dbg_declare(ptr %hardware, !2928, !DIExpression(), !2929)
  %window = alloca i64, align 8
  store i64 %window_param, ptr %window, align 4
    #dbg_declare(ptr %window, !2930, !DIExpression(), !2929)
  %0 = load i64, ptr %window, align 4, !dbg !2931
  store i64 %0, ptr @target_window, align 4, !dbg !2931
  %1 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %hardware, i32 0, i32 7, !dbg !2931
  %2 = load i64, ptr %1, align 4, !dbg !2932
  %pdev = alloca i64, align 8, !dbg !2932
  store i64 %2, ptr %pdev, align 4, !dbg !2932
    #dbg_declare(ptr %pdev, !2933, !DIExpression(), !2934)
  %queue_priority = alloca float, align 4, !dbg !2935
  store float 1.000000e+00, ptr %queue_priority, align 4, !dbg !2935
    #dbg_declare(ptr %queue_priority, !2936, !DIExpression(), !2937)
  %3 = load ptr, ptr @null, align 8, !dbg !2938
  %4 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %hardware, i32 0, i32 6, !dbg !2938
  %5 = load i32, ptr %4, align 4, !dbg !2938
  %6 = insertvalue %VkDeviceQueueCreateInfo { i32 2, ptr undef, i32 undef, i32 undef, i32 undef, ptr undef }, ptr %3, 1, !dbg !2938
  %7 = insertvalue %VkDeviceQueueCreateInfo %6, i32 0, 2, !dbg !2938
  %8 = insertvalue %VkDeviceQueueCreateInfo %7, i32 %5, 3, !dbg !2938
  %9 = insertvalue %VkDeviceQueueCreateInfo %8, i32 1, 4, !dbg !2938
  %10 = insertvalue %VkDeviceQueueCreateInfo %9, ptr %queue_priority, 5, !dbg !2938
  %qcreate = alloca %VkDeviceQueueCreateInfo, align 8, !dbg !2938
  store %VkDeviceQueueCreateInfo %10, ptr %qcreate, align 8, !dbg !2938
    #dbg_declare(ptr %qcreate, !2939, !DIExpression(), !2948)
  %11 = load ptr, ptr @null, align 8, !dbg !2949
  %12 = insertvalue %VkPhysicalDeviceVulkan13Features { i32 53, ptr undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef }, ptr %11, 1, !dbg !2949
  %13 = insertvalue %VkPhysicalDeviceVulkan13Features %12, i32 0, 2, !dbg !2949
  %14 = insertvalue %VkPhysicalDeviceVulkan13Features %13, i32 0, 3, !dbg !2949
  %15 = insertvalue %VkPhysicalDeviceVulkan13Features %14, i32 0, 4, !dbg !2949
  %16 = insertvalue %VkPhysicalDeviceVulkan13Features %15, i32 0, 5, !dbg !2949
  %17 = insertvalue %VkPhysicalDeviceVulkan13Features %16, i32 0, 6, !dbg !2949
  %18 = insertvalue %VkPhysicalDeviceVulkan13Features %17, i32 0, 7, !dbg !2949
  %19 = insertvalue %VkPhysicalDeviceVulkan13Features %18, i32 0, 8, !dbg !2949
  %20 = insertvalue %VkPhysicalDeviceVulkan13Features %19, i32 0, 9, !dbg !2949
  %21 = insertvalue %VkPhysicalDeviceVulkan13Features %20, i32 0, 10, !dbg !2949
  %22 = insertvalue %VkPhysicalDeviceVulkan13Features %21, i32 1, 11, !dbg !2949
  %23 = insertvalue %VkPhysicalDeviceVulkan13Features %22, i32 0, 12, !dbg !2949
  %24 = insertvalue %VkPhysicalDeviceVulkan13Features %23, i32 0, 13, !dbg !2949
  %25 = insertvalue %VkPhysicalDeviceVulkan13Features %24, i32 1, 14, !dbg !2949
  %26 = insertvalue %VkPhysicalDeviceVulkan13Features %25, i32 0, 15, !dbg !2949
  %27 = insertvalue %VkPhysicalDeviceVulkan13Features %26, i32 0, 16, !dbg !2949
  %features13 = alloca %VkPhysicalDeviceVulkan13Features, align 8, !dbg !2949
  store %VkPhysicalDeviceVulkan13Features %27, ptr %features13, align 8, !dbg !2949
    #dbg_declare(ptr %features13, !2950, !DIExpression(), !2970)
  %28 = insertvalue %VkPhysicalDeviceVulkan12Features { i32 51, ptr undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef }, ptr %features13, 1, !dbg !2971
  %29 = insertvalue %VkPhysicalDeviceVulkan12Features %28, i32 0, 2, !dbg !2971
  %30 = insertvalue %VkPhysicalDeviceVulkan12Features %29, i32 1, 3, !dbg !2971
  %31 = insertvalue %VkPhysicalDeviceVulkan12Features %30, i32 0, 4, !dbg !2971
  %32 = insertvalue %VkPhysicalDeviceVulkan12Features %31, i32 0, 5, !dbg !2971
  %33 = insertvalue %VkPhysicalDeviceVulkan12Features %32, i32 0, 6, !dbg !2971
  %34 = insertvalue %VkPhysicalDeviceVulkan12Features %33, i32 0, 7, !dbg !2971
  %35 = insertvalue %VkPhysicalDeviceVulkan12Features %34, i32 0, 8, !dbg !2971
  %36 = insertvalue %VkPhysicalDeviceVulkan12Features %35, i32 0, 9, !dbg !2971
  %37 = insertvalue %VkPhysicalDeviceVulkan12Features %36, i32 0, 10, !dbg !2971
  %38 = insertvalue %VkPhysicalDeviceVulkan12Features %37, i32 1, 11, !dbg !2971
  %39 = insertvalue %VkPhysicalDeviceVulkan12Features %38, i32 0, 12, !dbg !2971
  %40 = insertvalue %VkPhysicalDeviceVulkan12Features %39, i32 0, 13, !dbg !2971
  %41 = insertvalue %VkPhysicalDeviceVulkan12Features %40, i32 0, 14, !dbg !2971
  %42 = insertvalue %VkPhysicalDeviceVulkan12Features %41, i32 0, 15, !dbg !2971
  %43 = insertvalue %VkPhysicalDeviceVulkan12Features %42, i32 1, 16, !dbg !2971
  %44 = insertvalue %VkPhysicalDeviceVulkan12Features %43, i32 0, 17, !dbg !2971
  %45 = insertvalue %VkPhysicalDeviceVulkan12Features %44, i32 0, 18, !dbg !2971
  %46 = insertvalue %VkPhysicalDeviceVulkan12Features %45, i32 0, 19, !dbg !2971
  %47 = insertvalue %VkPhysicalDeviceVulkan12Features %46, i32 0, 20, !dbg !2971
  %48 = insertvalue %VkPhysicalDeviceVulkan12Features %47, i32 0, 21, !dbg !2971
  %49 = insertvalue %VkPhysicalDeviceVulkan12Features %48, i32 0, 22, !dbg !2971
  %50 = insertvalue %VkPhysicalDeviceVulkan12Features %49, i32 1, 23, !dbg !2971
  %51 = insertvalue %VkPhysicalDeviceVulkan12Features %50, i32 0, 24, !dbg !2971
  %52 = insertvalue %VkPhysicalDeviceVulkan12Features %51, i32 0, 25, !dbg !2971
  %53 = insertvalue %VkPhysicalDeviceVulkan12Features %52, i32 0, 26, !dbg !2971
  %54 = insertvalue %VkPhysicalDeviceVulkan12Features %53, i32 0, 27, !dbg !2971
  %55 = insertvalue %VkPhysicalDeviceVulkan12Features %54, i32 1, 28, !dbg !2971
  %56 = insertvalue %VkPhysicalDeviceVulkan12Features %55, i32 1, 29, !dbg !2971
  %57 = insertvalue %VkPhysicalDeviceVulkan12Features %56, i32 1, 30, !dbg !2971
  %58 = insertvalue %VkPhysicalDeviceVulkan12Features %57, i32 1, 31, !dbg !2971
  %59 = insertvalue %VkPhysicalDeviceVulkan12Features %58, i32 0, 32, !dbg !2971
  %60 = insertvalue %VkPhysicalDeviceVulkan12Features %59, i32 0, 33, !dbg !2971
  %61 = insertvalue %VkPhysicalDeviceVulkan12Features %60, i32 0, 34, !dbg !2971
  %62 = insertvalue %VkPhysicalDeviceVulkan12Features %61, i32 0, 35, !dbg !2971
  %63 = insertvalue %VkPhysicalDeviceVulkan12Features %62, i32 0, 36, !dbg !2971
  %64 = insertvalue %VkPhysicalDeviceVulkan12Features %63, i32 0, 37, !dbg !2971
  %65 = insertvalue %VkPhysicalDeviceVulkan12Features %64, i32 0, 38, !dbg !2971
  %66 = insertvalue %VkPhysicalDeviceVulkan12Features %65, i32 1, 39, !dbg !2971
  %67 = insertvalue %VkPhysicalDeviceVulkan12Features %66, i32 1, 40, !dbg !2971
  %68 = insertvalue %VkPhysicalDeviceVulkan12Features %67, i32 0, 41, !dbg !2971
  %69 = insertvalue %VkPhysicalDeviceVulkan12Features %68, i32 0, 42, !dbg !2971
  %70 = insertvalue %VkPhysicalDeviceVulkan12Features %69, i32 0, 43, !dbg !2971
  %71 = insertvalue %VkPhysicalDeviceVulkan12Features %70, i32 0, 44, !dbg !2971
  %72 = insertvalue %VkPhysicalDeviceVulkan12Features %71, i32 0, 45, !dbg !2971
  %73 = insertvalue %VkPhysicalDeviceVulkan12Features %72, i32 0, 46, !dbg !2971
  %74 = insertvalue %VkPhysicalDeviceVulkan12Features %73, i32 0, 47, !dbg !2971
  %75 = insertvalue %VkPhysicalDeviceVulkan12Features %74, i32 0, 48, !dbg !2971
  %features12 = alloca %VkPhysicalDeviceVulkan12Features, align 8, !dbg !2971
  store %VkPhysicalDeviceVulkan12Features %75, ptr %features12, align 8, !dbg !2971
    #dbg_declare(ptr %features12, !2972, !DIExpression(), !3024)
  %76 = insertvalue %VkPhysicalDeviceFeatures2 { i32 1000059000, ptr undef, %VkPhysicalDeviceFeatures undef }, ptr %features12, 1, !dbg !3025
  %77 = insertvalue %VkPhysicalDeviceFeatures2 %76, %VkPhysicalDeviceFeatures zeroinitializer, 2, !dbg !3025
  %enabled_features = alloca %VkPhysicalDeviceFeatures2, align 8, !dbg !3025
  store %VkPhysicalDeviceFeatures2 %77, ptr %enabled_features, align 8, !dbg !3025
    #dbg_declare(ptr %enabled_features, !3026, !DIExpression(), !3089)
  %extensions = alloca [1 x ptr], align 8, !dbg !3090
    #dbg_declare(ptr %extensions, !3091, !DIExpression(), !3092)
  %78 = getelementptr [1 x ptr], ptr %extensions, i64 0, i64 0, !dbg !3093
  %79 = load ptr, ptr %78, align 8, !dbg !3093
  store ptr @strlit.186, ptr %78, align 8, !dbg !3093
  %extension_count = alloca i32, align 4, !dbg !3094
  store i32 1, ptr %extension_count, align 4, !dbg !3094
    #dbg_declare(ptr %extension_count, !3095, !DIExpression(), !3096)
  %80 = load ptr, ptr @null, align 8, !dbg !3097
  %81 = load i32, ptr %extension_count, align 4, !dbg !3097
  %82 = getelementptr [1 x ptr], ptr %extensions, i64 0, i64 0, !dbg !3097
  %83 = load ptr, ptr @null, align 8, !dbg !3097
  %84 = insertvalue %VkDeviceCreateInfo { i32 3, ptr undef, i32 undef, i32 undef, ptr undef, i32 undef, ptr undef, i32 undef, ptr undef, ptr undef }, ptr %enabled_features, 1, !dbg !3097
  %85 = insertvalue %VkDeviceCreateInfo %84, i32 0, 2, !dbg !3097
  %86 = insertvalue %VkDeviceCreateInfo %85, i32 1, 3, !dbg !3097
  %87 = insertvalue %VkDeviceCreateInfo %86, ptr %qcreate, 4, !dbg !3097
  %88 = insertvalue %VkDeviceCreateInfo %87, i32 0, 5, !dbg !3097
  %89 = insertvalue %VkDeviceCreateInfo %88, ptr %80, 6, !dbg !3097
  %90 = insertvalue %VkDeviceCreateInfo %89, i32 %81, 7, !dbg !3097
  %91 = insertvalue %VkDeviceCreateInfo %90, ptr %82, 8, !dbg !3097
  %92 = insertvalue %VkDeviceCreateInfo %91, ptr %83, 9, !dbg !3097
  %create = alloca %VkDeviceCreateInfo, align 8, !dbg !3097
  store %VkDeviceCreateInfo %92, ptr %create, align 8, !dbg !3097
    #dbg_declare(ptr %create, !3098, !DIExpression(), !3113)
  %93 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 25), align 8, !dbg !3114
  %94 = load i64, ptr %pdev, align 4, !dbg !3114
  %95 = load ptr, ptr @null, align 8, !dbg !3114
  %96 = call i32 %93(i64 %94, ptr %create, ptr %95, ptr @used_device), !dbg !3114
  call void @vk_check(i32 %96), !dbg !3114
  %97 = load i64, ptr %pdev, align 4, !dbg !3115
  store i64 %97, ptr @used_hardware, align 4, !dbg !3115
  %98 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %hardware, i32 0, i32 6, !dbg !3116
  %99 = load i32, ptr %98, align 4, !dbg !3116
  store i32 %99, ptr @used_qfi, align 4, !dbg !3116
  %100 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %hardware, i32 0, i32 1, !dbg !3117
  %101 = load i64, ptr %100, align 4, !dbg !3117
  %102 = trunc i64 %101 to i32, !dbg !3117
  store i32 %102, ptr @used_mti_gpu, align 4, !dbg !3117
  %103 = load i32, ptr @used_mti_gpu, align 4, !dbg !3117
  %104 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %hardware, i32 0, i32 2, !dbg !3118
  %105 = load i64, ptr %104, align 4, !dbg !3118
  %106 = trunc i64 %105 to i32, !dbg !3118
  store i32 %106, ptr @used_mti_cpu, align 4, !dbg !3118
  %107 = load i32, ptr @used_mti_cpu, align 4, !dbg !3118
  %108 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 27), align 8, !dbg !3119
  %109 = load i64, ptr @used_device, align 4, !dbg !3119
  %110 = load i32, ptr @used_qfi, align 4, !dbg !3119
  call void %108(i64 %109, i32 %110, i32 0, ptr @graphics_queue), !dbg !3119
  %111 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 27), align 8, !dbg !3120
  %112 = load i64, ptr @used_device, align 4, !dbg !3120
  %113 = load i32, ptr @used_qfi, align 4, !dbg !3120
  call void %111(i64 %112, i32 %113, i32 0, ptr @compute_queue), !dbg !3120
  %114 = load ptr, ptr @null, align 8, !dbg !3121
  %115 = load i32, ptr @used_qfi, align 4, !dbg !3121
  %116 = insertvalue %VkCommandPoolCreateInfo { i32 39, ptr undef, i32 undef, i32 undef }, ptr %114, 1, !dbg !3121
  %117 = insertvalue %VkCommandPoolCreateInfo %116, i32 2, 2, !dbg !3121
  %118 = insertvalue %VkCommandPoolCreateInfo %117, i32 %115, 3, !dbg !3121
  %pool_create = alloca %VkCommandPoolCreateInfo, align 8, !dbg !3121
  store %VkCommandPoolCreateInfo %118, ptr %pool_create, align 8, !dbg !3121
    #dbg_declare(ptr %pool_create, !3122, !DIExpression(), !3129)
  %counter = alloca i64, align 8, !dbg !3130
  store i64 0, ptr %counter, align 4, !dbg !3130
    #dbg_declare(ptr %counter, !3131, !DIExpression(), !3132)
  %frame_ptr = alloca ptr, align 8, !dbg !3133
    #dbg_declare(ptr %frame_ptr, !3134, !DIExpression(), !3135)
  %119 = load ptr, ptr @null, align 8, !dbg !3136
  %120 = insertvalue %VkCommandBufferAllocateInfo { i32 40, ptr undef, i64 undef, i32 undef, i32 undef }, ptr %119, 1, !dbg !3136
  %121 = insertvalue %VkCommandBufferAllocateInfo %120, i64 0, 2, !dbg !3136
  %122 = insertvalue %VkCommandBufferAllocateInfo %121, i32 0, 3, !dbg !3136
  %123 = insertvalue %VkCommandBufferAllocateInfo %122, i32 1, 4, !dbg !3136
  %cmd_info = alloca %VkCommandBufferAllocateInfo, align 8, !dbg !3136
  store %VkCommandBufferAllocateInfo %123, ptr %cmd_info, align 8, !dbg !3136
    #dbg_declare(ptr %cmd_info, !3137, !DIExpression(), !3145)
  %124 = load ptr, ptr @null, align 8, !dbg !3146
  %125 = insertvalue %VkSemaphoreCreateInfo { i32 8, ptr undef, i32 undef }, ptr %124, 1, !dbg !3146
  %126 = insertvalue %VkSemaphoreCreateInfo %125, i32 0, 2, !dbg !3146
  %fence_create = alloca %VkSemaphoreCreateInfo, align 8, !dbg !3146
  store %VkSemaphoreCreateInfo %126, ptr %fence_create, align 8, !dbg !3146
    #dbg_declare(ptr %fence_create, !3147, !DIExpression(), !3153)
  %127 = load ptr, ptr @null, align 8, !dbg !3154
  %128 = insertvalue %VkSemaphoreCreateInfo { i32 9, ptr undef, i32 undef }, ptr %127, 1, !dbg !3154
  %129 = insertvalue %VkSemaphoreCreateInfo %128, i32 0, 2, !dbg !3154
  %sem_create = alloca %VkSemaphoreCreateInfo, align 8, !dbg !3154
  store %VkSemaphoreCreateInfo %129, ptr %sem_create, align 8, !dbg !3154
    #dbg_declare(ptr %sem_create, !3155, !DIExpression(), !3156)
  store i64 0, ptr %counter, align 4, !dbg !3157
  %130 = load i64, ptr %counter, align 4, !dbg !3157
  %131 = load i64, ptr @frame_overlap, align 4, !dbg !3157
  %132 = icmp ult i64 %130, %131, !dbg !3157
  br i1 %132, label %then, label %whilecont, !dbg !3157

then:                                             ; preds = %then, %entry
  %133 = load i64, ptr %counter, align 4, !dbg !3158
  %134 = getelementptr [2 x %frame_data], ptr @frames, i64 0, i64 %133, !dbg !3158
  store ptr %134, ptr %frame_ptr, align 8, !dbg !3158
  %135 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 28), align 8, !dbg !3159
  %136 = load i64, ptr @used_device, align 4, !dbg !3159
  %137 = load ptr, ptr @null, align 8, !dbg !3159
  %138 = load ptr, ptr %frame_ptr, align 8, !dbg !3159
  %139 = getelementptr inbounds nuw %frame_data, ptr %138, i32 0, i32 0, !dbg !3159
  %140 = call i32 %135(i64 %136, ptr %pool_create, ptr %137, ptr %139), !dbg !3159
  call void @vk_check(i32 %140), !dbg !3159
  %141 = getelementptr inbounds nuw %VkCommandBufferAllocateInfo, ptr %cmd_info, i32 0, i32 2, !dbg !3160
  %142 = load ptr, ptr %frame_ptr, align 8, !dbg !3160
  %143 = getelementptr inbounds nuw %frame_data, ptr %142, i32 0, i32 0, !dbg !3160
  %144 = load i64, ptr %143, align 4, !dbg !3160
  store i64 %144, ptr %141, align 4, !dbg !3160
  %145 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 30), align 8, !dbg !3161
  %146 = load i64, ptr @used_device, align 4, !dbg !3161
  %147 = load ptr, ptr %frame_ptr, align 8, !dbg !3161
  %148 = getelementptr inbounds nuw %frame_data, ptr %147, i32 0, i32 1, !dbg !3161
  %149 = call i32 %145(i64 %146, ptr %cmd_info, ptr %148), !dbg !3161
  call void @vk_check(i32 %149), !dbg !3161
  %150 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 31), align 8, !dbg !3162
  %151 = load i64, ptr @used_device, align 4, !dbg !3162
  %152 = load ptr, ptr @null, align 8, !dbg !3162
  %153 = load ptr, ptr %frame_ptr, align 8, !dbg !3162
  %154 = getelementptr inbounds nuw %frame_data, ptr %153, i32 0, i32 2, !dbg !3162
  %155 = call i32 %150(i64 %151, ptr %fence_create, ptr %152, ptr %154), !dbg !3162
  call void @vk_check(i32 %155), !dbg !3162
  %156 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 33), align 8, !dbg !3163
  %157 = load i64, ptr @used_device, align 4, !dbg !3163
  %158 = load ptr, ptr @null, align 8, !dbg !3163
  %159 = load ptr, ptr %frame_ptr, align 8, !dbg !3163
  %160 = getelementptr inbounds nuw %frame_data, ptr %159, i32 0, i32 3, !dbg !3163
  %161 = call i32 %156(i64 %157, ptr %sem_create, ptr %158, ptr %160), !dbg !3163
  call void @vk_check(i32 %161), !dbg !3163
  %162 = load i64, ptr %counter, align 4, !dbg !3163
  %163 = add i64 %162, 1, !dbg !3163
  store i64 %163, ptr %counter, align 4, !dbg !3163
  %164 = load i64, ptr %counter, align 4, !dbg !3163
  %165 = add i64 %164, 1, !dbg !3163
  %166 = load i64, ptr %counter, align 4, !dbg !3163
  %167 = load i64, ptr @frame_overlap, align 4, !dbg !3163
  %168 = icmp ult i64 %166, %167, !dbg !3163
  br i1 %168, label %then, label %whilecont, !dbg !3163

whilecont:                                        ; preds = %then, %entry
  %169 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 28), align 8, !dbg !3164
  %170 = load i64, ptr @used_device, align 4, !dbg !3164
  %171 = load ptr, ptr @null, align 8, !dbg !3164
  %172 = call i32 %169(i64 %170, ptr %pool_create, ptr %171, ptr @scratch), !dbg !3164
  call void @vk_check(i32 %172), !dbg !3164
  %173 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 30), align 8, !dbg !3165
  %174 = load i64, ptr @used_device, align 4, !dbg !3165
  %175 = call i32 %173(i64 %174, ptr %cmd_info, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 1)), !dbg !3165
  call void @vk_check(i32 %175), !dbg !3165
  %176 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 31), align 8, !dbg !3166
  %177 = load i64, ptr @used_device, align 4, !dbg !3166
  %178 = load ptr, ptr @null, align 8, !dbg !3166
  %179 = call i32 %176(i64 %177, ptr %fence_create, ptr %178, ptr getelementptr inbounds nuw (%scratch_data, ptr @scratch, i32 0, i32 2)), !dbg !3166
  call void @vk_check(i32 %179), !dbg !3166
  %180 = call i64 @impl_initialise_pipeline_layout(), !dbg !3167
  store i64 %180, ptr @pipeline_layout, align 4, !dbg !3167
  call void @impl_vallocator_initial_setup(), !dbg !3168
  call void @puts(ptr @strlit.187), !dbg !3169
  %181 = getelementptr inbounds nuw %tz_gpu_hardware, ptr %hardware, i32 0, i32 0, !dbg !3170
  call void @print_string(ptr %181), !dbg !3170
  call void @putchar(i8 10), !dbg !3171
  ret void, !dbg !3172
}

define i64 @tz_gpu_create_buffer(%tz_gpu_resource_info %info_param, ptr %a_param) !dbg !3173 {
entry:
  %info = alloca %tz_gpu_resource_info, align 8
  store %tz_gpu_resource_info %info_param, ptr %info, align 8
    #dbg_declare(ptr %info, !3176, !DIExpression(), !3177)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !3178, !DIExpression(), !3177)
  %0 = load i64, ptr @resource_count, align 4, !dbg !3179
  %retid = alloca i64, align 8, !dbg !3179
  store i64 %0, ptr %retid, align 4, !dbg !3179
    #dbg_declare(ptr %retid, !3180, !DIExpression(), !3181)
  %1 = load ptr, ptr %a, align 8, !dbg !3182
  %2 = call ptr @impl_alloc_new_resource(ptr %1), !dbg !3182
  %resptr = alloca ptr, align 8, !dbg !3182
  store ptr %2, ptr %resptr, align 8, !dbg !3182
    #dbg_declare(ptr %resptr, !3183, !DIExpression(), !3184)
  %3 = load ptr, ptr %resptr, align 8, !dbg !3185
  %4 = getelementptr inbounds nuw %resource_data_t, ptr %3, i32 0, i32 0, !dbg !3185
  %5 = load %tz_gpu_resource_info, ptr %info, align 8, !dbg !3185
  store %tz_gpu_resource_info %5, ptr %4, align 8, !dbg !3185
  %6 = load ptr, ptr %resptr, align 8, !dbg !3186
  %7 = getelementptr inbounds nuw %resource_data_t, ptr %6, i32 0, i32 1, !dbg !3186
  store i1 true, ptr %7, align 1, !dbg !3186
  %8 = load ptr, ptr @null, align 8, !dbg !3187
  %9 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 1, !dbg !3187
  %10 = load i64, ptr %9, align 4, !dbg !3187
  %11 = insertvalue %VkBufferCreateInfo { i32 12, ptr undef, i32 undef, i64 undef, i32 undef, i32 undef, i32 undef, ptr undef }, ptr %8, 1, !dbg !3187
  %12 = insertvalue %VkBufferCreateInfo %11, i32 0, 2, !dbg !3187
  %13 = insertvalue %VkBufferCreateInfo %12, i64 %10, 3, !dbg !3187
  %14 = insertvalue %VkBufferCreateInfo %13, i32 131104, 4, !dbg !3187
  %15 = insertvalue %VkBufferCreateInfo %14, i32 0, 5, !dbg !3187
  %16 = insertvalue %VkBufferCreateInfo %15, i32 1, 6, !dbg !3187
  %17 = insertvalue %VkBufferCreateInfo %16, ptr @used_qfi, 7, !dbg !3187
  %create = alloca %VkBufferCreateInfo, align 8, !dbg !3187
  store %VkBufferCreateInfo %17, ptr %create, align 8, !dbg !3187
    #dbg_declare(ptr %create, !3188, !DIExpression(), !3189)
  %18 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 5, !dbg !3187
  %19 = load i64, ptr @tz_gpu_buffer_flag.dynamic, align 4, !dbg !3187
  %20 = load i64, ptr %18, align 4, !dbg !3187
  %21 = and i64 %20, %19, !dbg !3187
  %22 = icmp sgt i64 %21, 0, !dbg !3187
  %dynamic = alloca i1, align 1, !dbg !3190
  store i1 %22, ptr %dynamic, align 1, !dbg !3190
    #dbg_declare(ptr %dynamic, !3191, !DIExpression(), !3192)
  %23 = load i1, ptr %dynamic, align 1, !dbg !3193
  %24 = xor i1 %23, true, !dbg !3193
  br i1 %24, label %then, label %ifcont, !dbg !3193

then:                                             ; preds = %entry
  %25 = getelementptr inbounds nuw %VkBufferCreateInfo, ptr %create, i32 0, i32 4, !dbg !3194
  %26 = getelementptr inbounds nuw %VkBufferCreateInfo, ptr %create, i32 0, i32 4, !dbg !3194
  %27 = load i32, ptr %26, align 4, !dbg !3194
  %28 = sext i32 %27 to i64, !dbg !3194
  %29 = or i64 %28, 2, !dbg !3194
  %30 = trunc i64 %29 to i32, !dbg !3194
  store i32 %30, ptr %25, align 4, !dbg !3194
  %31 = load i32, ptr %25, align 4, !dbg !3194
  %32 = sext i32 %31 to i64, !dbg !3194
  %33 = or i64 %32, 2, !dbg !3194
  br label %ifcont, !dbg !3194

ifcont:                                           ; preds = %then, %entry
  %34 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 5, !dbg !3195
  %35 = load i64, ptr @tz_gpu_buffer_flag.index_buffer, align 4, !dbg !3195
  %36 = load i64, ptr %34, align 4, !dbg !3195
  %37 = and i64 %36, %35, !dbg !3195
  %38 = icmp sgt i64 %37, 0, !dbg !3195
  br i1 %38, label %then1, label %ifcont2, !dbg !3195

then1:                                            ; preds = %ifcont
  %39 = getelementptr inbounds nuw %VkBufferCreateInfo, ptr %create, i32 0, i32 4, !dbg !3196
  %40 = getelementptr inbounds nuw %VkBufferCreateInfo, ptr %create, i32 0, i32 4, !dbg !3196
  %41 = load i32, ptr %40, align 4, !dbg !3196
  %42 = sext i32 %41 to i64, !dbg !3196
  %43 = or i64 %42, 64, !dbg !3196
  %44 = trunc i64 %43 to i32, !dbg !3196
  store i32 %44, ptr %39, align 4, !dbg !3196
  %45 = load i32, ptr %39, align 4, !dbg !3196
  %46 = sext i32 %45 to i64, !dbg !3196
  %47 = or i64 %46, 64, !dbg !3196
  br label %ifcont2, !dbg !3196

ifcont2:                                          ; preds = %then1, %ifcont
  %48 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 5, !dbg !3197
  %49 = load i64, ptr @tz_gpu_buffer_flag.draw_buffer, align 4, !dbg !3197
  %50 = load i64, ptr %48, align 4, !dbg !3197
  %51 = and i64 %50, %49, !dbg !3197
  %52 = icmp sgt i64 %51, 0, !dbg !3197
  br i1 %52, label %then3, label %ifcont4, !dbg !3197

then3:                                            ; preds = %ifcont2
  %53 = getelementptr inbounds nuw %VkBufferCreateInfo, ptr %create, i32 0, i32 4, !dbg !3198
  %54 = getelementptr inbounds nuw %VkBufferCreateInfo, ptr %create, i32 0, i32 4, !dbg !3198
  %55 = load i32, ptr %54, align 4, !dbg !3198
  %56 = sext i32 %55 to i64, !dbg !3198
  %57 = or i64 %56, 256, !dbg !3198
  %58 = trunc i64 %57 to i32, !dbg !3198
  store i32 %58, ptr %53, align 4, !dbg !3198
  %59 = load i32, ptr %53, align 4, !dbg !3198
  %60 = sext i32 %59 to i64, !dbg !3198
  %61 = or i64 %60, 256, !dbg !3198
  br label %ifcont4, !dbg !3198

ifcont4:                                          ; preds = %then3, %ifcont2
  %62 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 43), align 8, !dbg !3199
  %63 = load i64, ptr @used_device, align 4, !dbg !3199
  %64 = load ptr, ptr @null, align 8, !dbg !3199
  %65 = load ptr, ptr %resptr, align 8, !dbg !3199
  %66 = getelementptr inbounds nuw %resource_data_t, ptr %65, i32 0, i32 2, !dbg !3199
  %67 = call i32 %62(i64 %63, ptr %create, ptr %64, ptr %66), !dbg !3199
  call void @vk_check(i32 %67), !dbg !3199
  %68 = load ptr, ptr @null, align 8, !dbg !3200
  %69 = load ptr, ptr %resptr, align 8, !dbg !3200
  %70 = getelementptr inbounds nuw %resource_data_t, ptr %69, i32 0, i32 2, !dbg !3200
  %71 = load i64, ptr %70, align 4, !dbg !3200
  %72 = insertvalue %VkBufferDeviceAddressInfo { i32 1000244001, ptr undef, i64 undef }, ptr %68, 1, !dbg !3200
  %73 = insertvalue %VkBufferDeviceAddressInfo %72, i64 %71, 2, !dbg !3200
  %bda = alloca %VkBufferDeviceAddressInfo, align 8, !dbg !3200
  store %VkBufferDeviceAddressInfo %73, ptr %bda, align 8, !dbg !3200
    #dbg_declare(ptr %bda, !3201, !DIExpression(), !3207)
  %74 = load ptr, ptr %resptr, align 8, !dbg !3208
  %75 = getelementptr inbounds nuw %resource_data_t, ptr %74, i32 0, i32 2, !dbg !3208
  %76 = load i64, ptr %75, align 4, !dbg !3208
  %77 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 1, !dbg !3208
  %78 = load i64, ptr %77, align 4, !dbg !3208
  %79 = load i1, ptr %dynamic, align 1, !dbg !3208
  %80 = xor i1 %79, true, !dbg !3208
  %81 = call i64 @impl_bind_buffer_mem(i64 %76, i64 %78, i1 %80), !dbg !3208
  %cursor = alloca i64, align 8, !dbg !3208
  store i64 %81, ptr %cursor, align 4, !dbg !3208
    #dbg_declare(ptr %cursor, !3209, !DIExpression(), !3210)
  %82 = load i1, ptr %dynamic, align 1, !dbg !3211
  br i1 %82, label %then5, label %ifcont6, !dbg !3211

then5:                                            ; preds = %ifcont4
  %83 = load %valloc_t, ptr getelementptr inbounds nuw (%vallocator_t, ptr @vallocator, i32 0, i32 2), align 8, !dbg !3212
  %cpumem = alloca %valloc_t, align 8, !dbg !3212
  store %valloc_t %83, ptr %cpumem, align 8, !dbg !3212
    #dbg_declare(ptr %cpumem, !3213, !DIExpression(), !3214)
  %84 = getelementptr inbounds nuw %valloc_t, ptr %cpumem, i32 0, i32 3, !dbg !3212
  %85 = load ptr, ptr %84, align 8, !dbg !3212
  %mapped_ptr = alloca ptr, align 8, !dbg !3215
  store ptr %85, ptr %mapped_ptr, align 8, !dbg !3215
    #dbg_declare(ptr %mapped_ptr, !3216, !DIExpression(), !3217)
  %86 = load ptr, ptr %resptr, align 8, !dbg !3218
  %87 = getelementptr inbounds nuw %resource_data_t, ptr %86, i32 0, i32 6, !dbg !3218
  %88 = load i64, ptr %cursor, align 4, !dbg !3218
  %89 = load ptr, ptr %mapped_ptr, align 8, !dbg !3218
  %90 = getelementptr i8, ptr %89, i64 %88, !dbg !3218
  store ptr %90, ptr %87, align 8, !dbg !3218
  %91 = load ptr, ptr %87, align 8, !dbg !3218
  br label %ifcont6, !dbg !3218

ifcont6:                                          ; preds = %then5, %ifcont4
  %92 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 45), align 8, !dbg !3218
  %93 = load i64, ptr @used_device, align 4, !dbg !3218
  %94 = call i64 %92(i64 %93, ptr %bda), !dbg !3218
  %tmp_bda = alloca i64, align 8, !dbg !3219
  store i64 %94, ptr %tmp_bda, align 4, !dbg !3219
    #dbg_declare(ptr %tmp_bda, !3220, !DIExpression(), !3221)
  %95 = load ptr, ptr %resptr, align 8, !dbg !3222
  %96 = getelementptr inbounds nuw %resource_data_t, ptr %95, i32 0, i32 5, !dbg !3222
  %97 = load i64, ptr %tmp_bda, align 4, !dbg !3222
  store i64 %97, ptr %96, align 4, !dbg !3222
  %98 = load ptr, ptr %resptr, align 8, !dbg !3222
  %99 = getelementptr inbounds nuw %resource_data_t, ptr %98, i32 0, i32 0, !dbg !3222
  %resinfo = alloca ptr, align 8, !dbg !3223
  store ptr %99, ptr %resinfo, align 8, !dbg !3223
    #dbg_declare(ptr %resinfo, !3224, !DIExpression(), !3226)
  %100 = load ptr, ptr %resinfo, align 8, !dbg !3227
  %101 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %100, i32 0, i32 0, !dbg !3227
  %102 = load ptr, ptr %a, align 8, !dbg !3227
  %103 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 1, !dbg !3227
  %104 = load i64, ptr %103, align 4, !dbg !3227
  %105 = call ptr @arena_push(ptr %102, i64 %104), !dbg !3227
  store ptr %105, ptr %101, align 8, !dbg !3227
  %106 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 0, !dbg !3228
  %107 = load ptr, ptr %106, align 8, !dbg !3228
  %108 = load ptr, ptr @null, align 8, !dbg !3228
  %109 = icmp ne ptr %107, %108, !dbg !3228
  br i1 %109, label %then7, label %ifcont8, !dbg !3228

then7:                                            ; preds = %ifcont6
  %110 = load ptr, ptr %resinfo, align 8, !dbg !3229
  %111 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %110, i32 0, i32 0, !dbg !3229
  %112 = load ptr, ptr %111, align 8, !dbg !3229
  %113 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 0, !dbg !3229
  %114 = load ptr, ptr %113, align 8, !dbg !3229
  %115 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 1, !dbg !3229
  %116 = load i64, ptr %115, align 4, !dbg !3229
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %112, ptr %114, i64 %116, i1 false), !dbg !3229
  br label %ifcont8, !dbg !3229

ifcont8:                                          ; preds = %then7, %ifcont6
  %117 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 4, !dbg !3230
  %118 = load i64, ptr @tz_gpu_resource_flag.zero_memory, align 4, !dbg !3230
  %119 = load i64, ptr %117, align 4, !dbg !3230
  %120 = and i64 %119, %118, !dbg !3230
  %121 = icmp sgt i64 %120, 0, !dbg !3230
  br i1 %121, label %then9, label %ifcont10, !dbg !3230

then9:                                            ; preds = %ifcont8
  %122 = load ptr, ptr %resinfo, align 8, !dbg !3231
  %123 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %122, i32 0, i32 0, !dbg !3231
  %124 = load ptr, ptr %123, align 8, !dbg !3231
  %125 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 1, !dbg !3231
  %126 = load i64, ptr %125, align 4, !dbg !3231
  call void @llvm.memset.inline.p0.i64(ptr %124, i8 0, i64 %126, i1 false), !dbg !3231
  br label %ifcont10, !dbg !3231

ifcont10:                                         ; preds = %then9, %ifcont8
  %127 = load ptr, ptr %resptr, align 8, !dbg !3232
  call void @impl_write_a_resource(ptr %127), !dbg !3232
  %128 = load i64, ptr %retid, align 4, !dbg !3233
  ret i64 %128, !dbg !3233
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.inline.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

define i64 @tz_gpu_create_image(%tz_gpu_resource_info %info_param, ptr %a_param) !dbg !3234 {
entry:
  %info = alloca %tz_gpu_resource_info, align 8
  store %tz_gpu_resource_info %info_param, ptr %info, align 8
    #dbg_declare(ptr %info, !3235, !DIExpression(), !3236)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !3237, !DIExpression(), !3236)
  %0 = load i64, ptr @resource_count, align 4, !dbg !3238
  %retid = alloca i64, align 8, !dbg !3238
  store i64 %0, ptr %retid, align 4, !dbg !3238
    #dbg_declare(ptr %retid, !3239, !DIExpression(), !3240)
  %1 = load ptr, ptr %a, align 8, !dbg !3241
  %2 = call ptr @impl_alloc_new_resource(ptr %1), !dbg !3241
  %resptr = alloca ptr, align 8, !dbg !3241
  store ptr %2, ptr %resptr, align 8, !dbg !3241
    #dbg_declare(ptr %resptr, !3242, !DIExpression(), !3243)
  %3 = load ptr, ptr %resptr, align 8, !dbg !3244
  %4 = getelementptr inbounds nuw %resource_data_t, ptr %3, i32 0, i32 0, !dbg !3244
  %5 = load %tz_gpu_resource_info, ptr %info, align 8, !dbg !3244
  store %tz_gpu_resource_info %5, ptr %4, align 8, !dbg !3244
  %6 = load ptr, ptr %resptr, align 8, !dbg !3245
  %7 = getelementptr inbounds nuw %resource_data_t, ptr %6, i32 0, i32 1, !dbg !3245
  store i1 false, ptr %7, align 1, !dbg !3245
  %fmt = alloca i32, align 4, !dbg !3246
    #dbg_declare(ptr %fmt, !3247, !DIExpression(), !3248)
  %aspect_mask = alloca i32, align 4, !dbg !3249
    #dbg_declare(ptr %aspect_mask, !3250, !DIExpression(), !3251)
  %8 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 3, !dbg !3252
  %9 = load i64, ptr @tz_gpu_image_type.rgba, align 4, !dbg !3252
  %10 = load i64, ptr %8, align 4, !dbg !3252
  %11 = icmp eq i64 %10, %9, !dbg !3252
  br i1 %11, label %then, label %ifcont, !dbg !3252

then:                                             ; preds = %entry
  %12 = load i64, ptr @rgba_format, align 4, !dbg !3253
  %13 = trunc i64 %12 to i32, !dbg !3253
  store i32 %13, ptr %fmt, align 4, !dbg !3253
  store i32 1, ptr %aspect_mask, align 4, !dbg !3254
  br label %ifcont, !dbg !3254

ifcont:                                           ; preds = %then, %entry
  %14 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 3, !dbg !3255
  %15 = load i64, ptr @tz_gpu_image_type.depth, align 4, !dbg !3255
  %16 = load i64, ptr %14, align 4, !dbg !3255
  %17 = icmp eq i64 %16, %15, !dbg !3255
  br i1 %17, label %then1, label %ifcont2, !dbg !3255

then1:                                            ; preds = %ifcont
  %18 = load i64, ptr @depth_format, align 4, !dbg !3256
  %19 = trunc i64 %18 to i32, !dbg !3256
  store i32 %19, ptr %fmt, align 4, !dbg !3256
  store i32 2, ptr %aspect_mask, align 4, !dbg !3257
  br label %ifcont2, !dbg !3257

ifcont2:                                          ; preds = %then1, %ifcont
  %20 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 2, !dbg !3257
  %21 = load %vec2u32, ptr %20, align 4, !dbg !3258
  %dims = alloca %vec2u32, align 8, !dbg !3258
  store %vec2u32 %21, ptr %dims, align 4, !dbg !3258
    #dbg_declare(ptr %dims, !3259, !DIExpression(), !3260)
  %22 = load ptr, ptr @null, align 8, !dbg !3261
  %23 = load i32, ptr %fmt, align 4, !dbg !3261
  %24 = getelementptr inbounds nuw %vec2u32, ptr %dims, i32 0, i32 0, !dbg !3261
  %25 = load i32, ptr %24, align 4, !dbg !3261
  %26 = getelementptr inbounds nuw %vec2u32, ptr %dims, i32 0, i32 1, !dbg !3261
  %27 = load i32, ptr %26, align 4, !dbg !3261
  %28 = insertvalue %VkExtent3D undef, i32 %25, 0, !dbg !3261
  %29 = insertvalue %VkExtent3D %28, i32 %27, 1, !dbg !3261
  %30 = insertvalue %VkExtent3D %29, i32 1, 2, !dbg !3261
  %31 = insertvalue %VkImageCreateInfo { i32 14, ptr undef, i32 undef, i32 undef, i32 undef, %VkExtent3D undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, ptr undef, i32 undef }, ptr %22, 1, !dbg !3261
  %32 = insertvalue %VkImageCreateInfo %31, i32 0, 2, !dbg !3261
  %33 = insertvalue %VkImageCreateInfo %32, i32 1, 3, !dbg !3261
  %34 = insertvalue %VkImageCreateInfo %33, i32 %23, 4, !dbg !3261
  %35 = insertvalue %VkImageCreateInfo %34, %VkExtent3D %30, 5, !dbg !3261
  %36 = insertvalue %VkImageCreateInfo %35, i32 1, 6, !dbg !3261
  %37 = insertvalue %VkImageCreateInfo %36, i32 1, 7, !dbg !3261
  %38 = insertvalue %VkImageCreateInfo %37, i32 1, 8, !dbg !3261
  %39 = insertvalue %VkImageCreateInfo %38, i32 0, 9, !dbg !3261
  %40 = insertvalue %VkImageCreateInfo %39, i32 6, 10, !dbg !3261
  %41 = insertvalue %VkImageCreateInfo %40, i32 0, 11, !dbg !3261
  %42 = insertvalue %VkImageCreateInfo %41, i32 1, 12, !dbg !3261
  %43 = insertvalue %VkImageCreateInfo %42, ptr @used_qfi, 13, !dbg !3261
  %44 = insertvalue %VkImageCreateInfo %43, i32 0, 14, !dbg !3261
  %create = alloca %VkImageCreateInfo, align 8, !dbg !3261
  store %VkImageCreateInfo %44, ptr %create, align 8, !dbg !3261
    #dbg_declare(ptr %create, !3262, !DIExpression(), !3263)
  %45 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 14), align 8, !dbg !3264
  %46 = load i64, ptr @used_device, align 4, !dbg !3264
  %47 = load ptr, ptr @null, align 8, !dbg !3264
  %48 = load ptr, ptr %resptr, align 8, !dbg !3264
  %49 = getelementptr inbounds nuw %resource_data_t, ptr %48, i32 0, i32 2, !dbg !3264
  %50 = call i32 %45(i64 %46, ptr %create, ptr %47, ptr %49), !dbg !3264
  call void @vk_check(i32 %50), !dbg !3264
  %51 = getelementptr inbounds nuw %vec2u32, ptr %dims, i32 0, i32 0, !dbg !3264
  %52 = load i32, ptr %51, align 4, !dbg !3265
  %w = alloca i32, align 4, !dbg !3265
  store i32 %52, ptr %w, align 4, !dbg !3265
    #dbg_declare(ptr %w, !3266, !DIExpression(), !3267)
  %53 = getelementptr inbounds nuw %vec2u32, ptr %dims, i32 0, i32 1, !dbg !3265
  %54 = load i32, ptr %53, align 4, !dbg !3268
  %h = alloca i32, align 4, !dbg !3268
  store i32 %54, ptr %h, align 4, !dbg !3268
    #dbg_declare(ptr %h, !3269, !DIExpression(), !3270)
  %55 = load ptr, ptr %resptr, align 8, !dbg !3271
  %56 = getelementptr inbounds nuw %resource_data_t, ptr %55, i32 0, i32 2, !dbg !3271
  %57 = load i64, ptr %56, align 4, !dbg !3271
  %58 = load i32, ptr %w, align 4, !dbg !3271
  %59 = load i32, ptr %h, align 4, !dbg !3271
  %60 = mul i32 %58, %59, !dbg !3271
  %61 = sext i32 %60 to i64, !dbg !3271
  %62 = mul i64 %61, 4, !dbg !3271
  call void @impl_bind_image_mem(i64 %57, i64 %62), !dbg !3271
  %63 = load ptr, ptr @null, align 8, !dbg !3272
  %64 = load ptr, ptr %resptr, align 8, !dbg !3272
  %65 = getelementptr inbounds nuw %resource_data_t, ptr %64, i32 0, i32 2, !dbg !3272
  %66 = load i64, ptr %65, align 4, !dbg !3272
  %67 = load i32, ptr %fmt, align 4, !dbg !3272
  %68 = load i32, ptr %aspect_mask, align 4, !dbg !3272
  %69 = insertvalue %VkImageSubresourceRange undef, i32 %68, 0, !dbg !3272
  %70 = insertvalue %VkImageSubresourceRange %69, i32 0, 1, !dbg !3272
  %71 = insertvalue %VkImageSubresourceRange %70, i32 1, 2, !dbg !3272
  %72 = insertvalue %VkImageSubresourceRange %71, i32 0, 3, !dbg !3272
  %73 = insertvalue %VkImageSubresourceRange %72, i32 1, 4, !dbg !3272
  %74 = insertvalue %VkImageViewCreateInfo { i32 15, ptr undef, i32 undef, i64 undef, i32 undef, i32 undef, %VkComponentMapping undef, %VkImageSubresourceRange undef }, ptr %63, 1, !dbg !3272
  %75 = insertvalue %VkImageViewCreateInfo %74, i32 0, 2, !dbg !3272
  %76 = insertvalue %VkImageViewCreateInfo %75, i64 %66, 3, !dbg !3272
  %77 = insertvalue %VkImageViewCreateInfo %76, i32 1, 4, !dbg !3272
  %78 = insertvalue %VkImageViewCreateInfo %77, i32 %67, 5, !dbg !3272
  %79 = insertvalue %VkImageViewCreateInfo %78, %VkComponentMapping zeroinitializer, 6, !dbg !3272
  %80 = insertvalue %VkImageViewCreateInfo %79, %VkImageSubresourceRange %73, 7, !dbg !3272
  %view_create = alloca %VkImageViewCreateInfo, align 8, !dbg !3272
  store %VkImageViewCreateInfo %80, ptr %view_create, align 8, !dbg !3272
    #dbg_declare(ptr %view_create, !3273, !DIExpression(), !3274)
  %81 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 16), align 8, !dbg !3275
  %82 = load i64, ptr @used_device, align 4, !dbg !3275
  %83 = load ptr, ptr @null, align 8, !dbg !3275
  %84 = load ptr, ptr %resptr, align 8, !dbg !3275
  %85 = getelementptr inbounds nuw %resource_data_t, ptr %84, i32 0, i32 3, !dbg !3275
  %86 = call i32 %81(i64 %82, ptr %view_create, ptr %83, ptr %85), !dbg !3275
  call void @vk_check(i32 %86), !dbg !3275
  %87 = load ptr, ptr @null, align 8, !dbg !3276
  %88 = insertvalue %VkSamplerCreateInfo { i32 31, ptr undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, float undef, i32 undef, float undef, i32 undef, i32 undef, float undef, float undef, i32 undef, i32 undef }, ptr %87, 1, !dbg !3276
  %89 = insertvalue %VkSamplerCreateInfo %88, i32 0, 2, !dbg !3276
  %90 = insertvalue %VkSamplerCreateInfo %89, i32 0, 3, !dbg !3276
  %91 = insertvalue %VkSamplerCreateInfo %90, i32 0, 4, !dbg !3276
  %92 = insertvalue %VkSamplerCreateInfo %91, i32 0, 5, !dbg !3276
  %93 = insertvalue %VkSamplerCreateInfo %92, i32 2, 6, !dbg !3276
  %94 = insertvalue %VkSamplerCreateInfo %93, i32 2, 7, !dbg !3276
  %95 = insertvalue %VkSamplerCreateInfo %94, i32 2, 8, !dbg !3276
  %96 = insertvalue %VkSamplerCreateInfo %95, float 0.000000e+00, 9, !dbg !3276
  %97 = insertvalue %VkSamplerCreateInfo %96, i32 0, 10, !dbg !3276
  %98 = insertvalue %VkSamplerCreateInfo %97, float 0.000000e+00, 11, !dbg !3276
  %99 = insertvalue %VkSamplerCreateInfo %98, i32 0, 12, !dbg !3276
  %100 = insertvalue %VkSamplerCreateInfo %99, i32 7, 13, !dbg !3276
  %101 = insertvalue %VkSamplerCreateInfo %100, float 0.000000e+00, 14, !dbg !3276
  %102 = insertvalue %VkSamplerCreateInfo %101, float 0.000000e+00, 15, !dbg !3276
  %103 = insertvalue %VkSamplerCreateInfo %102, i32 3, 16, !dbg !3276
  %104 = insertvalue %VkSamplerCreateInfo %103, i32 0, 17, !dbg !3276
  %sampler_create = alloca %VkSamplerCreateInfo, align 8, !dbg !3276
  store %VkSamplerCreateInfo %104, ptr %sampler_create, align 8, !dbg !3276
    #dbg_declare(ptr %sampler_create, !3277, !DIExpression(), !3298)
  %105 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 18), align 8, !dbg !3299
  %106 = load i64, ptr @used_device, align 4, !dbg !3299
  %107 = load ptr, ptr @null, align 8, !dbg !3299
  %108 = load ptr, ptr %resptr, align 8, !dbg !3299
  %109 = getelementptr inbounds nuw %resource_data_t, ptr %108, i32 0, i32 4, !dbg !3299
  %110 = call i32 %105(i64 %106, ptr %sampler_create, ptr %107, ptr %109), !dbg !3299
  call void @vk_check(i32 %110), !dbg !3299
  %111 = load ptr, ptr %resptr, align 8, !dbg !3299
  %112 = getelementptr inbounds nuw %resource_data_t, ptr %111, i32 0, i32 0, !dbg !3299
  %resinfo = alloca ptr, align 8, !dbg !3300
  store ptr %112, ptr %resinfo, align 8, !dbg !3300
    #dbg_declare(ptr %resinfo, !3301, !DIExpression(), !3302)
  %113 = load ptr, ptr %resinfo, align 8, !dbg !3303
  %114 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %113, i32 0, i32 0, !dbg !3303
  %115 = load ptr, ptr %a, align 8, !dbg !3303
  %116 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 1, !dbg !3303
  %117 = load i64, ptr %116, align 4, !dbg !3303
  %118 = call ptr @arena_push(ptr %115, i64 %117), !dbg !3303
  store ptr %118, ptr %114, align 8, !dbg !3303
  %119 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 0, !dbg !3304
  %120 = load ptr, ptr %119, align 8, !dbg !3304
  %121 = load ptr, ptr @null, align 8, !dbg !3304
  %122 = icmp ne ptr %120, %121, !dbg !3304
  br i1 %122, label %then3, label %ifcont4, !dbg !3304

then3:                                            ; preds = %ifcont2
  %123 = load ptr, ptr %resinfo, align 8, !dbg !3305
  %124 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %123, i32 0, i32 0, !dbg !3305
  %125 = load ptr, ptr %124, align 8, !dbg !3305
  %126 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 0, !dbg !3305
  %127 = load ptr, ptr %126, align 8, !dbg !3305
  %128 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 1, !dbg !3305
  %129 = load i64, ptr %128, align 4, !dbg !3305
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %125, ptr %127, i64 %129, i1 false), !dbg !3305
  br label %ifcont4, !dbg !3305

ifcont4:                                          ; preds = %then3, %ifcont2
  %130 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 4, !dbg !3306
  %131 = load i64, ptr @tz_gpu_resource_flag.zero_memory, align 4, !dbg !3306
  %132 = load i64, ptr %130, align 4, !dbg !3306
  %133 = and i64 %132, %131, !dbg !3306
  %134 = icmp sgt i64 %133, 0, !dbg !3306
  br i1 %134, label %then5, label %ifcont6, !dbg !3306

then5:                                            ; preds = %ifcont4
  %135 = load ptr, ptr %resinfo, align 8, !dbg !3307
  %136 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %135, i32 0, i32 0, !dbg !3307
  %137 = load ptr, ptr %136, align 8, !dbg !3307
  %138 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %info, i32 0, i32 1, !dbg !3307
  %139 = load i64, ptr %138, align 4, !dbg !3307
  call void @llvm.memset.inline.p0.i64(ptr %137, i8 0, i64 %139, i1 false), !dbg !3307
  br label %ifcont6, !dbg !3307

ifcont6:                                          ; preds = %then5, %ifcont4
  %140 = load ptr, ptr %resptr, align 8, !dbg !3308
  call void @impl_write_a_resource(ptr %140), !dbg !3308
  %141 = load i64, ptr %retid, align 4, !dbg !3309
  ret i64 %141, !dbg !3309
}

define %tz_gpu_shader_sources @tz_gpu_load_shader_files(ptr %vertex_spv_path_param, ptr %fragment_spv_path_param, ptr %a_param) !dbg !3310 {
entry:
  %vertex_spv_path = alloca ptr, align 8
  store ptr %vertex_spv_path_param, ptr %vertex_spv_path, align 8
    #dbg_declare(ptr %vertex_spv_path, !3319, !DIExpression(), !3320)
  %fragment_spv_path = alloca ptr, align 8
  store ptr %fragment_spv_path_param, ptr %fragment_spv_path, align 8
    #dbg_declare(ptr %fragment_spv_path, !3321, !DIExpression(), !3320)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !3322, !DIExpression(), !3320)
  %ret = alloca %tz_gpu_shader_sources, align 8, !dbg !3323
    #dbg_declare(ptr %ret, !3324, !DIExpression(), !3325)
  %0 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %ret, i32 0, i32 1, !dbg !3326
  %1 = load ptr, ptr %vertex_spv_path, align 8, !dbg !3326
  %2 = call i64 @file_size_bytes(ptr %1), !dbg !3326
  store i64 %2, ptr %0, align 4, !dbg !3326
  %3 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %ret, i32 0, i32 3, !dbg !3327
  %4 = load ptr, ptr %fragment_spv_path, align 8, !dbg !3327
  %5 = call i64 @file_size_bytes(ptr %4), !dbg !3327
  store i64 %5, ptr %3, align 4, !dbg !3327
  %6 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %ret, i32 0, i32 0, !dbg !3328
  %7 = load ptr, ptr %a, align 8, !dbg !3328
  %8 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %ret, i32 0, i32 1, !dbg !3328
  %9 = load i64, ptr %8, align 4, !dbg !3328
  %10 = call ptr @arena_push(ptr %7, i64 %9), !dbg !3328
  store ptr %10, ptr %6, align 8, !dbg !3328
  %11 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %ret, i32 0, i32 2, !dbg !3329
  %12 = load ptr, ptr %a, align 8, !dbg !3329
  %13 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %ret, i32 0, i32 3, !dbg !3329
  %14 = load i64, ptr %13, align 4, !dbg !3329
  %15 = call ptr @arena_push(ptr %12, i64 %14), !dbg !3329
  store ptr %15, ptr %11, align 8, !dbg !3329
  %16 = load ptr, ptr %vertex_spv_path, align 8, !dbg !3330
  %17 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %ret, i32 0, i32 0, !dbg !3330
  %18 = load ptr, ptr %17, align 8, !dbg !3330
  %19 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %ret, i32 0, i32 1, !dbg !3330
  %20 = load i64, ptr %19, align 4, !dbg !3330
  call void @file_read(ptr %16, ptr %18, i64 %20), !dbg !3330
  %21 = load ptr, ptr %fragment_spv_path, align 8, !dbg !3331
  %22 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %ret, i32 0, i32 2, !dbg !3331
  %23 = load ptr, ptr %22, align 8, !dbg !3331
  %24 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %ret, i32 0, i32 3, !dbg !3331
  %25 = load i64, ptr %24, align 4, !dbg !3331
  call void @file_read(ptr %21, ptr %23, i64 %25), !dbg !3331
  %26 = load %tz_gpu_shader_sources, ptr %ret, align 8, !dbg !3332
  ret %tz_gpu_shader_sources %26, !dbg !3332
}

define i64 @tz_gpu_create_graphics_shader(ptr %vertex_source_param, i64 %vertex_source_len_param, ptr %fragment_source_param, i64 %fragment_source_len_param, ptr %a_param) !dbg !3333 {
entry:
  %vertex_source = alloca ptr, align 8
  store ptr %vertex_source_param, ptr %vertex_source, align 8
    #dbg_declare(ptr %vertex_source, !3336, !DIExpression(), !3337)
  %vertex_source_len = alloca i64, align 8
  store i64 %vertex_source_len_param, ptr %vertex_source_len, align 4
    #dbg_declare(ptr %vertex_source_len, !3338, !DIExpression(), !3337)
  %fragment_source = alloca ptr, align 8
  store ptr %fragment_source_param, ptr %fragment_source, align 8
    #dbg_declare(ptr %fragment_source, !3339, !DIExpression(), !3337)
  %fragment_source_len = alloca i64, align 8
  store i64 %fragment_source_len_param, ptr %fragment_source_len, align 4
    #dbg_declare(ptr %fragment_source_len, !3340, !DIExpression(), !3337)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !3341, !DIExpression(), !3337)
  %0 = load i64, ptr @shaders_count, align 4, !dbg !3342
  %retid = alloca i64, align 8, !dbg !3342
  store i64 %0, ptr %retid, align 4, !dbg !3342
    #dbg_declare(ptr %retid, !3343, !DIExpression(), !3344)
  %1 = load ptr, ptr %a, align 8, !dbg !3345
  %2 = call ptr @impl_alloc_new_shader(ptr %1), !dbg !3345
  %resptr = alloca ptr, align 8, !dbg !3345
  store ptr %2, ptr %resptr, align 8, !dbg !3345
    #dbg_declare(ptr %resptr, !3346, !DIExpression(), !3347)
  %3 = load ptr, ptr %resptr, align 8, !dbg !3348
  %4 = getelementptr inbounds nuw %shader_data_t, ptr %3, i32 0, i32 0, !dbg !3348
  store i1 true, ptr %4, align 1, !dbg !3348
  %5 = load ptr, ptr %resptr, align 8, !dbg !3349
  %6 = getelementptr inbounds nuw %shader_data_t, ptr %5, i32 0, i32 3, !dbg !3349
  store i64 0, ptr %6, align 4, !dbg !3349
  %7 = load ptr, ptr @null, align 8, !dbg !3350
  %8 = load i64, ptr %vertex_source_len, align 4, !dbg !3350
  %9 = load ptr, ptr %vertex_source, align 8, !dbg !3350
  %10 = insertvalue %VkShaderModuleCreateInfo { i32 16, ptr undef, i32 undef, i64 undef, ptr undef }, ptr %7, 1, !dbg !3350
  %11 = insertvalue %VkShaderModuleCreateInfo %10, i32 0, 2, !dbg !3350
  %12 = insertvalue %VkShaderModuleCreateInfo %11, i64 %8, 3, !dbg !3350
  %13 = insertvalue %VkShaderModuleCreateInfo %12, ptr %9, 4, !dbg !3350
  %vcreate = alloca %VkShaderModuleCreateInfo, align 8, !dbg !3350
  store %VkShaderModuleCreateInfo %13, ptr %vcreate, align 8, !dbg !3350
    #dbg_declare(ptr %vcreate, !3351, !DIExpression(), !3359)
  %14 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 46), align 8, !dbg !3360
  %15 = load i64, ptr @used_device, align 4, !dbg !3360
  %16 = load ptr, ptr @null, align 8, !dbg !3360
  %17 = load ptr, ptr %resptr, align 8, !dbg !3360
  %18 = getelementptr inbounds nuw %shader_data_t, ptr %17, i32 0, i32 1, !dbg !3360
  %19 = call i32 %14(i64 %15, ptr %vcreate, ptr %16, ptr %18), !dbg !3360
  %20 = load ptr, ptr @null, align 8, !dbg !3361
  %21 = load i64, ptr %fragment_source_len, align 4, !dbg !3361
  %22 = load ptr, ptr %fragment_source, align 8, !dbg !3361
  %23 = insertvalue %VkShaderModuleCreateInfo { i32 16, ptr undef, i32 undef, i64 undef, ptr undef }, ptr %20, 1, !dbg !3361
  %24 = insertvalue %VkShaderModuleCreateInfo %23, i32 0, 2, !dbg !3361
  %25 = insertvalue %VkShaderModuleCreateInfo %24, i64 %21, 3, !dbg !3361
  %26 = insertvalue %VkShaderModuleCreateInfo %25, ptr %22, 4, !dbg !3361
  %fcreate = alloca %VkShaderModuleCreateInfo, align 8, !dbg !3361
  store %VkShaderModuleCreateInfo %26, ptr %fcreate, align 8, !dbg !3361
    #dbg_declare(ptr %fcreate, !3362, !DIExpression(), !3363)
  %27 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 46), align 8, !dbg !3364
  %28 = load i64, ptr @used_device, align 4, !dbg !3364
  %29 = load ptr, ptr @null, align 8, !dbg !3364
  %30 = load ptr, ptr %resptr, align 8, !dbg !3364
  %31 = getelementptr inbounds nuw %shader_data_t, ptr %30, i32 0, i32 2, !dbg !3364
  %32 = call i32 %27(i64 %28, ptr %fcreate, ptr %29, ptr %31), !dbg !3364
  %33 = load i64, ptr %retid, align 4, !dbg !3365
  ret i64 %33, !dbg !3365
}

define i64 @tz_gpu_create_compute_shader(ptr %compute_source_param, i64 %compute_source_len_param, ptr %a_param) !dbg !3366 {
entry:
  %compute_source = alloca ptr, align 8
  store ptr %compute_source_param, ptr %compute_source, align 8
    #dbg_declare(ptr %compute_source, !3369, !DIExpression(), !3370)
  %compute_source_len = alloca i64, align 8
  store i64 %compute_source_len_param, ptr %compute_source_len, align 4
    #dbg_declare(ptr %compute_source_len, !3371, !DIExpression(), !3370)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !3372, !DIExpression(), !3370)
  %0 = load i64, ptr @shaders_count, align 4, !dbg !3373
  %retid = alloca i64, align 8, !dbg !3373
  store i64 %0, ptr %retid, align 4, !dbg !3373
    #dbg_declare(ptr %retid, !3374, !DIExpression(), !3375)
  %1 = load ptr, ptr %a, align 8, !dbg !3376
  %2 = call ptr @impl_alloc_new_shader(ptr %1), !dbg !3376
  %resptr = alloca ptr, align 8, !dbg !3376
  store ptr %2, ptr %resptr, align 8, !dbg !3376
    #dbg_declare(ptr %resptr, !3377, !DIExpression(), !3378)
  %3 = load ptr, ptr %resptr, align 8, !dbg !3379
  %4 = getelementptr inbounds nuw %shader_data_t, ptr %3, i32 0, i32 0, !dbg !3379
  store i1 false, ptr %4, align 1, !dbg !3379
  %5 = load ptr, ptr %resptr, align 8, !dbg !3380
  %6 = getelementptr inbounds nuw %shader_data_t, ptr %5, i32 0, i32 1, !dbg !3380
  store i64 0, ptr %6, align 4, !dbg !3380
  %7 = load ptr, ptr %resptr, align 8, !dbg !3381
  %8 = getelementptr inbounds nuw %shader_data_t, ptr %7, i32 0, i32 2, !dbg !3381
  store i64 0, ptr %8, align 4, !dbg !3381
  %9 = load ptr, ptr @null, align 8, !dbg !3382
  %10 = load i64, ptr %compute_source_len, align 4, !dbg !3382
  %11 = load ptr, ptr %compute_source, align 8, !dbg !3382
  %12 = insertvalue %VkShaderModuleCreateInfo { i32 16, ptr undef, i32 undef, i64 undef, ptr undef }, ptr %9, 1, !dbg !3382
  %13 = insertvalue %VkShaderModuleCreateInfo %12, i32 0, 2, !dbg !3382
  %14 = insertvalue %VkShaderModuleCreateInfo %13, i64 %10, 3, !dbg !3382
  %15 = insertvalue %VkShaderModuleCreateInfo %14, ptr %11, 4, !dbg !3382
  %vcreate = alloca %VkShaderModuleCreateInfo, align 8, !dbg !3382
  store %VkShaderModuleCreateInfo %15, ptr %vcreate, align 8, !dbg !3382
    #dbg_declare(ptr %vcreate, !3383, !DIExpression(), !3384)
  %16 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 46), align 8, !dbg !3385
  %17 = load i64, ptr @used_device, align 4, !dbg !3385
  %18 = load ptr, ptr @null, align 8, !dbg !3385
  %19 = load ptr, ptr %resptr, align 8, !dbg !3385
  %20 = getelementptr inbounds nuw %shader_data_t, ptr %19, i32 0, i32 3, !dbg !3385
  %21 = call i32 %16(i64 %17, ptr %vcreate, ptr %18, ptr %20), !dbg !3385
  %22 = load i64, ptr %retid, align 4, !dbg !3386
  ret i64 %22, !dbg !3386
}

define i64 @tz_gpu_create_pass(%tz_gpu_pass_info %info_param, ptr %long_param, ptr %short_param) !dbg !3387 {
entry:
  %info = alloca %tz_gpu_pass_info, align 8
  store %tz_gpu_pass_info %info_param, ptr %info, align 8
    #dbg_declare(ptr %info, !3390, !DIExpression(), !3391)
  %long = alloca ptr, align 8
  store ptr %long_param, ptr %long, align 8
    #dbg_declare(ptr %long, !3392, !DIExpression(), !3391)
  %short = alloca ptr, align 8
  store ptr %short_param, ptr %short, align 8
    #dbg_declare(ptr %short, !3393, !DIExpression(), !3391)
  %0 = load i64, ptr @passes_count, align 4, !dbg !3394
  %retid = alloca i64, align 8, !dbg !3394
  store i64 %0, ptr %retid, align 4, !dbg !3394
    #dbg_declare(ptr %retid, !3395, !DIExpression(), !3396)
  %1 = load ptr, ptr %long, align 8, !dbg !3397
  %2 = call ptr @impl_alloc_new_pass(ptr %1), !dbg !3397
  %passptr = alloca ptr, align 8, !dbg !3397
  store ptr %2, ptr %passptr, align 8, !dbg !3397
    #dbg_declare(ptr %passptr, !3398, !DIExpression(), !3399)
  %3 = load ptr, ptr %passptr, align 8, !dbg !3400
  %4 = getelementptr inbounds nuw %pass_data_t, ptr %3, i32 0, i32 0, !dbg !3400
  %5 = load %tz_gpu_pass_info, ptr %info, align 8, !dbg !3400
  store %tz_gpu_pass_info %5, ptr %4, align 8, !dbg !3400
  %buffer_rescount = alloca i64, align 8, !dbg !3401
  store i64 0, ptr %buffer_rescount, align 4, !dbg !3401
    #dbg_declare(ptr %buffer_rescount, !3402, !DIExpression(), !3403)
  %counter = alloca i64, align 8, !dbg !3404
    #dbg_declare(ptr %counter, !3405, !DIExpression(), !3406)
  %cur_resource = alloca %resource_data_t, align 8, !dbg !3407
    #dbg_declare(ptr %cur_resource, !3408, !DIExpression(), !3409)
  store i64 0, ptr %counter, align 4, !dbg !3410
  %6 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %info, i32 0, i32 4, !dbg !3410
  %7 = load i64, ptr %counter, align 4, !dbg !3410
  %8 = load i64, ptr %6, align 4, !dbg !3410
  %9 = icmp ult i64 %7, %8, !dbg !3410
  br i1 %9, label %then, label %whilecont, !dbg !3410

then:                                             ; preds = %ifcont, %entry
  %10 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %info, i32 0, i32 3, !dbg !3411
  %11 = load i64, ptr %counter, align 4, !dbg !3411
  %12 = load ptr, ptr %10, align 8, !dbg !3411
  %13 = getelementptr i64, ptr %12, i64 %11, !dbg !3411
  %14 = load i64, ptr %13, align 4, !dbg !3411
  %15 = load ptr, ptr @resources, align 8, !dbg !3411
  %16 = getelementptr %resource_data_t, ptr %15, i64 %14, !dbg !3411
  %17 = load %resource_data_t, ptr %16, align 8, !dbg !3411
  store %resource_data_t %17, ptr %cur_resource, align 8, !dbg !3411
  %18 = getelementptr inbounds nuw %resource_data_t, ptr %cur_resource, i32 0, i32 1, !dbg !3412
  %19 = load i1, ptr %18, align 1, !dbg !3412
  br i1 %19, label %then1, label %ifcont, !dbg !3412

whilecont:                                        ; preds = %ifcont, %entry
  %size = alloca i64, align 8, !dbg !3413
  store i64 1, ptr %size, align 4, !dbg !3413
    #dbg_declare(ptr %size, !3414, !DIExpression(), !3415)
  %20 = load i64, ptr %buffer_rescount, align 4, !dbg !3416
  %21 = icmp ugt i64 %20, 0, !dbg !3416
  br i1 %21, label %then2, label %ifcont3, !dbg !3416

then1:                                            ; preds = %then
  %22 = load i64, ptr %buffer_rescount, align 4, !dbg !3417
  %23 = add i64 %22, 1, !dbg !3417
  store i64 %23, ptr %buffer_rescount, align 4, !dbg !3417
  %24 = load i64, ptr %buffer_rescount, align 4, !dbg !3417
  %25 = add i64 %24, 1, !dbg !3417
  br label %ifcont, !dbg !3417

ifcont:                                           ; preds = %then1, %then
  %26 = load i64, ptr %counter, align 4, !dbg !3417
  %27 = add i64 %26, 1, !dbg !3417
  store i64 %27, ptr %counter, align 4, !dbg !3417
  %28 = load i64, ptr %counter, align 4, !dbg !3417
  %29 = add i64 %28, 1, !dbg !3417
  %30 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %info, i32 0, i32 4, !dbg !3417
  %31 = load i64, ptr %counter, align 4, !dbg !3417
  %32 = load i64, ptr %30, align 4, !dbg !3417
  %33 = icmp ult i64 %31, %32, !dbg !3417
  br i1 %33, label %then, label %whilecont, !dbg !3417

then2:                                            ; preds = %whilecont
  %34 = load i64, ptr %buffer_rescount, align 4, !dbg !3418
  %35 = mul i64 %34, 8, !dbg !3418
  store i64 %35, ptr %size, align 4, !dbg !3418
  %36 = load i64, ptr %size, align 4, !dbg !3418
  %37 = mul i64 %36, 8, !dbg !3418
  br label %ifcont3, !dbg !3418

ifcont3:                                          ; preds = %then2, %whilecont
  %38 = load ptr, ptr @null, align 8, !dbg !3419
  %39 = load i64, ptr %size, align 4, !dbg !3419
  %40 = insertvalue %VkBufferCreateInfo { i32 12, ptr undef, i32 undef, i64 undef, i32 undef, i32 undef, i32 undef, ptr undef }, ptr %38, 1, !dbg !3419
  %41 = insertvalue %VkBufferCreateInfo %40, i32 0, 2, !dbg !3419
  %42 = insertvalue %VkBufferCreateInfo %41, i64 %39, 3, !dbg !3419
  %43 = insertvalue %VkBufferCreateInfo %42, i32 34, 4, !dbg !3419
  %44 = insertvalue %VkBufferCreateInfo %43, i32 0, 5, !dbg !3419
  %45 = insertvalue %VkBufferCreateInfo %44, i32 1, 6, !dbg !3419
  %46 = insertvalue %VkBufferCreateInfo %45, ptr @used_qfi, 7, !dbg !3419
  %meta_create = alloca %VkBufferCreateInfo, align 8, !dbg !3419
  store %VkBufferCreateInfo %46, ptr %meta_create, align 8, !dbg !3419
    #dbg_declare(ptr %meta_create, !3420, !DIExpression(), !3421)
  %47 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 43), align 8, !dbg !3422
  %48 = load i64, ptr @used_device, align 4, !dbg !3422
  %49 = load ptr, ptr @null, align 8, !dbg !3422
  %50 = load ptr, ptr %passptr, align 8, !dbg !3422
  %51 = getelementptr inbounds nuw %pass_data_t, ptr %50, i32 0, i32 1, !dbg !3422
  %52 = call i32 %47(i64 %48, ptr %meta_create, ptr %49, ptr %51), !dbg !3422
  call void @vk_check(i32 %52), !dbg !3422
  %53 = load ptr, ptr %passptr, align 8, !dbg !3423
  %54 = getelementptr inbounds nuw %pass_data_t, ptr %53, i32 0, i32 2, !dbg !3423
  %55 = load i64, ptr %size, align 4, !dbg !3423
  store i64 %55, ptr %54, align 4, !dbg !3423
  %56 = load ptr, ptr %passptr, align 8, !dbg !3424
  %57 = getelementptr inbounds nuw %pass_data_t, ptr %56, i32 0, i32 1, !dbg !3424
  %58 = load i64, ptr %57, align 4, !dbg !3424
  %59 = load i64, ptr %size, align 4, !dbg !3424
  %60 = call i64 @impl_bind_buffer_mem(i64 %58, i64 %59, i1 true), !dbg !3424
  %61 = load ptr, ptr %passptr, align 8, !dbg !3425
  %62 = getelementptr inbounds nuw %pass_data_t, ptr %61, i32 0, i32 3, !dbg !3425
  %63 = load i1, ptr %62, align 1, !dbg !3425
  br i1 %63, label %then4, label %ifcont5, !dbg !3425

then4:                                            ; preds = %ifcont3
  %64 = load ptr, ptr %passptr, align 8, !dbg !3426
  %65 = getelementptr inbounds nuw %pass_data_t, ptr %64, i32 0, i32 4, !dbg !3426
  %66 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %info, i32 0, i32 2, !dbg !3426
  %67 = load i64, ptr %66, align 4, !dbg !3426
  %68 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %info, i32 0, i32 1, !dbg !3426
  %69 = load %tz_gpu_compute_state, ptr %68, align 4, !dbg !3426
  %70 = call i64 @impl_create_compute_pipeline(i64 %67, %tz_gpu_compute_state %69), !dbg !3426
  store i64 %70, ptr %65, align 4, !dbg !3426
  br label %ifcont5, !dbg !3426

ifcont5:                                          ; preds = %then4, %ifcont3
  %71 = load ptr, ptr %passptr, align 8, !dbg !3427
  %72 = getelementptr inbounds nuw %pass_data_t, ptr %71, i32 0, i32 5, !dbg !3427
  store i1 false, ptr %72, align 1, !dbg !3427
  %73 = load ptr, ptr %passptr, align 8, !dbg !3428
  %74 = getelementptr inbounds nuw %pass_data_t, ptr %73, i32 0, i32 3, !dbg !3428
  %75 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %info, i32 0, i32 2, !dbg !3428
  %76 = load i64, ptr %75, align 4, !dbg !3428
  %77 = call i1 @impl_shader_is_compute(i64 %76), !dbg !3428
  store i1 %77, ptr %74, align 1, !dbg !3428
  %78 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %info, i32 0, i32 0, !dbg !3428
  %79 = load %tz_gpu_graphics_state, ptr %78, align 8, !dbg !3429
  %ginfo = alloca %tz_gpu_graphics_state, align 8, !dbg !3429
  store %tz_gpu_graphics_state %79, ptr %ginfo, align 8, !dbg !3429
    #dbg_declare(ptr %ginfo, !3430, !DIExpression(), !3431)
  %cur_colour_target = alloca i64, align 8, !dbg !3432
    #dbg_declare(ptr %cur_colour_target, !3433, !DIExpression(), !3434)
  %80 = load ptr, ptr %passptr, align 8, !dbg !3435
  %81 = getelementptr inbounds nuw %pass_data_t, ptr %80, i32 0, i32 3, !dbg !3435
  %82 = load i1, ptr %81, align 1, !dbg !3435
  %83 = xor i1 %82, true, !dbg !3435
  br i1 %83, label %then6, label %ifcont7, !dbg !3435

then6:                                            ; preds = %ifcont5
  %84 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 6, !dbg !3436
  %85 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !3436
  %86 = load i64, ptr %84, align 4, !dbg !3436
  %87 = icmp ne i64 %86, %85, !dbg !3436
  br i1 %87, label %then8, label %ifcont9, !dbg !3436

ifcont7:                                          ; preds = %whilecont13, %ifcont5
  %88 = load ptr, ptr %passptr, align 8, !dbg !3437
  %89 = load ptr, ptr %long, align 8, !dbg !3437
  %90 = load ptr, ptr %short, align 8, !dbg !3437
  call void @impl_write_resources(ptr %88, ptr %89, ptr %90), !dbg !3437
  %91 = load ptr, ptr %passptr, align 8, !dbg !3438
  %92 = load ptr, ptr %long, align 8, !dbg !3438
  %93 = load ptr, ptr %short, align 8, !dbg !3438
  call void @impl_populate_descriptors(ptr %91, ptr %92, ptr %93), !dbg !3438
  %94 = load i64, ptr %retid, align 4, !dbg !3439
  ret i64 %94, !dbg !3439

then8:                                            ; preds = %then6
  %95 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 6, !dbg !3440
  %96 = load i64, ptr %95, align 4, !dbg !3440
  %drawbuf_handle = alloca i64, align 8, !dbg !3441
  store i64 %96, ptr %drawbuf_handle, align 4, !dbg !3441
    #dbg_declare(ptr %drawbuf_handle, !3442, !DIExpression(), !3443)
  %97 = load i64, ptr %drawbuf_handle, align 4, !dbg !3441
  %98 = load ptr, ptr @resources, align 8, !dbg !3441
  %99 = getelementptr %resource_data_t, ptr %98, i64 %97, !dbg !3441
  %drawbuf = alloca ptr, align 8, !dbg !3444
  store ptr %99, ptr %drawbuf, align 8, !dbg !3444
    #dbg_declare(ptr %drawbuf, !3445, !DIExpression(), !3446)
  %100 = load ptr, ptr %drawbuf, align 8, !dbg !3444
  %101 = getelementptr inbounds nuw %resource_data_t, ptr %100, i32 0, i32 0, !dbg !3444
  %102 = load %tz_gpu_resource_info, ptr %101, align 8, !dbg !3447
  %dbinfo = alloca %tz_gpu_resource_info, align 8, !dbg !3447
  store %tz_gpu_resource_info %102, ptr %dbinfo, align 8, !dbg !3447
    #dbg_declare(ptr %dbinfo, !3448, !DIExpression(), !3449)
  %103 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %dbinfo, i32 0, i32 5, !dbg !3447
  %104 = load i64, ptr %103, align 4, !dbg !3450
  %dbflags = alloca i64, align 8, !dbg !3450
  store i64 %104, ptr %dbflags, align 4, !dbg !3450
    #dbg_declare(ptr %dbflags, !3451, !DIExpression(), !3452)
  %105 = load i64, ptr @tz_gpu_buffer_flag.draw_buffer, align 4, !dbg !3453
  %106 = load i64, ptr %dbflags, align 4, !dbg !3453
  %107 = and i64 %106, %105, !dbg !3453
  %108 = icmp sle i64 %107, 0, !dbg !3453
  br i1 %108, label %then10, label %ifcont11, !dbg !3453

ifcont9:                                          ; preds = %ifcont11, %then6
  %109 = load ptr, ptr %passptr, align 8, !dbg !3454
  %110 = getelementptr inbounds nuw %pass_data_t, ptr %109, i32 0, i32 4, !dbg !3454
  %111 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %info, i32 0, i32 2, !dbg !3454
  %112 = load i64, ptr %111, align 4, !dbg !3454
  %113 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %info, i32 0, i32 0, !dbg !3454
  %114 = load %tz_gpu_graphics_state, ptr %113, align 8, !dbg !3454
  %115 = load ptr, ptr %long, align 8, !dbg !3454
  %116 = call i64 @impl_create_graphics_pipeline(i64 %112, %tz_gpu_graphics_state %114, ptr %115), !dbg !3454
  store i64 %116, ptr %110, align 4, !dbg !3454
  store i64 0, ptr %counter, align 4, !dbg !3455
  %117 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 3, !dbg !3455
  %118 = load i64, ptr %counter, align 4, !dbg !3455
  %119 = load i64, ptr %117, align 4, !dbg !3455
  %120 = icmp ult i64 %118, %119, !dbg !3455
  br i1 %120, label %then12, label %whilecont13, !dbg !3455

then10:                                           ; preds = %then8
  call void @puts(ptr @strlit.188), !dbg !3456
  %121 = load i64, ptr %drawbuf_handle, align 4, !dbg !3457
  call void @putuint(i64 %121), !dbg !3457
  call void @puts(ptr @strlit.189), !dbg !3458
  call void @putchar(i8 34), !dbg !3459
  %122 = getelementptr inbounds nuw %tz_gpu_pass_info, ptr %info, i32 0, i32 5, !dbg !3460
  %123 = load ptr, ptr %122, align 8, !dbg !3460
  call void @puts(ptr %123), !dbg !3460
  call void @putchar(i8 34), !dbg !3461
  call void @puts(ptr @strlit.190), !dbg !3462
  call void @llvm.debugtrap(), !dbg !3463
  br label %ifcont11, !dbg !3463

ifcont11:                                         ; preds = %then10, %then8
  br label %ifcont9, !dbg !3463

then12:                                           ; preds = %ifcont15, %ifcont9
  %124 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 2, !dbg !3464
  %125 = load i64, ptr %counter, align 4, !dbg !3464
  %126 = load ptr, ptr %124, align 8, !dbg !3464
  %127 = getelementptr i64, ptr %126, i64 %125, !dbg !3464
  %128 = load i64, ptr %127, align 4, !dbg !3464
  store i64 %128, ptr %cur_colour_target, align 4, !dbg !3464
  %129 = load i64, ptr @tz_gpu_resource.window_resource, align 4, !dbg !3465
  %130 = load i64, ptr %cur_colour_target, align 4, !dbg !3465
  %131 = icmp eq i64 %130, %129, !dbg !3465
  br i1 %131, label %then14, label %ifcont15, !dbg !3465

whilecont13:                                      ; preds = %ifcont15, %ifcont9
  %132 = load ptr, ptr %passptr, align 8, !dbg !3466
  %133 = getelementptr inbounds nuw %pass_data_t, ptr %132, i32 0, i32 6, !dbg !3466
  %134 = load ptr, ptr %passptr, align 8, !dbg !3466
  %135 = call %vec2u32 @impl_get_pass_colour_target_dimensions(ptr %134), !dbg !3466
  store %vec2u32 %135, ptr %133, align 4, !dbg !3466
  br label %ifcont7, !dbg !3466

then14:                                           ; preds = %then12
  %136 = load ptr, ptr %long, align 8, !dbg !3467
  %137 = call i1 @impl_require_swapchain(ptr %136), !dbg !3467
  %138 = load ptr, ptr %passptr, align 8, !dbg !3468
  %139 = getelementptr inbounds nuw %pass_data_t, ptr %138, i32 0, i32 5, !dbg !3468
  store i1 true, ptr %139, align 1, !dbg !3468
  br label %ifcont15, !dbg !3468

ifcont15:                                         ; preds = %then14, %then12
  %140 = load i64, ptr %counter, align 4, !dbg !3468
  %141 = add i64 %140, 1, !dbg !3468
  store i64 %141, ptr %counter, align 4, !dbg !3468
  %142 = load i64, ptr %counter, align 4, !dbg !3468
  %143 = add i64 %142, 1, !dbg !3468
  %144 = getelementptr inbounds nuw %tz_gpu_graphics_state, ptr %ginfo, i32 0, i32 3, !dbg !3468
  %145 = load i64, ptr %counter, align 4, !dbg !3468
  %146 = load i64, ptr %144, align 4, !dbg !3468
  %147 = icmp ult i64 %145, %146, !dbg !3468
  br i1 %147, label %then12, label %whilecont13, !dbg !3468
}

define i64 @tz_gpu_create_graph(ptr %name_param, ptr %a_param) !dbg !3469 {
entry:
  %name = alloca ptr, align 8
  store ptr %name_param, ptr %name, align 8
    #dbg_declare(ptr %name, !3472, !DIExpression(), !3473)
  %a = alloca ptr, align 8
  store ptr %a_param, ptr %a, align 8
    #dbg_declare(ptr %a, !3474, !DIExpression(), !3473)
  %0 = load i64, ptr @graph_count, align 4, !dbg !3475
  %ret = alloca i64, align 8, !dbg !3475
  store i64 %0, ptr %ret, align 4, !dbg !3475
    #dbg_declare(ptr %ret, !3476, !DIExpression(), !3477)
  %1 = load ptr, ptr %a, align 8, !dbg !3478
  %2 = call ptr @impl_alloc_new_graph(ptr %1), !dbg !3478
  %graphptr = alloca ptr, align 8, !dbg !3478
  store ptr %2, ptr %graphptr, align 8, !dbg !3478
    #dbg_declare(ptr %graphptr, !3479, !DIExpression(), !3480)
  %3 = load ptr, ptr %graphptr, align 8, !dbg !3481
  %4 = getelementptr inbounds nuw %graph_data_t, ptr %3, i32 0, i32 0, !dbg !3481
  %5 = load ptr, ptr %name, align 8, !dbg !3481
  %6 = load ptr, ptr %a, align 8, !dbg !3481
  %7 = call %string @create_string(ptr %5, ptr %6), !dbg !3481
  store %string %7, ptr %4, align 8, !dbg !3481
  %initial_timeline_capacity = alloca i64, align 8, !dbg !3482
  store i64 8, ptr %initial_timeline_capacity, align 4, !dbg !3482
    #dbg_declare(ptr %initial_timeline_capacity, !3483, !DIExpression(), !3484)
  %8 = load ptr, ptr %graphptr, align 8, !dbg !3485
  %9 = getelementptr inbounds nuw %graph_data_t, ptr %8, i32 0, i32 1, !dbg !3485
  %10 = load ptr, ptr %a, align 8, !dbg !3485
  %11 = load i64, ptr %initial_timeline_capacity, align 4, !dbg !3485
  %12 = mul i64 12, %11, !dbg !3485
  %13 = call ptr @arena_push(ptr %10, i64 %12), !dbg !3485
  store ptr %13, ptr %9, align 8, !dbg !3485
  %14 = load ptr, ptr %graphptr, align 8, !dbg !3486
  %15 = getelementptr inbounds nuw %graph_data_t, ptr %14, i32 0, i32 2, !dbg !3486
  store i64 0, ptr %15, align 4, !dbg !3486
  %16 = load ptr, ptr %graphptr, align 8, !dbg !3487
  %17 = getelementptr inbounds nuw %graph_data_t, ptr %16, i32 0, i32 3, !dbg !3487
  %18 = load i64, ptr %initial_timeline_capacity, align 4, !dbg !3487
  store i64 %18, ptr %17, align 4, !dbg !3487
  %19 = load i64, ptr %ret, align 4, !dbg !3488
  ret i64 %19, !dbg !3488
}

define void @tz_gpu_graph_add_pass(i64 %graph_param, i64 %pass_param) !dbg !3489 {
entry:
  %graph = alloca i64, align 8
  store i64 %graph_param, ptr %graph, align 4
    #dbg_declare(ptr %graph, !3492, !DIExpression(), !3493)
  %pass = alloca i64, align 8
  store i64 %pass_param, ptr %pass, align 4
    #dbg_declare(ptr %pass, !3494, !DIExpression(), !3493)
  %0 = load i64, ptr %graph, align 4, !dbg !3495
  %1 = load ptr, ptr @graphs, align 8, !dbg !3495
  %2 = getelementptr %graph_data_t, ptr %1, i64 %0, !dbg !3495
  %graphptr = alloca ptr, align 8, !dbg !3496
  store ptr %2, ptr %graphptr, align 8, !dbg !3496
    #dbg_declare(ptr %graphptr, !3497, !DIExpression(), !3498)
  %3 = load ptr, ptr %graphptr, align 8, !dbg !3499
  %4 = getelementptr inbounds nuw %graph_data_t, ptr %3, i32 0, i32 2, !dbg !3499
  %5 = load i64, ptr %4, align 4, !dbg !3499
  %6 = add i64 %5, 1, !dbg !3499
  %7 = load ptr, ptr %graphptr, align 8, !dbg !3499
  %8 = getelementptr inbounds nuw %graph_data_t, ptr %7, i32 0, i32 3, !dbg !3499
  %9 = load i64, ptr %8, align 4, !dbg !3499
  %10 = icmp ugt i64 %6, %9, !dbg !3499
  br i1 %10, label %then, label %ifcont, !dbg !3499

then:                                             ; preds = %entry
  call void @puts(ptr @strlit.191), !dbg !3500
  call void @llvm.debugtrap(), !dbg !3501
  br label %ifcont, !dbg !3501

ifcont:                                           ; preds = %then, %entry
  %11 = load ptr, ptr %graphptr, align 8, !dbg !3501
  %12 = getelementptr inbounds nuw %graph_data_t, ptr %11, i32 0, i32 2, !dbg !3501
  %13 = load i64, ptr %12, align 4, !dbg !3502
  %cur = alloca i64, align 8, !dbg !3502
  store i64 %13, ptr %cur, align 4, !dbg !3502
    #dbg_declare(ptr %cur, !3503, !DIExpression(), !3504)
  %14 = load ptr, ptr %graphptr, align 8, !dbg !3502
  %15 = getelementptr inbounds nuw %graph_data_t, ptr %14, i32 0, i32 1, !dbg !3502
  %16 = load i64, ptr %cur, align 4, !dbg !3502
  %17 = load ptr, ptr %15, align 8, !dbg !3502
  %18 = getelementptr %graph_entry, ptr %17, i64 %16, !dbg !3502
  %entry_ptr = alloca ptr, align 8, !dbg !3505
  store ptr %18, ptr %entry_ptr, align 8, !dbg !3505
    #dbg_declare(ptr %entry_ptr, !3506, !DIExpression(), !3507)
  %19 = load ptr, ptr %entry_ptr, align 8, !dbg !3508
  %20 = getelementptr inbounds nuw %graph_entry, ptr %19, i32 0, i32 0, !dbg !3508
  %21 = load i64, ptr %pass, align 4, !dbg !3508
  store i64 %21, ptr %20, align 4, !dbg !3508
  %22 = load ptr, ptr %entry_ptr, align 8, !dbg !3509
  %23 = getelementptr inbounds nuw %graph_entry, ptr %22, i32 0, i32 1, !dbg !3509
  store i1 false, ptr %23, align 1, !dbg !3509
  %24 = load ptr, ptr %graphptr, align 8, !dbg !3510
  %25 = getelementptr inbounds nuw %graph_data_t, ptr %24, i32 0, i32 2, !dbg !3510
  %26 = load ptr, ptr %graphptr, align 8, !dbg !3510
  %27 = getelementptr inbounds nuw %graph_data_t, ptr %26, i32 0, i32 2, !dbg !3510
  %28 = load i64, ptr %27, align 4, !dbg !3510
  %29 = add i64 %28, 1, !dbg !3510
  store i64 %29, ptr %25, align 4, !dbg !3510
  %30 = load i64, ptr %25, align 4, !dbg !3510
  %31 = add i64 %30, 1, !dbg !3510
  ret void, !dbg !3495
}

define void @tz_gpu_execute(i64 %graph_param, ptr %long_param, ptr %short_param) !dbg !3511 {
entry:
  %graph = alloca i64, align 8
  store i64 %graph_param, ptr %graph, align 4
    #dbg_declare(ptr %graph, !3514, !DIExpression(), !3515)
  %long = alloca ptr, align 8
  store ptr %long_param, ptr %long, align 8
    #dbg_declare(ptr %long, !3516, !DIExpression(), !3515)
  %short = alloca ptr, align 8
  store ptr %short_param, ptr %short, align 8
    #dbg_declare(ptr %short, !3517, !DIExpression(), !3515)
  %0 = load i64, ptr %graph, align 4, !dbg !3518
  %1 = load ptr, ptr @graphs, align 8, !dbg !3518
  %2 = getelementptr %graph_data_t, ptr %1, i64 %0, !dbg !3518
  %graphptr = alloca ptr, align 8, !dbg !3519
  store ptr %2, ptr %graphptr, align 8, !dbg !3519
    #dbg_declare(ptr %graphptr, !3520, !DIExpression(), !3521)
  %3 = load i64, ptr %graph, align 4, !dbg !3522
  %4 = call i1 @impl_graph_writes_to_system_image(i64 %3), !dbg !3522
  %writes_to_system_image = alloca i1, align 1, !dbg !3522
  store i1 %4, ptr %writes_to_system_image, align 1, !dbg !3522
    #dbg_declare(ptr %writes_to_system_image, !3523, !DIExpression(), !3524)
  %5 = load i64, ptr %graph, align 4, !dbg !3525
  %6 = call i1 @impl_graph_will_present(i64 %5), !dbg !3525
  %will_present = alloca i1, align 1, !dbg !3525
  store i1 %6, ptr %will_present, align 1, !dbg !3525
    #dbg_declare(ptr %will_present, !3526, !DIExpression(), !3527)
  %7 = load i64, ptr @current_frame, align 4, !dbg !3525
  %8 = getelementptr [2 x %frame_data], ptr @frames, i64 0, i64 %7, !dbg !3525
  %9 = load %frame_data, ptr %8, align 4, !dbg !3525
  %frame = alloca %frame_data, align 8, !dbg !3528
  store %frame_data %9, ptr %frame, align 4, !dbg !3528
    #dbg_declare(ptr %frame, !3529, !DIExpression(), !3530)
  %image_index = alloca i32, align 4, !dbg !3531
  store i32 -1, ptr %image_index, align 4, !dbg !3531
    #dbg_declare(ptr %image_index, !3532, !DIExpression(), !3533)
  %swapchain_image = alloca i64, align 8, !dbg !3534
  store i64 0, ptr %swapchain_image, align 4, !dbg !3534
    #dbg_declare(ptr %swapchain_image, !3535, !DIExpression(), !3536)
  %10 = load i1, ptr %will_present, align 1, !dbg !3537
  br i1 %10, label %then, label %ifcont, !dbg !3537

then:                                             ; preds = %entry
  %11 = load ptr, ptr %long, align 8, !dbg !3538
  %12 = call i1 @impl_require_swapchain(ptr %11), !dbg !3538
  %13 = load i64, ptr @swapchain_width, align 4, !dbg !3539
  %14 = icmp eq i64 %13, 0, !dbg !3539
  br i1 %14, label %then1, label %ifcont2, !dbg !3539

ifcont:                                           ; preds = %ifcont4, %entry
  %15 = load ptr, ptr @null, align 8, !dbg !3540
  %16 = insertvalue %VkImageMemoryBarrier { i32 45, ptr undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i64 undef, %VkImageSubresourceRange undef }, ptr %15, 1, !dbg !3540
  %17 = insertvalue %VkImageMemoryBarrier %16, i32 0, 2, !dbg !3540
  %18 = insertvalue %VkImageMemoryBarrier %17, i32 4096, 3, !dbg !3540
  %19 = insertvalue %VkImageMemoryBarrier %18, i32 0, 4, !dbg !3540
  %20 = insertvalue %VkImageMemoryBarrier %19, i32 7, 5, !dbg !3540
  %21 = insertvalue %VkImageMemoryBarrier %20, i32 -1, 6, !dbg !3540
  %22 = insertvalue %VkImageMemoryBarrier %21, i32 -1, 7, !dbg !3540
  %23 = insertvalue %VkImageMemoryBarrier %22, i64 0, 8, !dbg !3540
  %24 = insertvalue %VkImageMemoryBarrier %23, %VkImageSubresourceRange { i32 1, i32 0, i32 1, i32 0, i32 1 }, 9, !dbg !3540
  %barrier = alloca %VkImageMemoryBarrier, align 8, !dbg !3540
  store %VkImageMemoryBarrier %24, ptr %barrier, align 8, !dbg !3540
    #dbg_declare(ptr %barrier, !3541, !DIExpression(), !3542)
  %25 = load i1, ptr %will_present, align 1, !dbg !3543
  br i1 %25, label %then5, label %ifcont6, !dbg !3543

then1:                                            ; preds = %then
  ret void, !dbg !3544

ifcont2:                                          ; preds = %then
  %26 = load i64, ptr @swapchain_height, align 4, !dbg !3545
  %27 = icmp eq i64 %26, 0, !dbg !3545
  br i1 %27, label %then3, label %ifcont4, !dbg !3545

then3:                                            ; preds = %ifcont2
  ret void, !dbg !3546

ifcont4:                                          ; preds = %ifcont2
  %28 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 12), align 8, !dbg !3547
  %29 = load i64, ptr @used_device, align 4, !dbg !3547
  %30 = load i64, ptr @swapchain, align 4, !dbg !3547
  %31 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 2, !dbg !3547
  %32 = load i64, ptr %31, align 4, !dbg !3547
  %33 = call i32 %28(i64 %29, i64 %30, i64 9999999999, i64 0, i64 %32, ptr %image_index), !dbg !3547
  call void @vk_check(i32 %33), !dbg !3547
  %34 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 58), align 8, !dbg !3548
  %35 = load i64, ptr @used_device, align 4, !dbg !3548
  %36 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 2, !dbg !3548
  %37 = call i32 %34(i64 %35, i32 1, ptr %36, i32 1, i64 9999999), !dbg !3548
  call void @vk_check(i32 %37), !dbg !3548
  %38 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 59), align 8, !dbg !3549
  %39 = load i64, ptr @used_device, align 4, !dbg !3549
  %40 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 2, !dbg !3549
  %41 = call i32 %38(i64 %39, i32 1, ptr %40), !dbg !3549
  call void @vk_check(i32 %41), !dbg !3549
  %42 = load i32, ptr %image_index, align 4, !dbg !3550
  %43 = load ptr, ptr @swapchain_images, align 8, !dbg !3550
  %44 = getelementptr i64, ptr %43, i32 %42, !dbg !3550
  %45 = load i64, ptr %44, align 4, !dbg !3550
  store i64 %45, ptr %swapchain_image, align 4, !dbg !3550
  br label %ifcont, !dbg !3550

then5:                                            ; preds = %ifcont
  %46 = getelementptr inbounds nuw %VkImageMemoryBarrier, ptr %barrier, i32 0, i32 8, !dbg !3551
  %47 = load i64, ptr %swapchain_image, align 4, !dbg !3551
  store i64 %47, ptr %46, align 4, !dbg !3551
  br label %ifcont6, !dbg !3551

ifcont6:                                          ; preds = %then5, %ifcont
  %48 = load ptr, ptr @null, align 8, !dbg !3552
  %49 = load ptr, ptr @null, align 8, !dbg !3552
  %50 = insertvalue %VkCommandBufferBeginInfo { i32 42, ptr undef, i32 undef, ptr undef }, ptr %48, 1, !dbg !3552
  %51 = insertvalue %VkCommandBufferBeginInfo %50, i32 0, 2, !dbg !3552
  %52 = insertvalue %VkCommandBufferBeginInfo %51, ptr %49, 3, !dbg !3552
  %frame_begin = alloca %VkCommandBufferBeginInfo, align 8, !dbg !3552
  store %VkCommandBufferBeginInfo %52, ptr %frame_begin, align 8, !dbg !3552
    #dbg_declare(ptr %frame_begin, !3553, !DIExpression(), !3554)
  %53 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 51), align 8, !dbg !3555
  %54 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !3555
  %55 = load i64, ptr %54, align 4, !dbg !3555
  %56 = call i32 %53(i64 %55, ptr %frame_begin), !dbg !3555
  call void @vk_check(i32 %56), !dbg !3555
  %57 = load i1, ptr %will_present, align 1, !dbg !3556
  br i1 %57, label %then7, label %ifcont8, !dbg !3556

then7:                                            ; preds = %ifcont6
  %58 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 63), align 8, !dbg !3557
  %59 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !3557
  %60 = load i64, ptr %59, align 4, !dbg !3557
  %61 = load ptr, ptr @null, align 8, !dbg !3557
  %62 = load ptr, ptr @null, align 8, !dbg !3557
  call void %58(i64 %60, i32 8192, i32 4096, i32 0, i32 0, ptr %61, i32 0, ptr %62, i32 1, ptr %barrier), !dbg !3557
  br label %ifcont8, !dbg !3557

ifcont8:                                          ; preds = %then7, %ifcont6
  %counter = alloca i64, align 8, !dbg !3558
    #dbg_declare(ptr %counter, !3559, !DIExpression(), !3560)
  %cur_entry = alloca %graph_entry, align 8, !dbg !3561
    #dbg_declare(ptr %cur_entry, !3562, !DIExpression(), !3563)
  store i64 0, ptr %counter, align 4, !dbg !3564
  %63 = load ptr, ptr %graphptr, align 8, !dbg !3564
  %64 = getelementptr inbounds nuw %graph_data_t, ptr %63, i32 0, i32 2, !dbg !3564
  %65 = load i64, ptr %counter, align 4, !dbg !3564
  %66 = load i64, ptr %64, align 4, !dbg !3564
  %67 = icmp ult i64 %65, %66, !dbg !3564
  br i1 %67, label %then9, label %whilecont, !dbg !3564

then9:                                            ; preds = %ifcont11, %ifcont8
  %68 = load ptr, ptr %graphptr, align 8, !dbg !3565
  %69 = getelementptr inbounds nuw %graph_data_t, ptr %68, i32 0, i32 1, !dbg !3565
  %70 = load i64, ptr %counter, align 4, !dbg !3565
  %71 = load ptr, ptr %69, align 8, !dbg !3565
  %72 = getelementptr %graph_entry, ptr %71, i64 %70, !dbg !3565
  %73 = load %graph_entry, ptr %72, align 4, !dbg !3565
  store %graph_entry %73, ptr %cur_entry, align 4, !dbg !3565
  %74 = getelementptr inbounds nuw %graph_entry, ptr %cur_entry, i32 0, i32 1, !dbg !3566
  %75 = load i1, ptr %74, align 1, !dbg !3566
  br i1 %75, label %then10, label %ifcont11, !dbg !3566

whilecont:                                        ; preds = %ifcont11, %ifcont8
  %76 = load i1, ptr %writes_to_system_image, align 1, !dbg !3567
  br i1 %76, label %then12, label %ifcont13, !dbg !3567

then10:                                           ; preds = %then9
  call void @puts(ptr @strlit.192), !dbg !3568
  call void @llvm.debugtrap(), !dbg !3569
  br label %ifcont11, !dbg !3569

ifcont11:                                         ; preds = %then10, %then9
  %77 = getelementptr inbounds nuw %graph_entry, ptr %cur_entry, i32 0, i32 0, !dbg !3570
  %78 = load i64, ptr %77, align 4, !dbg !3570
  %79 = load i64, ptr @current_frame, align 4, !dbg !3570
  %80 = load ptr, ptr %short, align 8, !dbg !3570
  call void @impl_record_gpu_work(i64 %78, i64 %79, ptr %80), !dbg !3570
  %81 = load i64, ptr %counter, align 4, !dbg !3570
  %82 = add i64 %81, 1, !dbg !3570
  store i64 %82, ptr %counter, align 4, !dbg !3570
  %83 = load i64, ptr %counter, align 4, !dbg !3570
  %84 = add i64 %83, 1, !dbg !3570
  %85 = load ptr, ptr %graphptr, align 8, !dbg !3570
  %86 = getelementptr inbounds nuw %graph_data_t, ptr %85, i32 0, i32 2, !dbg !3570
  %87 = load i64, ptr %counter, align 4, !dbg !3570
  %88 = load i64, ptr %86, align 4, !dbg !3570
  %89 = icmp ult i64 %87, %88, !dbg !3570
  br i1 %89, label %then9, label %whilecont, !dbg !3570

then12:                                           ; preds = %whilecont
  %blit = alloca %VkImageBlit, align 8, !dbg !3571
  store %VkImageBlit { %VkImageSubresourceLayers { i32 1, i32 0, i32 0, i32 1 }, [2 x %VkOffset3D] undef, %VkImageSubresourceLayers { i32 1, i32 0, i32 0, i32 1 }, [2 x %VkOffset3D] undef }, ptr %blit, align 4, !dbg !3571
    #dbg_declare(ptr %blit, !3572, !DIExpression(), !3580)
  %90 = getelementptr inbounds nuw %VkImageBlit, ptr %blit, i32 0, i32 1, !dbg !3581
  %91 = getelementptr [2 x %VkOffset3D], ptr %90, i64 0, i64 0, !dbg !3581
  %92 = load %VkOffset3D, ptr %91, align 4, !dbg !3581
  store %VkOffset3D zeroinitializer, ptr %91, align 4, !dbg !3581
  %93 = getelementptr inbounds nuw %VkImageBlit, ptr %blit, i32 0, i32 1, !dbg !3582
  %94 = getelementptr [2 x %VkOffset3D], ptr %93, i64 0, i64 1, !dbg !3582
  %95 = load %VkOffset3D, ptr %94, align 4, !dbg !3582
  %96 = load i64, ptr @swapchain_width, align 4, !dbg !3582
  %97 = trunc i64 %96 to i32, !dbg !3582
  %98 = load i64, ptr @swapchain_height, align 4, !dbg !3582
  %99 = trunc i64 %98 to i32, !dbg !3582
  %100 = insertvalue %VkOffset3D undef, i32 %97, 0, !dbg !3582
  %101 = insertvalue %VkOffset3D %100, i32 %99, 1, !dbg !3582
  %102 = insertvalue %VkOffset3D %101, i32 1, 2, !dbg !3582
  store %VkOffset3D %102, ptr %94, align 4, !dbg !3582
  %103 = getelementptr inbounds nuw %VkImageBlit, ptr %blit, i32 0, i32 3, !dbg !3583
  %104 = getelementptr [2 x %VkOffset3D], ptr %103, i64 0, i64 0, !dbg !3583
  %105 = load %VkOffset3D, ptr %104, align 4, !dbg !3583
  store %VkOffset3D zeroinitializer, ptr %104, align 4, !dbg !3583
  %106 = getelementptr inbounds nuw %VkImageBlit, ptr %blit, i32 0, i32 3, !dbg !3584
  %107 = getelementptr [2 x %VkOffset3D], ptr %106, i64 0, i64 1, !dbg !3584
  %108 = load %VkOffset3D, ptr %107, align 4, !dbg !3584
  %109 = load i64, ptr @swapchain_width, align 4, !dbg !3584
  %110 = trunc i64 %109 to i32, !dbg !3584
  %111 = load i64, ptr @swapchain_height, align 4, !dbg !3584
  %112 = trunc i64 %111 to i32, !dbg !3584
  %113 = insertvalue %VkOffset3D undef, i32 %110, 0, !dbg !3584
  %114 = insertvalue %VkOffset3D %113, i32 %112, 1, !dbg !3584
  %115 = insertvalue %VkOffset3D %114, i32 1, 2, !dbg !3584
  store %VkOffset3D %115, ptr %107, align 4, !dbg !3584
  %116 = load ptr, ptr @null, align 8, !dbg !3585
  %117 = load i64, ptr @system_image, align 4, !dbg !3585
  %118 = insertvalue %VkImageMemoryBarrier { i32 45, ptr undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i64 undef, %VkImageSubresourceRange undef }, ptr %116, 1, !dbg !3585
  %119 = insertvalue %VkImageMemoryBarrier %118, i32 256, 2, !dbg !3585
  %120 = insertvalue %VkImageMemoryBarrier %119, i32 2048, 3, !dbg !3585
  %121 = insertvalue %VkImageMemoryBarrier %120, i32 2, 4, !dbg !3585
  %122 = insertvalue %VkImageMemoryBarrier %121, i32 6, 5, !dbg !3585
  %123 = insertvalue %VkImageMemoryBarrier %122, i32 -1, 6, !dbg !3585
  %124 = insertvalue %VkImageMemoryBarrier %123, i32 -1, 7, !dbg !3585
  %125 = insertvalue %VkImageMemoryBarrier %124, i64 %117, 8, !dbg !3585
  %126 = insertvalue %VkImageMemoryBarrier %125, %VkImageSubresourceRange { i32 1, i32 0, i32 1, i32 0, i32 1 }, 9, !dbg !3585
  %system_image_transition = alloca %VkImageMemoryBarrier, align 8, !dbg !3585
  store %VkImageMemoryBarrier %126, ptr %system_image_transition, align 8, !dbg !3585
    #dbg_declare(ptr %system_image_transition, !3586, !DIExpression(), !3587)
  %127 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 63), align 8, !dbg !3588
  %128 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !3588
  %129 = load i64, ptr %128, align 4, !dbg !3588
  %130 = load ptr, ptr @null, align 8, !dbg !3588
  %131 = load ptr, ptr @null, align 8, !dbg !3588
  call void %127(i64 %129, i32 1024, i32 4096, i32 0, i32 0, ptr %130, i32 0, ptr %131, i32 1, ptr %system_image_transition), !dbg !3588
  %132 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 68), align 8, !dbg !3589
  %133 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !3589
  %134 = load i64, ptr %133, align 4, !dbg !3589
  %135 = load i64, ptr @system_image, align 4, !dbg !3589
  %136 = load i64, ptr %swapchain_image, align 4, !dbg !3589
  call void %132(i64 %134, i64 %135, i32 6, i64 %136, i32 7, i32 1, ptr %blit, i32 0), !dbg !3589
  br label %ifcont13, !dbg !3589

ifcont13:                                         ; preds = %then12, %whilecont
  %137 = load i1, ptr %will_present, align 1, !dbg !3590
  br i1 %137, label %then14, label %ifcont15, !dbg !3590

then14:                                           ; preds = %ifcont13
  %138 = getelementptr inbounds nuw %VkImageMemoryBarrier, ptr %barrier, i32 0, i32 4, !dbg !3591
  store i32 7, ptr %138, align 4, !dbg !3591
  %139 = getelementptr inbounds nuw %VkImageMemoryBarrier, ptr %barrier, i32 0, i32 5, !dbg !3592
  store i32 1000001002, ptr %139, align 4, !dbg !3592
  %140 = getelementptr inbounds nuw %VkImageMemoryBarrier, ptr %barrier, i32 0, i32 2, !dbg !3593
  store i32 4096, ptr %140, align 4, !dbg !3593
  %141 = getelementptr inbounds nuw %VkImageMemoryBarrier, ptr %barrier, i32 0, i32 3, !dbg !3594
  store i32 0, ptr %141, align 4, !dbg !3594
  %142 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 63), align 8, !dbg !3595
  %143 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !3595
  %144 = load i64, ptr %143, align 4, !dbg !3595
  %145 = load ptr, ptr @null, align 8, !dbg !3595
  %146 = load ptr, ptr @null, align 8, !dbg !3595
  call void %142(i64 %144, i32 4096, i32 1, i32 0, i32 0, ptr %145, i32 0, ptr %146, i32 1, ptr %barrier), !dbg !3595
  br label %ifcont15, !dbg !3595

ifcont15:                                         ; preds = %then14, %ifcont13
  %147 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 52), align 8, !dbg !3596
  %148 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !3596
  %149 = load i64, ptr %148, align 4, !dbg !3596
  %150 = call i32 %147(i64 %149), !dbg !3596
  call void @vk_check(i32 %150), !dbg !3596
  %wait_stage = alloca i32, align 4, !dbg !3597
  store i32 0, ptr %wait_stage, align 4, !dbg !3597
    #dbg_declare(ptr %wait_stage, !3598, !DIExpression(), !3599)
  %151 = load ptr, ptr @null, align 8, !dbg !3600
  %152 = load ptr, ptr @null, align 8, !dbg !3600
  %153 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 1, !dbg !3600
  %154 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 3, !dbg !3600
  %155 = load ptr, ptr @null, align 8, !dbg !3600
  %156 = insertvalue %VkSubmitInfo { i32 4, ptr undef, i32 undef, ptr undef, ptr undef, i32 undef, ptr undef, i32 undef, ptr undef }, ptr %151, 1, !dbg !3600
  %157 = insertvalue %VkSubmitInfo %156, i32 0, 2, !dbg !3600
  %158 = insertvalue %VkSubmitInfo %157, ptr %152, 3, !dbg !3600
  %159 = insertvalue %VkSubmitInfo %158, ptr %wait_stage, 4, !dbg !3600
  %160 = insertvalue %VkSubmitInfo %159, i32 1, 5, !dbg !3600
  %161 = insertvalue %VkSubmitInfo %160, ptr %153, 6, !dbg !3600
  %162 = insertvalue %VkSubmitInfo %161, i32 1, 7, !dbg !3600
  %163 = insertvalue %VkSubmitInfo %162, ptr %154, 8, !dbg !3600
  %submit = alloca %VkSubmitInfo, align 8, !dbg !3600
  store %VkSubmitInfo %163, ptr %submit, align 8, !dbg !3600
    #dbg_declare(ptr %submit, !3601, !DIExpression(), !3602)
  %164 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 57), align 8, !dbg !3603
  %165 = load i64, ptr @graphics_queue, align 4, !dbg !3603
  %166 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 2, !dbg !3603
  %167 = load i64, ptr %166, align 4, !dbg !3603
  %168 = call i32 %164(i64 %165, i32 1, ptr %submit, i64 %167), !dbg !3603
  call void @vk_check(i32 %168), !dbg !3603
  %169 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 58), align 8, !dbg !3604
  %170 = load i64, ptr @used_device, align 4, !dbg !3604
  %171 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 2, !dbg !3604
  %172 = call i32 %169(i64 %170, i32 1, ptr %171, i32 1, i64 -1), !dbg !3604
  call void @vk_check(i32 %172), !dbg !3604
  %173 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 59), align 8, !dbg !3605
  %174 = load i64, ptr @used_device, align 4, !dbg !3605
  %175 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 2, !dbg !3605
  %176 = call i32 %173(i64 %174, i32 1, ptr %175), !dbg !3605
  call void @vk_check(i32 %176), !dbg !3605
  %present_res = alloca i32, align 4, !dbg !3606
    #dbg_declare(ptr %present_res, !3607, !DIExpression(), !3608)
  %177 = load i1, ptr %will_present, align 1, !dbg !3609
  br i1 %177, label %then16, label %ifcont17, !dbg !3609

then16:                                           ; preds = %ifcont15
  %178 = load ptr, ptr @null, align 8, !dbg !3610
  %179 = getelementptr inbounds nuw %frame_data, ptr %frame, i32 0, i32 3, !dbg !3610
  %180 = insertvalue %VkPresentInfoKHR { i32 1000001001, ptr undef, i32 undef, ptr undef, i32 undef, ptr undef, ptr undef, ptr undef }, ptr %178, 1, !dbg !3610
  %181 = insertvalue %VkPresentInfoKHR %180, i32 1, 2, !dbg !3610
  %182 = insertvalue %VkPresentInfoKHR %181, ptr %179, 3, !dbg !3610
  %183 = insertvalue %VkPresentInfoKHR %182, i32 1, 4, !dbg !3610
  %184 = insertvalue %VkPresentInfoKHR %183, ptr @swapchain, 5, !dbg !3610
  %185 = insertvalue %VkPresentInfoKHR %184, ptr %image_index, 6, !dbg !3610
  %186 = insertvalue %VkPresentInfoKHR %185, ptr %present_res, 7, !dbg !3610
  %present = alloca %VkPresentInfoKHR, align 8, !dbg !3610
  store %VkPresentInfoKHR %186, ptr %present, align 8, !dbg !3610
    #dbg_declare(ptr %present, !3611, !DIExpression(), !3622)
  %187 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 13), align 8, !dbg !3623
  %188 = load i64, ptr @graphics_queue, align 4, !dbg !3623
  %189 = call i32 %187(i64 %188, ptr %present), !dbg !3623
  call void @vk_check(i32 %189), !dbg !3623
  %190 = load i32, ptr %present_res, align 4, !dbg !3624
  call void @vk_check(i32 %190), !dbg !3624
  br label %ifcont17, !dbg !3624

ifcont17:                                         ; preds = %then16, %ifcont15
  %191 = load i64, ptr @current_frame, align 4, !dbg !3625
  %192 = add i64 %191, 1, !dbg !3625
  %193 = urem i64 %192, 2, !dbg !3625
  store i64 %193, ptr @current_frame, align 4, !dbg !3625
  ret void, !dbg !3518
}

define void @tz_gpu_resource_write(i64 %res_param, ptr %data_param, i64 %data_size_param, i64 %offset_param) !dbg !3626 {
entry:
  %res = alloca i64, align 8
  store i64 %res_param, ptr %res, align 4
    #dbg_declare(ptr %res, !3629, !DIExpression(), !3630)
  %data = alloca ptr, align 8
  store ptr %data_param, ptr %data, align 8
    #dbg_declare(ptr %data, !3631, !DIExpression(), !3630)
  %data_size = alloca i64, align 8
  store i64 %data_size_param, ptr %data_size, align 4
    #dbg_declare(ptr %data_size, !3632, !DIExpression(), !3630)
  %offset = alloca i64, align 8
  store i64 %offset_param, ptr %offset, align 4
    #dbg_declare(ptr %offset, !3633, !DIExpression(), !3630)
  %0 = load ptr, ptr getelementptr inbounds nuw (%vk_functions_t, ptr @vk, i32 0, i32 76), align 8, !dbg !3634
  %1 = load i64, ptr @used_device, align 4, !dbg !3634
  call void %0(i64 %1), !dbg !3634
  %2 = load i64, ptr %res, align 4, !dbg !3634
  %3 = load ptr, ptr @resources, align 8, !dbg !3634
  %4 = getelementptr %resource_data_t, ptr %3, i64 %2, !dbg !3634
  %resptr = alloca ptr, align 8, !dbg !3635
  store ptr %4, ptr %resptr, align 8, !dbg !3635
    #dbg_declare(ptr %resptr, !3636, !DIExpression(), !3637)
  %5 = load ptr, ptr %resptr, align 8, !dbg !3635
  %6 = getelementptr inbounds nuw %resource_data_t, ptr %5, i32 0, i32 0, !dbg !3635
  %rinfo = alloca ptr, align 8, !dbg !3638
  store ptr %6, ptr %rinfo, align 8, !dbg !3638
    #dbg_declare(ptr %rinfo, !3639, !DIExpression(), !3640)
  %7 = load ptr, ptr %rinfo, align 8, !dbg !3641
  %8 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %7, i32 0, i32 0, !dbg !3641
  %9 = load ptr, ptr %8, align 8, !dbg !3641
  %10 = load ptr, ptr %data, align 8, !dbg !3641
  %11 = load i64, ptr %data_size, align 4, !dbg !3641
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %9, ptr %10, i64 %11, i1 false), !dbg !3641
  %12 = load ptr, ptr %resptr, align 8, !dbg !3642
  call void @impl_write_a_resource(ptr %12), !dbg !3642
  ret void, !dbg !3643
}

define i64 @tz_gpu_resource_size(i64 %res_param) !dbg !3644 {
entry:
  %res = alloca i64, align 8
  store i64 %res_param, ptr %res, align 4
    #dbg_declare(ptr %res, !3647, !DIExpression(), !3648)
  %0 = load i64, ptr %res, align 4, !dbg !3649
  %1 = load ptr, ptr @resources, align 8, !dbg !3649
  %2 = getelementptr %resource_data_t, ptr %1, i64 %0, !dbg !3649
  %resptr = alloca ptr, align 8, !dbg !3650
  store ptr %2, ptr %resptr, align 8, !dbg !3650
    #dbg_declare(ptr %resptr, !3651, !DIExpression(), !3652)
  %3 = load ptr, ptr %resptr, align 8, !dbg !3650
  %4 = getelementptr inbounds nuw %resource_data_t, ptr %3, i32 0, i32 0, !dbg !3650
  %5 = load %tz_gpu_resource_info, ptr %4, align 8, !dbg !3653
  %rinfo = alloca %tz_gpu_resource_info, align 8, !dbg !3653
  store %tz_gpu_resource_info %5, ptr %rinfo, align 8, !dbg !3653
    #dbg_declare(ptr %rinfo, !3654, !DIExpression(), !3655)
  %6 = getelementptr inbounds nuw %tz_gpu_resource_info, ptr %rinfo, i32 0, i32 1, !dbg !3656
  %7 = load i64, ptr %6, align 4, !dbg !3656
  ret i64 %7, !dbg !3656
}

declare i16 @GetAsyncKeyState(i32)

define i1 @is_key_down(i64 %k_param) !dbg !3657 {
entry:
  %k = alloca i64, align 8
  store i64 %k_param, ptr %k, align 4
    #dbg_declare(ptr %k, !3659, !DIExpression(), !3660)
  %0 = load i64, ptr %k, align 4, !dbg !3661
  %1 = trunc i64 %0 to i32, !dbg !3661
  %2 = call i16 @GetAsyncKeyState(i32 %1), !dbg !3661
  %downval = alloca i16, align 2, !dbg !3661
  store i16 %2, ptr %downval, align 2, !dbg !3661
    #dbg_declare(ptr %downval, !3662, !DIExpression(), !3664)
  %3 = load i16, ptr %downval, align 2, !dbg !3661
  %4 = zext i16 %3 to i32, !dbg !3661
  %unsigned = alloca i32, align 4, !dbg !3665
  store i32 %4, ptr %unsigned, align 4, !dbg !3665
    #dbg_declare(ptr %unsigned, !3666, !DIExpression(), !3667)
  %5 = load i32, ptr %unsigned, align 4, !dbg !3668
  %6 = sext i32 %5 to i64, !dbg !3668
  %7 = sdiv i64 %6, 32768, !dbg !3668
  %8 = mul i64 %7, 32768, !dbg !3668
  %9 = trunc i64 %8 to i32, !dbg !3668
  store i32 %9, ptr %unsigned, align 4, !dbg !3668
  %10 = load i32, ptr %unsigned, align 4, !dbg !3668
  %11 = sext i32 %10 to i64, !dbg !3668
  %12 = mul i64 %11, 32768, !dbg !3668
  %13 = load i32, ptr %unsigned, align 4, !dbg !3669
  %14 = icmp ne i32 %13, 0, !dbg !3669
  ret i1 %14, !dbg !3669
}

define void @ogl_debug_callback(i32 %source_param, i32 %type_param, i32 %id_param, i32 %severity_param, i32 %length_param, ptr %msg_param) !dbg !3670 {
entry:
  %source = alloca i32, align 4
  store i32 %source_param, ptr %source, align 4
    #dbg_declare(ptr %source, !3674, !DIExpression(), !3675)
  %type = alloca i32, align 4
  store i32 %type_param, ptr %type, align 4
    #dbg_declare(ptr %type, !3676, !DIExpression(), !3675)
  %id = alloca i32, align 4
  store i32 %id_param, ptr %id, align 4
    #dbg_declare(ptr %id, !3677, !DIExpression(), !3675)
  %severity = alloca i32, align 4
  store i32 %severity_param, ptr %severity, align 4
    #dbg_declare(ptr %severity, !3678, !DIExpression(), !3675)
  %length = alloca i32, align 4
  store i32 %length_param, ptr %length, align 4
    #dbg_declare(ptr %length, !3679, !DIExpression(), !3675)
  %msg = alloca ptr, align 8
  store ptr %msg_param, ptr %msg, align 8
    #dbg_declare(ptr %msg, !3680, !DIExpression(), !3675)
  %0 = load ptr, ptr %msg, align 8, !dbg !3681
  call void @puts(ptr %0), !dbg !3681
  call void @llvm.debugtrap(), !dbg !3682
  ret void, !dbg !3683
}

define i32 @main() !dbg !3684 {
entry:
  call void @register_wndclass(), !dbg !3687
  %0 = call %arena @arena_create(i64 4194304), !dbg !3688
  %permanent_arena_val = alloca %arena, align 8, !dbg !3688
  store %arena %0, ptr %permanent_arena_val, align 8, !dbg !3688
    #dbg_declare(ptr %permanent_arena_val, !3689, !DIExpression(), !3690)
  %permanent_arena = alloca ptr, align 8, !dbg !3691
  store ptr %permanent_arena_val, ptr %permanent_arena, align 8, !dbg !3691
    #dbg_declare(ptr %permanent_arena, !3692, !DIExpression(), !3693)
  %1 = call %arena @arena_create(i64 4194304), !dbg !3694
  %frame_arena_val = alloca %arena, align 8, !dbg !3694
  store %arena %1, ptr %frame_arena_val, align 8, !dbg !3694
    #dbg_declare(ptr %frame_arena_val, !3695, !DIExpression(), !3696)
  %frame_arena = alloca ptr, align 8, !dbg !3697
  store ptr %frame_arena_val, ptr %frame_arena, align 8, !dbg !3697
    #dbg_declare(ptr %frame_arena, !3698, !DIExpression(), !3699)
  call void @puts(ptr @strlit.193), !dbg !3700
  call void @puts(ptr @strlit.195), !dbg !3700
  call void @putchar(i8 10), !dbg !3701
  %2 = load ptr, ptr %permanent_arena, align 8, !dbg !3702
  %3 = call i64 @tz_wnd_open_window(i64 800, i64 600, ptr @strlit.204, ptr %2), !dbg !3702
  %wnd = alloca i64, align 8, !dbg !3702
  store i64 %3, ptr %wnd, align 4, !dbg !3702
    #dbg_declare(ptr %wnd, !3703, !DIExpression(), !3704)
  call void @puts(ptr @strlit.205), !dbg !3705
  call void @putchar(i8 10), !dbg !3706
  %counter = alloca i64, align 8, !dbg !3707
    #dbg_declare(ptr %counter, !3708, !DIExpression(), !3709)
  store i64 0, ptr %counter, align 4, !dbg !3710
  %4 = load i64, ptr %counter, align 4, !dbg !3710
  %5 = icmp ule i64 %4, 10, !dbg !3710
  br i1 %5, label %then, label %whilecont, !dbg !3710

then:                                             ; preds = %then, %entry
  %6 = load i64, ptr %counter, align 4, !dbg !3711
  call void @putuint(i64 %6), !dbg !3711
  call void @putchar(i8 10), !dbg !3712
  %7 = load i64, ptr %counter, align 4, !dbg !3712
  %8 = add i64 %7, 1, !dbg !3712
  store i64 %8, ptr %counter, align 4, !dbg !3712
  %9 = load i64, ptr %counter, align 4, !dbg !3712
  %10 = add i64 %9, 1, !dbg !3712
  %11 = load i64, ptr %counter, align 4, !dbg !3712
  %12 = icmp ule i64 %11, 10, !dbg !3712
  br i1 %12, label %then, label %whilecont, !dbg !3712

whilecont:                                        ; preds = %then, %entry
  call void @tz_gpu_init(%tz_gpu_appinfo { ptr @strlit.206, i32 6, i32 0 }), !dbg !3713
  %13 = call i64 @tz_gpu_hardware_count(), !dbg !3714
  %hardware_count = alloca i64, align 8, !dbg !3714
  store i64 %13, ptr %hardware_count, align 4, !dbg !3714
    #dbg_declare(ptr %hardware_count, !3715, !DIExpression(), !3716)
  call void @puts(ptr @strlit.207), !dbg !3717
  %14 = load i64, ptr %hardware_count, align 4, !dbg !3718
  call void @putuint(i64 %14), !dbg !3718
  call void @putchar(i8 10), !dbg !3719
  %15 = load ptr, ptr %permanent_arena, align 8, !dbg !3720
  %16 = call ptr @arena_push(ptr %15, i64 112), !dbg !3720
  %hardware_list = alloca ptr, align 8, !dbg !3720
  store ptr %16, ptr %hardware_list, align 8, !dbg !3720
    #dbg_declare(ptr %hardware_list, !3721, !DIExpression(), !3722)
  %17 = load ptr, ptr %hardware_list, align 8, !dbg !3723
  %18 = load i64, ptr %hardware_count, align 4, !dbg !3723
  %19 = load ptr, ptr %permanent_arena, align 8, !dbg !3723
  %20 = call i64 @tz_gpu_iterate_hardware(ptr %17, i64 %18, ptr %19), !dbg !3723
  %21 = load ptr, ptr %hardware_list, align 8, !dbg !3724
  %22 = getelementptr %tz_gpu_hardware, ptr %21, i64 0, !dbg !3724
  %23 = load %tz_gpu_hardware, ptr %22, align 8, !dbg !3724
  %24 = load i64, ptr %wnd, align 4, !dbg !3724
  call void @tz_gpu_use_hardware(%tz_gpu_hardware %23, i64 %24), !dbg !3724
  %pos = alloca %vec4, align 8, !dbg !3725
  store %vec4 zeroinitializer, ptr %pos, align 4, !dbg !3725
    #dbg_declare(ptr %pos, !3726, !DIExpression(), !3727)
  %drawdata = alloca %single_draw, align 8, !dbg !3728
  store %single_draw { i32 1, %tz_gpu_draw_indexed_indirect_command { i32 3, i32 1, i32 0, i32 0, i32 0 } }, ptr %drawdata, align 4, !dbg !3728
    #dbg_declare(ptr %drawdata, !3729, !DIExpression(), !3741)
  %25 = load i64, ptr @tz_gpu_resource_flag.none, align 4, !dbg !3742
  %26 = load i64, ptr @tz_gpu_buffer_flag.draw_buffer, align 4, !dbg !3742
  %27 = insertvalue %tz_gpu_resource_info undef, ptr %drawdata, 0, !dbg !3742
  %28 = insertvalue %tz_gpu_resource_info %27, i64 24, 1, !dbg !3742
  %29 = insertvalue %tz_gpu_resource_info %28, i64 %25, 4, !dbg !3742
  %30 = insertvalue %tz_gpu_resource_info %29, i64 %26, 5, !dbg !3742
  %31 = load ptr, ptr %permanent_arena, align 8, !dbg !3742
  %32 = call i64 @tz_gpu_create_buffer(%tz_gpu_resource_info %30, ptr %31), !dbg !3742
  %drawbuf = alloca i64, align 8, !dbg !3742
  store i64 %32, ptr %drawbuf, align 4, !dbg !3742
    #dbg_declare(ptr %drawbuf, !3743, !DIExpression(), !3744)
  %33 = load i64, ptr @tz_gpu_resource_flag.none, align 4, !dbg !3745
  %34 = load i64, ptr @tz_gpu_buffer_flag.dynamic, align 4, !dbg !3745
  %35 = insertvalue %tz_gpu_resource_info undef, ptr %pos, 0, !dbg !3745
  %36 = insertvalue %tz_gpu_resource_info %35, i64 16, 1, !dbg !3745
  %37 = insertvalue %tz_gpu_resource_info %36, i64 %33, 4, !dbg !3745
  %38 = insertvalue %tz_gpu_resource_info %37, i64 %34, 5, !dbg !3745
  %39 = load ptr, ptr %permanent_arena, align 8, !dbg !3745
  %40 = call i64 @tz_gpu_create_buffer(%tz_gpu_resource_info %38, ptr %39), !dbg !3745
  %buf = alloca i64, align 8, !dbg !3745
  store i64 %40, ptr %buf, align 4, !dbg !3745
    #dbg_declare(ptr %buf, !3746, !DIExpression(), !3747)
  %indices = alloca [3 x i32], align 4, !dbg !3748
    #dbg_declare(ptr %indices, !3749, !DIExpression(), !3750)
  %41 = getelementptr [3 x i32], ptr %indices, i64 0, i64 0, !dbg !3751
  %42 = load i32, ptr %41, align 4, !dbg !3751
  store i32 0, ptr %41, align 4, !dbg !3751
  %43 = getelementptr [3 x i32], ptr %indices, i64 0, i64 1, !dbg !3752
  %44 = load i32, ptr %43, align 4, !dbg !3752
  store i32 1, ptr %43, align 4, !dbg !3752
  %45 = getelementptr [3 x i32], ptr %indices, i64 0, i64 2, !dbg !3753
  %46 = load i32, ptr %45, align 4, !dbg !3753
  store i32 2, ptr %45, align 4, !dbg !3753
  %47 = getelementptr [3 x i32], ptr %indices, i64 0, i64 0, !dbg !3754
  %48 = load i64, ptr @tz_gpu_resource_flag.none, align 4, !dbg !3754
  %49 = load i64, ptr @tz_gpu_buffer_flag.index_buffer, align 4, !dbg !3754
  %50 = insertvalue %tz_gpu_resource_info undef, ptr %47, 0, !dbg !3754
  %51 = insertvalue %tz_gpu_resource_info %50, i64 12, 1, !dbg !3754
  %52 = insertvalue %tz_gpu_resource_info %51, i64 %48, 4, !dbg !3754
  %53 = insertvalue %tz_gpu_resource_info %52, i64 %49, 5, !dbg !3754
  %54 = load ptr, ptr %permanent_arena, align 8, !dbg !3754
  %55 = call i64 @tz_gpu_create_buffer(%tz_gpu_resource_info %53, ptr %54), !dbg !3754
  %idxbuf = alloca i64, align 8, !dbg !3754
  store i64 %55, ptr %idxbuf, align 4, !dbg !3754
    #dbg_declare(ptr %idxbuf, !3755, !DIExpression(), !3756)
  %imgdata = alloca [4 x i32], align 4, !dbg !3757
    #dbg_declare(ptr %imgdata, !3758, !DIExpression(), !3759)
  %56 = getelementptr [4 x i32], ptr %imgdata, i64 0, i64 0, !dbg !3760
  %57 = load i32, ptr %56, align 4, !dbg !3760
  store i32 -65536, ptr %56, align 4, !dbg !3760
  %58 = getelementptr [4 x i32], ptr %imgdata, i64 0, i64 1, !dbg !3761
  %59 = load i32, ptr %58, align 4, !dbg !3761
  store i32 -16776961, ptr %58, align 4, !dbg !3761
  %60 = getelementptr [4 x i32], ptr %imgdata, i64 0, i64 2, !dbg !3762
  %61 = load i32, ptr %60, align 4, !dbg !3762
  store i32 -16776961, ptr %60, align 4, !dbg !3762
  %62 = getelementptr [4 x i32], ptr %imgdata, i64 0, i64 3, !dbg !3763
  %63 = load i32, ptr %62, align 4, !dbg !3763
  store i32 -65536, ptr %62, align 4, !dbg !3763
  %64 = getelementptr [4 x i32], ptr %imgdata, i64 0, i64 0, !dbg !3764
  %65 = load i64, ptr @tz_gpu_image_type.rgba, align 4, !dbg !3764
  %66 = load i64, ptr @tz_gpu_resource_flag.none, align 4, !dbg !3764
  %67 = insertvalue %tz_gpu_resource_info undef, ptr %64, 0, !dbg !3764
  %68 = insertvalue %tz_gpu_resource_info %67, i64 16, 1, !dbg !3764
  %69 = insertvalue %tz_gpu_resource_info %68, %vec2u32 { i32 2, i32 2 }, 2, !dbg !3764
  %70 = insertvalue %tz_gpu_resource_info %69, i64 %65, 3, !dbg !3764
  %71 = insertvalue %tz_gpu_resource_info %70, i64 %66, 4, !dbg !3764
  %72 = load ptr, ptr %permanent_arena, align 8, !dbg !3764
  %73 = call i64 @tz_gpu_create_image(%tz_gpu_resource_info %71, ptr %72), !dbg !3764
  %img = alloca i64, align 8, !dbg !3764
  store i64 %73, ptr %img, align 4, !dbg !3764
    #dbg_declare(ptr %img, !3765, !DIExpression(), !3766)
  %gpu_resources = alloca [2 x i64], align 8, !dbg !3767
    #dbg_declare(ptr %gpu_resources, !3768, !DIExpression(), !3769)
  %74 = getelementptr [2 x i64], ptr %gpu_resources, i64 0, i64 0, !dbg !3770
  %75 = load i64, ptr %74, align 4, !dbg !3770
  %76 = load i64, ptr %buf, align 4, !dbg !3770
  store i64 %76, ptr %74, align 4, !dbg !3770
  %77 = getelementptr [2 x i64], ptr %gpu_resources, i64 0, i64 1, !dbg !3771
  %78 = load i64, ptr %77, align 4, !dbg !3771
  %79 = load i64, ptr %img, align 4, !dbg !3771
  store i64 %79, ptr %77, align 4, !dbg !3771
  %80 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !3772
  %81 = load i64, ptr %buf, align 4, !dbg !3772
  %82 = icmp eq i64 %81, %80, !dbg !3772
  br i1 %82, label %then1, label %ifcont, !dbg !3772

then1:                                            ; preds = %whilecont
  call void @puts(ptr @strlit.208), !dbg !3773
  call void @llvm.debugtrap(), !dbg !3774
  br label %ifcont, !dbg !3774

ifcont:                                           ; preds = %then1, %whilecont
  call void @puts(ptr @strlit.209), !dbg !3775
  %83 = load i64, ptr %buf, align 4, !dbg !3776
  call void @putuint(i64 %83), !dbg !3776
  call void @putchar(i8 10), !dbg !3777
  %84 = load ptr, ptr %permanent_arena, align 8, !dbg !3778
  %85 = call %tz_gpu_shader_sources @tz_gpu_load_shader_files(ptr @strlit.210, ptr @strlit.211, ptr %84), !dbg !3778
  %shader_data = alloca %tz_gpu_shader_sources, align 8, !dbg !3778
  store %tz_gpu_shader_sources %85, ptr %shader_data, align 8, !dbg !3778
    #dbg_declare(ptr %shader_data, !3779, !DIExpression(), !3780)
  %86 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %shader_data, i32 0, i32 0, !dbg !3781
  %87 = load ptr, ptr %86, align 8, !dbg !3781
  %88 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %shader_data, i32 0, i32 1, !dbg !3781
  %89 = load i64, ptr %88, align 4, !dbg !3781
  %90 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %shader_data, i32 0, i32 2, !dbg !3781
  %91 = load ptr, ptr %90, align 8, !dbg !3781
  %92 = getelementptr inbounds nuw %tz_gpu_shader_sources, ptr %shader_data, i32 0, i32 3, !dbg !3781
  %93 = load i64, ptr %92, align 4, !dbg !3781
  %94 = load ptr, ptr %permanent_arena, align 8, !dbg !3781
  %95 = call i64 @tz_gpu_create_graphics_shader(ptr %87, i64 %89, ptr %91, i64 %93, ptr %94), !dbg !3781
  %shader = alloca i64, align 8, !dbg !3781
  store i64 %95, ptr %shader, align 4, !dbg !3781
    #dbg_declare(ptr %shader, !3782, !DIExpression(), !3783)
  %96 = load i64, ptr @tz_gpu_shader.invalid, align 4, !dbg !3784
  %97 = load i64, ptr %shader, align 4, !dbg !3784
  %98 = icmp eq i64 %97, %96, !dbg !3784
  br i1 %98, label %then2, label %ifcont3, !dbg !3784

then2:                                            ; preds = %ifcont
  call void @puts(ptr @strlit.212), !dbg !3785
  call void @llvm.debugtrap(), !dbg !3786
  br label %ifcont3, !dbg !3786

ifcont3:                                          ; preds = %then2, %ifcont
  %99 = load i64, ptr @tz_gpu_resource.window_resource, align 4, !dbg !3786
  %colour_target = alloca i64, align 8, !dbg !3787
  store i64 %99, ptr %colour_target, align 4, !dbg !3787
    #dbg_declare(ptr %colour_target, !3788, !DIExpression(), !3789)
  %100 = call %vec4u32 @vec4u32_zero(), !dbg !3790
  %101 = load i64, ptr @tz_gpu_resource.invalid, align 4, !dbg !3790
  %102 = load i64, ptr %idxbuf, align 4, !dbg !3790
  %103 = load i64, ptr %drawbuf, align 4, !dbg !3790
  %104 = load i64, ptr @tz_gpu_cull.none, align 4, !dbg !3790
  %105 = insertvalue %tz_gpu_graphics_state { %vec4 { float 0x3FE6666660000000, float 5.000000e-01, float 0.000000e+00, float 1.000000e+00 }, %vec4u32 undef, ptr undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef }, %vec4u32 %100, 1, !dbg !3790
  %106 = insertvalue %tz_gpu_graphics_state %105, ptr %colour_target, 2, !dbg !3790
  %107 = insertvalue %tz_gpu_graphics_state %106, i64 1, 3, !dbg !3790
  %108 = insertvalue %tz_gpu_graphics_state %107, i64 %101, 4, !dbg !3790
  %109 = insertvalue %tz_gpu_graphics_state %108, i64 %102, 5, !dbg !3790
  %110 = insertvalue %tz_gpu_graphics_state %109, i64 %103, 6, !dbg !3790
  %111 = insertvalue %tz_gpu_graphics_state %110, i64 %104, 7, !dbg !3790
  %112 = insertvalue %tz_gpu_graphics_state %111, i64 1, 8, !dbg !3790
  %113 = load i64, ptr %shader, align 4, !dbg !3790
  %114 = getelementptr [2 x i64], ptr %gpu_resources, i64 0, i64 0, !dbg !3790
  %115 = insertvalue %tz_gpu_pass_info undef, %tz_gpu_graphics_state %112, 0, !dbg !3790
  %116 = insertvalue %tz_gpu_pass_info %115, i64 %113, 2, !dbg !3790
  %117 = insertvalue %tz_gpu_pass_info %116, ptr %114, 3, !dbg !3790
  %118 = insertvalue %tz_gpu_pass_info %117, i64 2, 4, !dbg !3790
  %119 = insertvalue %tz_gpu_pass_info %118, ptr @strlit.213, 5, !dbg !3790
  %120 = load ptr, ptr %permanent_arena, align 8, !dbg !3790
  %121 = load ptr, ptr %frame_arena, align 8, !dbg !3790
  %122 = call i64 @tz_gpu_create_pass(%tz_gpu_pass_info %119, ptr %120, ptr %121), !dbg !3790
  %pass = alloca i64, align 8, !dbg !3790
  store i64 %122, ptr %pass, align 4, !dbg !3790
    #dbg_declare(ptr %pass, !3791, !DIExpression(), !3792)
  %123 = load i64, ptr @tz_gpu_pass.invalid, align 4, !dbg !3793
  %124 = load i64, ptr %pass, align 4, !dbg !3793
  %125 = icmp eq i64 %124, %123, !dbg !3793
  br i1 %125, label %then4, label %ifcont5, !dbg !3793

then4:                                            ; preds = %ifcont3
  call void @puts(ptr @strlit.214), !dbg !3794
  call void @llvm.debugtrap(), !dbg !3795
  br label %ifcont5, !dbg !3795

ifcont5:                                          ; preds = %then4, %ifcont3
  %126 = load ptr, ptr %permanent_arena, align 8, !dbg !3796
  %127 = call i64 @tz_gpu_create_graph(ptr @strlit.215, ptr %126), !dbg !3796
  %graph = alloca i64, align 8, !dbg !3796
  store i64 %127, ptr %graph, align 4, !dbg !3796
    #dbg_declare(ptr %graph, !3797, !DIExpression(), !3798)
  %128 = load i64, ptr %graph, align 4, !dbg !3799
  %129 = load i64, ptr %pass, align 4, !dbg !3799
  call void @tz_gpu_graph_add_pass(i64 %128, i64 %129), !dbg !3799
  %130 = load i64, ptr %graph, align 4, !dbg !3800
  %131 = load i64, ptr @tz_gpu_pass.present, align 4, !dbg !3800
  call void @tz_gpu_graph_add_pass(i64 %130, i64 %131), !dbg !3800
  %132 = load i64, ptr %wnd, align 4, !dbg !3801
  %133 = call i1 @tz_wnd_is_open(i64 %132), !dbg !3801
  %speed = alloca double, align 8, !dbg !3802
  store double 2.000000e-04, ptr %speed, align 8, !dbg !3802
    #dbg_declare(ptr %speed, !3803, !DIExpression(), !3805)
  br i1 %133, label %then6, label %whilecont7, !dbg !3802

then6:                                            ; preds = %ifcont19, %ifcont5
  %134 = getelementptr inbounds nuw %arena, ptr %frame_arena_val, i32 0, i32 2, !dbg !3806
  %135 = load i64, ptr %134, align 4, !dbg !3806
  %136 = icmp ugt i64 %135, 0, !dbg !3806
  br i1 %136, label %then8, label %ifcont9, !dbg !3806

whilecont7:                                       ; preds = %ifcont19, %ifcont5
  call void @tz_gpu_term(), !dbg !3807
  %137 = load i64, ptr %wnd, align 4, !dbg !3808
  call void @tz_wnd_close_window(i64 %137), !dbg !3808
  call void @puts(ptr @strlit.217), !dbg !3809
  %138 = getelementptr inbounds nuw %arena, ptr %permanent_arena_val, i32 0, i32 2, !dbg !3810
  %139 = load i64, ptr %138, align 4, !dbg !3810
  call void @putuint(i64 %139), !dbg !3810
  call void @puts(ptr @strlit.218), !dbg !3811
  call void @putchar(i8 10), !dbg !3812
  %140 = load %arena, ptr %permanent_arena_val, align 8, !dbg !3813
  call void @arena_destroy(%arena %140), !dbg !3813
  %141 = load %arena, ptr %frame_arena_val, align 8, !dbg !3814
  call void @arena_destroy(%arena %141), !dbg !3814
  call void @unregister_wndclass(), !dbg !3815
  ret i32 0, !dbg !3816

then8:                                            ; preds = %then6
  br label %ifcont9, !dbg !3817

ifcont9:                                          ; preds = %then8, %then6
  %142 = load ptr, ptr %frame_arena, align 8, !dbg !3818
  call void @arena_clear(ptr %142), !dbg !3818
  %143 = load i64, ptr %graph, align 4, !dbg !3819
  %144 = load ptr, ptr %permanent_arena, align 8, !dbg !3819
  %145 = load ptr, ptr %frame_arena, align 8, !dbg !3819
  call void @tz_gpu_execute(i64 %143, ptr %144, ptr %145), !dbg !3819
  call void @tz_wnd_update(), !dbg !3820
  %146 = load i64, ptr @key.escape, align 4, !dbg !3821
  %147 = call i1 @is_key_down(i64 %146), !dbg !3821
  br i1 %147, label %then10, label %ifcont11, !dbg !3821

then10:                                           ; preds = %ifcont9
  call void @puts(ptr @strlit.216), !dbg !3822
  %148 = load i64, ptr %wnd, align 4, !dbg !3823
  call void @tz_wnd_close_window(i64 %148), !dbg !3823
  br label %ifcont11, !dbg !3823

ifcont11:                                         ; preds = %then10, %ifcont9
  %149 = load i64, ptr @key.w, align 4, !dbg !3824
  %150 = call i1 @is_key_down(i64 %149), !dbg !3824
  br i1 %150, label %then12, label %ifcont13, !dbg !3824

then12:                                           ; preds = %ifcont11
  %151 = getelementptr inbounds nuw %vec4, ptr %pos, i32 0, i32 1, !dbg !3825
  %152 = getelementptr inbounds nuw %vec4, ptr %pos, i32 0, i32 1, !dbg !3825
  %153 = load float, ptr %152, align 4, !dbg !3825
  %154 = load double, ptr %speed, align 8, !dbg !3825
  %155 = fpext float %153 to double, !dbg !3825
  %156 = fadd double %155, %154, !dbg !3825
  %157 = fptrunc double %156 to float, !dbg !3825
  store float %157, ptr %151, align 4, !dbg !3825
  %158 = load i64, ptr %buf, align 4, !dbg !3826
  call void @tz_gpu_resource_write(i64 %158, ptr %pos, i64 16, i64 0), !dbg !3826
  br label %ifcont13, !dbg !3826

ifcont13:                                         ; preds = %then12, %ifcont11
  %159 = load i64, ptr @key.s, align 4, !dbg !3827
  %160 = call i1 @is_key_down(i64 %159), !dbg !3827
  br i1 %160, label %then14, label %ifcont15, !dbg !3827

then14:                                           ; preds = %ifcont13
  %161 = getelementptr inbounds nuw %vec4, ptr %pos, i32 0, i32 1, !dbg !3828
  %162 = getelementptr inbounds nuw %vec4, ptr %pos, i32 0, i32 1, !dbg !3828
  %163 = load float, ptr %162, align 4, !dbg !3828
  %164 = load double, ptr %speed, align 8, !dbg !3828
  %165 = fpext float %163 to double, !dbg !3828
  %166 = fsub double %165, %164, !dbg !3828
  %167 = fptrunc double %166 to float, !dbg !3828
  store float %167, ptr %161, align 4, !dbg !3828
  %168 = load i64, ptr %buf, align 4, !dbg !3829
  call void @tz_gpu_resource_write(i64 %168, ptr %pos, i64 16, i64 0), !dbg !3829
  br label %ifcont15, !dbg !3829

ifcont15:                                         ; preds = %then14, %ifcont13
  %169 = load i64, ptr @key.a, align 4, !dbg !3830
  %170 = call i1 @is_key_down(i64 %169), !dbg !3830
  br i1 %170, label %then16, label %ifcont17, !dbg !3830

then16:                                           ; preds = %ifcont15
  %171 = getelementptr inbounds nuw %vec4, ptr %pos, i32 0, i32 0, !dbg !3831
  %172 = getelementptr inbounds nuw %vec4, ptr %pos, i32 0, i32 0, !dbg !3831
  %173 = load float, ptr %172, align 4, !dbg !3831
  %174 = load double, ptr %speed, align 8, !dbg !3831
  %175 = fpext float %173 to double, !dbg !3831
  %176 = fsub double %175, %174, !dbg !3831
  %177 = fptrunc double %176 to float, !dbg !3831
  store float %177, ptr %171, align 4, !dbg !3831
  %178 = load i64, ptr %buf, align 4, !dbg !3832
  call void @tz_gpu_resource_write(i64 %178, ptr %pos, i64 16, i64 0), !dbg !3832
  br label %ifcont17, !dbg !3832

ifcont17:                                         ; preds = %then16, %ifcont15
  %179 = load i64, ptr @key.d, align 4, !dbg !3833
  %180 = call i1 @is_key_down(i64 %179), !dbg !3833
  br i1 %180, label %then18, label %ifcont19, !dbg !3833

then18:                                           ; preds = %ifcont17
  %181 = getelementptr inbounds nuw %vec4, ptr %pos, i32 0, i32 0, !dbg !3834
  %182 = getelementptr inbounds nuw %vec4, ptr %pos, i32 0, i32 0, !dbg !3834
  %183 = load float, ptr %182, align 4, !dbg !3834
  %184 = load double, ptr %speed, align 8, !dbg !3834
  %185 = fpext float %183 to double, !dbg !3834
  %186 = fadd double %185, %184, !dbg !3834
  %187 = fptrunc double %186 to float, !dbg !3834
  store float %187, ptr %181, align 4, !dbg !3834
  %188 = load i64, ptr %buf, align 4, !dbg !3835
  call void @tz_gpu_resource_write(i64 %188, ptr %pos, i64 16, i64 0), !dbg !3835
  br label %ifcont19, !dbg !3835

ifcont19:                                         ; preds = %then18, %ifcont17
  %189 = load i64, ptr %wnd, align 4, !dbg !3836
  %190 = call i1 @tz_wnd_is_open(i64 %189), !dbg !3836
  br i1 %190, label %then6, label %whilecont7, !dbg !3836
}

declare void @ExitProcess(i32)

define void @_psymain() !dbg !3837 {
entry:
  %0 = call i32 @main(), !dbg !3839
  %ret = alloca i32, align 4, !dbg !3839
  store i32 %0, ptr %ret, align 4, !dbg !3839
    #dbg_declare(ptr %ret, !3840, !DIExpression(), !3841)
  %1 = load i32, ptr %ret, align 4, !dbg !3842
  call void @ExitProcess(i32 %1), !dbg !3842
  ret void, !dbg !3843
}

attributes #0 = { nounwind }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!llvm.dbg.cu = !{!0}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "Psy Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug)
!1 = !DIFile(filename: "topaz.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz")
!2 = distinct !DISubprogram(scope: !3, file: !3, line: 8, type: !4, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3 = !DIFile(filename: "preload.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz", source: "\0A\09null ::= 0@u64 static@v0& weak static;\0A\0A\09__is_windows : bool static := true;\0A\09__is_linux : bool static := false;\0A\09__psyc ::= \22C:/Users/Harry/Documents/psyc/build/Windows_release/psyc.exe\22;\0A\09__cwd ::= \22C:/Users/Harry/Documents/psypaz\22;\0A\09__chkstk ::= func() -> v0{};\0A\09__pi ::= 3.14159;\0A\09[[public_linkage]]\0A\09_fltused : s32 := (0@s32);\0A\0A\09srcloc ::= struct\0A\09{\0A\09\09file : u8&;\0A\09\09function : u8&;\0A\09\09line : u64;\0A\09\09column : u64;\0A\09};\0A\09srcloc_current ::= macro() -> srcloc\0A\09{\0A\09\09yield srcloc\0A\09\09{\0A\09\09\09.file := __file();\0A\09\09\09.function := __function();\0A\09\09\09.line := __line();\0A\09\09\09.column := __column();\0A\09\09};\0A\09};\0A\09if static(__config() != \22debug\22)\0A\09{\0A\09memcpy ::= func(dst : v0 mut& weak, src : v0& weak, count : u64 weak) -> v0\0A\09{\0A\09\09__memcpy(dst, src, count);\0A\09};\0A\09}\0A\09")
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "v0")
!7 = !DILocation(line: 0, scope: !2)
!8 = distinct !DISubprogram(scope: !9, file: !9, line: 8, type: !10, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!9 = !DIFile(filename: "vec.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz\\src", source: "// vec2\0Avec2 ::= struct\0A{\0A\09x : f32;\0A\09y : f32;\0A};\0A\0Avec2_zero ::= func() -> vec2\0A{\0A\09return vec2{.x := 0.0; .y := 0.0;};\0A};\0A\0Avec2_filled ::= func(val : f32) -> vec2\0A{\0A\09return vec2{.x := val; .y := val;};\0A};\0A\0Avec2_sqlength ::= func(v : vec2) -> f32\0A{\0A\09return (v.x * v.x) + (v.y * v.y);\0A};\0A\0Avec2_dot ::= func(lhs : vec2, rhs : vec2) -> f32\0A{\0A\09return (lhs.x * rhs.x) + (lhs.y * rhs.y);\0A};\0A\0A// vec2\0Avec2u32 ::= struct\0A{\0A\09x : u32;\0A\09y : u32;\0A};\0A\0Avec2u32_zero ::= func() -> vec2u32\0A{\0A\09return vec2u32{.x := 0.0; .y := 0.0;};\0A};\0A\0Avec2u32_filled ::= func(val : u32) -> vec2u32\0A{\0A\09return vec2u32{.x := val; .y := val;};\0A};\0A\0A// vec3\0Avec3 ::= struct\0A{\0A\09x : f32;\0A\09y : f32;\0A\09z : f32;\0A};\0A\0Avec3_zero ::= func() -> vec3\0A{\0A\09return vec3{.x := 0.0; .y := 0.0; .z := 0.0;};\0A};\0A\0Avec3_filled ::= func(val : f32) -> vec3\0A{\0A\09return vec3{.x := val; .y := val; .z := val;};\0A};\0A\0Avec3_sqlength ::= func(v : vec3) -> f32\0A{\0A\09return (v.x * v.x) + (v.y * v.y) + (v.z * v.z);\0A};\0A\0Avec3_dot ::= func(lhs : vec3, rhs : vec3) -> f32\0A{\0A\09return (lhs.x * rhs.x) + (lhs.y * rhs.y) + (lhs.z * rhs.z);\0A};\0A\0Avec3_cross ::= func(lhs : vec3, rhs : vec3) -> vec3\0A{\0A\09result : vec3 mut := vec3{};\0A\09result.x = (lhs.y * rhs.z) - (lhs.z * rhs.y);\0A\09result.y = (lhs.z * rhs.x) - (lhs.x * rhs.z);\0A\09result.z = (lhs.x * rhs.y) - (lhs.y * rhs.x);\0A\09return result;\0A};\0A\0A// vec4\0Avec4 ::= struct\0A{\0A\09x : f32;\0A\09y : f32;\0A\09z : f32;\0A\09w : f32;\0A};\0A\0Avec4_zero ::= func() -> vec4\0A{\0A\09return vec4{.x := 0.0; .y := 0.0; .z := 0.0; .w := 0.0;};\0A};\0A\0Avec4_filled ::= func(val : f32) -> vec4\0A{\0A\09return vec4{.x := val; .y := val; .z := val; .w := val;};\0A};\0A\0Avec4_sqlength ::= func(v : vec4) -> f32\0A{\0A\09return (v.x * v.x) + (v.y * v.y) + (v.z * v.z) + (v.w * v.w);\0A};\0A\0Avec4_dot ::= func(lhs : vec4, rhs : vec4) -> f32\0A{\0A\09return (lhs.x * rhs.x) + (lhs.y * rhs.y) + (lhs.z * rhs.z) + (lhs.w * rhs.w);\0A};\0A\0A// vec4\0Avec4u32 ::= struct\0A{\0A\09x : u32;\0A\09y : u32;\0A\09z : u32;\0A\09w : u32;\0A};\0A\0Avec4u32_zero ::= func() -> vec4u32\0A{\0A\09return vec4u32{.x := 0.0; .y := 0.0; .z := 0.0; .w := 0.0;};\0A};\0A\0Avec4u32_filled ::= func(val : u32) -> vec4u32\0A{\0A\09return vec4u32{.x := val; .y := val; .z := val; .w := val;};\0A};\0A")
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DICompositeType(tag: DW_TAG_structure_type, name: "vec2", scope: !9, file: !9, line: 3, size: 64, align: 32, flags: DIFlagPublic, elements: !13)
!13 = !{!14, !16}
!14 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !9, file: !9, line: 3, baseType: !15, size: 32, flags: DIFlagPublic)
!15 = !DIBasicType(name: "f32", size: 32, encoding: DW_ATE_float)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !9, file: !9, line: 3, baseType: !15, size: 32, offset: 32, flags: DIFlagPublic)
!17 = !DILocation(line: 10, column: 2, scope: !8)
!18 = distinct !DISubprogram(scope: !9, file: !9, line: 13, type: !19, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!19 = !DISubroutineType(types: !20)
!20 = !{!12, !15}
!21 = !DILocalVariable(name: "val", arg: 1, scope: !18, file: !9, line: 13, type: !15)
!22 = !DILocation(line: 13, scope: !18)
!23 = !DILocation(line: 15, column: 2, scope: !18)
!24 = distinct !DISubprogram(scope: !9, file: !9, line: 18, type: !25, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!25 = !DISubroutineType(types: !26)
!26 = !{!15, !12}
!27 = !DILocalVariable(name: "v", arg: 1, scope: !24, file: !9, line: 18, type: !12)
!28 = !DILocation(line: 18, scope: !24)
!29 = !DILocation(line: 20, column: 2, scope: !24)
!30 = distinct !DISubprogram(scope: !9, file: !9, line: 23, type: !31, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!31 = !DISubroutineType(types: !32)
!32 = !{!15, !12, !12}
!33 = !DILocalVariable(name: "lhs", arg: 1, scope: !30, file: !9, line: 23, type: !12)
!34 = !DILocation(line: 23, scope: !30)
!35 = !DILocalVariable(name: "rhs", arg: 2, scope: !30, file: !9, line: 23, type: !12)
!36 = !DILocation(line: 25, column: 2, scope: !30)
!37 = distinct !DISubprogram(scope: !9, file: !9, line: 35, type: !38, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!38 = !DISubroutineType(types: !39)
!39 = !{!40}
!40 = !DICompositeType(tag: DW_TAG_structure_type, name: "vec2u32", scope: !9, file: !9, line: 30, size: 64, align: 32, flags: DIFlagPublic, elements: !41)
!41 = !{!42, !44}
!42 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !9, file: !9, line: 30, baseType: !43, size: 32, flags: DIFlagPublic)
!43 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!44 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !9, file: !9, line: 30, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!45 = !DILocation(line: 37, column: 2, scope: !37)
!46 = distinct !DISubprogram(scope: !9, file: !9, line: 40, type: !47, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!47 = !DISubroutineType(types: !48)
!48 = !{!40, !43}
!49 = !DILocalVariable(name: "val", arg: 1, scope: !46, file: !9, line: 40, type: !43)
!50 = !DILocation(line: 40, scope: !46)
!51 = !DILocation(line: 42, column: 2, scope: !46)
!52 = distinct !DISubprogram(scope: !9, file: !9, line: 53, type: !53, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!53 = !DISubroutineType(types: !54)
!54 = !{!55}
!55 = !DICompositeType(tag: DW_TAG_structure_type, name: "vec3", scope: !9, file: !9, line: 47, size: 96, align: 32, flags: DIFlagPublic, elements: !56)
!56 = !{!57, !58, !59}
!57 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !9, file: !9, line: 47, baseType: !15, size: 32, flags: DIFlagPublic)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !9, file: !9, line: 47, baseType: !15, size: 32, offset: 32, flags: DIFlagPublic)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "z", scope: !9, file: !9, line: 47, baseType: !15, size: 32, offset: 64, flags: DIFlagPublic)
!60 = !DILocation(line: 55, column: 2, scope: !52)
!61 = distinct !DISubprogram(scope: !9, file: !9, line: 58, type: !62, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!62 = !DISubroutineType(types: !63)
!63 = !{!55, !15}
!64 = !DILocalVariable(name: "val", arg: 1, scope: !61, file: !9, line: 58, type: !15)
!65 = !DILocation(line: 58, scope: !61)
!66 = !DILocation(line: 60, column: 2, scope: !61)
!67 = distinct !DISubprogram(scope: !9, file: !9, line: 63, type: !68, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!68 = !DISubroutineType(types: !69)
!69 = !{!15, !55}
!70 = !DILocalVariable(name: "v", arg: 1, scope: !67, file: !9, line: 63, type: !55)
!71 = !DILocation(line: 63, scope: !67)
!72 = !DILocation(line: 65, column: 2, scope: !67)
!73 = distinct !DISubprogram(scope: !9, file: !9, line: 68, type: !74, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!74 = !DISubroutineType(types: !75)
!75 = !{!15, !55, !55}
!76 = !DILocalVariable(name: "lhs", arg: 1, scope: !73, file: !9, line: 68, type: !55)
!77 = !DILocation(line: 68, scope: !73)
!78 = !DILocalVariable(name: "rhs", arg: 2, scope: !73, file: !9, line: 68, type: !55)
!79 = !DILocation(line: 70, column: 2, scope: !73)
!80 = distinct !DISubprogram(scope: !9, file: !9, line: 73, type: !81, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!81 = !DISubroutineType(types: !82)
!82 = !{!55, !55, !55}
!83 = !DILocalVariable(name: "lhs", arg: 1, scope: !80, file: !9, line: 73, type: !55)
!84 = !DILocation(line: 73, scope: !80)
!85 = !DILocalVariable(name: "rhs", arg: 2, scope: !80, file: !9, line: 73, type: !55)
!86 = !DILocation(line: 75, column: 2, scope: !80)
!87 = !DILocalVariable(name: "result", scope: !80, file: !9, line: 75, type: !55)
!88 = !DILocation(line: 75, scope: !80)
!89 = !DILocation(line: 76, column: 2, scope: !80)
!90 = !DILocation(line: 77, column: 2, scope: !80)
!91 = !DILocation(line: 78, column: 2, scope: !80)
!92 = !DILocation(line: 79, column: 2, scope: !80)
!93 = distinct !DISubprogram(scope: !9, file: !9, line: 91, type: !94, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!94 = !DISubroutineType(types: !95)
!95 = !{!96}
!96 = !DICompositeType(tag: DW_TAG_structure_type, name: "vec4", scope: !9, file: !9, line: 84, size: 128, align: 32, flags: DIFlagPublic, elements: !97)
!97 = !{!98, !99, !100, !101}
!98 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !9, file: !9, line: 84, baseType: !15, size: 32, flags: DIFlagPublic)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !9, file: !9, line: 84, baseType: !15, size: 32, offset: 32, flags: DIFlagPublic)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "z", scope: !9, file: !9, line: 84, baseType: !15, size: 32, offset: 64, flags: DIFlagPublic)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !9, file: !9, line: 84, baseType: !15, size: 32, offset: 96, flags: DIFlagPublic)
!102 = !DILocation(line: 93, column: 2, scope: !93)
!103 = distinct !DISubprogram(scope: !9, file: !9, line: 96, type: !104, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!104 = !DISubroutineType(types: !105)
!105 = !{!96, !15}
!106 = !DILocalVariable(name: "val", arg: 1, scope: !103, file: !9, line: 96, type: !15)
!107 = !DILocation(line: 96, scope: !103)
!108 = !DILocation(line: 98, column: 2, scope: !103)
!109 = distinct !DISubprogram(scope: !9, file: !9, line: 101, type: !110, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!110 = !DISubroutineType(types: !111)
!111 = !{!15, !96}
!112 = !DILocalVariable(name: "v", arg: 1, scope: !109, file: !9, line: 101, type: !96)
!113 = !DILocation(line: 101, scope: !109)
!114 = !DILocation(line: 103, column: 2, scope: !109)
!115 = distinct !DISubprogram(scope: !9, file: !9, line: 106, type: !116, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!116 = !DISubroutineType(types: !117)
!117 = !{!15, !96, !96}
!118 = !DILocalVariable(name: "lhs", arg: 1, scope: !115, file: !9, line: 106, type: !96)
!119 = !DILocation(line: 106, scope: !115)
!120 = !DILocalVariable(name: "rhs", arg: 2, scope: !115, file: !9, line: 106, type: !96)
!121 = !DILocation(line: 108, column: 2, scope: !115)
!122 = distinct !DISubprogram(scope: !9, file: !9, line: 120, type: !123, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!123 = !DISubroutineType(types: !124)
!124 = !{!125}
!125 = !DICompositeType(tag: DW_TAG_structure_type, name: "vec4u32", scope: !9, file: !9, line: 113, size: 128, align: 32, flags: DIFlagPublic, elements: !126)
!126 = !{!127, !128, !129, !130}
!127 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !9, file: !9, line: 113, baseType: !43, size: 32, flags: DIFlagPublic)
!128 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !9, file: !9, line: 113, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!129 = !DIDerivedType(tag: DW_TAG_member, name: "z", scope: !9, file: !9, line: 113, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!130 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !9, file: !9, line: 113, baseType: !43, size: 32, offset: 96, flags: DIFlagPublic)
!131 = !DILocation(line: 122, column: 2, scope: !122)
!132 = distinct !DISubprogram(scope: !9, file: !9, line: 125, type: !133, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!133 = !DISubroutineType(types: !134)
!134 = !{!125, !43}
!135 = !DILocalVariable(name: "val", arg: 1, scope: !132, file: !9, line: 125, type: !43)
!136 = !DILocation(line: 125, scope: !132)
!137 = !DILocation(line: 127, column: 2, scope: !132)
!138 = distinct !DISubprogram(scope: !139, file: !139, line: 4, type: !140, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!139 = !DIFile(filename: "io.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz\\src", source: "GetStdHandle ::= func(handle : u32) -> u64 := extern;\0AWriteConsoleA ::= func(hConsoleOutput : u64, lpBuffer : u8&, write_count : u32, chars_written : u32 mut& weak, reserved : v0&) -> s32 := extern;\0A\0Aputchar ::= func(chr : u8) -> v0\0A{\0A\09handle ::= GetStdHandle(4294967285@u32);\0A\09WriteConsoleA(handle, ref chr, 1@u32, null, null);\0A};\0A\0Aputuint ::= func(v : u64 mut weak) -> v0\0A{\0A\09if(v > 9)\0A\09{\0A\09\09putuint(v / 10);\0A\09}\0A\09digit ::= v - ((v / 10) * 10);\0A\09putchar('0' + digit);\0A};\0A\0Aputsint ::= func(v : s64 mut weak) -> v0\0A{\0A\09if(v < 0)\0A\09{\0A\09\09putchar('-');\0A\09\09v = v * -1;\0A\09}\0A\09putuint(v);\0A};\0A\0Acstrlen ::= func(cstr : u8&) -> u64\0A{\0A\09c : u64 mut := 0;\0A\09if(cstr == null)\0A\09{\0A\09\09return c;\0A\09}\0A\09while((deref (cstr at c)) != 0)\0A\09{\0A\09\09c = c + 1;\0A\09}\0A\09return c;\0A};\0A\0A\0Aputs ::= func(str : u8&) -> v0\0A{\0A\09i : u64 mut := 0;\0A\09len ::= cstrlen(str);\0A\09chr : u8& mut := null;\0A\09while(i < len)\0A\09{\0A\09\09chr = (str at i);\0A\09\09putchar(deref chr);\0A\09\09i = i + 1;\0A\09}\0A};\0A\0Aprint ::= macro(T : auto) -> v0\0A{\0A\09if static(__is_a(T, u8&))\0A\09{\0A\09\09puts(T);\0A\09}\0A\09if static(__is_a(T, u64))\0A\09{\0A\09\09putuint(T);\0A\09}\0A\09if static(__is_a(T, u32))\0A\09{\0A\09\09putuint(T);\0A\09}\0A\09if static(__is_a(T, u16))\0A\09{\0A\09\09putuint(T);\0A\09}\0A\09if static(__is_a(T, u8))\0A\09{\0A\09\09putchar(T);\0A\09}\0A\09if static(__is_a(T, s64))\0A\09{\0A\09\09putsint(T);\0A\09}\0A\09if static(__is_a(T, s32))\0A\09{\0A\09\09putsint(T);\0A\09}\0A\09if static(__is_a(T, s16))\0A\09{\0A\09\09putsint(T);\0A\09}\0A\09if static(__is_a(T, s8))\0A\09{\0A\09\09putchar(T);\0A\09}\0A};\0A\0A== build ==\0A{\0A\09add_link_library(\22Kernel32.lib\22);\0A}\0A")
!140 = !DISubroutineType(types: !141)
!141 = !{!6, !142}
!142 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!143 = !DILocalVariable(name: "chr", arg: 1, scope: !138, file: !139, line: 4, type: !142)
!144 = !DILocation(line: 4, scope: !138)
!145 = !DILocation(line: 6, column: 2, scope: !138)
!146 = !DILocalVariable(name: "handle", scope: !138, file: !139, line: 6, type: !147)
!147 = !DIBasicType(name: "u64", size: 64, encoding: DW_ATE_unsigned)
!148 = !DILocation(line: 6, scope: !138)
!149 = !DILocation(line: 7, column: 2, scope: !138)
!150 = !DILocation(line: 5, column: 1, scope: !138)
!151 = distinct !DISubprogram(scope: !139, file: !139, line: 10, type: !152, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!152 = !DISubroutineType(types: !153)
!153 = !{!6, !147}
!154 = !DILocalVariable(name: "v", arg: 1, scope: !151, file: !139, line: 10, type: !147)
!155 = !DILocation(line: 10, scope: !151)
!156 = !DILocation(line: 12, column: 2, scope: !151)
!157 = !DILocation(line: 14, column: 3, scope: !151)
!158 = !DILocation(line: 16, column: 2, scope: !151)
!159 = !DILocalVariable(name: "digit", scope: !151, file: !139, line: 16, type: !147)
!160 = !DILocation(line: 16, scope: !151)
!161 = !DILocation(line: 17, column: 2, scope: !151)
!162 = !DILocation(line: 11, column: 1, scope: !151)
!163 = distinct !DISubprogram(scope: !139, file: !139, line: 20, type: !164, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!164 = !DISubroutineType(types: !165)
!165 = !{!6, !166}
!166 = !DIBasicType(name: "s64", size: 64, encoding: DW_ATE_signed)
!167 = !DILocalVariable(name: "v", arg: 1, scope: !163, file: !139, line: 20, type: !166)
!168 = !DILocation(line: 20, scope: !163)
!169 = !DILocation(line: 22, column: 2, scope: !163)
!170 = !DILocation(line: 24, column: 3, scope: !163)
!171 = !DILocation(line: 25, column: 3, scope: !163)
!172 = !DILocation(line: 27, column: 2, scope: !163)
!173 = !DILocation(line: 21, column: 1, scope: !163)
!174 = distinct !DISubprogram(scope: !139, file: !139, line: 30, type: !175, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!175 = !DISubroutineType(types: !176)
!176 = !{!147, !177}
!177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !142, size: 8)
!178 = !DILocalVariable(name: "cstr", arg: 1, scope: !174, file: !139, line: 30, type: !177)
!179 = !DILocation(line: 30, scope: !174)
!180 = !DILocation(line: 32, column: 2, scope: !174)
!181 = !DILocalVariable(name: "c", scope: !174, file: !139, line: 32, type: !147)
!182 = !DILocation(line: 32, scope: !174)
!183 = !DILocation(line: 33, column: 2, scope: !174)
!184 = !DILocation(line: 35, column: 3, scope: !174)
!185 = !DILocation(line: 37, column: 2, scope: !174)
!186 = !DILocation(line: 39, column: 3, scope: !174)
!187 = !DILocation(line: 41, column: 2, scope: !174)
!188 = distinct !DISubprogram(scope: !139, file: !139, line: 45, type: !189, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!189 = !DISubroutineType(types: !190)
!190 = !{!6, !177}
!191 = !DILocalVariable(name: "str", arg: 1, scope: !188, file: !139, line: 45, type: !177)
!192 = !DILocation(line: 45, scope: !188)
!193 = !DILocation(line: 47, column: 2, scope: !188)
!194 = !DILocalVariable(name: "i", scope: !188, file: !139, line: 47, type: !147)
!195 = !DILocation(line: 47, scope: !188)
!196 = !DILocation(line: 48, column: 2, scope: !188)
!197 = !DILocalVariable(name: "len", scope: !188, file: !139, line: 48, type: !147)
!198 = !DILocation(line: 48, scope: !188)
!199 = !DILocation(line: 49, column: 2, scope: !188)
!200 = !DILocalVariable(name: "chr", scope: !188, file: !139, line: 49, type: !177)
!201 = !DILocation(line: 49, scope: !188)
!202 = !DILocation(line: 50, column: 2, scope: !188)
!203 = !DILocation(line: 52, column: 3, scope: !188)
!204 = !DILocation(line: 53, column: 3, scope: !188)
!205 = !DILocation(line: 54, column: 3, scope: !188)
!206 = !DILocation(line: 46, column: 1, scope: !188)
!207 = distinct !DISubprogram(scope: !208, file: !208, line: 16, type: !209, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!208 = !DIFile(filename: "arena.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz\\src", source: "arena ::= struct\0A{\0A\09ptr : v0&;\0A\09cap : u64;\0A\09cursor : u64;\0A};\0A\0AVirtualAlloc ::= func(lpAddress : v0&, dwSize : u64, flAllocationType : s64, flProtect : s64) -> v0& := extern;\0AVirtualFree ::= func(lpAddress : v0&, dwSize : u64, dwFreeType : s64) -> v0 := extern;\0AARENA_ADDR_RESERVE ::= 8000000000;\0AMEM_RESERVE ::= 8192;\0AMEM_COMMIT ::= 4096;\0AMEM_RELEASE ::= 32768;\0APAGE_READWRITE ::= 4;\0A\0Aarena_create ::= func(initial_capacity : u64) -> arena\0A{\0A\09ptr ::= VirtualAlloc(null, ARENA_ADDR_RESERVE, MEM_RESERVE, PAGE_READWRITE);\0A\09VirtualAlloc(ptr, initial_capacity, MEM_COMMIT, PAGE_READWRITE);\0A\09return arena{.ptr := ptr; .cap := initial_capacity; .cursor := 0;};\0A};\0A\0A[[private]]\0A_arena_double_capacity ::= func(a : arena mut&) -> v0\0A{\0A\09// need to increase size. let's double the cap.\0A\09offset ::= ((a->ptr)@u64)@v0&;\0A\09VirtualAlloc(offset, a->cap, MEM_COMMIT, PAGE_READWRITE);\0A\09(a->cap) = (a->cap) * 2;\0A};\0A\0Aarena_push ::= func(a : arena mut&, bytes : u64) -> v0& weak\0A{\0A\09while((a->cursor) > (a->cap + bytes))\0A\09{\0A\09\09_arena_double_capacity(a);\0A\09}\0A\09addr : u64 mut := (a->ptr)@u64;\0A\09addr = addr + (a->cursor);\0A\09(a->cursor) = (a->cursor) + bytes;\0A\0A\09return addr@v0&;\0A};\0A\0Aarena_push_one ::= macro(ar : arena mut&, T : auto) -> v0& weak\0A{\0A\09yield arena_push(ar, __sizeof(T));\0A};\0A\0Aarena_push_n ::= macro(ar : arena mut&, T : auto, count : u64 weak) -> v0& weak\0A{\0A\09yield arena_push(ar, __sizeof(T) * count);\0A};\0A\0Aarena_clear ::= func(a : arena mut&) -> v0\0A{\0A\09(a->cursor) = 0;\0A};\0A\0Aarena_destroy ::= func(a : arena) -> v0\0A{\0A\09VirtualFree(a.ptr, 0, MEM_RELEASE);\0A};\0A\0A== build ==\0A{\0A\09add_link_library(\22Kernel32.lib\22);\0A}\0A")
!209 = !DISubroutineType(types: !210)
!210 = !{!211, !147}
!211 = !DICompositeType(tag: DW_TAG_structure_type, name: "arena", scope: !208, file: !208, line: 2, size: 192, align: 64, flags: DIFlagPublic, elements: !212)
!212 = !{!213, !215, !216}
!213 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !208, file: !208, line: 2, baseType: !214, size: 64, flags: DIFlagPublic)
!214 = !DIBasicType(name: "v0&", size: 64, encoding: DW_ATE_address)
!215 = !DIDerivedType(tag: DW_TAG_member, name: "cap", scope: !208, file: !208, line: 2, baseType: !147, size: 64, offset: 64, flags: DIFlagPublic)
!216 = !DIDerivedType(tag: DW_TAG_member, name: "cursor", scope: !208, file: !208, line: 2, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!217 = !DILocalVariable(name: "initial_capacity", arg: 1, scope: !207, file: !208, line: 16, type: !147)
!218 = !DILocation(line: 16, scope: !207)
!219 = !DILocation(line: 18, column: 2, scope: !207)
!220 = !DILocalVariable(name: "ptr", scope: !207, file: !208, line: 18, type: !214)
!221 = !DILocation(line: 18, scope: !207)
!222 = !DILocation(line: 19, column: 2, scope: !207)
!223 = !DILocation(line: 20, column: 2, scope: !207)
!224 = distinct !DISubprogram(scope: !208, file: !208, line: 24, type: !225, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!225 = !DISubroutineType(types: !226)
!226 = !{!6, !227}
!227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !211, size: 8)
!228 = !DILocalVariable(name: "a", arg: 1, scope: !224, file: !208, line: 24, type: !227)
!229 = !DILocation(line: 24, scope: !224)
!230 = !DILocation(line: 25, column: 1, scope: !224)
!231 = !DILocation(line: 27, column: 2, scope: !224)
!232 = !DILocalVariable(name: "offset", scope: !224, file: !208, line: 27, type: !214)
!233 = !DILocation(line: 27, scope: !224)
!234 = !DILocation(line: 28, column: 2, scope: !224)
!235 = !DILocation(line: 29, column: 2, scope: !224)
!236 = distinct !DISubprogram(scope: !208, file: !208, line: 32, type: !237, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!237 = !DISubroutineType(types: !238)
!238 = !{!214, !227, !147}
!239 = !DILocalVariable(name: "a", arg: 1, scope: !236, file: !208, line: 32, type: !227)
!240 = !DILocation(line: 32, scope: !236)
!241 = !DILocalVariable(name: "bytes", arg: 2, scope: !236, file: !208, line: 32, type: !147)
!242 = !DILocation(line: 34, column: 2, scope: !236)
!243 = !DILocation(line: 36, column: 3, scope: !236)
!244 = !DILocation(line: 38, column: 2, scope: !236)
!245 = !DILocalVariable(name: "addr", scope: !236, file: !208, line: 38, type: !147)
!246 = !DILocation(line: 38, scope: !236)
!247 = !DILocation(line: 39, column: 2, scope: !236)
!248 = !DILocation(line: 40, column: 2, scope: !236)
!249 = !DILocation(line: 42, column: 2, scope: !236)
!250 = distinct !DISubprogram(scope: !208, file: !208, line: 55, type: !225, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!251 = !DILocalVariable(name: "a", arg: 1, scope: !250, file: !208, line: 55, type: !227)
!252 = !DILocation(line: 55, scope: !250)
!253 = !DILocation(line: 57, column: 2, scope: !250)
!254 = !DILocation(line: 56, column: 1, scope: !250)
!255 = distinct !DISubprogram(scope: !208, file: !208, line: 60, type: !256, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!256 = !DISubroutineType(types: !257)
!257 = !{!6, !211}
!258 = !DILocalVariable(name: "a", arg: 1, scope: !255, file: !208, line: 60, type: !211)
!259 = !DILocation(line: 60, scope: !255)
!260 = !DILocation(line: 62, column: 2, scope: !255)
!261 = !DILocation(line: 61, column: 1, scope: !255)
!262 = distinct !DISubprogram(scope: !263, file: !263, line: 1, type: !264, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!263 = !DIFile(filename: "string.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz\\src", source: "cstreql ::= func(lhs : u8&, rhs : u8&) -> bool\0A{\0A\09llen ::= cstrlen(lhs);\0A\09rlen ::= cstrlen(rhs);\0A\09if(llen != rlen)\0A\09{\0A\09\09return false;\0A\09}\0A\09min : u64 mut := rlen;\0A\09if(llen < rlen)\0A\09{\0A\09\09min = llen;\0A\09}\0A\09i : u64 mut := 0;\0A\09lchr : u8 mut;\0A\09rchr : u8 mut;\0A\09while(i < min)\0A\09{\0A\09\09lchr = deref(lhs at i);\0A\09\09rchr = deref(rhs at i);\0A\09\09if(lchr != rchr)\0A\09\09{\0A\09\09\09return false;\0A\09\09}\0A\09\09i = i + 1;\0A\09}\0A\09return true;\0A};\0A\0Astrcpy ::= func(dst : u8 mut&, src : u8&, count : u64) -> v0\0A{\0A\09i : u64 mut := 0;\0A\09dstcpy : u8 mut& mut := dst;\0A\09srccpy : u8& mut := src;\0A\09while(i < count)\0A\09{\0A\09\09(deref dstcpy) = (deref srccpy);\0A\09\09dstcpy = ((dstcpy@u64) + 1)@u8 mut& mut;\0A\09\09srccpy = ((srccpy@u64) + 1)@u8& mut;\0A\09\09i = i + 1;\0A\09}\0A};\0A\0Astring_view ::= struct\0A{\0A\09str : u8&;\0A\09len : u64;\0A};\0A\0Astring ::= struct\0A{\0A\09sso : u8 mut#32;\0A\09data : u8 mut&;\0A\09len : u64 mut;\0A\09cap : u64 mut;\0A};\0A\0Acreate_string ::= func(cstring : u8&, mem : arena mut&) -> string\0A{\0A\09ret : string mut;\0A\09ret.len = cstrlen(cstring);\0A\0A\09sso_size : u64 static := __sizeof(ret.sso) / __sizeof(u8);\0A\09if(ret.len < sso_size)\0A\09{\0A\09\09// yes, sso is large enough.\0A\09\09ret.data = null;\0A\09\09strcpy((ret.sso) at 0, cstring, ret.len);\0A\09\09ret.cap = sso_size;\0A\09\09return ret;\0A\09}\0A\09// sso too small. need to alloc.\0A\09ret.data = arena_push(mem, ret.len);\0A\09ret.cap = ret.len;\0A\09strcpy(ret.data, cstring, ret.len);\0A\09return ret;\0A};\0A\0Astring_is_small ::= func(str : string&) -> bool\0A{\0A\09sso_size : u64 static := __sizeof(str->sso) / __sizeof(u8);\0A\09return str->len < sso_size;\0A};\0A\0Aprint_string ::= func(str : string&) -> v0\0A{\0A\09i : u64 mut := 0;\0A\09len ::= str->len;\0A\0A\09dst : u8 mut& mut := str->data;\0A\09if(string_is_small(str))\0A\09{\0A\09\09dst = (str->sso) at 0;\0A\09}\0A\0A\09while(i < len)\0A\09{\0A\09\09putchar(deref(dst at i));\0A\09\09i = i + 1;\0A\09}\0A};\0A\0Astring_append ::= func(str : string mut&, append : string&, mem : arena mut&) -> v0\0A{\0A\09if(append->len == 0)\0A\09{\0A\09\09return;\0A\09}\0A\09total_len ::= (str->len) + (append->len);\0A\09old_data : u8& mut := str->data;\0A\09if(old_data == null)\0A\09{\0A\09\09old_data = (str->sso) at 0;\0A\09}\0A\09old_len ::= str->len;\0A\0A\09append_data : u8& mut := append->data;\0A\09if(append_data == null)\0A\09{\0A\09\09append_data = (append->sso) at 0;\0A\09}\0A\0A\09if(total_len > (str->cap))\0A\09{\0A\09\09// we need to realloc.\0A\09\09str->data = arena_push(mem, total_len);\0A\09\09// copy back over the old bit\0A\09\09strcpy(str->data, old_data, old_len);\0A\09\09old_data = (str->data);\0A\09\09str->cap = total_len;\0A\09}\0A\09// append the new bit.\0A\09strcpy((old_data at old_len)@_, append_data, append->len);\0A\09str->len = total_len;\0A};\0A\0Astring_append_cstr ::= func(str : string mut&, append : u8&, mem : arena mut&) -> v0\0A{\0A\09fake_str : string mut := string{};\0A\09fake_str.len = cstrlen(append);\0A\09fake_str.data = append@_;\0A\09string_append(str, ref fake_str, mem);\0A};\0A\0Astring_clear ::= func(str : string mut&) -> v0\0A{\0A\09str->len = 0;\0A};\0A\0Astring_duplicate ::= func(str : string&, mem : arena mut&) -> string\0A{\0A\09ret : string mut;\0A\09ret.len = (str->len);\0A\09if(string_is_small(str))\0A\09{\0A\09\09strcpy(ret.sso at 0, str->sso at 0, ret.len);\0A\09\09ret.data = null;\0A\09\09ret.cap = __sizeof(ret.sso) / __sizeof(u8);\0A\09\09return ret;\0A\09}\0A\09ret.cap = ret.len;\0A\09ret.data = arena_push(mem, ret.len);\0A\09return ret;\0A};\0A\0Astring_at ::= func(str : string&, idx : u64) -> u8 mut&\0A{\0A\09if(string_is_small(str))\0A\09{\0A\09\09return str->sso at idx;\0A\09}\0A\09return str->data at idx;\0A};\0A\0A== build ==\0A{\0A\09add_source_file(\22arena.psy\22);\0A\09add_source_file(\22io.psy\22);\0A}\0A")
!264 = !DISubroutineType(types: !265)
!265 = !{!266, !177, !177}
!266 = !DIBasicType(name: "bool", size: 1, encoding: DW_ATE_boolean)
!267 = !DILocalVariable(name: "lhs", arg: 1, scope: !262, file: !263, line: 1, type: !177)
!268 = !DILocation(line: 1, scope: !262)
!269 = !DILocalVariable(name: "rhs", arg: 2, scope: !262, file: !263, line: 1, type: !177)
!270 = !DILocation(line: 3, column: 2, scope: !262)
!271 = !DILocalVariable(name: "llen", scope: !262, file: !263, line: 3, type: !147)
!272 = !DILocation(line: 3, scope: !262)
!273 = !DILocation(line: 4, column: 2, scope: !262)
!274 = !DILocalVariable(name: "rlen", scope: !262, file: !263, line: 4, type: !147)
!275 = !DILocation(line: 4, scope: !262)
!276 = !DILocation(line: 5, column: 2, scope: !262)
!277 = !DILocation(line: 7, column: 3, scope: !262)
!278 = !DILocation(line: 9, column: 2, scope: !262)
!279 = !DILocalVariable(name: "min", scope: !262, file: !263, line: 9, type: !147)
!280 = !DILocation(line: 9, scope: !262)
!281 = !DILocation(line: 10, column: 2, scope: !262)
!282 = !DILocation(line: 12, column: 3, scope: !262)
!283 = !DILocation(line: 14, column: 2, scope: !262)
!284 = !DILocalVariable(name: "i", scope: !262, file: !263, line: 14, type: !147)
!285 = !DILocation(line: 14, scope: !262)
!286 = !DILocation(line: 15, column: 2, scope: !262)
!287 = !DILocalVariable(name: "lchr", scope: !262, file: !263, line: 15, type: !142)
!288 = !DILocation(line: 15, scope: !262)
!289 = !DILocation(line: 16, column: 2, scope: !262)
!290 = !DILocalVariable(name: "rchr", scope: !262, file: !263, line: 16, type: !142)
!291 = !DILocation(line: 16, scope: !262)
!292 = !DILocation(line: 17, column: 2, scope: !262)
!293 = !DILocation(line: 19, column: 3, scope: !262)
!294 = !DILocation(line: 20, column: 3, scope: !262)
!295 = !DILocation(line: 21, column: 3, scope: !262)
!296 = !DILocation(line: 27, column: 2, scope: !262)
!297 = !DILocation(line: 23, column: 4, scope: !262)
!298 = !DILocation(line: 25, column: 3, scope: !262)
!299 = distinct !DISubprogram(scope: !263, file: !263, line: 30, type: !300, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!300 = !DISubroutineType(types: !301)
!301 = !{!6, !177, !177, !147}
!302 = !DILocalVariable(name: "dst", arg: 1, scope: !299, file: !263, line: 30, type: !177)
!303 = !DILocation(line: 30, scope: !299)
!304 = !DILocalVariable(name: "src", arg: 2, scope: !299, file: !263, line: 30, type: !177)
!305 = !DILocalVariable(name: "count", arg: 3, scope: !299, file: !263, line: 30, type: !147)
!306 = !DILocation(line: 32, column: 2, scope: !299)
!307 = !DILocalVariable(name: "i", scope: !299, file: !263, line: 32, type: !147)
!308 = !DILocation(line: 32, scope: !299)
!309 = !DILocation(line: 33, column: 2, scope: !299)
!310 = !DILocalVariable(name: "dstcpy", scope: !299, file: !263, line: 33, type: !177)
!311 = !DILocation(line: 33, scope: !299)
!312 = !DILocation(line: 34, column: 2, scope: !299)
!313 = !DILocalVariable(name: "srccpy", scope: !299, file: !263, line: 34, type: !177)
!314 = !DILocation(line: 34, scope: !299)
!315 = !DILocation(line: 35, column: 2, scope: !299)
!316 = !DILocation(line: 37, column: 3, scope: !299)
!317 = !DILocation(line: 38, column: 3, scope: !299)
!318 = !DILocation(line: 39, column: 3, scope: !299)
!319 = !DILocation(line: 40, column: 3, scope: !299)
!320 = !DILocation(line: 31, column: 1, scope: !299)
!321 = distinct !DISubprogram(scope: !263, file: !263, line: 58, type: !322, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!322 = !DISubroutineType(types: !323)
!323 = !{!324, !177, !227}
!324 = !DICompositeType(tag: DW_TAG_structure_type, name: "string", scope: !263, file: !263, line: 51, size: 448, align: 64, flags: DIFlagPublic, elements: !325)
!325 = !{!326, !327, !328, !329}
!326 = !DIDerivedType(tag: DW_TAG_member, name: "sso", scope: !263, file: !263, line: 51, baseType: !177, size: 256, flags: DIFlagPublic)
!327 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !263, file: !263, line: 51, baseType: !177, size: 64, offset: 256, flags: DIFlagPublic)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !263, file: !263, line: 51, baseType: !147, size: 64, offset: 320, flags: DIFlagPublic)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "cap", scope: !263, file: !263, line: 51, baseType: !147, size: 64, offset: 384, flags: DIFlagPublic)
!330 = !DILocalVariable(name: "cstring", arg: 1, scope: !321, file: !263, line: 58, type: !177)
!331 = !DILocation(line: 58, scope: !321)
!332 = !DILocalVariable(name: "mem", arg: 2, scope: !321, file: !263, line: 58, type: !227)
!333 = !DILocation(line: 60, column: 2, scope: !321)
!334 = !DILocalVariable(name: "ret", scope: !321, file: !263, line: 60, type: !324)
!335 = !DILocation(line: 60, scope: !321)
!336 = !DILocation(line: 61, column: 2, scope: !321)
!337 = !DILocation(line: 63, column: 2, scope: !321)
!338 = !DILocalVariable(name: "sso_size", scope: !321, file: !263, line: 63, type: !147)
!339 = !DILocation(line: 63, scope: !321)
!340 = !DILocation(line: 64, column: 2, scope: !321)
!341 = !DILocation(line: 67, column: 3, scope: !321)
!342 = !DILocation(line: 68, column: 3, scope: !321)
!343 = !DILocation(line: 69, column: 3, scope: !321)
!344 = !DILocation(line: 70, column: 3, scope: !321)
!345 = !DILocation(line: 73, column: 2, scope: !321)
!346 = !DILocation(line: 74, column: 2, scope: !321)
!347 = !DILocation(line: 75, column: 2, scope: !321)
!348 = !DILocation(line: 76, column: 2, scope: !321)
!349 = distinct !DISubprogram(scope: !263, file: !263, line: 79, type: !350, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!350 = !DISubroutineType(types: !351)
!351 = !{!266, !352}
!352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !324, size: 8)
!353 = !DILocalVariable(name: "str", arg: 1, scope: !349, file: !263, line: 79, type: !352)
!354 = !DILocation(line: 79, scope: !349)
!355 = !DILocation(line: 81, column: 2, scope: !349)
!356 = !DILocalVariable(name: "sso_size", scope: !349, file: !263, line: 81, type: !147)
!357 = !DILocation(line: 81, scope: !349)
!358 = !DILocation(line: 82, column: 2, scope: !349)
!359 = distinct !DISubprogram(scope: !263, file: !263, line: 85, type: !360, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!360 = !DISubroutineType(types: !361)
!361 = !{!6, !352}
!362 = !DILocalVariable(name: "str", arg: 1, scope: !359, file: !263, line: 85, type: !352)
!363 = !DILocation(line: 85, scope: !359)
!364 = !DILocation(line: 87, column: 2, scope: !359)
!365 = !DILocalVariable(name: "i", scope: !359, file: !263, line: 87, type: !147)
!366 = !DILocation(line: 87, scope: !359)
!367 = !DILocation(line: 88, column: 2, scope: !359)
!368 = !DILocalVariable(name: "len", scope: !359, file: !263, line: 88, type: !147)
!369 = !DILocation(line: 88, scope: !359)
!370 = !DILocation(line: 90, column: 2, scope: !359)
!371 = !DILocalVariable(name: "dst", scope: !359, file: !263, line: 90, type: !177)
!372 = !DILocation(line: 90, scope: !359)
!373 = !DILocation(line: 91, column: 2, scope: !359)
!374 = !DILocation(line: 93, column: 3, scope: !359)
!375 = !DILocation(line: 96, column: 2, scope: !359)
!376 = !DILocation(line: 98, column: 3, scope: !359)
!377 = !DILocation(line: 99, column: 3, scope: !359)
!378 = !DILocation(line: 86, column: 1, scope: !359)
!379 = distinct !DISubprogram(scope: !263, file: !263, line: 103, type: !380, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!380 = !DISubroutineType(types: !381)
!381 = !{!6, !352, !352, !227}
!382 = !DILocalVariable(name: "str", arg: 1, scope: !379, file: !263, line: 103, type: !352)
!383 = !DILocation(line: 103, scope: !379)
!384 = !DILocalVariable(name: "append", arg: 2, scope: !379, file: !263, line: 103, type: !352)
!385 = !DILocalVariable(name: "mem", arg: 3, scope: !379, file: !263, line: 103, type: !227)
!386 = !DILocation(line: 105, column: 2, scope: !379)
!387 = !DILocation(line: 107, column: 3, scope: !379)
!388 = !DILocation(line: 109, column: 2, scope: !379)
!389 = !DILocalVariable(name: "total_len", scope: !379, file: !263, line: 109, type: !147)
!390 = !DILocation(line: 109, scope: !379)
!391 = !DILocation(line: 110, column: 2, scope: !379)
!392 = !DILocalVariable(name: "old_data", scope: !379, file: !263, line: 110, type: !177)
!393 = !DILocation(line: 110, scope: !379)
!394 = !DILocation(line: 111, column: 2, scope: !379)
!395 = !DILocation(line: 113, column: 3, scope: !379)
!396 = !DILocation(line: 115, column: 2, scope: !379)
!397 = !DILocalVariable(name: "old_len", scope: !379, file: !263, line: 115, type: !147)
!398 = !DILocation(line: 115, scope: !379)
!399 = !DILocation(line: 117, column: 2, scope: !379)
!400 = !DILocalVariable(name: "append_data", scope: !379, file: !263, line: 117, type: !177)
!401 = !DILocation(line: 117, scope: !379)
!402 = !DILocation(line: 118, column: 2, scope: !379)
!403 = !DILocation(line: 120, column: 3, scope: !379)
!404 = !DILocation(line: 123, column: 2, scope: !379)
!405 = !DILocation(line: 126, column: 3, scope: !379)
!406 = !DILocation(line: 128, column: 3, scope: !379)
!407 = !DILocation(line: 129, column: 3, scope: !379)
!408 = !DILocation(line: 130, column: 3, scope: !379)
!409 = !DILocation(line: 133, column: 2, scope: !379)
!410 = !DILocation(line: 134, column: 2, scope: !379)
!411 = !DILocation(line: 104, column: 1, scope: !379)
!412 = distinct !DISubprogram(scope: !263, file: !263, line: 137, type: !413, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!413 = !DISubroutineType(types: !414)
!414 = !{!6, !352, !177, !227}
!415 = !DILocalVariable(name: "str", arg: 1, scope: !412, file: !263, line: 137, type: !352)
!416 = !DILocation(line: 137, scope: !412)
!417 = !DILocalVariable(name: "append", arg: 2, scope: !412, file: !263, line: 137, type: !177)
!418 = !DILocalVariable(name: "mem", arg: 3, scope: !412, file: !263, line: 137, type: !227)
!419 = !DILocation(line: 139, column: 2, scope: !412)
!420 = !DILocalVariable(name: "fake_str", scope: !412, file: !263, line: 139, type: !324)
!421 = !DILocation(line: 139, scope: !412)
!422 = !DILocation(line: 140, column: 2, scope: !412)
!423 = !DILocation(line: 141, column: 2, scope: !412)
!424 = !DILocation(line: 142, column: 2, scope: !412)
!425 = !DILocation(line: 138, column: 1, scope: !412)
!426 = distinct !DISubprogram(scope: !263, file: !263, line: 145, type: !360, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!427 = !DILocalVariable(name: "str", arg: 1, scope: !426, file: !263, line: 145, type: !352)
!428 = !DILocation(line: 145, scope: !426)
!429 = !DILocation(line: 147, column: 2, scope: !426)
!430 = !DILocation(line: 146, column: 1, scope: !426)
!431 = distinct !DISubprogram(scope: !263, file: !263, line: 150, type: !432, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!432 = !DISubroutineType(types: !433)
!433 = !{!324, !352, !227}
!434 = !DILocalVariable(name: "str", arg: 1, scope: !431, file: !263, line: 150, type: !352)
!435 = !DILocation(line: 150, scope: !431)
!436 = !DILocalVariable(name: "mem", arg: 2, scope: !431, file: !263, line: 150, type: !227)
!437 = !DILocation(line: 152, column: 2, scope: !431)
!438 = !DILocalVariable(name: "ret", scope: !431, file: !263, line: 152, type: !324)
!439 = !DILocation(line: 152, scope: !431)
!440 = !DILocation(line: 153, column: 2, scope: !431)
!441 = !DILocation(line: 154, column: 2, scope: !431)
!442 = !DILocation(line: 156, column: 3, scope: !431)
!443 = !DILocation(line: 157, column: 3, scope: !431)
!444 = !DILocation(line: 158, column: 3, scope: !431)
!445 = !DILocation(line: 159, column: 3, scope: !431)
!446 = !DILocation(line: 161, column: 2, scope: !431)
!447 = !DILocation(line: 162, column: 2, scope: !431)
!448 = !DILocation(line: 163, column: 2, scope: !431)
!449 = distinct !DISubprogram(scope: !263, file: !263, line: 166, type: !450, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!450 = !DISubroutineType(types: !451)
!451 = !{!177, !352, !147}
!452 = !DILocalVariable(name: "str", arg: 1, scope: !449, file: !263, line: 166, type: !352)
!453 = !DILocation(line: 166, scope: !449)
!454 = !DILocalVariable(name: "idx", arg: 2, scope: !449, file: !263, line: 166, type: !147)
!455 = !DILocation(line: 168, column: 2, scope: !449)
!456 = !DILocation(line: 170, column: 3, scope: !449)
!457 = !DILocation(line: 172, column: 2, scope: !449)
!458 = distinct !DISubprogram(scope: !459, file: !459, line: 1, type: !460, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!459 = !DIFile(filename: "debug.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz\\src", source: "assert ::= func(expr : bool, errmsg : u8&) -> v0\0A{\0A\09my_srcloc ::= srcloc_current();\0A\09if(!expr)\0A\09{\0A\09\09puts(\22error at \22);\0A\09\09puts(my_srcloc.file);\0A\09\09putchar(' ');\0A\09\09puts(my_srcloc.function);\0A\09\09putchar('(');\0A\09\09putuint(my_srcloc.line);\0A\09\09putchar(':');\0A\09\09putuint(my_srcloc.column);\0A\09\09putchar(')');\0A\09\09putchar(':');\0A\09\09putchar(' ');\0A\09\09puts(errmsg);\0A\09\09putchar(10);\0A\09\09__debugbreak();\0A\09}\0A};\0A\0A== build ==\0A{\0A\09add_source_file(\22io.psy\22);\0A\09add_source_file(\22string.psy\22);\0A}\0A")
!460 = !DISubroutineType(types: !461)
!461 = !{!6, !266, !177}
!462 = !DILocalVariable(name: "expr", arg: 1, scope: !458, file: !459, line: 1, type: !266)
!463 = !DILocation(line: 1, scope: !458)
!464 = !DILocalVariable(name: "errmsg", arg: 2, scope: !458, file: !459, line: 1, type: !177)
!465 = !DILocation(line: 3, column: 2, scope: !458)
!466 = !DILocalVariable(name: "my_srcloc", scope: !458, file: !459, line: 3, type: !467)
!467 = !DICompositeType(tag: DW_TAG_structure_type, name: "srcloc", scope: !3, file: !3, line: 14, size: 256, align: 64, flags: DIFlagPublic, elements: !468)
!468 = !{!469, !470, !471, !472}
!469 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !3, file: !3, line: 14, baseType: !177, size: 64, flags: DIFlagPublic)
!470 = !DIDerivedType(tag: DW_TAG_member, name: "function", scope: !3, file: !3, line: 14, baseType: !177, size: 64, offset: 64, flags: DIFlagPublic)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "line", scope: !3, file: !3, line: 14, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!472 = !DIDerivedType(tag: DW_TAG_member, name: "column", scope: !3, file: !3, line: 14, baseType: !147, size: 64, offset: 192, flags: DIFlagPublic)
!473 = !DILocation(line: 3, scope: !458)
!474 = !DILocation(line: 4, column: 2, scope: !458)
!475 = !DILocation(line: 6, column: 3, scope: !458)
!476 = !DILocation(line: 7, column: 3, scope: !458)
!477 = !DILocation(line: 8, column: 3, scope: !458)
!478 = !DILocation(line: 9, column: 3, scope: !458)
!479 = !DILocation(line: 10, column: 3, scope: !458)
!480 = !DILocation(line: 11, column: 3, scope: !458)
!481 = !DILocation(line: 12, column: 3, scope: !458)
!482 = !DILocation(line: 13, column: 3, scope: !458)
!483 = !DILocation(line: 14, column: 3, scope: !458)
!484 = !DILocation(line: 15, column: 3, scope: !458)
!485 = !DILocation(line: 16, column: 3, scope: !458)
!486 = !DILocation(line: 17, column: 3, scope: !458)
!487 = !DILocation(line: 18, column: 3, scope: !458)
!488 = !DILocation(line: 19, column: 3, scope: !458)
!489 = !DILocation(line: 2, column: 1, scope: !458)
!490 = distinct !DISubprogram(scope: !491, file: !491, line: 1175, type: !492, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!491 = !DIFile(filename: "vulkan.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz\\src", source: "LoadLibraryA ::= func(lpLibFileName : u8&) -> u64 := extern;\0AFreeLibrary ::= func(hLibModule : u64) -> s32 := extern;\0AGetProcAddress ::= func(module : u64, lpProcName : u8&) -> u64 weak := extern;\0A\0A// VkResult = s32 weak\0AVkApplicationInfo ::= struct\0A{\0A\09sType : s32 weak;\0A\09pNext : v0& weak;\0A\09pApplicationName : u8&;\0A\09applicationVersion : u32;\0A\09pEngineName : u8&;\0A\09engineVersion : u32;\0A\09apiVersion : u32;\0A};\0A\0AVkInstanceCreateInfo ::= struct\0A{\0A\09sType : s32 weak;\0A\09pNext : v0& weak;\0A\09flags : s32 weak;\0A\09pApplicationInfo : VkApplicationInfo&;\0A\09enabledLayerCount : u32;\0A\09ppEnabledLayerNames : u8&&;\0A\09enabledExtensionCount : u32;\0A\09ppEnabledExtensionNames : u8&&;\0A};\0A\0AVkSystemAllocationScope ::= enum\0A{\0A\09.COMMAND := 0;\0A\09.OBJECT := 1;\0A\09.CACHE := 2;\0A\09.DEVICE := 3;\0A\09.INSTANCE := 4;\0A};\0A\0AVkInternalAllocationType ::= enum\0A{\0A\09.EXECUTABLE := 0;\0A};\0A\0AVkAllocationCallbacks ::= struct\0A{\0A\09pUserData : v0&;\0A\09pfnAllocationFunction : func(pUserData : v0&, size : u64, align : u64, allocationScope : s32) -> v0&;\0A\09pfnReallocationFunction : func(pUserData : v0&, pOriginal : v0&, size : u64, align : u64, allocationScope : s32) -> v0&;\0A\09pfnFreeFunction : func(pUserData : v0&, mem : v0&) -> v0;\0A\09pfnInternalAllocation : func(pUserData : v0&, size : u64, allocationType : s32, allocationScope : s32) -> v0;\0A\09pfnInternalFree : func(pUserData : v0&, size : u64, allocationType : s32, allocationScope : s32) -> v0;\0A};\0A\0AVkMemoryAllocateFlagsInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09deviceMask : u32;\0A};\0A\0AVkMemoryAllocateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09allocationSize : u64;\0A\09memoryTypeIndex : u32;\0A};\0A\0Aif static(__is_windows)\0A{\0A\09VkWin32SurfaceCreateInfoKHR ::= struct\0A\09{\0A\09\09sType : s32;\0A\09\09pNext : v0&;\0A\09\09flags : s32;\0A\09\09hinstance : u64;\0A\09\09hwnd : u64;\0A\09};\0A}\0A\0AVkPhysicalDeviceLimits ::= struct\0A{\0A\09maxImageDimension1D : u32;\0A\09maxImageDimension2D : u32;\0A\09maxImageDimension3D : u32;\0A\09maxImageDimensionCube : u32;\0A\09maxImageArrayLayers : u32;\0A\09maxTexelBufferElements : u32;\0A\09maxUniformBufferRange : u32;\0A\09maxStorageBufferRange : u32;\0A\09maxPushConstantSize : u32;\0A\09maxMemoryAllocationCount : u32;\0A\09maxSamplerAllocationCount : u32;\0A\09bufferImageGranularity : u64;\0A\09sparseAddressSpaceSize : u64;\0A\09maxBoundDescriptorSets : u32;\0A\09maxPerStageDescriptorSamplers : u32;\0A\09maxPerStageDescriptorUniformSamplers : u32;\0A\09maxPerStageDescriptorStorageSamplers : u32;\0A\09maxPerStageDescriptorSampledImages : u32;\0A\09maxPerStageDescriptorStorageImages : u32;\0A\09maxPerStageDescriptorInputAttachments : u32;\0A\09maxPerStageResources : u32;\0A\09maxDescriptorSetSamplers : u32;\0A\09maxDescriptorSetUniformBuffers : u32;\0A\09maxDescriptorSetUniformBuffersDynamic : u32;\0A\09maxDescriptorSetStorageBuffers : u32;\0A\09maxDescriptorSetStorageBuffersDynamic : u32;\0A\09maxDescriptorSetSampledImages : u32;\0A\09maxDescriptorSetStorageImages : u32;\0A\09maxDescriptorSetInputAttachments : u32;\0A\09maxVertexInputAttributes : u32;\0A\09maxVertexInputBindings : u32;\0A\09maxVertexInputAttributeOffset : u32;\0A\09maxVertexInputBindingStride : u32;\0A\09maxVertexOutputComponents : u32;\0A\09maxTessellationGenerationLevel : u32;\0A\09maxTessellationPatchSize : u32;\0A\09maxTessellationControlPerVertexInputComponents : u32;\0A\09maxTessellationControlPerVertexOutputComponents : u32;\0A\09maxTessellationControlPerPatchOutputComponents : u32;\0A\09maxTessellationControlTotalOutputComponents : u32;\0A\09maxTessellationEvaluationInputComponents : u32;\0A\09maxTessellationEvaluationOutputComponents : u32;\0A\09maxGeometryShaderInvocations : u32;\0A\09maxGeometryInputComponents : u32;\0A\09maxGeometryOutputComponents : u32;\0A\09maxGeometryOutputVertices : u32;\0A\09maxGeometryTotalOutputComponents : u32;\0A\09maxFragmentInputComponents : u32;\0A\09maxFragmentOutputAttachments : u32;\0A\09maxFragmentDualSrcAttachments : u32;\0A\09maxFragmentCombinedOutputResources : u32;\0A\09maxComputeSharedMemorySize : u32;\0A\09maxComputeWorkGroupCount : u32#3;\0A\09maxComputeWorkGroupInvocations : u32;\0A\09maxComputeWorkGroupSize : u32#3;\0A\09subPixelPrecisionBits : u32;\0A\09subTexelPrecisionBits : u32;\0A\09mipmapPrecisionBits : u32;\0A\09maxDrawIndexedIndexValue : u32;\0A\09maxDrawIndirectCount : u32;\0A\09maxSamplerLodBias : f32;\0A\09maxSamplerAnisotropy : f32;\0A\09maxViewports : u32;\0A\09maxViewportDimensions : u32#2;\0A\09viewportBoundsRange : f32#2;\0A\09viewportSubPixelBits : u32;\0A\09minMemoryMapAlignment : u64;\0A\09minTexelBufferOffsetAlignment : u64;\0A\09minUniformBufferOffsetAlignment : u64;\0A\09minStorageBufferOffsetAlignment : u64;\0A\09minTexelOffset : s32;\0A\09maxTexelOffset : u32;\0A\09minTexelGatherOffset : s32;\0A\09maxTexelGatherOffset : u32;\0A\09minInterpolationOffset : f32;\0A\09maxInterpolationOffset : f32;\0A\09subPixelInterpolationOffsetBits : u32;\0A\09maxFramebufferWidth : u32;\0A\09maxFramebufferHeight : u32;\0A\09maxFramebufferLayers : u32;\0A\09framebufferColorSampleCounts : u32;\0A\09framebufferDepthSampleCounts : u32;\0A\09framebufferStencilSampleCounts : u32;\0A\09framebufferNoAttachmentsSampleCounts : u32;\0A\09maxColorAttachments : u32;\0A\09sampledImageColorSampleCounts : u32;\0A\09sampledImageIntegerSampleCounts : u32;\0A\09sampledImageDepthSampleCounts : u32;\0A\09sampledImageStencilSampleCounts : u32;\0A\09storageImageSampleCounts : u32;\0A\09maxSampleMaskWords : u32;\0A\09timestampComputeAndGraphics : u32;\0A\09timestampPeriod : f32;\0A\09maxClipDistances : u32;\0A\09maxCullDistances : u32;\0A\09maxCombinedClipAndCullDistances : u32;\0A\09discreteQueuePriorities : u32;\0A\09pointSizeRange : f32#2;\0A\09lineWidthRange : f32#2;\0A\09pointSizeGranularity : f32;\0A\09lineWidthGranularity : f32;\0A\09strictLines : u32;\0A\09standardSampleLocations : u32;\0A\09optimalBufferCopyOffsetAlignment : u64;\0A\09optimalBufferCopyRowPitchAlignment : u64;\0A\09nonCoherentAtomSize : u64;\0A};\0A\0AVkPhysicalDeviceSparseProperties ::= struct\0A{\0A\09residencyStandard2DBlockShape : u32;\0A\09residencyStandard2DMultisampleBlockShape : u32;\0A\09residencyStandard3DBlockShape : u32;\0A\09residencyAlignedMipSize : u32;\0A\09residencyNonResidentStrict : u32;\0A};\0A\0AVkPhysicalDeviceProperties ::= struct\0A{\0A\09apiVersion : u32;\0A\09driverVersion : u32;\0A\09vendorID : u32;\0A\09deviceID : u32;\0A\09deviceType : s32;\0A\09deviceName : u8#256;\0A\09pipelineCacheUUID : u8#16;\0A\09limits : VkPhysicalDeviceLimits;\0A\09sparseProperties : VkPhysicalDeviceSparseProperties;\0A};\0A\0AVkMemoryType ::= struct\0A{\0A\09propertyFlags : s32;\0A\09heapIndex : u32;\0A};\0A\0AVkMemoryHeap ::= struct\0A{\0A\09size : u64;\0A\09flags : u32;\0A};\0A\0AVkPhysicalDeviceMemoryProperties ::= struct\0A{\0A\09memoryTypeCount : u32;\0A\09memoryTypes : VkMemoryType#32;\0A\09memoryHeapCount : u32;\0A\09memoryHeaps : VkMemoryHeap#32;\0A};\0A\0AVkDeviceQueueCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09queueFamilyIndex : u32;\0A\09queueCount : u32;\0A\09pQueuePriorities : f32&;\0A};\0A\0AVkPhysicalDeviceVulkan13Features ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09robustImageAccess : u32;\0A\09inlineUniformBlock : u32;\0A\09descriptorBindingInlineUniformBlockUpdateAfterBind : u32;\0A\09pipelineCreationCacheControl : u32;\0A\09privateData : u32;\0A\09shaderDemoteToHelperInvocation : u32;\0A\09shaderTerminateInvocation : u32;\0A\09subgroupSizeControl : u32;\0A\09computeFullSubgroups : u32;\0A\09synchronization2 : u32;\0A\09textureCompressionASTC_HDR : u32;\0A\09shaderZeroInitializeWorkgroupMemory : u32;\0A\09dynamicRendering : u32;\0A\09shaderIntegerDotProduct : u32;\0A\09maintenance4 : u32;\0A};\0A\0AVkPhysicalDeviceVulkan12Features ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09samplerMirrorClampToEdge : u32;\0A\09drawIndirectCount : u32;\0A\09storageBuffer8BitAccess : u32;\0A\09uniformAndStorageBuffer8BitAccess : u32;\0A\09storagePushConstant8 : u32;\0A\09shaderBufferInt64Atomics : u32;\0A\09shaderSharedInt64Atomics : u32;\0A\09shaderFloat16 : u32;\0A\09shaderInt8 : u32;\0A\09descriptorIndexing : u32;\0A\09shaderInputAttachmentArrayDynamicIndexing : u32;\0A\09shaderUniformTexelBufferArrayDynamicIndexing : u32;\0A\09shaderStorageTexelBufferArrayDynamicIndexing : u32;\0A\09shaderUniformBufferArrayNonUniformIndexing : u32;\0A\09shaderSampledImageArrayNonUniformIndexing : u32;\0A\09shaderStorageBufferArrayNonUniformIndexing : u32;\0A\09shaderStorageImageArrayNonUniformIndexing : u32;\0A\09shaderInputAttachmentArrayNonUniformIndexing : u32;\0A\09shaderUniformTexelBufferArrayNonUniformIndexing : u32;\0A\09shaderStorageTexelBufferArrayNonUniformIndexing : u32;\0A\09descriptorBindingUniformBufferUpdateAfterBind : u32;\0A\09descriptorBindingSampledImageUpdateAfterBind : u32;\0A\09descriptorBindingStorageImageUpdateAfterBind : u32;\0A\09descriptorBindingStorageBufferUpdateAfterBind : u32;\0A\09descriptorBindingUniformTexelBufferUpdateAfterBind : u32;\0A\09descriptorBindingStorageTexelBufferUpdateAfterBind : u32;\0A\09descriptorBindingUpdateUnusedWhilePending : u32;\0A\09descriptorBindingPartiallyBound : u32;\0A\09descriptorBindingVariableDescriptorCount : u32;\0A\09runtimeDescriptorArray : u32;\0A\09samplerFilterMinmax : u32;\0A\09scalarBlockLayout : u32;\0A\09imagelessFramebuffer : u32;\0A\09uniformBufferStandardLayout : u32;\0A\09shaderSubgroupExtendedTypes : u32;\0A\09separateDepthStencilLayouts : u32;\0A\09hostQueryReset : u32;\0A\09timelineSemaphore : u32;\0A\09bufferDeviceAddress : u32;\0A\09bufferDeviceAddressCaptureReplay : u32;\0A\09bufferDeviceAddressMultiDevice : u32;\0A\09vulkanMemoryModel : u32;\0A\09vulkanMemoryModelDeviceScope : u32;\0A\09vulkanMemoryModelAvailabilityVisibilityChains : u32;\0A\09shaderOutputViewportIndex : u32;\0A\09shaderOutputLayer : u32;\0A\09subgroupBroadcastDynamicId : u32;\0A};\0A\0AVkPhysicalDeviceFeatures ::= struct\0A{\0A\09robustBufferAccess : u32;\0A\09fullDrawIndexUint32 : u32;\0A\09imageCubeArray : u32;\0A\09independentBlend : u32;\0A\09geometryShader : u32;\0A\09tessellationShader : u32;\0A\09sampleRateShading : u32;\0A\09dualSrcBlend : u32;\0A\09logicOp : u32;\0A\09multiDrawIndirect : u32;\0A\09drawIndirectFirstInstance : u32;\0A\09depthClamp : u32;\0A\09depthBiasClamp : u32;\0A\09fillModeNonSolid : u32;\0A\09depthBounds : u32;\0A\09wideLines : u32;\0A\09largePoints : u32;\0A\09alphaToOne : u32;\0A\09multiViewport : u32;\0A\09samplerAnisotropy : u32;\0A\09textureCompressionETC2 : u32;\0A\09textureCompressionASTC_LDR : u32;\0A\09textureCompressionBC : u32;\0A\09occlusionQueryPrecise : u32;\0A\09pipelineStatisticsQuery : u32;\0A\09vertexPipelineStoresAndAtomics : u32;\0A\09fragmentStoresAndAtomics : u32;\0A\09shaderTessellationAndGeometryPointSize : u32;\0A\09shaderImageGatherExtended : u32;\0A\09shaderStorageImageExtendedFormats : u32;\0A\09shaderStorageImageMultisample : u32;\0A\09shaderStorageImageReadWithoutFormat : u32;\0A\09shaderStorageImageWriteWithoutFormat : u32;\0A\09shaderUniformBufferArrayDynamicIndexing : u32;\0A\09shaderSampledImageArrayDynamicIndexing : u32;\0A\09shaderStorageBufferArrayDynamicIndexing : u32;\0A\09shaderStorageImageArrayDynamicIndexing : u32;\0A\09shaderClipDistance : u32;\0A\09shaderCullDistance : u32;\0A\09shaderFloat64 : u32;\0A\09shaderInt64 : u32;\0A\09shaderInt16 : u32;\0A\09shaderResourceResidency : u32;\0A\09shaderResourceMinLod : u32;\0A\09sparseBinding : u32;\0A\09sparseResidencyBuffer : u32;\0A\09sparseResidencyImage2D : u32;\0A\09sparseResidencyImage3D : u32;\0A\09sparseResidency2Samples : u32;\0A\09sparseResidency4Samples : u32;\0A\09sparseResidency8Samples : u32;\0A\09sparseResidency16Samples : u32;\0A\09sparseResidencyAliased : u32;\0A\09variableMultisampleRate : u32;\0A\09inheritedQueries : u32;\0A};\0A\0AVkPhysicalDeviceFeatures2 ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09features : VkPhysicalDeviceFeatures;\0A};\0A\0AVkDeviceCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09queueCreateInfoCount : u32;\0A\09pQueueCreateInfos : VkDeviceQueueCreateInfo&;\0A\09enabledLayerCount : u32;\0A\09ppEnabledLayerNames : u8&&;\0A\09enabledExtensionCount : u32;\0A\09ppEnabledExtensionNames : u8&&;\0A\09pEnabledFeatures : VkPhysicalDeviceFeatures&;\0A};\0A\0AVkExtent2D ::= struct\0A{\0A\09width : u32;\0A\09height : u32;\0A};\0A\0AVkExtent3D ::= struct\0A{\0A\09width : u32;\0A\09height : u32;\0A\09depth : u32;\0A};\0A\0AVkQueueFamilyProperties ::= struct\0A{\0A\09queueFlags : u32;\0A\09queueCount : u32;\0A\09timestampValidBits : u32;\0A\09minImageTransferGranularity : VkExtent3D;\0A};\0A\0AVkSurfaceCapabilitiesKHR ::= struct\0A{\0A\09minImageCount : u32;\0A\09maxImageCount : u32;\0A\09currentExtent : VkExtent2D;\0A\09minImageExtent : VkExtent2D;\0A\09maxImageExtent : VkExtent2D;\0A\09maxImageArrayLayers : u32;\0A\09supportedTransforms : s32;\0A\09currentTransform : s32;\0A\09supportedCompositeAlpha : s32;\0A\09supportedUsageFlags : s32;\0A};\0A\0AVkSwapchainCreateInfoKHR ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09surface : u64;\0A\09minImageCount : u32;\0A\09imageFormat : s32;\0A\09imageColorSpace : s32;\0A\09imageExtent : VkExtent2D;\0A\09imageArrayLayers : u32;\0A\09imageUsage : s32;\0A\09imageSharingMode : s32;\0A\09queueFamilyIndexCount : u32;\0A\09pQueueFamilyIndices : u32&;\0A\09preTransform : s32;\0A\09compositeAlpha : s32;\0A\09presentMode : s32;\0A\09clipped : u32;\0A\09oldSwapchain : u64;\0A};\0A\0AVkCommandPoolCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09queueFamilyIndex : u32;\0A};\0A\0AVkCommandBufferAllocateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09commandPool : u64;\0A\09level : s32;\0A\09commandBufferCount : u32;\0A};\0A\0AVkFenceCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A};\0A\0AVkSemaphoreCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A};\0A\0AVkDescriptorSetLayoutBinding ::= struct\0A{\0A\09binding : u32;\0A\09descriptorType : s32;\0A\09descriptorCount : u32;\0A\09stageFlags : s32;\0A\09pImmutableSamplers : u64&;\0A};\0A\0AVkDescriptorSetLayoutBindingFlagsCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09bindingCount : u32;\0A\09pBindingFlags : s32&;\0A};\0A\0AVkDescriptorSetLayoutCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09bindingCount : u32;\0A\09pBindings : VkDescriptorSetLayoutBinding&;\0A};\0A\0AVkPushConstantRange ::= struct\0A{\0A\09stageFlags : s32;\0A\09offset : u32;\0A\09size : u32;\0A};\0A\0AVkPipelineLayoutCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09setLayoutCount : u32;\0A\09pSetLayouts : u64&;\0A\09pushConstantRangeCount : u32;\0A\09pPushConstantRanges : VkPushConstantRange&;\0A};\0A\0AVkImageCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09imageType : s32;\0A\09format : s32;\0A\09extent : VkExtent3D;\0A\09mipLevels : u32;\0A\09arrayLayers : u32;\0A\09samples : s32;\0A\09tiling : s32;\0A\09usage : s32;\0A\09sharingMode : s32;\0A\09queueFamilyIndexCount : u32;\0A\09pQueueFamilyIndices : u32&;\0A\09initialLayout : s32;\0A};\0A\0AVkBufferCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09size : u64;\0A\09usage : s32;\0A\09sharingMode : s32;\0A\09queueFamilyIndexCount : u32;\0A\09pQueueFamilyIndices : u32&;\0A};\0A\0AVkBufferDeviceAddressInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09buffer : u64;\0A};\0A\0AVkShaderModuleCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09codeSize : u64;\0A\09pCode : u32&; // ok vulkan thinks its really clever to use u32s here so i will respect it, even though i've decided it was a stupid decision.\0A};\0A\0AVkPipelineShaderStageCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09stage : s32;\0A\09module : u64;\0A\09pName : u8&;\0A\09pSpecializationInfo : v0&;\0A};\0A\0AVkComputePipelineCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09stage : VkPipelineShaderStageCreateInfo;\0A\09layout : u64;\0A\09basePipelineHandle : u64;\0A\09basePipelineIndex : s32;\0A};\0A\0AVkPipelineVertexInputStateCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09vertexBindingDescriptionCount : u32;\0A\09pVertexBindingDescriptions : v0&;\0A\09vertexAttributeDescriptionCount : u32;\0A\09pVertexAttributeDescriptions : v0&;\0A};\0A\0AVkPipelineInputAssemblyStateCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09topology : s32;\0A\09primitiveRestartEnable : u32;\0A};\0A\0AVkPipelineTessellationStateCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09patchControlPoints : u32;\0A};\0A\0AVkPipelineViewportStateCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09viewportCount : u32;\0A\09pViewports : v0&;\0A\09scissorCount : u32;\0A\09pScissors : v0&;\0A};\0A\0AVkPipelineRasterizationStateCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09depthClampEnable : u32;\0A\09rasterizerDiscardEnable : u32;\0A\09polygonMode : s32;\0A\09cullMode : s32;\0A\09frontFace : s32;\0A\09depthBiasEnable : u32;\0A\09depthBiasConstantFactor : f32;\0A\09depthBiasClamp : f32;\0A\09depthBiasSlopeFactor : f32;\0A\09lineWidth : f32;\0A};\0A\0AVkPipelineMultisampleStateCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09rasterizationSamples : s32;\0A\09sampleShadingEnable : u32;\0A\09minSampleShading : f32;\0A\09pSampleMask : v0&;\0A\09alphaToCoverageEnable : u32;\0A\09alphaToOneEnable : u32;\0A};\0A\0AVkStencilOpState ::= struct\0A{\0A\09failOp : s32;\0A\09passOp : s32;\0A\09depthFailOp : s32;\0A\09compareOp : s32;\0A\09compareMask : u32;\0A\09writeMask : u32;\0A\09reference : u32;\0A};\0A\0AVkPipelineDepthStencilStateCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09depthTestEnable : u32;\0A\09depthWriteEnable : u32;\0A\09depthCompareOp : s32;\0A\09depthBoundsTestEnable : u32;\0A\09stencilTestEnable : u32;\0A\09front : VkStencilOpState;\0A\09back : VkStencilOpState;\0A\09minDepthBounds : f32;\0A\09maxDepthBounds : f32;\0A};\0A\0AVkPipelineColorBlendAttachmentState ::= struct\0A{\0A\09blendEnable : u32;\0A\09srcColorBlendFactor : s32;\0A\09dstColorBlendFactor : s32;\0A\09colorBlendOp : s32;\0A\09srcAlphaBlendFactor : s32;\0A\09dstAlphaBlendFactor : s32;\0A\09alphaBlendOp : s32;\0A\09colorWriteMask : s32;\0A};\0A\0AVkPipelineColorBlendStateCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09logicOpEnable : u32;\0A\09logicOp : s32;\0A\09attachmentCount : u32;\0A\09pAttachments : VkPipelineColorBlendAttachmentState&;\0A\09blendConstants : f32 mut#4;\0A};\0A\0AVkPipelineRenderingCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09viewMask : u32;\0A\09colorAttachmentCount : u32;\0A\09pColorAttachmentFormats : s32&;\0A\09depthAttachmentFormat : s32;\0A\09stencilAttachmentFormat : s32;\0A};\0A\0AVkPipelineDynamicStateCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09dynamicStateCount : u32;\0A\09pDynamicStates : s32&;\0A};\0A\0AVkGraphicsPipelineCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09stageCount : u32;\0A\09pStages : VkPipelineShaderStageCreateInfo&;\0A\09pVertexInputState : VkPipelineVertexInputStateCreateInfo&;\0A\09pInputAssemblyState : VkPipelineInputAssemblyStateCreateInfo&;\0A\09pTessellationState : VkPipelineTessellationStateCreateInfo&;\0A\09pViewportState : VkPipelineViewportStateCreateInfo&;\0A\09pRasterizationState : VkPipelineRasterizationStateCreateInfo&;\0A\09pMultisampleState : VkPipelineMultisampleStateCreateInfo&;\0A\09pDepthStencilState : VkPipelineDepthStencilStateCreateInfo&;\0A\09pColorBlendState : VkPipelineColorBlendStateCreateInfo&;\0A\09pDynamicState : VkPipelineDynamicStateCreateInfo&;\0A\09layout : u64;\0A\09renderPass : u64;\0A\09subpass : u32;\0A\09basePipelineHandle : u64;\0A\09basePipelineIndex : s32;\0A};\0A\0AVkCommandBufferBeginInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09pInheritanceInfo : v0&;\0A};\0A\0AVkSubmitInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09waitSemaphoreCount : u32;\0A\09pWaitSemaphores : u64&;\0A\09pWaitDstStageMask : s32&;\0A\09commandBufferCount : u32;\0A\09pCommandBuffers : u64&;\0A\09signalSemaphoreCount : u32;\0A\09pSignalSemaphores : u64&;\0A};\0A\0AVkMemoryBarrier ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09srcAccessMask : s32;\0A\09dstAccessMask : s32;\0A};\0A\0AVkBufferMemoryBarrier ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09srcAccessMask : s32;\0A\09dstAccessMask : s32;\0A\09srcQueueFamilyIndex : u32;\0A\09dstQueueFamilyIndex : u32;\0A\09buffer : u64;\0A\09offset : u64;\0A\09size : u64;\0A};\0A\0AVkImageSubresourceRange ::= struct\0A{\0A\09aspectMask : s32;\0A\09baseMipLevel : u32;\0A\09levelCount : u32;\0A\09baseArrayLayer : u32;\0A\09layerCount : u32;\0A};\0A\0AVkImageMemoryBarrier ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09srcAccessMask : s32;\0A\09dstAccessMask : s32;\0A\09oldLayout : s32;\0A\09newLayout : s32;\0A\09srcQueueFamilyIndex : u32;\0A\09dstQueueFamilyIndex : u32;\0A\09image : u64;\0A\09subresourceRange : VkImageSubresourceRange;\0A};\0A\0AVkMemoryRequirements ::= struct\0A{\0A\09size : u64;\0A\09align : u64;\0A\09memoryTypeBits : u32;\0A};\0A\0AVkOffset2D ::= struct\0A{\0A\09x : s32;\0A\09y : s32;\0A};\0A\0AVkRect2D ::= struct\0A{\0A\09offset : VkOffset2D;\0A\09extent : VkExtent2D;\0A};\0A\0AVkClearColorValue ::= struct\0A{\0A\09float32 : vec4;\0A};\0A\0A// note this is meant to be a union of VkClearColorValue and VkClearDepthStencilValue\0A// well we dont support that. VkClearColorValue is the larger of the two so it will just be that.\0AVkClearValue ::= struct\0A{\0A\09color : VkClearColorValue;\0A};\0A\0AVkRenderingAttachmentInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09imageView : u64;\0A\09imageLayout : s32;\0A\09resolveMode : s32;\0A\09resolveImageView : u64;\0A\09resolveImageLayout : s32;\0A\09loadOp : s32;\0A\09storeOp : s32;\0A\09clearValue : VkClearValue;\0A};\0A\0AVkRenderingInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09renderArea : VkRect2D;\0A\09layerCount : u32;\0A\09viewMask : u32;\0A\09colorAttachmentCount : u32;\0A\09pColorAttachments : VkRenderingAttachmentInfo&;\0A\09pDepthAttachment : VkRenderingAttachmentInfo&;\0A\09pStencilAttachment : VkRenderingAttachmentInfo&;\0A};\0A\0AVkComponentMapping ::= struct\0A{\0A\09r : s32;\0A\09g : s32;\0A\09b : s32;\0A\09a : s32;\0A};\0A\0AVkImageViewCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09image : u64;\0A\09viewType : s32;\0A\09format : s32;\0A\09components : VkComponentMapping;\0A\09subresourceRange : VkImageSubresourceRange;\0A};\0A\0AVkViewport ::= struct\0A{\0A\09x : f32;\0A\09y : f32;\0A\09width : f32;\0A\09height : f32;\0A\09minDepth : f32;\0A\09maxDepth : f32;\0A};\0A\0AVkImageSubresourceLayers ::= struct\0A{\0A\09aspectMask : s32;\0A\09mipLevel : u32;\0A\09baseArrayLayer : u32;\0A\09layerCount : u32;\0A};\0A\0AVkOffset3D ::= struct\0A{\0A\09x : s32;\0A\09y : s32;\0A\09z : s32;\0A};\0A\0AVkImageBlit ::= struct\0A{\0A\09srcSubresource : VkImageSubresourceLayers;\0A\09srcOffsets : VkOffset3D mut#2;\0A\09dstSubresource : VkImageSubresourceLayers;\0A\09dstOffsets : VkOffset3D mut#2;\0A};\0A\0AVkPresentInfoKHR ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09waitSemaphoreCount : u32;\0A\09pWaitSemaphores : u64&;\0A\09swapchainCount : u32;\0A\09pSwapchains : u64&;\0A\09pImageIndices : u32&;\0A\09pResults : s32 mut&;\0A};\0A\0AVkDescriptorPoolSize ::= struct\0A{\0A\09type : s32;\0A\09descriptorCount : u32;\0A};\0A\0AVkDescriptorPoolCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09maxSets : u32;\0A\09poolSizeCount : u32;\0A\09pPoolSizes : VkDescriptorPoolSize&;\0A};\0A\0AVkDescriptorSetVariableDescriptorCountAllocateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09descriptorSetCount : u32;\0A\09pDescriptorCounts : u32&;\0A};\0A\0AVkDescriptorSetAllocateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09descriptorPool : u64;\0A\09descriptorSetCount : u32;\0A\09pSetLayouts : u64&;\0A};\0A\0AVkDescriptorImageInfo ::= struct\0A{\0A\09sampler : u64;\0A\09imageView : u64;\0A\09imageLayout : s32;\0A};\0A\0AVkDescriptorBufferInfo ::= struct\0A{\0A\09buffer : u64;\0A\09offset : u64;\0A\09range : u64;\0A};\0A\0AVkWriteDescriptorSet ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09dstSet : u64;\0A\09dstBinding : u32;\0A\09dstArrayElement : u32;\0A\09descriptorCount : u32;\0A\09descriptorType : s32;\0A\09pImageInfo : VkDescriptorImageInfo&;\0A\09pBufferInfo : VkDescriptorBufferInfo&;\0A\09pTexelBufferView : s32&;\0A};\0A\0AVkCopyDescriptorSet ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09srcSet : u64;\0A\09srcBinding : u32;\0A\09srcArrayElement : u32;\0A\09dstSet : u64;\0A\09dstBinding : u32;\0A\09dstArrayElement : u32;\0A\09descriptorCount : u32;\0A};\0A\0AVkBufferCopy ::= struct\0A{\0A\09srcOffset : u64;\0A\09dstOffset : u64;\0A\09size : u64;\0A};\0A\0AVkBufferImageCopy ::= struct\0A{\0A\09bufferOffset : u64;\0A\09bufferRowLength : u32;\0A\09bufferImageHeight : u32;\0A\09imageSubresource : VkImageSubresourceLayers;\0A\09imageOffset : VkOffset3D;\0A\09imageExtent : VkExtent3D;\0A};\0A\0AVkSamplerCreateInfo ::= struct\0A{\0A\09sType : s32;\0A\09pNext : v0&;\0A\09flags : s32;\0A\09magFilter : s32;\0A\09minFilter : s32;\0A\09mipmapMode : s32;\0A\09addressModeU : s32;\0A\09addressModeV : s32;\0A\09addressModeW : s32;\0A\09mipLodBias : f32;\0A\09anisotropyEnable : u32;\0A\09maxAnisotropy : f32;\0A\09compareEnable : u32;\0A\09compareOp : s32;\0A\09minLod : f32;\0A\09maxLod : f32;\0A\09borderColor : s32;\0A\09unnormalizedCoordinates : u32;\0A};\0A\0Avk_functions_t ::= struct\0A{\0A\09get_instance_proc_addr : func(instance : u64, funcname : u8&) -> u64 weak;\0A\09create_instance : func(pCreateInfo : VkInstanceCreateInfo&, pAllocator : VkAllocationCallbacks&, pInstance : u64 mut&) -> s32;\0A\09destroy_instance : func(instance : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\0A\09allocate_memory : func(device : u64, pAllocateInfo : VkMemoryAllocateInfo&, pAllocator : VkAllocationCallbacks&, pMemory : u64 mut&) -> s32;\0A\09free_memory : func(device : u64, memory : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\0A\09bind_buffer_memory : func(device : u64, buffer : u64, memory : u64, memoryOffset : u64) -> s32;\0A\09bind_image_memory : func(device : u64, image : u64, memory : u64, memoryOffset : u64) -> s32;\0A\0A\09if static(__is_windows)\0A\09{\0A\09\09create_win32_surface_khr : func(instance : u64, pCreateInfo : VkWin32SurfaceCreateInfoKHR&, pAllocator : VkAllocationCallbacks&, surface : u64 mut&) -> s32;\0A\09}\0A\09destroy_surface_khr : func(instance : u64, surface : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\0A\09create_swapchain_khr : func(device : u64, pCreateInfo : VkSwapchainCreateInfoKHR&, pAllocator : VkAllocationCallbacks&, pSwapchain : u64 mut&) -> s32;\0A\09destroy_swapchain_khr : func(device : u64, swapchain : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\09get_swapchain_images_khr : func(device : u64, swapchain : u64, pSwapchainImageCount : u32 mut&, pSwapchainImages : u64&) -> s32;\0A\09acquire_next_image_khr : func(device : u64, swapchain : u64, timeout : u64, semaphore : u64, fence : u64, pImageIndex : u32 mut&) -> s32;\0A\0A\09queue_present_khr : func(queue : u64, pPresentInfo : VkPresentInfoKHR&) -> s32;\0A\0A\09create_image : func(device : u64, pCreateInfo : VkImageCreateInfo&, pAllocator : VkAllocationCallbacks&, pImage : u64 mut&) -> s32;\0A\09destroy_image : func(device : u64, image : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\09create_image_view : func(device : u64, pCreateInfo : VkImageViewCreateInfo&, pAllocator : VkAllocationCallbacks&, pView : u64 mut&) -> s32;\0A\09destroy_image_view : func(device : u64, imageView : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\09create_sampler : func(device : u64, pCreateInfo : VkSamplerCreateInfo&, pAllocator : VkAllocationCallbacks&, pSampler : u64 mut&) -> s32;\0A\09destroy_sampler : func(device : u64, sampler : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\0A\09enumerate_physical_devices : func(instance : u64, pPhysicalDeviceCount : u32 mut&, pPhysicalDevices : u64 mut&) -> s32;\0A\09get_physical_device_properties : func(physicalDevice : u64, pProperties : VkPhysicalDeviceProperties mut&) -> v0;\0A\09get_physical_device_memory_properties : func(physicalDevice : u64, pMemoryProperties : VkPhysicalDeviceMemoryProperties mut&) -> v0;\0A\09get_physical_device_queue_family_properties : func(physicalDevice : u64, pQueueFamilyPropertyCount : u32 mut&, pQueueFamilyProperties : VkQueueFamilyProperties mut&) -> v0;\0A\09get_physical_device_surface_capabilities_khr : func(physicalDevice : u64, surface : u64, pSurfaceCapabilities : VkSurfaceCapabilitiesKHR mut&) -> s32;\0A\0A\09create_device : func(physicalDevice : u64, pCreateInfo : VkDeviceCreateInfo&, pAllocator : VkAllocationCallbacks&, pDevice : u64 mut&) -> s32;\0A\09destroy_device : func(device : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\09get_device_queue : func(device : u64, queueFamilyIndex : u32, queueIndex : u32, pQueue : u64 mut&) -> v0;\0A\0A\09create_command_pool : func(device : u64, pCreateInfo : VkCommandPoolCreateInfo&, pAllocator : VkAllocationCallbacks&, pCommandPool : u64 mut&) -> s32;\0A\09destroy_command_pool : func(device : u64, commandPool : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\09allocate_command_buffers : func(device : u64, pAllocateInfo : VkCommandBufferAllocateInfo&, pCommandBuffers : u64 mut&) -> s32;\0A\0A\09create_fence : func(device : u64, pCreateInfo : VkFenceCreateInfo&, pAllocator : VkAllocationCallbacks&, pFence : u64 mut&) -> s32;\0A\09destroy_fence : func(device : u64, fence : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\0A\09create_semaphore : func(device : u64, pCreateInfo : VkSemaphoreCreateInfo&, pAllocator : VkAllocationCallbacks&, pSemaphore : u64 mut&) -> s32;\0A\09destroy_semaphore : func(device : u64, semaphore : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\0A\09create_descriptor_set_layout : func(device : u64, pCreateInfo : VkDescriptorSetLayoutCreateInfo&, pAllocator : VkAllocationCallbacks&, pSetLayout : u64 mut&) -> s32;\0A\09destroy_descriptor_set_layout : func(device : u64, descriptorSetLayout : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\09create_pipeline_layout : func(device : u64, pCreateInfo : VkPipelineLayoutCreateInfo&, pAllocator : VkAllocationCallbacks&, pPipelineLayout : u64 mut&) -> s32;\0A\09destroy_pipeline_layout : func(device : u64, pipelineLayout : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\0A\09create_descriptor_pool : func(device : u64, pCreateInfo : VkDescriptorPoolCreateInfo&, pAllocator : VkAllocationCallbacks&, pDescriptorPool : u64 mut&) -> s32;\0A\09destroy_descriptor_pool : func(device : u64, descriptorPool : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\0A\09allocate_descriptor_sets : func(device : u64, pAllocateInfo : VkDescriptorSetAllocateInfo&, pDescriptorSets : u64 mut&) -> s32;\0A\09update_descriptor_sets : func(device : u64, descriptorWriteCount : u32, pDescriptorWrites : VkWriteDescriptorSet&, descriptorCopyCount : u32, pDescriptorCopies : VkCopyDescriptorSet&) -> v0;\0A\0A\09create_buffer : func(device : u64, pCreateInfo : VkBufferCreateInfo&, pAllocator : VkAllocationCallbacks&, pBuffer : u64 mut&) -> s32;\0A\09destroy_buffer : func(device : u64, buffer : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\0A\09get_buffer_device_address : func(device : u64, pInfo : VkBufferDeviceAddressInfo&) -> u64;\0A\0A\09create_shader_module : func(device : u64, pCreateInfo : VkShaderModuleCreateInfo&, pAllocator : VkAllocationCallbacks&, pShaderModule : u64 mut&) -> s32;\0A\09destroy_shader_module : func(device : u64, shaderModule : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\0A\09create_compute_pipelines : func(device : u64, pipelineCache : u64, createInfoCount : u32, pCreateInfos : VkComputePipelineCreateInfo&, pAllocator : VkAllocationCallbacks&, pPipelines : u64 mut&) -> s32;\0A\09create_graphics_pipelines : func(device : u64, pipelineCache : u64, createInfoCount : u32, pCreateInfos : VkGraphicsPipelineCreateInfo&, pAllocator : VkAllocationCallbacks&, pPipelines : u64 mut&) -> s32;\0A\09destroy_pipeline : func(device : u64, pipeline : u64, pAllocator : VkAllocationCallbacks&) -> v0;\0A\0A\09begin_command_buffer : func(commandBuffer : u64, pBeginInfo : VkCommandBufferBeginInfo&) -> s32;\0A\09end_command_buffer : func(commandBuffer : u64) -> s32;\0A\09reset_command_buffer : func(commandBuffer : u64, flags : s32) -> s32;\0A\0A\09get_image_memory_requirements : func(device : u64, image : u64, pMemoryRequirements : VkMemoryRequirements mut&) -> v0;\0A\09get_buffer_memory_requirements : func(device : u64, buffer : u64, pMemoryRequirements : VkMemoryRequirements mut&) -> v0;\0A\09map_memory : func(device : u64, memory : u64, offset : u64, size : u64, flags : s32, ppData : v0 mut&& weak) -> s32;\0A\0A\09queue_submit : func(queue : u64, submitCount : u32, pSubmits : VkSubmitInfo&, fence : u64) -> s32;\0A\09wait_for_fences : func(device : u64, fenceCount : u32, pFences : u64&, waitAll : u32, timeout : u64) -> s32;\0A\09reset_fences : func(device : u64, fenceCount : u32, pFences : u64&) -> s32;\0A\0A\09cmd_bind_pipeline : func(commandBuffer : u64, pipelineBindPoint : s32, pipeline : u64) -> v0;\0A\09cmd_bind_descriptor_sets : func(commandBuffer : u64, pipelineBindPoint : s32, layout : u64, firstSet : u32, descriptorSetCount : u32, pDescriptorSets : u64&, dynamicOffsetCount : u32, pDynamicOffsets : u32&) -> v0;\0A\09cmd_dispatch : func(commandBuffer : u64, groupCountX : u32, groupCountY : u32, groupCountZ : u32) -> v0;\0A\09cmd_pipeline_barrier : func(commandBuffer : u64, srcStageMask : s32, dstStageMask : s32, dependencyFlags : s32, memoryBarrierCount : u32, pMemoryBarriers : VkMemoryBarrier&, bufferMemoryBarrierCount : u32, pBufferMemoryBarriers : VkBufferMemoryBarrier&, imageMemoryBarrierCount : u32, pImageMemoryBarriers : VkImageMemoryBarrier&) -> v0;\0A\09cmd_begin_rendering : func(commandBuffer : u64, pRenderingInfo : VkRenderingInfo&) -> v0;\0A\09cmd_end_rendering : func(commandBuffer : u64) -> v0;\0A\09cmd_set_viewport : func(commandBuffer : u64, firstViewport : u32, viewportCount : u32, pViewports : VkViewport&) -> v0;\0A\09cmd_set_scissor : func(commandBuffer : u64, firstScissor : u32, scissorCount : u32, pScissors : VkRect2D&) -> v0;\0A\09cmd_blit_image : func(commandBuffer : u64, srcImage : u64, srcImageLayout : s32, dstImage : u64, dstImageLayout : s32, regionCount : u32, pRegions : VkImageBlit&, filter : s32) -> v0;\0A\09cmd_bind_index_buffer : func(commandBuffer : u64, buffer : u64, offset : u64, indexType : s32) -> v0;\0A\09cmd_draw : func(commandBuffer : u64, vertexCount : u32, instanceCount : u32, firstVertex : u32, firstInstance : u32) -> v0;\0A\09cmd_draw_indexed : func(commandBuffer : u64, indexCount : u32, instanceCount : u32, firstIndex : u32, vertexOffset : s32, firstInstance : u32) -> v0;\0A\09cmd_draw_indirect_count : func(commandBuffer : u64, buffer : u64, offset : u64, countBuffer : u64, countBufferOffset : u64, maxDrawCount : u32, stride : u32) -> v0;\0A\09cmd_draw_indexed_indirect_count : func(commandBuffer : u64, buffer : u64, offset : u64, countBuffer : u64, countBufferOffset : u64, maxDrawCount : u32, stride : u32) -> v0;\0A\09cmd_copy_buffer : func(commandBuffer : u64, srcBuffer : u64, dstBuffer : u64, regionCount : u32, pRegions : VkBufferCopy&) -> v0;\0A\09cmd_copy_buffer_to_image : func(commandBuffer : u64, srcBuffer : u64, dstImage : u64, dstImageLayout : s32, regionCount : u32, pRegions : VkBufferImageCopy&) -> v0;\0A\0A\09device_wait_idle : func(device : u64) -> v0;\0A};\0A\0Avk : vk_functions_t mut;\0A\0Avulkan_driver : u64 weak mut := -1;\0Avulkan_driver_initialised : bool mut := false;\0A\0Aload_vk_driver_fn ::= func(funcname : u8&, module : u64) -> u64 weak\0A{\0A\09addr ::= GetProcAddress(module, funcname);\0A\09if(addr == null)\0A\09{\0A\09\09puts(\22failed to load driver function \22);\0A\09\09puts(funcname);\0A\09\09putchar(10);\0A\09\09__debugbreak();\0A\09}\0A\09return addr;\0A};\0A\0Aload_vk_fn ::= func(funcname : u8&, instance : u64) -> u64 weak\0A{\0A\09addr ::= vk.get_instance_proc_addr(instance, funcname);\0A\09if(addr == null)\0A\09{\0A\09\09puts(\22failed to load function \22);\0A\09\09puts(funcname);\0A\09\09putchar(10);\0A\09\09__debugbreak();\0A\09}\0A\09return addr;\0A};\0A\0Adonestr ::= \22done.\\n\22;\0A\0Avulkan_init ::= func() -> v0\0A{\0A\09initialised_driver : bool mut := false;\0A\09if(!vulkan_driver_initialised)\0A\09{\0A\09\09vulkan_driver = LoadLibraryA(\22vulkan-1.dll\22);\0A\09\09if(vulkan_driver == 0)\0A\09\09{\0A\09\09\09__debugbreak();\0A\09\09}\0A\09\09puts(\22loading from vulkan driver...\22);\0A\09\09vulkan_driver_initialised = true;\0A\09\09initialised_driver = true;\0A\09}\0A\09defer puts(donestr);\0A\0A\09vk.create_instance = load_vk_driver_fn(\22vkCreateInstance\22, vulkan_driver);\0A\09vk.destroy_instance = load_vk_driver_fn(\22vkDestroyInstance\22, vulkan_driver);\0A\09vk.get_instance_proc_addr = load_vk_driver_fn(\22vkGetInstanceProcAddr\22, vulkan_driver);\0A};\0A\0Avulkan_load_functions ::= func(instance : u64) -> v0\0A{\0A\09vk.allocate_memory = load_vk_fn(\22vkAllocateMemory\22, instance);\0A\09vk.free_memory = load_vk_fn(\22vkFreeMemory\22, instance);\0A\0A\09vk.bind_buffer_memory = load_vk_fn(\22vkBindBufferMemory\22, instance);\0A\09vk.bind_image_memory = load_vk_fn(\22vkBindImageMemory\22, instance);\0A\0A\09if static(__is_windows)\0A\09{\0A\09\09vk.create_win32_surface_khr = load_vk_fn(\22vkCreateWin32SurfaceKHR\22, instance);\0A\09}\0A\09vk.destroy_surface_khr = load_vk_fn(\22vkDestroySurfaceKHR\22, instance);\0A\09vk.create_swapchain_khr = load_vk_fn(\22vkCreateSwapchainKHR\22, instance);\0A\09vk.destroy_swapchain_khr = load_vk_fn(\22vkDestroySwapchainKHR\22, instance);\0A\09vk.get_swapchain_images_khr = load_vk_fn(\22vkGetSwapchainImagesKHR\22, instance);\0A\09vk.acquire_next_image_khr = load_vk_fn(\22vkAcquireNextImageKHR\22, instance);\0A\0A\09vk.queue_present_khr = load_vk_fn(\22vkQueuePresentKHR\22, instance);\0A\0A\09vk.create_image = load_vk_fn(\22vkCreateImage\22, instance);\0A\09vk.destroy_image = load_vk_fn(\22vkDestroyImage\22, instance);\0A\09vk.create_image_view = load_vk_fn(\22vkCreateImageView\22, instance);\0A\09vk.destroy_image_view = load_vk_fn(\22vkDestroyImageView\22, instance);\0A\09vk.create_sampler = load_vk_fn(\22vkCreateSampler\22, instance);\0A\09vk.destroy_sampler = load_vk_fn(\22vkDestroySampler\22, instance);\0A\0A\09vk.enumerate_physical_devices = load_vk_fn(\22vkEnumeratePhysicalDevices\22, instance);\0A\09vk.get_physical_device_properties = load_vk_fn(\22vkGetPhysicalDeviceProperties\22, instance);\0A\09vk.get_physical_device_memory_properties = load_vk_fn(\22vkGetPhysicalDeviceMemoryProperties\22, instance);\0A\09vk.get_physical_device_queue_family_properties = load_vk_fn(\22vkGetPhysicalDeviceQueueFamilyProperties\22, instance);\0A\09vk.get_physical_device_surface_capabilities_khr = load_vk_fn(\22vkGetPhysicalDeviceSurfaceCapabilitiesKHR\22, instance);\0A\0A\09vk.create_device = load_vk_fn(\22vkCreateDevice\22, instance);\0A\09vk.destroy_device = load_vk_fn(\22vkDestroyDevice\22, instance);\0A\09vk.get_device_queue = load_vk_fn(\22vkGetDeviceQueue\22, instance);\0A\0A\09vk.create_command_pool = load_vk_fn(\22vkCreateCommandPool\22, instance);\0A\09vk.destroy_command_pool = load_vk_fn(\22vkDestroyCommandPool\22, instance);\0A\09vk.allocate_command_buffers = load_vk_fn(\22vkAllocateCommandBuffers\22, instance);\0A\0A\09vk.create_fence = load_vk_fn(\22vkCreateFence\22, instance);\0A\09vk.destroy_fence = load_vk_fn(\22vkDestroyFence\22, instance);\0A\0A\09vk.create_semaphore = load_vk_fn(\22vkCreateSemaphore\22, instance);\0A\09vk.destroy_semaphore = load_vk_fn(\22vkDestroySemaphore\22, instance);\0A\0A\09vk.create_descriptor_set_layout = load_vk_fn(\22vkCreateDescriptorSetLayout\22, instance);\0A\09vk.destroy_descriptor_set_layout = load_vk_fn(\22vkDestroyDescriptorSetLayout\22, instance);\0A\09vk.create_pipeline_layout = load_vk_fn(\22vkCreatePipelineLayout\22, instance);\0A\09vk.destroy_pipeline_layout = load_vk_fn(\22vkDestroyPipelineLayout\22, instance);\0A\0A\09vk.create_descriptor_pool = load_vk_fn(\22vkCreateDescriptorPool\22, instance);\0A\09vk.destroy_descriptor_pool = load_vk_fn(\22vkDestroyDescriptorPool\22, instance);\0A\0A\09vk.allocate_descriptor_sets = load_vk_fn(\22vkAllocateDescriptorSets\22, instance);\0A\09vk.update_descriptor_sets = load_vk_fn(\22vkUpdateDescriptorSets\22, instance);\0A\0A\09vk.create_buffer = load_vk_fn(\22vkCreateBuffer\22, instance);\0A\09vk.destroy_buffer = load_vk_fn(\22vkDestroyBuffer\22, instance);\0A\0A\09vk.get_buffer_device_address = load_vk_fn(\22vkGetBufferDeviceAddress\22, instance);\0A\0A\09vk.create_shader_module = load_vk_fn(\22vkCreateShaderModule\22, instance);\0A\09vk.destroy_shader_module = load_vk_fn(\22vkDestroyShaderModule\22, instance);\0A\0A\09vk.create_compute_pipelines = load_vk_fn(\22vkCreateComputePipelines\22, instance);\0A\09vk.create_graphics_pipelines = load_vk_fn(\22vkCreateGraphicsPipelines\22, instance);\0A\09vk.destroy_pipeline = load_vk_fn(\22vkDestroyPipeline\22, instance);\0A\0A\09vk.begin_command_buffer = load_vk_fn(\22vkBeginCommandBuffer\22, instance);\0A\09vk.end_command_buffer = load_vk_fn(\22vkEndCommandBuffer\22, instance);\0A\09vk.reset_command_buffer = load_vk_fn(\22vkResetCommandBuffer\22, instance);\0A\0A\09vk.get_image_memory_requirements = load_vk_fn(\22vkGetImageMemoryRequirements\22, instance);\0A\09vk.get_buffer_memory_requirements = load_vk_fn(\22vkGetBufferMemoryRequirements\22, instance);\0A\09vk.map_memory = load_vk_fn(\22vkMapMemory\22, instance);\0A\0A\09vk.queue_submit = load_vk_fn(\22vkQueueSubmit\22, instance);\0A\09vk.wait_for_fences = load_vk_fn(\22vkWaitForFences\22, instance);\0A\09vk.reset_fences = load_vk_fn(\22vkResetFences\22, instance);\0A\0A\09vk.cmd_bind_pipeline = load_vk_fn(\22vkCmdBindPipeline\22, instance);\0A\09vk.cmd_bind_descriptor_sets = load_vk_fn(\22vkCmdBindDescriptorSets\22, instance);\0A\09vk.cmd_dispatch = load_vk_fn(\22vkCmdDispatch\22, instance);\0A\09vk.cmd_pipeline_barrier = load_vk_fn(\22vkCmdPipelineBarrier\22, instance);\0A\09vk.cmd_begin_rendering = load_vk_fn(\22vkCmdBeginRendering\22, instance);\0A\09vk.cmd_end_rendering = load_vk_fn(\22vkCmdEndRendering\22, instance);\0A\09vk.cmd_set_viewport = load_vk_fn(\22vkCmdSetViewport\22, instance);\0A\09vk.cmd_set_scissor = load_vk_fn(\22vkCmdSetScissor\22, instance);\0A\09vk.cmd_blit_image = load_vk_fn(\22vkCmdBlitImage\22, instance);\0A\09vk.cmd_bind_index_buffer = load_vk_fn(\22vkCmdBindIndexBuffer\22, instance);\0A\09vk.cmd_draw = load_vk_fn(\22vkCmdDraw\22, instance);\0A\09vk.cmd_draw_indexed = load_vk_fn(\22vkCmdDrawIndexed\22, instance);\0A\09vk.cmd_draw_indirect_count = load_vk_fn(\22vkCmdDrawIndirectCount\22, instance);\0A\09vk.cmd_draw_indexed_indirect_count = load_vk_fn(\22vkCmdDrawIndexedIndirectCount\22, instance);\0A\09vk.cmd_copy_buffer = load_vk_fn(\22vkCmdCopyBuffer\22, instance);\0A\09vk.cmd_copy_buffer_to_image = load_vk_fn(\22vkCmdCopyBufferToImage\22, instance);\0A\0A\09vk.device_wait_idle = load_vk_fn(\22vkDeviceWaitIdle\22, instance);\0A};\0A\0Avulkan_term ::= func() -> v0\0A{\0A\09// let go of the vulkan driver.\0A\09if(vulkan_driver_initialised)\0A\09{\0A\09\09FreeLibrary(vulkan_driver);\0A\09\09vulkan_driver_initialised = false;\0A\09}\0A};\0A\0AVK_MAKE_API_VERSION ::= func(variant : u32 weak, major : u32 weak, minor : u32 weak, patch : u32 weak) -> u32\0A{\0A\09return (variant * 536870912) | (major * 4194304) | (minor * 4096) | patch;\0A};\0A\0AVkResult ::= enum\0A{\0A\09.VK_SUCCESS := 0;\0A\09.VK_NOT_READY := 1;\0A\09.VK_TIMEOUT := 2;\0A\09.VK_EVENT_SET := 3;\0A\09.VK_EVENT_RESET := 4;\0A\09.VK_INCOMPLETE := 5;\0A\09.VK_ERROR_OUT_OF_HOST_MEMORY := -1;\0A\09.VK_ERROR_OUT_OF_DEVICE_MEMORY := -2;\0A\09.VK_ERROR_INITIALIZATION_FAILED := -3;\0A\09.VK_ERROR_DEVICE_LOST := -4;\0A\09.VK_ERROR_MEMORY_MAP_FAILED := -5;\0A\09.VK_ERROR_LAYER_NOT_PRESENT := -6;\0A\09.VK_ERROR_EXTENSION_NOT_PRESENT := -7;\0A\09.VK_ERROR_FEATURE_NOT_PRESENT := -8;\0A\09.VK_ERROR_INCOMPATIBLE_DRIVER := -9;\0A\09.VK_ERROR_TOO_MANY_OBJECTS := -10;\0A\09.VK_ERROR_FORMAT_NOT_SUPPORTED := -11;\0A\09.VK_ERROR_FRAGMENTED_POOL := -12;\0A\09.VK_ERROR_UNKNOWN := -13;\0A\09.VK_ERROR_OUT_OF_POOL_MEMORY := -1000069000;\0A// Provided by VK_VERSION_1_1\0A\09.VK_ERROR_INVALID_EXTERNAL_HANDLE := -1000072003;\0A// Provided by VK_VERSION_1_2\0A\09.VK_ERROR_FRAGMENTATION := -1000161000;\0A// Provided by VK_VERSION_1_2\0A\09.VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS := -1000257000;\0A// Provided by VK_VERSION_1_3\0A\09.VK_PIPELINE_COMPILE_REQUIRED := 1000297000;\0A// Provided by VK_VERSION_1_4\0A\09.VK_ERROR_NOT_PERMITTED := -1000174001;\0A// Provided by VK_KHR_surface\0A\09.VK_ERROR_SURFACE_LOST_KHR := -1000000000;\0A// Provided by VK_KHR_surface\0A\09.VK_ERROR_NATIVE_WINDOW_IN_USE_KHR := -1000000001;\0A// Provided by VK_KHR_swapchain\0A\09.VK_SUBOPTIMAL_KHR := 1000001003;\0A// Provided by VK_KHR_swapchain\0A\09.VK_ERROR_OUT_OF_DATE_KHR := -1000001004;\0A// Provided by VK_KHR_display_swapchain\0A\09.VK_ERROR_INCOMPATIBLE_DISPLAY_KHR := -1000003001;\0A// Provided by VK_EXT_debug_report\0A\09.VK_ERROR_VALIDATION_FAILED_EXT := -1000011001;\0A// Provided by VK_NV_glsl_shader\0A\09.VK_ERROR_INVALID_SHADER_NV := -1000012000;\0A// Provided by VK_KHR_video_queue\0A\09.VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR := -1000023000;\0A// Provided by VK_KHR_video_queue\0A\09.VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR := -1000023001;\0A// Provided by VK_KHR_video_queue\0A\09.VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR := -1000023002;\0A// Provided by VK_KHR_video_queue\0A\09.VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR := -1000023003;\0A// Provided by VK_KHR_video_queue\0A\09.VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR := -1000023004;\0A// Provided by VK_KHR_video_queue\0A\09.VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR := -1000023005;\0A// Provided by VK_EXT_image_drm_format_modifier\0A\09.VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT := -1000158000;\0A// Provided by VK_EXT_full_screen_exclusive\0A\09.VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT := -1000255000;\0A// Provided by VK_KHR_deferred_host_operations\0A\09.VK_THREAD_IDLE_KHR := 1000268000;\0A// Provided by VK_KHR_deferred_host_operations\0A\09.VK_THREAD_DONE_KHR := 1000268001;\0A// Provided by VK_KHR_deferred_host_operations\0A\09.VK_OPERATION_DEFERRED_KHR := 1000268002;\0A// Provided by VK_KHR_deferred_host_operations\0A\09.VK_OPERATION_NOT_DEFERRED_KHR := 1000268003;\0A// Provided by VK_KHR_video_encode_queue\0A\09.VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR := -1000299000;\0A// Provided by VK_EXT_image_compression_control\0A\09.VK_ERROR_COMPRESSION_EXHAUSTED_EXT := -1000338000;\0A// Provided by VK_EXT_shader_object\0A\09.VK_INCOMPATIBLE_SHADER_BINARY_EXT := 1000482000;\0A// Provided by VK_KHR_pipeline_binary\0A\09.VK_PIPELINE_BINARY_MISSING_KHR := 1000483000;\0A// Provided by VK_KHR_pipeline_binary\0A\09.VK_ERROR_NOT_ENOUGH_SPACE_KHR := -1000483000;\0A};\0A\0Avk_check ::= func(result : s32) -> v0\0A{\0A\09res ::= result@s64@VkResult;\0A\09if(result != 0)\0A\09{\0A\09\09puts(\22vulkan call returned error code \22);\0A\09\09putsint(result);\0A\09\09puts(\22 (\22);\0A\09\09puts(__enumname(res));\0A\09\09puts(\22)\22);\0A\09\09putchar(10);\0A\09\09__debugbreak();\0A\09}\0A};\0A\0A== build ==\0A{\0A\09add_source_file(\22string.psy\22);\0A\09add_source_file(\22vec.psy\22);\0A\09add_link_library(\22Kernel32.lib\22);\0A}\0A")
!492 = !DISubroutineType(types: !493)
!493 = !{!147, !177, !147}
!494 = !DILocalVariable(name: "funcname", arg: 1, scope: !490, file: !491, line: 1175, type: !177)
!495 = !DILocation(line: 1175, scope: !490)
!496 = !DILocalVariable(name: "module", arg: 2, scope: !490, file: !491, line: 1175, type: !147)
!497 = !DILocation(line: 1177, column: 2, scope: !490)
!498 = !DILocalVariable(name: "addr", scope: !490, file: !491, line: 1177, type: !147)
!499 = !DILocation(line: 1177, scope: !490)
!500 = !DILocation(line: 1178, column: 2, scope: !490)
!501 = !DILocation(line: 1180, column: 3, scope: !490)
!502 = !DILocation(line: 1181, column: 3, scope: !490)
!503 = !DILocation(line: 1182, column: 3, scope: !490)
!504 = !DILocation(line: 1183, column: 3, scope: !490)
!505 = !DILocation(line: 1185, column: 2, scope: !490)
!506 = distinct !DISubprogram(scope: !491, file: !491, line: 1188, type: !492, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!507 = !DILocalVariable(name: "funcname", arg: 1, scope: !506, file: !491, line: 1188, type: !177)
!508 = !DILocation(line: 1188, scope: !506)
!509 = !DILocalVariable(name: "instance", arg: 2, scope: !506, file: !491, line: 1188, type: !147)
!510 = !DILocation(line: 1189, column: 1, scope: !506)
!511 = !DILocation(line: 1190, column: 2, scope: !506)
!512 = !DILocalVariable(name: "addr", scope: !506, file: !491, line: 1190, type: !147)
!513 = !DILocation(line: 1190, scope: !506)
!514 = !DILocation(line: 1191, column: 2, scope: !506)
!515 = !DILocation(line: 1193, column: 3, scope: !506)
!516 = !DILocation(line: 1194, column: 3, scope: !506)
!517 = !DILocation(line: 1195, column: 3, scope: !506)
!518 = !DILocation(line: 1196, column: 3, scope: !506)
!519 = !DILocation(line: 1198, column: 2, scope: !506)
!520 = distinct !DISubprogram(scope: !491, file: !491, line: 1203, type: !4, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!521 = !DILocation(line: 1205, column: 2, scope: !520)
!522 = !DILocalVariable(name: "initialised_driver", scope: !520, file: !491, line: 1205, type: !266)
!523 = !DILocation(line: 1205, scope: !520)
!524 = !DILocation(line: 1206, column: 2, scope: !520)
!525 = !DILocation(line: 1208, column: 3, scope: !520)
!526 = !DILocation(line: 1209, column: 3, scope: !520)
!527 = !DILocation(line: 1219, column: 2, scope: !520)
!528 = !DILocation(line: 1220, column: 2, scope: !520)
!529 = !DILocation(line: 1221, column: 2, scope: !520)
!530 = !DILocation(line: 1217, column: 8, scope: !520)
!531 = !DILocation(line: 1204, column: 1, scope: !520)
!532 = !DILocation(line: 1211, column: 4, scope: !520)
!533 = !DILocation(line: 1213, column: 3, scope: !520)
!534 = !DILocation(line: 1214, column: 3, scope: !520)
!535 = !DILocation(line: 1215, column: 3, scope: !520)
!536 = distinct !DISubprogram(scope: !491, file: !491, line: 1224, type: !152, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!537 = !DILocalVariable(name: "instance", arg: 1, scope: !536, file: !491, line: 1224, type: !147)
!538 = !DILocation(line: 1224, scope: !536)
!539 = !DILocation(line: 1226, column: 2, scope: !536)
!540 = !DILocation(line: 1227, column: 2, scope: !536)
!541 = !DILocation(line: 1229, column: 2, scope: !536)
!542 = !DILocation(line: 1230, column: 2, scope: !536)
!543 = !DILocation(line: 1234, column: 3, scope: !536)
!544 = !DILocation(line: 1236, column: 2, scope: !536)
!545 = !DILocation(line: 1237, column: 2, scope: !536)
!546 = !DILocation(line: 1238, column: 2, scope: !536)
!547 = !DILocation(line: 1239, column: 2, scope: !536)
!548 = !DILocation(line: 1240, column: 2, scope: !536)
!549 = !DILocation(line: 1242, column: 2, scope: !536)
!550 = !DILocation(line: 1244, column: 2, scope: !536)
!551 = !DILocation(line: 1245, column: 2, scope: !536)
!552 = !DILocation(line: 1246, column: 2, scope: !536)
!553 = !DILocation(line: 1247, column: 2, scope: !536)
!554 = !DILocation(line: 1248, column: 2, scope: !536)
!555 = !DILocation(line: 1249, column: 2, scope: !536)
!556 = !DILocation(line: 1251, column: 2, scope: !536)
!557 = !DILocation(line: 1252, column: 2, scope: !536)
!558 = !DILocation(line: 1253, column: 2, scope: !536)
!559 = !DILocation(line: 1254, column: 2, scope: !536)
!560 = !DILocation(line: 1255, column: 2, scope: !536)
!561 = !DILocation(line: 1257, column: 2, scope: !536)
!562 = !DILocation(line: 1258, column: 2, scope: !536)
!563 = !DILocation(line: 1259, column: 2, scope: !536)
!564 = !DILocation(line: 1261, column: 2, scope: !536)
!565 = !DILocation(line: 1262, column: 2, scope: !536)
!566 = !DILocation(line: 1263, column: 2, scope: !536)
!567 = !DILocation(line: 1265, column: 2, scope: !536)
!568 = !DILocation(line: 1266, column: 2, scope: !536)
!569 = !DILocation(line: 1268, column: 2, scope: !536)
!570 = !DILocation(line: 1269, column: 2, scope: !536)
!571 = !DILocation(line: 1271, column: 2, scope: !536)
!572 = !DILocation(line: 1272, column: 2, scope: !536)
!573 = !DILocation(line: 1273, column: 2, scope: !536)
!574 = !DILocation(line: 1274, column: 2, scope: !536)
!575 = !DILocation(line: 1276, column: 2, scope: !536)
!576 = !DILocation(line: 1277, column: 2, scope: !536)
!577 = !DILocation(line: 1279, column: 2, scope: !536)
!578 = !DILocation(line: 1280, column: 2, scope: !536)
!579 = !DILocation(line: 1282, column: 2, scope: !536)
!580 = !DILocation(line: 1283, column: 2, scope: !536)
!581 = !DILocation(line: 1285, column: 2, scope: !536)
!582 = !DILocation(line: 1287, column: 2, scope: !536)
!583 = !DILocation(line: 1288, column: 2, scope: !536)
!584 = !DILocation(line: 1290, column: 2, scope: !536)
!585 = !DILocation(line: 1291, column: 2, scope: !536)
!586 = !DILocation(line: 1292, column: 2, scope: !536)
!587 = !DILocation(line: 1294, column: 2, scope: !536)
!588 = !DILocation(line: 1295, column: 2, scope: !536)
!589 = !DILocation(line: 1296, column: 2, scope: !536)
!590 = !DILocation(line: 1298, column: 2, scope: !536)
!591 = !DILocation(line: 1299, column: 2, scope: !536)
!592 = !DILocation(line: 1300, column: 2, scope: !536)
!593 = !DILocation(line: 1302, column: 2, scope: !536)
!594 = !DILocation(line: 1303, column: 2, scope: !536)
!595 = !DILocation(line: 1304, column: 2, scope: !536)
!596 = !DILocation(line: 1306, column: 2, scope: !536)
!597 = !DILocation(line: 1307, column: 2, scope: !536)
!598 = !DILocation(line: 1308, column: 2, scope: !536)
!599 = !DILocation(line: 1309, column: 2, scope: !536)
!600 = !DILocation(line: 1310, column: 2, scope: !536)
!601 = !DILocation(line: 1311, column: 2, scope: !536)
!602 = !DILocation(line: 1312, column: 2, scope: !536)
!603 = !DILocation(line: 1313, column: 2, scope: !536)
!604 = !DILocation(line: 1314, column: 2, scope: !536)
!605 = !DILocation(line: 1315, column: 2, scope: !536)
!606 = !DILocation(line: 1316, column: 2, scope: !536)
!607 = !DILocation(line: 1317, column: 2, scope: !536)
!608 = !DILocation(line: 1318, column: 2, scope: !536)
!609 = !DILocation(line: 1319, column: 2, scope: !536)
!610 = !DILocation(line: 1320, column: 2, scope: !536)
!611 = !DILocation(line: 1321, column: 2, scope: !536)
!612 = !DILocation(line: 1323, column: 2, scope: !536)
!613 = !DILocation(line: 1225, column: 1, scope: !536)
!614 = distinct !DISubprogram(scope: !491, file: !491, line: 1326, type: !4, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!615 = !DILocation(line: 1329, column: 2, scope: !614)
!616 = !DILocation(line: 1331, column: 3, scope: !614)
!617 = !DILocation(line: 1332, column: 3, scope: !614)
!618 = !DILocation(line: 1327, column: 1, scope: !614)
!619 = distinct !DISubprogram(scope: !491, file: !491, line: 1336, type: !620, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!620 = !DISubroutineType(types: !621)
!621 = !{!43, !43, !43, !43, !43}
!622 = !DILocalVariable(name: "variant", arg: 1, scope: !619, file: !491, line: 1336, type: !43)
!623 = !DILocation(line: 1336, scope: !619)
!624 = !DILocalVariable(name: "major", arg: 2, scope: !619, file: !491, line: 1336, type: !43)
!625 = !DILocalVariable(name: "minor", arg: 3, scope: !619, file: !491, line: 1336, type: !43)
!626 = !DILocalVariable(name: "patch", arg: 4, scope: !619, file: !491, line: 1336, type: !43)
!627 = !DILocation(line: 1338, column: 2, scope: !619)
!628 = distinct !DISubprogram(scope: !491, file: !491, line: 1423, type: !629, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!629 = !DISubroutineType(types: !630)
!630 = !{!6, !631}
!631 = !DIBasicType(name: "s32", size: 32, encoding: DW_ATE_signed)
!632 = !DILocalVariable(name: "result", arg: 1, scope: !628, file: !491, line: 1423, type: !631)
!633 = !DILocation(line: 1423, scope: !628)
!634 = !DILocation(line: 1424, column: 1, scope: !628)
!635 = !DILocation(line: 1425, column: 2, scope: !628)
!636 = !DILocalVariable(name: "res", scope: !628, file: !491, line: 1425, type: !166)
!637 = !DILocation(line: 1425, scope: !628)
!638 = !DILocation(line: 1426, column: 2, scope: !628)
!639 = !DILocation(line: 1428, column: 3, scope: !628)
!640 = !DILocation(line: 1429, column: 3, scope: !628)
!641 = !DILocation(line: 1430, column: 3, scope: !628)
!642 = !DILocation(line: 1431, column: 3, scope: !628)
!643 = !DILocalVariable(name: "_enumname_result", scope: !628, file: !491, line: 1431, type: !177)
!644 = !DILocation(line: 1431, scope: !628)
!645 = !DILocation(line: 1432, column: 3, scope: !628)
!646 = !DILocation(line: 1433, column: 3, scope: !628)
!647 = !DILocation(line: 1434, column: 3, scope: !628)
!648 = distinct !DISubprogram(scope: !649, file: !649, line: 92, type: !152, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!649 = !DIFile(filename: "tz_wnd.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz\\src", source: "if static(__is_windows)\0A{\0A\09WNDCLASSEXA ::= struct\0A\09{\0A\09\09cbSize : u32;\0A\09\09style : u32;\0A\09\09wndproc : func(hwnd : u64, msg : u32, wparam : u64, lparam : s64) -> s64;\0A\09\09cbClsExtra : s32;\0A\09\09cbWndExtra : s32;\0A\09\09hInstance : u64;\0A\09\09hIcon : u64;\0A\09\09hCursor : u64;\0A\09\09hbrBackground : u64;\0A\09\09lpszMenuName : u8&;\0A\09\09lpszClassName : u8&;\0A\09\09hIconSm : u64;\0A\09};\0A\0A\09PostMessageA ::= func(hwnd : u64, msg : u32, wparam : u64, lparam : s64) -> s32 := extern;\0A\09DefWindowProcA ::= func(hwnd : u64, msg : u32, wparam : u64, lparam : s64) -> s64 := extern;\0A\09LoadIconA ::= func(hinstance : u64, lpIconName : u8&) -> u64 := extern;\0A\09LoadCursorA ::= func(hinstance : u64, lpIconName : u8&) -> u64 := extern;\0A\09RegisterClassExA ::= func(class : WNDCLASSEXA&) -> u16 := extern;\0A\09CreateWindowExA ::= func\0A\09(\0A\09\09dwExStyle : u32,\0A\09\09lpClassName : u8&,\0AlpWindowName : u8&,\0A\09\09dwStyle : u32,\0A\09\09x : s32,\0A\09\09y : s32,\0A\09\09nWidth : s32,\0A\09\09nHeight : s32,\0A\09\09hWndParent : u64,\0A\09\09hMenu : u64,\0A\09\09hInstance : u64,\0A\09\09lpParam : v0&\0A\09) -> u64 := extern;\0A\09ShowWindow ::= func(hwnd : u64, nCmdShow : s32) -> s32 := extern;\0A\0A\09DestroyWindow ::= func(hwnd : u64) -> s32 := extern;\0A\09PostQuitMessage ::= func(nExitCode : s32) -> v0 := extern;\0A\0A\09RECT ::= struct\0A\09{\0A\09\09left : s32;\0A\09\09top : s32;\0A\09\09right : s32;\0A\09\09bottom : s32;\0A\09};\0A\09GetClientRect ::= func(hwnd : u64, lpRect : RECT mut&) -> s32 := extern;\0A\09GetModuleHandleA ::= func(lpModuleName : u8&) -> u64 := extern;\0A\0A\09POINT ::= struct\0A\09{\0A\09\09x : s64;\0A\09\09y : s64;\0A\09};\0A\0A\09WINMSG ::= struct\0A\09{\0A\09\09hwnd : u64;\0A\09\09message : u32;\0A\09\09wparam : u64;\0A\09\09lparam : s64;\0A\09\09time : u64;\0A\09\09pt : POINT;\0A\09};\0A\0A\09CW_USEDEFAULT ::= -2147483648;\0A\0A\09PeekMessageA ::= func(lpMsg : WINMSG mut&, hwnd : u64, wMsgFilterMin : u32, wMsgFilterMax : u32, wRemoveMsg : u32) -> s32 := extern;\0A\09TranslateMessage ::= func(lpMsg : WINMSG&) -> s32 := extern;\0A\09DispatchMessageA ::= func(lpMsg : WINMSG&) -> s64 := extern;\0A\09SetWindowLongPtrA ::= func(hwnd : u64, nIndex : s32, dwNewLong : s64) -> s64 := extern;\0A\09GetWindowLongPtrA ::= func(hwnd : u64, nIndex : s32) -> s64 := extern;\0A}\0A\0Awindow_data_t ::= struct\0A{\0A\09handle : u64;\0A\09open : bool;\0A};\0A\0A[[private]]\0Awindows : window_data_t mut& mut;\0A[[private]]\0Awindow_count : u64 mut := 0;\0A[[private]]\0Awindow_cap : u64 mut := 0;\0A\0Aimpl_close_window ::= func(wndhandle : u64) -> v0\0A{\0A\09wndptr ::= windows at wndhandle;\0A\09(wndptr->open) = false;\0A\09DestroyWindow(wndptr->handle);\0A};\0A\0Aif static(__is_windows)\0A{\0A\09wndproc ::= func(hwnd : u64, msg : u32, wparam : u64, lparam : s64) -> s64\0A\09{\0A\09\09if(msg == 16) // WM_CLOSE\0A\09\09{\0A\09\09\09wndhandle ::= GetWindowLongPtrA(hwnd, 0);\0A\09\09\09impl_close_window(wndhandle@u64);\0A\09\09\09return 0;\0A\09\09}\0A\09\09if(msg == 2) // WM_DESTROY\0A\09\09{\0A\09\09\09PostQuitMessage(0);\0A\09\09\09return 0;\0A\09\09}\0A\09\09return DefWindowProcA(hwnd, msg, wparam, lparam);\0A\09};\0A\0A\09window_classname ::= \22Topaz\22;\0A\09window_class_registered : bool mut := false;\0A\0A\09register_wndclass ::= func() -> v0\0A\09{\0A\09\09hinst ::= GetModuleHandleA(null);\0A\09\09magic_int_resource ::= (32512@u64)@u8&;\0A\09\09COLOR_WINDOW ::= 5;\0A\09\09window_class ::= WNDCLASSEXA\0A\09\09{\0A\09\09\09.cbSize := __sizeof(WNDCLASSEXA);\0A\09\09\09.style := 43;\0A\09\09\09.wndproc := wndproc;\0A\09\09\09.cbClsExtra := __sizeof(u64);\0A\09\09\09.cbWndExtra := 0;\0A\09\09\09.hInstance := hinst;\0A\09\09\09.hIcon := LoadIconA(0, magic_int_resource);\0A\09\09\09.hCursor := LoadCursorA(0, magic_int_resource);\0A\09\09\09.hbrBackground := COLOR_WINDOW + 1;\0A\09\09\09.lpszMenuName := null;\0A\09\09\09.lpszClassName := window_classname;\0A\09\09\09.hIconSm := LoadIconA(0, magic_int_resource);\0A\09\09};\0A\09\09RegisterClassExA(ref window_class);\0A\09\09window_class_registered = true;\0A\09};\0A\0A\09unregister_wndclass ::= func() -> v0\0A\09{\0A\09\09window_class_registered = false;\0A\09};\0A}\0A\0Atz_wnd_window ::= enum\0A{\0A\09.invalid := -1;\0A};\0A\0Atz_wnd_open_window ::= func(w : u64, h : u64, title : u8&, a : arena mut&) -> tz_wnd_window\0A{\0A\09if(window_cap == 0)\0A\09{\0A\09\09initial_window_capacity ::= 8;\0A\09\09windows = arena_push(a, __sizeof(window_data_t) * initial_window_capacity);\0A\09\09window_cap = initial_window_capacity;\0A\09}\0A\09if(window_count >= window_cap)\0A\09{\0A\09\09new_capacity ::= window_cap * 2;\0A\09\09windows = arena_push(a, __sizeof(window_data_t) * new_capacity);\0A\09\09window_cap = new_capacity;\0A\09}\0A\09retid ::= window_count;\0A\09wndptr ::= windows at retid;\0A\09window_count = window_count + 1;\0A\0A\09if static(__is_windows)\0A\09{\0A\09\09hinst ::= GetModuleHandleA(null);\0A\09\09hwnd ::= CreateWindowExA(768, window_classname, title, 13565952, CW_USEDEFAULT, CW_USEDEFAULT, w@s32, h@s32, 0, 0, hinst, null);\0A\09\09if(hwnd == 0)\0A\09\09{\0A\09\09\09__debugbreak();\0A\09\09}\0A\0A\09\09ShowWindow(hwnd, 5);\0A\09\09deref(wndptr) = window_data_t\0A\09\09{\0A\09\09\09.handle := hwnd@u64;\0A\09\09\09.open := true;\0A\09\09};\0A\09\09SetWindowLongPtrA(hwnd, 0, retid@_);\0A\09\09(wndptr->handle) = hwnd;\0A\09\09return retid@_;\0A\09}\0A\09if static(__is_linux)\0A\09{\0A\09}\0A};\0A\0Atz_wnd_close_window ::= func(wnd : tz_wnd_window) -> v0\0A{\0A\09return impl_close_window(wnd@s64@u64);\0A};\0A\0Atz_wnd_is_open ::= func(wnd : tz_wnd_window) -> bool\0A{\0A\09wndptr ::= windows at (wnd@s64);\0A\09return wndptr->open;\0A};\0A\0Atz_wnd_update ::= func() -> v0\0A{\0A\09if static(__is_windows)\0A\09{\0A\09\09msg : WINMSG mut := WINMSG{};\0A\09\09mybool ::= PeekMessageA(ref msg, 0, 0, 0, 1);\0A\09\09if(mybool@bool)\0A\09\09{\0A\09\09\09TranslateMessage(ref msg);\0A\09\09\09DispatchMessageA(ref msg);\0A\09\09}\0A\09}\0A\09if static(__is_linux)\0A\09{\0A\09}\0A};\0A\0Atz_wnd_get_dimensions ::= func(wnd : tz_wnd_window) -> vec2u32\0A{\0A\09wndptr ::= windows at (wnd@s64);\0A\0A\09rect : RECT mut;\0A\09if(GetClientRect(wndptr->handle, ref rect) != 0)\0A\09{\0A\09\09return vec2u32{.x := ((rect.right) - (rect.left))@_; .y := ((rect.bottom) - (rect.top))@_;};\0A\09}\0A\09return vec2u32{.x := 0; .y := 0;};\0A};\0A\0A== build ==\0A{\0A\09add_source_file(\22vec.psy\22);\0A\09add_link_library(\22User32.lib\22);\0A\09add_link_library(\22Kernel32.lib\22);\0A}\0A")
!650 = !DILocalVariable(name: "wndhandle", arg: 1, scope: !648, file: !649, line: 92, type: !147)
!651 = !DILocation(line: 92, scope: !648)
!652 = !DILocation(line: 93, column: 1, scope: !648)
!653 = !DILocation(line: 94, column: 2, scope: !648)
!654 = !DILocalVariable(name: "wndptr", scope: !648, file: !649, line: 94, type: !655)
!655 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !656, size: 8)
!656 = !DICompositeType(tag: DW_TAG_structure_type, name: "window_data_t", scope: !649, file: !649, line: 80, size: 96, align: 32, flags: DIFlagPublic, elements: !657)
!657 = !{!658, !659}
!658 = !DIDerivedType(tag: DW_TAG_member, name: "handle", scope: !649, file: !649, line: 80, baseType: !147, size: 64, flags: DIFlagPublic)
!659 = !DIDerivedType(tag: DW_TAG_member, name: "open", scope: !649, file: !649, line: 80, baseType: !266, size: 8, offset: 64, flags: DIFlagPublic)
!660 = !DILocation(line: 94, scope: !648)
!661 = !DILocation(line: 95, column: 2, scope: !648)
!662 = !DILocation(line: 96, column: 2, scope: !648)
!663 = distinct !DISubprogram(scope: !649, file: !649, line: 101, type: !664, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!664 = !DISubroutineType(types: !665)
!665 = !{!166, !147, !43, !147, !166}
!666 = !DILocalVariable(name: "hwnd", arg: 1, scope: !663, file: !649, line: 101, type: !147)
!667 = !DILocation(line: 101, scope: !663)
!668 = !DILocalVariable(name: "msg", arg: 2, scope: !663, file: !649, line: 101, type: !43)
!669 = !DILocalVariable(name: "wparam", arg: 3, scope: !663, file: !649, line: 101, type: !147)
!670 = !DILocalVariable(name: "lparam", arg: 4, scope: !663, file: !649, line: 101, type: !166)
!671 = !DILocation(line: 103, column: 3, scope: !663)
!672 = !DILocation(line: 105, column: 4, scope: !663)
!673 = !DILocalVariable(name: "wndhandle", scope: !663, file: !649, line: 105, type: !166)
!674 = !DILocation(line: 105, scope: !663)
!675 = !DILocation(line: 106, column: 4, scope: !663)
!676 = !DILocation(line: 107, column: 4, scope: !663)
!677 = !DILocation(line: 109, column: 3, scope: !663)
!678 = !DILocation(line: 111, column: 4, scope: !663)
!679 = !DILocation(line: 112, column: 4, scope: !663)
!680 = !DILocation(line: 114, column: 3, scope: !663)
!681 = distinct !DISubprogram(scope: !649, file: !649, line: 120, type: !4, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!682 = !DILocation(line: 122, column: 3, scope: !681)
!683 = !DILocalVariable(name: "hinst", scope: !681, file: !649, line: 122, type: !147)
!684 = !DILocation(line: 122, scope: !681)
!685 = !DILocation(line: 123, column: 3, scope: !681)
!686 = !DILocalVariable(name: "magic_int_resource", scope: !681, file: !649, line: 123, type: !177)
!687 = !DILocation(line: 123, scope: !681)
!688 = !DILocation(line: 124, column: 3, scope: !681)
!689 = !DILocalVariable(name: "COLOR_WINDOW", scope: !681, file: !649, line: 124, type: !166)
!690 = !DILocation(line: 124, scope: !681)
!691 = !DILocation(line: 125, column: 3, scope: !681)
!692 = !DILocalVariable(name: "window_class", scope: !681, file: !649, line: 125, type: !693)
!693 = !DICompositeType(tag: DW_TAG_structure_type, name: "WNDCLASSEXA", scope: !649, file: !649, line: 4, size: 640, align: 64, flags: DIFlagPublic, elements: !694)
!694 = !{!695, !696, !697, !699, !700, !701, !702, !703, !704, !705, !706, !707}
!695 = !DIDerivedType(tag: DW_TAG_member, name: "cbSize", scope: !649, file: !649, line: 4, baseType: !43, size: 32, flags: DIFlagPublic)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !649, file: !649, line: 4, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "wndproc", scope: !649, file: !649, line: 4, baseType: !698, size: 64, offset: 64, flags: DIFlagPublic)
!698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 8)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "cbClsExtra", scope: !649, file: !649, line: 4, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "cbWndExtra", scope: !649, file: !649, line: 4, baseType: !631, size: 32, offset: 160, flags: DIFlagPublic)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "hInstance", scope: !649, file: !649, line: 4, baseType: !147, size: 64, offset: 192, flags: DIFlagPublic)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "hIcon", scope: !649, file: !649, line: 4, baseType: !147, size: 64, offset: 256, flags: DIFlagPublic)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "hCursor", scope: !649, file: !649, line: 4, baseType: !147, size: 64, offset: 320, flags: DIFlagPublic)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "hbrBackground", scope: !649, file: !649, line: 4, baseType: !147, size: 64, offset: 384, flags: DIFlagPublic)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "lpszMenuName", scope: !649, file: !649, line: 4, baseType: !177, size: 64, offset: 448, flags: DIFlagPublic)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "lpszClassName", scope: !649, file: !649, line: 4, baseType: !177, size: 64, offset: 512, flags: DIFlagPublic)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "hIconSm", scope: !649, file: !649, line: 4, baseType: !147, size: 64, offset: 576, flags: DIFlagPublic)
!708 = !DILocation(line: 125, scope: !681)
!709 = !DILocation(line: 140, column: 3, scope: !681)
!710 = !DILocation(line: 141, column: 3, scope: !681)
!711 = !DILocation(line: 121, column: 2, scope: !681)
!712 = distinct !DISubprogram(scope: !649, file: !649, line: 144, type: !4, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!713 = !DILocation(line: 146, column: 3, scope: !712)
!714 = !DILocation(line: 145, column: 2, scope: !712)
!715 = distinct !DISubprogram(scope: !649, file: !649, line: 155, type: !716, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!716 = !DISubroutineType(types: !717)
!717 = !{!166, !147, !147, !177, !227}
!718 = !DILocalVariable(name: "w", arg: 1, scope: !715, file: !649, line: 155, type: !147)
!719 = !DILocation(line: 155, scope: !715)
!720 = !DILocalVariable(name: "h", arg: 2, scope: !715, file: !649, line: 155, type: !147)
!721 = !DILocalVariable(name: "title", arg: 3, scope: !715, file: !649, line: 155, type: !177)
!722 = !DILocalVariable(name: "a", arg: 4, scope: !715, file: !649, line: 155, type: !227)
!723 = !DILocation(line: 157, column: 2, scope: !715)
!724 = !DILocation(line: 159, column: 3, scope: !715)
!725 = !DILocalVariable(name: "initial_window_capacity", scope: !715, file: !649, line: 159, type: !166)
!726 = !DILocation(line: 159, scope: !715)
!727 = !DILocation(line: 160, column: 3, scope: !715)
!728 = !DILocation(line: 161, column: 3, scope: !715)
!729 = !DILocation(line: 163, column: 2, scope: !715)
!730 = !DILocation(line: 164, column: 2, scope: !715)
!731 = !DILocation(line: 165, column: 3, scope: !715)
!732 = !DILocalVariable(name: "new_capacity", scope: !715, file: !649, line: 165, type: !147)
!733 = !DILocation(line: 165, scope: !715)
!734 = !DILocation(line: 166, column: 3, scope: !715)
!735 = !DILocation(line: 167, column: 3, scope: !715)
!736 = !DILocation(line: 169, column: 2, scope: !715)
!737 = !DILocalVariable(name: "retid", scope: !715, file: !649, line: 169, type: !147)
!738 = !DILocation(line: 169, scope: !715)
!739 = !DILocation(line: 170, column: 2, scope: !715)
!740 = !DILocalVariable(name: "wndptr", scope: !715, file: !649, line: 170, type: !655)
!741 = !DILocation(line: 170, scope: !715)
!742 = !DILocation(line: 171, column: 2, scope: !715)
!743 = !DILocation(line: 175, column: 3, scope: !715)
!744 = !DILocalVariable(name: "hinst", scope: !715, file: !649, line: 175, type: !147)
!745 = !DILocation(line: 175, scope: !715)
!746 = !DILocation(line: 176, column: 3, scope: !715)
!747 = !DILocalVariable(name: "hwnd", scope: !715, file: !649, line: 176, type: !147)
!748 = !DILocation(line: 176, scope: !715)
!749 = !DILocation(line: 177, column: 3, scope: !715)
!750 = !DILocation(line: 179, column: 4, scope: !715)
!751 = !DILocation(line: 182, column: 3, scope: !715)
!752 = !DILocation(line: 183, column: 3, scope: !715)
!753 = !DILocation(line: 188, column: 3, scope: !715)
!754 = !DILocation(line: 189, column: 3, scope: !715)
!755 = !DILocation(line: 190, column: 3, scope: !715)
!756 = distinct !DISubprogram(scope: !649, file: !649, line: 197, type: !164, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!757 = !DILocalVariable(name: "wnd", arg: 1, scope: !756, file: !649, line: 197, type: !166)
!758 = !DILocation(line: 197, scope: !756)
!759 = !DILocation(line: 199, column: 2, scope: !756)
!760 = !DILocation(line: 198, column: 1, scope: !756)
!761 = distinct !DISubprogram(scope: !649, file: !649, line: 202, type: !762, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!762 = !DISubroutineType(types: !763)
!763 = !{!266, !166}
!764 = !DILocalVariable(name: "wnd", arg: 1, scope: !761, file: !649, line: 202, type: !166)
!765 = !DILocation(line: 202, scope: !761)
!766 = !DILocation(line: 203, column: 1, scope: !761)
!767 = !DILocation(line: 204, column: 2, scope: !761)
!768 = !DILocalVariable(name: "wndptr", scope: !761, file: !649, line: 204, type: !655)
!769 = !DILocation(line: 204, scope: !761)
!770 = !DILocation(line: 205, column: 2, scope: !761)
!771 = distinct !DISubprogram(scope: !649, file: !649, line: 208, type: !4, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!772 = !DILocation(line: 212, column: 3, scope: !771)
!773 = !DILocalVariable(name: "msg", scope: !771, file: !649, line: 212, type: !774)
!774 = !DICompositeType(tag: DW_TAG_structure_type, name: "WINMSG", scope: !649, file: !649, line: 61, size: 416, align: 32, flags: DIFlagPublic, elements: !775)
!775 = !{!776, !777, !778, !779, !780, !781}
!776 = !DIDerivedType(tag: DW_TAG_member, name: "hwnd", scope: !649, file: !649, line: 61, baseType: !147, size: 64, flags: DIFlagPublic)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "message", scope: !649, file: !649, line: 61, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "wparam", scope: !649, file: !649, line: 61, baseType: !147, size: 64, offset: 96, flags: DIFlagPublic)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "lparam", scope: !649, file: !649, line: 61, baseType: !166, size: 64, offset: 160, flags: DIFlagPublic)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !649, file: !649, line: 61, baseType: !147, size: 64, offset: 224, flags: DIFlagPublic)
!781 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !649, file: !649, line: 61, baseType: !782, size: 128, offset: 288, flags: DIFlagPublic)
!782 = !DICompositeType(tag: DW_TAG_structure_type, name: "POINT", scope: !649, file: !649, line: 55, size: 128, align: 32, flags: DIFlagPublic, elements: !783)
!783 = !{!784, !785}
!784 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !649, file: !649, line: 55, baseType: !166, size: 64, flags: DIFlagPublic)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !649, file: !649, line: 55, baseType: !166, size: 64, offset: 64, flags: DIFlagPublic)
!786 = !DILocation(line: 212, scope: !771)
!787 = !DILocation(line: 213, column: 3, scope: !771)
!788 = !DILocalVariable(name: "mybool", scope: !771, file: !649, line: 213, type: !631)
!789 = !DILocation(line: 213, scope: !771)
!790 = !DILocation(line: 214, column: 3, scope: !771)
!791 = !DILocation(line: 216, column: 4, scope: !771)
!792 = !DILocation(line: 217, column: 4, scope: !771)
!793 = !DILocation(line: 209, column: 1, scope: !771)
!794 = distinct !DISubprogram(scope: !649, file: !649, line: 225, type: !795, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!795 = !DISubroutineType(types: !796)
!796 = !{!40, !166}
!797 = !DILocalVariable(name: "wnd", arg: 1, scope: !794, file: !649, line: 225, type: !166)
!798 = !DILocation(line: 225, scope: !794)
!799 = !DILocation(line: 226, column: 1, scope: !794)
!800 = !DILocation(line: 227, column: 2, scope: !794)
!801 = !DILocalVariable(name: "wndptr", scope: !794, file: !649, line: 227, type: !655)
!802 = !DILocation(line: 227, scope: !794)
!803 = !DILocation(line: 229, column: 2, scope: !794)
!804 = !DILocalVariable(name: "rect", scope: !794, file: !649, line: 229, type: !805)
!805 = !DICompositeType(tag: DW_TAG_structure_type, name: "RECT", scope: !649, file: !649, line: 45, size: 128, align: 32, flags: DIFlagPublic, elements: !806)
!806 = !{!807, !808, !809, !810}
!807 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !649, file: !649, line: 45, baseType: !631, size: 32, flags: DIFlagPublic)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !649, file: !649, line: 45, baseType: !631, size: 32, offset: 32, flags: DIFlagPublic)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !649, file: !649, line: 45, baseType: !631, size: 32, offset: 64, flags: DIFlagPublic)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "bottom", scope: !649, file: !649, line: 45, baseType: !631, size: 32, offset: 96, flags: DIFlagPublic)
!811 = !DILocation(line: 229, scope: !794)
!812 = !DILocation(line: 230, column: 2, scope: !794)
!813 = !DILocation(line: 232, column: 3, scope: !794)
!814 = !DILocation(line: 234, column: 2, scope: !794)
!815 = distinct !DISubprogram(scope: !816, file: !816, line: 71, type: !817, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!816 = !DIFile(filename: "file.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz\\src", source: "if static(__is_windows)\0A{\0A\09GetFileAttributesA ::= func(lpFileName : u8&) -> u32 := extern;\0A\09CreateFileA ::= func(\0A\09\09lpFileName : u8&,\0A\09\09dwDesiredAccess : u32,\0A\09\09dwShareMode : u32,\0A\09\09lpSecurityAttributes : u64,\0A\09\09dwCreationDisposition : u32,\0A\09\09dwFlagsAndAttributes : u32,\0A\09\09hTemplateFile : u64) -> u64 := extern;\0A\09GetFileSizeEx ::= func(hFile : u64, lpFileSize : s64 mut&) -> s32 := extern;\0A\09CloseHandle ::= func(hObject : u64) -> s32 := extern;\0A\09ReadFile ::= func(\0A\09\09hFile : u64,\0A\09\09lpBuffer : u8 mut&,\0A\09\09nNumberOfBytesToRead : u32,\0A\09\09lpNumberOfBytesRead : u32 mut&,\0A\09\09lpOverlapped : u64) -> s32 := extern;\0A\09WriteFile ::= func(\0A\09\09hFile : u64,\0A\09\09lpBuffer : u8&,\0A\09\09nNumberOfBytesToWrite : u32,\0A\09\09lpNumberOfBytesWritten : u32 mut&,\0A\09\09lpOverlapped : u64) -> s32 := extern;\0A\09DeleteFileA ::= func(lpFileName : u8&) -> s32 := extern;\0A\09CreateDirectoryA ::= func(lpPathName : u8&, lpSecurityAttributes : u64) -> s32 := extern;\0A\0A\09SHFILEOPSTRUCTA ::= struct\0A\09{\0A\09\09hwnd : u64;\0A\09\09wFunc : u32;\0A\09\09pFrom : u8&;\0A\09\09pTo : u8&;\0A\09\09fFlags : s32;\0A\09\09fAnyOperationsAborted : s32;\0A\09\09hNameMappings : v0&;\0A\09\09lpszProgressTitle : u8&;\0A\09};\0A\0A\09SHFileOperationA ::= func(lpFileOp : SHFILEOPSTRUCTA&) -> s32 := extern;\0A\0A\09FILETIME ::= struct\0A\09{\0A\09\09dwLowDateTime : u32;\0A\09\09dwHighDateTime : u32;\0A\09};\0A\0A\09WIN32_FIND_DATAA ::= struct\0A\09{\0A\09\09dwFileAttributes : u32;\0A\09\09ftCreationTime : FILETIME;\0A\09\09ftLastAccessTime : FILETIME;\0A\09\09ftLastWriteTime : FILETIME;\0A\09\09nFileSizeHigh : u32;\0A\09\09nFileSizeLow : u32;\0A\09\09dwReserved0 : u32;\0A\09\09dwReserved1 : u32;\0A\09\09cFileName : u8#260;\0A\09\09cAlternateFileName : u8#14;\0A\09\09dwFileType : u32;\0A\09\09dwCreatorType : u32;\0A\09\09wFinderFlags : u32;\0A\09};\0A\0A\09FindFirstFileA ::= func(lpFileName : u8&, lpFindFileData : WIN32_FIND_DATAA mut&) -> u64 := extern;\0A\09FindNextFileA ::= func(hFindFile : u64, lpFindFileData : WIN32_FIND_DATAA mut&) -> s32 := extern;\0A\09FindClose ::= func(hFindFile : u64) -> s32 := extern;\0A}\0A\0Afile_exists ::= func(path : u8&) -> bool\0A{\0A\09if static(__is_windows)\0A\09{\0A\09\09attribs ::= GetFileAttributesA(path);\0A\09\09return attribs != 0xFFFFFFFF;\0A\09}\0A\09if static(__is_linux)\0A\09{\0A\09\09__error(\22file_exists linux support NYI\22);\0A\09}\0A};\0A\0Afile_size_bytes ::= func(path : u8&) -> u64\0A{\0A\09if static(__is_windows)\0A\09{\0A\09\09// CreateFile in this context is cheap, don't worry.\0A\09\09handle ::= CreateFileA(path, 0x80000000, 3, 0, 3, 128, 0);\0A\09\09defer CloseHandle(handle);\0A\09\09if(handle == -1)\0A\09\09{\0A\09\09\09// probably file didnt exist.\0A\09\09\09return 0;\0A\09\09}\0A\0A\09\09size : s64 mut;\0A\09\09if(GetFileSizeEx(handle, ref size) == 0)\0A\09\09{\0A\09\09\09// failed for some reason.\0A\09\09\09CloseHandle(handle);\0A\09\09\09return 0;\0A\09\09}\0A\09\09return size@_;\0A\09}\0A\09if static(__is_linux)\0A\09{\0A\09\09__error(\22file_size_bytes linux support NYI\22);\0A\09}\0A};\0A\0Afile_read ::= func(path : u8&, buf : u8 mut&, buflen : u64) -> v0\0A{\0A\09if static(__is_windows)\0A\09{\0A\09\09handle ::= CreateFileA(path, 0x80000000, 3, 0, 3, 128, 0);\0A\09\09defer CloseHandle(handle);\0A\09\09if(handle == (-1@u64)@_)\0A\09\09{\0A\09\09\09return;\0A\09\09}\0A\0A\09\09ReadFile(handle, buf, buflen@_, null, 0);\0A\09}\0A\09if static(__is_linux)\0A\09{\0A\09\09__error(\22file_read linux support NYI\22);\0A\09}\0A};\0A\0Afile_write ::= func(path : u8&, buf : u8&, buflen : u64) -> v0\0A{\0A\09if static(__is_windows)\0A\09{\0A\09\09handle ::= CreateFileA(path, 0x40000000, 3, 0, 3, 128, 0);\0A\09\09defer CloseHandle(handle);\0A\09\09if(handle == (-1@u64)@_)\0A\09\09{\0A\09\09\09return;\0A\09\09}\0A\0A\09\09WriteFile(handle, buf, buflen@_, null, 0);\0A\09}\0A\09if static(__is_linux)\0A\09{\0A\09\09__error(\22file_read linux support NYI\22);\0A\09}\0A};\0A\0Afile_create ::= func(path : u8&) -> bool\0A{\0A\09if static(__is_windows)\0A\09{\0A\09\09handle ::= CreateFileA(path, 0x40000000, 3, 0, 1, 128, 0);\0A\09\09defer CloseHandle(handle);\0A\09\09if(handle == (-1@u64)@_)\0A\09\09{\0A\09\09\09return false;\0A\09\09}\0A\09\09return true;\0A\09}\0A\09if static(__is_linux)\0A\09{\0A\09\09__error(\22file_create linux support NYI\22);\0A\09}\0A};\0A\0Afile_delete ::= func(path : u8&) -> bool\0A{\0A\09if static(__is_windows)\0A\09{\0A\09\09return DeleteFileA(path) != 0;\0A\09}\0A\09if static(__is_linux)\0A\09{\0A\09\09__error(\22file_delete linux support NYI\22);\0A\09}\0A};\0A\0Adirectory_create ::= func(path : u8&) -> bool\0A{\0A\09if static(__is_windows)\0A\09{\0A\09\09winbool ::= CreateDirectoryA(path, 0);\0A\09\09return winbool != 0;\0A\09}\0A\09if static(__is_linux)\0A\09{\0A\09\09__error(\22directory_create linux support NYI\22);\0A\09}\0A};\0A\0Adirectory_delete ::= func(path : u8&, a : arena mut&) -> bool\0A{\0A\09if static(__is_windows)\0A\09{\0A\09\09// note: pFrom must be *double* null terminated.\0A\09\09// pain.\0A\09\09strlen ::= cstrlen(path);\0A\09\09pathbuf : u8 mut& := arena_push(a, strlen + 2);\0A\09\09strcpy(pathbuf, path, strlen);\0A\09\09deref(pathbuf at strlen) = 0;\0A\09\09deref(pathbuf at (strlen + 1)) = 0;\0A\0A\09\09file_op ::= SHFILEOPSTRUCTA\0A\09\09{\0A\09\09\09.hwnd := 0;\0A\09\09\09.wFunc := 3;\0A\09\09\09.pFrom := pathbuf;\0A\09\09\09.pTo := \22\22;\0A\09\09\09.fFlags := 0x0414;\0A\09\09\09.fAnyOperationsAborted := 0;\0A\09\09\09.hNameMappings := null;\0A\09\09\09.lpszProgressTitle := \22\22;\0A\0A\09\09};\0A\09\09return SHFileOperationA(ref file_op) == 0;\0A\09}\0A\09if static(__is_linux)\0A\09{\0A\09\09__error(\22directory_delete linux support NYI\22);\0A\09}\0A};\0A\0A[[private]]\0Aprivate_dir_iter ::= func(find : WIN32_FIND_DATAA mut&, callback : func(path : u8&) -> v0) -> v0\0A{\0A\09if(!cstreql(find->cFileName at 0, \22.\22))\0A\09{\0A\09\09if(!cstreql(find->cFileName at 0, \22..\22))\0A\09\09{\0A\09\09\09callback(find->cFileName at 0);\0A\09\09}\0A\09}\0A};\0A\0Adirectory_iterate ::= func(path : u8&, callback : func(path : u8&) -> v0, a : arena mut&) -> v0\0A{\0A\09// we're given a directory name\0A\09// we want to search dirname/*\0A\09bufsize ::= cstrlen(path) + 2;\0A\09buf : u8 mut& := arena_push(a, bufsize);\0A\09strcpy(buf, path, bufsize - 2);\0A\09deref(buf at (bufsize - 2)) = '/';\0A\09deref(buf at (bufsize - 1)) = '*';\0A\0A\09find : WIN32_FIND_DATAA mut;\0A\09handle ::= FindFirstFileA(buf, ref find);\0A\09if(handle == -1)\0A\09{\0A\09\09return;\0A\09}\0A\09private_dir_iter(ref find, callback);\0A\09while(FindNextFileA(handle, ref find) != 0)\0A\09{\0A\09\09private_dir_iter(ref find, callback);\0A\09}\0A\09FindClose(handle);\0A};\0A\0A== build ==\0A{\0A\09if static(__is_windows)\0A\09{\0A\09\09add_link_library(\22Kernel32.lib\22);\0A\09\09add_link_library(\22Shell32.lib\22);\0A\09}\0A}\0A")
!817 = !DISubroutineType(types: !818)
!818 = !{!266, !177}
!819 = !DILocalVariable(name: "path", arg: 1, scope: !815, file: !816, line: 71, type: !177)
!820 = !DILocation(line: 71, scope: !815)
!821 = !DILocation(line: 75, column: 3, scope: !815)
!822 = !DILocalVariable(name: "attribs", scope: !815, file: !816, line: 75, type: !43)
!823 = !DILocation(line: 75, scope: !815)
!824 = !DILocation(line: 76, column: 3, scope: !815)
!825 = distinct !DISubprogram(scope: !816, file: !816, line: 84, type: !175, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!826 = !DILocalVariable(name: "path", arg: 1, scope: !825, file: !816, line: 84, type: !177)
!827 = !DILocation(line: 84, scope: !825)
!828 = !DILocation(line: 89, column: 3, scope: !825)
!829 = !DILocalVariable(name: "handle", scope: !825, file: !816, line: 89, type: !147)
!830 = !DILocation(line: 89, scope: !825)
!831 = !DILocation(line: 91, column: 3, scope: !825)
!832 = !DILocation(line: 94, column: 4, scope: !825)
!833 = !DILocation(line: 97, column: 3, scope: !825)
!834 = !DILocalVariable(name: "size", scope: !825, file: !816, line: 97, type: !166)
!835 = !DILocation(line: 97, scope: !825)
!836 = !DILocation(line: 98, column: 3, scope: !825)
!837 = !DILocation(line: 101, column: 4, scope: !825)
!838 = !DILocation(line: 102, column: 4, scope: !825)
!839 = !DILocation(line: 90, column: 9, scope: !825)
!840 = !DILocation(line: 104, column: 3, scope: !825)
!841 = distinct !DISubprogram(scope: !816, file: !816, line: 112, type: !300, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!842 = !DILocalVariable(name: "path", arg: 1, scope: !841, file: !816, line: 112, type: !177)
!843 = !DILocation(line: 112, scope: !841)
!844 = !DILocalVariable(name: "buf", arg: 2, scope: !841, file: !816, line: 112, type: !177)
!845 = !DILocalVariable(name: "buflen", arg: 3, scope: !841, file: !816, line: 112, type: !147)
!846 = !DILocation(line: 116, column: 3, scope: !841)
!847 = !DILocalVariable(name: "handle", scope: !841, file: !816, line: 116, type: !147)
!848 = !DILocation(line: 116, scope: !841)
!849 = !DILocation(line: 118, column: 3, scope: !841)
!850 = !DILocation(line: 120, column: 4, scope: !841)
!851 = !DILocation(line: 123, column: 3, scope: !841)
!852 = !DILocation(line: 117, column: 9, scope: !841)
!853 = !DILocation(line: 113, column: 1, scope: !841)
!854 = distinct !DISubprogram(scope: !816, file: !816, line: 131, type: !300, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!855 = !DILocalVariable(name: "path", arg: 1, scope: !854, file: !816, line: 131, type: !177)
!856 = !DILocation(line: 131, scope: !854)
!857 = !DILocalVariable(name: "buf", arg: 2, scope: !854, file: !816, line: 131, type: !177)
!858 = !DILocalVariable(name: "buflen", arg: 3, scope: !854, file: !816, line: 131, type: !147)
!859 = !DILocation(line: 135, column: 3, scope: !854)
!860 = !DILocalVariable(name: "handle", scope: !854, file: !816, line: 135, type: !147)
!861 = !DILocation(line: 135, scope: !854)
!862 = !DILocation(line: 137, column: 3, scope: !854)
!863 = !DILocation(line: 139, column: 4, scope: !854)
!864 = !DILocation(line: 142, column: 3, scope: !854)
!865 = !DILocation(line: 136, column: 9, scope: !854)
!866 = !DILocation(line: 132, column: 1, scope: !854)
!867 = distinct !DISubprogram(scope: !816, file: !816, line: 150, type: !817, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!868 = !DILocalVariable(name: "path", arg: 1, scope: !867, file: !816, line: 150, type: !177)
!869 = !DILocation(line: 150, scope: !867)
!870 = !DILocation(line: 154, column: 3, scope: !867)
!871 = !DILocalVariable(name: "handle", scope: !867, file: !816, line: 154, type: !147)
!872 = !DILocation(line: 154, scope: !867)
!873 = !DILocation(line: 156, column: 3, scope: !867)
!874 = !DILocation(line: 158, column: 4, scope: !867)
!875 = !DILocation(line: 155, column: 9, scope: !867)
!876 = !DILocation(line: 160, column: 3, scope: !867)
!877 = distinct !DISubprogram(scope: !816, file: !816, line: 168, type: !817, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!878 = !DILocalVariable(name: "path", arg: 1, scope: !877, file: !816, line: 168, type: !177)
!879 = !DILocation(line: 168, scope: !877)
!880 = !DILocation(line: 172, column: 3, scope: !877)
!881 = distinct !DISubprogram(scope: !816, file: !816, line: 180, type: !817, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!882 = !DILocalVariable(name: "path", arg: 1, scope: !881, file: !816, line: 180, type: !177)
!883 = !DILocation(line: 180, scope: !881)
!884 = !DILocation(line: 184, column: 3, scope: !881)
!885 = !DILocalVariable(name: "winbool", scope: !881, file: !816, line: 184, type: !631)
!886 = !DILocation(line: 184, scope: !881)
!887 = !DILocation(line: 185, column: 3, scope: !881)
!888 = distinct !DISubprogram(scope: !816, file: !816, line: 193, type: !889, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!889 = !DISubroutineType(types: !890)
!890 = !{!266, !177, !227}
!891 = !DILocalVariable(name: "path", arg: 1, scope: !888, file: !816, line: 193, type: !177)
!892 = !DILocation(line: 193, scope: !888)
!893 = !DILocalVariable(name: "a", arg: 2, scope: !888, file: !816, line: 193, type: !227)
!894 = !DILocation(line: 199, column: 3, scope: !888)
!895 = !DILocalVariable(name: "strlen", scope: !888, file: !816, line: 199, type: !147)
!896 = !DILocation(line: 199, scope: !888)
!897 = !DILocation(line: 200, column: 3, scope: !888)
!898 = !DILocalVariable(name: "pathbuf", scope: !888, file: !816, line: 200, type: !177)
!899 = !DILocation(line: 200, scope: !888)
!900 = !DILocation(line: 201, column: 3, scope: !888)
!901 = !DILocation(line: 202, column: 3, scope: !888)
!902 = !DILocation(line: 203, column: 3, scope: !888)
!903 = !DILocation(line: 205, column: 3, scope: !888)
!904 = !DILocalVariable(name: "file_op", scope: !888, file: !816, line: 205, type: !905)
!905 = !DICompositeType(tag: DW_TAG_structure_type, name: "SHFILEOPSTRUCTA", scope: !816, file: !816, line: 30, size: 448, align: 64, flags: DIFlagPublic, elements: !906)
!906 = !{!907, !908, !909, !910, !911, !912, !913, !914}
!907 = !DIDerivedType(tag: DW_TAG_member, name: "hwnd", scope: !816, file: !816, line: 30, baseType: !147, size: 64, flags: DIFlagPublic)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "wFunc", scope: !816, file: !816, line: 30, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "pFrom", scope: !816, file: !816, line: 30, baseType: !177, size: 64, offset: 128, flags: DIFlagPublic)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "pTo", scope: !816, file: !816, line: 30, baseType: !177, size: 64, offset: 192, flags: DIFlagPublic)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "fFlags", scope: !816, file: !816, line: 30, baseType: !631, size: 32, offset: 256, flags: DIFlagPublic)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "fAnyOperationsAborted", scope: !816, file: !816, line: 30, baseType: !631, size: 32, offset: 288, flags: DIFlagPublic)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "hNameMappings", scope: !816, file: !816, line: 30, baseType: !214, size: 64, offset: 320, flags: DIFlagPublic)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "lpszProgressTitle", scope: !816, file: !816, line: 30, baseType: !177, size: 64, offset: 384, flags: DIFlagPublic)
!915 = !DILocation(line: 205, scope: !888)
!916 = !DILocation(line: 217, column: 3, scope: !888)
!917 = distinct !DISubprogram(scope: !816, file: !816, line: 226, type: !918, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!918 = !DISubroutineType(types: !919)
!919 = !{!6, !920, !698}
!920 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !921, size: 8)
!921 = !DICompositeType(tag: DW_TAG_structure_type, name: "WIN32_FIND_DATAA", scope: !816, file: !816, line: 50, size: 2656, align: 32, flags: DIFlagPublic, elements: !922)
!922 = !{!923, !924, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939}
!923 = !DIDerivedType(tag: DW_TAG_member, name: "dwFileAttributes", scope: !816, file: !816, line: 50, baseType: !43, size: 32, flags: DIFlagPublic)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "ftCreationTime", scope: !816, file: !816, line: 50, baseType: !925, size: 64, offset: 32, flags: DIFlagPublic)
!925 = !DICompositeType(tag: DW_TAG_structure_type, name: "FILETIME", scope: !816, file: !816, line: 44, size: 64, align: 32, flags: DIFlagPublic, elements: !926)
!926 = !{!927, !928}
!927 = !DIDerivedType(tag: DW_TAG_member, name: "dwLowDateTime", scope: !816, file: !816, line: 44, baseType: !43, size: 32, flags: DIFlagPublic)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "dwHighDateTime", scope: !816, file: !816, line: 44, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "ftLastAccessTime", scope: !816, file: !816, line: 50, baseType: !925, size: 64, offset: 96, flags: DIFlagPublic)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "ftLastWriteTime", scope: !816, file: !816, line: 50, baseType: !925, size: 64, offset: 160, flags: DIFlagPublic)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "nFileSizeHigh", scope: !816, file: !816, line: 50, baseType: !43, size: 32, offset: 224, flags: DIFlagPublic)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "nFileSizeLow", scope: !816, file: !816, line: 50, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "dwReserved0", scope: !816, file: !816, line: 50, baseType: !43, size: 32, offset: 288, flags: DIFlagPublic)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "dwReserved1", scope: !816, file: !816, line: 50, baseType: !43, size: 32, offset: 320, flags: DIFlagPublic)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "cFileName", scope: !816, file: !816, line: 50, baseType: !177, size: 2080, offset: 352, flags: DIFlagPublic)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "cAlternateFileName", scope: !816, file: !816, line: 50, baseType: !177, size: 112, offset: 2432, flags: DIFlagPublic)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "dwFileType", scope: !816, file: !816, line: 50, baseType: !43, size: 32, offset: 2560, flags: DIFlagPublic)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "dwCreatorType", scope: !816, file: !816, line: 50, baseType: !43, size: 32, offset: 2592, flags: DIFlagPublic)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "wFinderFlags", scope: !816, file: !816, line: 50, baseType: !43, size: 32, offset: 2624, flags: DIFlagPublic)
!940 = !DILocalVariable(name: "find", arg: 1, scope: !917, file: !816, line: 226, type: !920)
!941 = !DILocation(line: 226, scope: !917)
!942 = !DILocalVariable(name: "callback", arg: 2, scope: !917, file: !816, line: 226, type: !698)
!943 = !DILocation(line: 228, column: 2, scope: !917)
!944 = !DILocation(line: 230, column: 3, scope: !917)
!945 = !DILocation(line: 227, column: 1, scope: !917)
!946 = !DILocation(line: 232, column: 4, scope: !917)
!947 = distinct !DISubprogram(scope: !816, file: !816, line: 237, type: !948, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!948 = !DISubroutineType(types: !949)
!949 = !{!6, !177, !698, !227}
!950 = !DILocalVariable(name: "path", arg: 1, scope: !947, file: !816, line: 237, type: !177)
!951 = !DILocation(line: 237, scope: !947)
!952 = !DILocalVariable(name: "callback", arg: 2, scope: !947, file: !816, line: 237, type: !698)
!953 = !DILocalVariable(name: "a", arg: 3, scope: !947, file: !816, line: 237, type: !227)
!954 = !DILocation(line: 241, column: 2, scope: !947)
!955 = !DILocalVariable(name: "bufsize", scope: !947, file: !816, line: 241, type: !147)
!956 = !DILocation(line: 241, scope: !947)
!957 = !DILocation(line: 242, column: 2, scope: !947)
!958 = !DILocalVariable(name: "buf", scope: !947, file: !816, line: 242, type: !177)
!959 = !DILocation(line: 242, scope: !947)
!960 = !DILocation(line: 243, column: 2, scope: !947)
!961 = !DILocation(line: 244, column: 2, scope: !947)
!962 = !DILocation(line: 245, column: 2, scope: !947)
!963 = !DILocation(line: 247, column: 2, scope: !947)
!964 = !DILocalVariable(name: "find", scope: !947, file: !816, line: 247, type: !921)
!965 = !DILocation(line: 247, scope: !947)
!966 = !DILocation(line: 248, column: 2, scope: !947)
!967 = !DILocalVariable(name: "handle", scope: !947, file: !816, line: 248, type: !147)
!968 = !DILocation(line: 248, scope: !947)
!969 = !DILocation(line: 249, column: 2, scope: !947)
!970 = !DILocation(line: 251, column: 3, scope: !947)
!971 = !DILocation(line: 253, column: 2, scope: !947)
!972 = !DILocation(line: 254, column: 2, scope: !947)
!973 = !DILocation(line: 256, column: 3, scope: !947)
!974 = !DILocation(line: 255, column: 2, scope: !947)
!975 = !DILocation(line: 258, column: 2, scope: !947)
!976 = !DILocation(line: 238, column: 1, scope: !947)
!977 = distinct !DISubprogram(scope: !978, file: !978, line: 336, type: !979, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!978 = !DIFile(filename: "tz_gpu.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz\\src", source: "tz_gpu_appinfo ::= struct\0A{\0A\09name : u8&;\0A\09ver_maj : u32;\0A\09ver_min : u32;\0A};\0A\0Atz_gpu_err ::= enum\0A{\0A\09.none := 0;\0A\09.unknown := 1;\0A};\0A\0Atz_gpu_hardware_type ::= enum\0A{\0A\09.gpu := 0;\0A\09.igpu := 1;\0A\09.cpu := 2;\0A\09.unknown := 3;\0A};\0A\0Atz_gpu_hardware_caps ::= enum\0A{\0A\09.graphics_compute := 0;\0A\09.graphics_only := 1;\0A\09.compute_only := 2;\0A\09.none := 3;\0A};\0A\0Atz_gpu_hardware ::= struct\0A{\0A\09name : string;\0A\09target_heap_gpu : u64;\0A\09target_heap_cpu : u64;\0A\09vram_size_mib : u64;\0A\09type : tz_gpu_hardware_type;\0A\09caps : tz_gpu_hardware_caps;\0A\09id : u32;\0A\09native_handle : u64;\0A};\0A\0Atz_gpu_buffer_flag ::= enum\0A{\0A\09.none := 0b0000;\0A\09.dynamic := 0b0001;\0A\09.index_buffer := 0b0010;\0A\09.draw_buffer := 0b0100;\0A};\0A\0Atz_gpu_image_flag ::= enum\0A{\0A\09.none := 0;\0A};\0A\0Atz_gpu_resource_flag ::= enum\0A{\0A\09.none := 0;\0A\09// ignore tz_gpu_resource_info.data, fill size with zeroes.\0A\09.zero_memory := 0b00000001;\0A};\0A\0Atz_gpu_image_type ::= enum\0A{\0A\09.rgba := 0;\0A\09.depth := 1;\0A};\0A\0Atz_gpu_resource_info ::= struct\0A{\0A\09data : v0& weak;\0A\09data_size : u64;\0A\09image_dimensions : vec2u32;\0A\09image_type : tz_gpu_image_type;\0A\09flags : tz_gpu_resource_flag;\0A\09buffer_flags : tz_gpu_buffer_flag;\0A\09image_flags : tz_gpu_image_flag;\0A};\0A\0Atz_gpu_resource ::= enum\0A{\0A\09.invalid := -1;\0A\09.window_resource := -2;\0A};\0A\0Atz_gpu_shader_sources ::= struct\0A{\0A\09vertex_spv_data : u8 mut&;\0A\09vertex_spv_count : u64;\0A\09fragment_spv_data : u8 mut&;\0A\09fragment_spv_count : u64;\0A};\0A\0Atz_gpu_shader ::= enum\0A{\0A\09.invalid := -1;\0A};\0A\0Atz_gpu_cull ::= enum\0A{\0A\09.back := 0;\0A\09.front := 1;\0A\09.none := 2;\0A\09.both := 3;\0A};\0A\0Atz_gpu_graphics_state ::= struct\0A{\0A\09clear_colour : vec4;\0A\09scissor : vec4u32;\0A\09colour_targets_data : tz_gpu_resource&;\0A\09colour_targets_count : u64;\0A\09depth_target : tz_gpu_resource;\0A\09index_buffer : tz_gpu_resource;\0A\09draw_buffer : tz_gpu_resource;\0A\09culling : tz_gpu_cull;\0A\09static_tri_count : u64;\0A};\0A\0Atz_gpu_compute_state ::= struct\0A{\0A\09kernelx : u32;\0A\09kernely : u32;\0A\09kernelz : u32;\0A};\0A\0Atz_gpu_pass_info ::= struct\0A{\0A\09graphics : tz_gpu_graphics_state;\0A\09compute : tz_gpu_compute_state;\0A\09shader : tz_gpu_shader;\0A\09resources_data : tz_gpu_resource&;\0A\09resources_count : u64;\0A\09name : u8&;\0A};\0A\0Atz_gpu_pass ::= enum\0A{\0A\09.invalid := -1;\0A\09.present := -2;\0A};\0A\0Atz_gpu_graph ::= enum\0A{\0A\09.invalid := -1;\0A};\0A\0Atz_gpu_draw_indirect_command ::= struct\0A{\0A\09vertex_count : u32;\0A\09instance_count : u32;\0A\09first_vertex : u32;\0A\09first_instance : u32;\0A};\0A\0Atz_gpu_draw_indexed_indirect_command ::= struct\0A{\0A\09index_count : u32;\0A\09instance_count : u32;\0A\09first_index : u32;\0A\09vertex_offset : s32;\0A\09first_instance : u32;\0A};\0A\0Avalloc_initial_size : u64 static := (32 * 1024 * 1024); /*32 mib*/\0A\0Avalloc_t ::= struct\0A{\0A\09device_mem : u64;\0A\09size : u64;\0A\09cursor : u64;\0A\09mapped_ptr : v0& mut;\0A};\0A\0Avallocator_t ::= struct\0A{\0A\09buffer_gpu : valloc_t;\0A\09image_gpu : valloc_t;\0A\09buffer_cpu : valloc_t;\0A};\0A\0Aframe_data ::= struct\0A{\0A\09cpool : u64;\0A\09cmds : u64;\0A\0A\09swapchain_fence : u64;\0A\09swapchain_sem : u64;\0A};\0A\0Ascratch_data ::= struct\0A{\0A\09cpool : u64;\0A\09cmds : u64;\0A\09fence : u64;\0A};\0A\0A// globals.\0AMAX_GLOBAL_IMAGE_COUNT ::= 8192;\0AMAX_IMAGE_COUNT_PER_PASS ::= 4096;\0A\0A[[private]]\0Avallocator : vallocator_t mut;\0A[[private]]\0Ascratch : scratch_data mut;\0A[[private]]\0Aframe_overlap ::= 2;\0Aframes : frame_data mut#2;\0A[[private]]\0Aset_layouts : u64 mut#2;\0A[[private]]\0Adescriptor_pools_data : u64 mut& mut;\0Adescriptor_pools_count : u64 mut := 0;\0Adescriptor_pools_cap : u64 mut := 0;\0A[[private]]\0Avkinst : u64 mut;\0A[[private]]\0Aused_device : u64 mut;\0A[[private]]\0Aused_hardware : u64 mut;\0A[[private]]\0Aused_qfi : u32 mut;\0A[[private]]\0Aused_mti_gpu : u32 mut;\0A[[private]]\0Aused_mti_cpu : u32 mut;\0A[[private]]\0Agraphics_queue : u64 mut;\0A[[private]]\0Acompute_queue : u64 mut;\0A\0A[[private]]\0Apipeline_layout : u64 mut;\0A\0A[[private]]\0Asurface : u64 mut := 0;\0A[[private]]\0Aswapchain : u64 mut := 0;\0A[[private]]\0Aswapchain_width : u64 mut := 0;\0A[[private]]\0Aswapchain_height : u64 mut := 0;\0A[[private]]\0Aswapchain_image_count : u32 mut;\0A[[private]]\0Aswapchain_images : u64 mut& mut;\0A[[private]]\0Aswapchain_images_cap : u64 mut := 0;\0A[[private]]\0Aswapchain_views : u64 mut& mut;\0A[[private]]\0Aswapchain_views_cap : u64 mut := 0;\0A[[private]]\0Aswapchain_format ::= 44;\0A[[private]]\0Argba_format ::= 37;\0A[[private]]\0Adepth_format ::= 126;\0A\0A[[private]]\0Atarget_window : tz_wnd_window mut;\0A\0Asystem_image : u64 mut := 0;\0A//system_depth_image : u64 mut;\0Asystem_image_view : u64 mut := 0;\0A\0A[[private]]\0Acurrent_frame : u64 mut := 0;\0A\0Aresource_data_t ::= struct\0A{\0A\09info : tz_gpu_resource_info;\0A\09is_buffer : bool;\0A\09vk_handle : u64;\0A\09image_view : u64;\0A\09sampler : u64;\0A\09buffer_device_address : u64;\0A\09mapped_ptr : v0 mut& weak;\0A\0A};\0Aresources : resource_data_t mut& mut;\0Aresource_count : u64 mut := 0;\0Aresource_cap : u64 mut := 0;\0A\0Ashader_data_t ::= struct\0A{\0A\09is_graphics : bool;\0A\09vertex_module : u64;\0A\09fragment_module : u64;\0A\09compute_module : u64;\0A};\0A\0Ashaders : shader_data_t mut& mut;\0Ashaders_count : u64 mut := 0;\0Ashaders_cap : u64 mut := 0;\0A\0Agraph_entry ::= struct\0A{\0A\09handle : u64 mut;\0A\09is_graph : bool mut;\0A};\0A\0Agraph_data_t ::= struct\0A{\0A\09name : string;\0A\09timeline : graph_entry mut&;\0A\09timeline_count : u64;\0A\09timeline_cap : u64;\0A};\0A\0Agraphs : graph_data_t mut& mut;\0Agraph_count : u64 mut := 0;\0Agraph_cap : u64 mut := 0;\0A\0A// internal pass data.\0Apass_data_t ::= struct\0A{\0A\09info : tz_gpu_pass_info;\0A\09metabuf : u64;\0A\09metabuf_size : u64;\0A\09is_compute : bool;\0A\09pipeline : u64;\0A\0A\09targets_swapchain : bool;\0A\09colour_target_dimensions : vec2u32;\0A\0A\09descriptor_sets : u64 mut#2;\0A};\0A\0Apasses : pass_data_t mut& mut;\0Apasses_count : u64 mut := 0;\0Apasses_cap : u64 mut := 0;\0A\0A// implementation details\0A\0A[[private]]\0Aimpl_resource_size_bytes ::= func(resptr : resource_data_t&) -> u64\0A{\0A\09rinfo ::= resptr->info;\0A\09return rinfo.data_size;\0A};\0A\0A[[private]]\0Aimpl_new_descriptor_pool ::= func(a : arena mut&) -> u64\0A{\0A\09if(descriptor_pools_cap == 0)\0A\09{\0A\09\09descriptor_pools_data = arena_push_n(a, 0@u64, 4);\0A\09\09descriptor_pools_cap = 4;\0A\09}\0A\09if(descriptor_pools_count > descriptor_pools_cap)\0A\09{\0A\09\09puts(\22todo: expand allocation of descriptor pool handles\22);\0A\09\09__debugbreak();\0A\09}\0A\09if(descriptor_pools_count == descriptor_pools_cap)\0A\09{\0A\09\09puts(\22todo: expand allocation of descriptor pool handles\22);\0A\09\09__debugbreak();\0A\09}\0A\0A\09image_limit ::= VkDescriptorPoolSize\0A\09{\0A\09\09.type := 1; // VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER\0A\09\09.descriptorCount := MAX_IMAGE_COUNT_PER_PASS;\0A\09};\0A\09create ::= VkDescriptorPoolCreateInfo\0A\09{\0A\09\09.sType := 33;\0A\09\09.pNext := null;\0A\09\09.flags := 0x00000002;\0A\09\09.maxSets := frame_overlap * 256;\0A\09\09.poolSizeCount := 1;\0A\09\09.pPoolSizes := ref image_limit;\0A\09};\0A\09newpool : u64 mut;\0A\09vk_check(vk.create_descriptor_pool(used_device, ref create, null, ref newpool));\0A\09deref(descriptor_pools_data at descriptor_pools_count) = newpool;\0A\09descriptor_pools_count = descriptor_pools_count + 1;\0A\09return newpool;\0A};\0A\0A[[private]]\0Aimpl_try_allocate_descriptors ::= func(pool : u64, sets_data : u64 mut&, image_count : u32) -> bool\0A{\0A\09variable_counts : u32 mut#2;\0A\09deref(variable_counts at 0) = image_count;\0A\09deref(variable_counts at 1) = image_count;\0A\0A\09variable_alloc ::= VkDescriptorSetVariableDescriptorCountAllocateInfo\0A\09{\0A\09\09.sType := 1000161003;\0A\09\09.pNext := null;\0A\09\09.descriptorSetCount := 2;\0A\09\09.pDescriptorCounts := variable_counts at 0;\0A\09};\0A\09alloc ::= VkDescriptorSetAllocateInfo\0A\09{\0A\09\09.sType := 34;\0A\09\09.pNext := (ref variable_alloc)@_;\0A\09\09.descriptorPool := pool;\0A\09\09.descriptorSetCount := 2;\0A\09\09.pSetLayouts := set_layouts at 0;\0A\09};\0A\09return (vk.allocate_descriptor_sets(used_device, ref alloc, sets_data)) == 0;\0A};\0A\0A[[private]]\0Aimpl_populate_descriptors ::= func(passptr : pass_data_t mut&, long : arena mut&, short : arena mut&) -> v0\0A{\0A\09pinfo ::= passptr->info;\0A\09if(descriptor_pools_count == 0)\0A\09{\0A\09\09impl_new_descriptor_pool(long);\0A\09}\0A\09pool : u64 mut := deref(descriptor_pools_data at (descriptor_pools_count - 1));\0A\0A\09image_count : u32 mut := 0;\0A\09counter : u64 mut;\0A\09cur_resh : tz_gpu_resource mut;\0A\09resptr : resource_data_t mut& mut;\0A\09for(counter = 0, counter < (pinfo.resources_count), counter = counter + 1)\0A\09{\0A\09\09cur_resh = deref((pinfo.resources_data) at counter);\0A\09\09if(cur_resh != (tz_gpu_resource.invalid))\0A\09\09{\0A\09\09\09if(cur_resh == (tz_gpu_resource.window_resource))\0A\09\09\09{\0A\09\09\09\09image_count = image_count + 1;\0A\09\09\09}\0A\09\09\09if(cur_resh != (tz_gpu_resource.window_resource))\0A\09\09\09{\0A\09\09\09\09resptr = resources at (cur_resh@s64);\0A\09\09\09\09if(!(resptr->is_buffer))\0A\09\09\09\09{\0A\09\09\09\09\09image_count = image_count + 1;\0A\09\09\09\09}\0A\09\09\09}\0A\09\09}\0A\09}\0A\0A\09// allocate descriptors\0A\09alloc_success : bool mut := impl_try_allocate_descriptors(pool, passptr->descriptor_sets at 0, image_count);\0A\09while(!alloc_success)\0A\09{\0A\09\09pool = impl_new_descriptor_pool(long);\0A\09\09alloc_success = impl_try_allocate_descriptors(pool, passptr->descriptor_sets at 0, image_count);\0A\09}\0A\0A\09// write to them.\0A\09image_array_descriptor_binding ::= 1;\0A\09image_writes : VkDescriptorImageInfo mut& := arena_push_n(short, VkDescriptorImageInfo{}, image_count * frame_overlap);\0A\0A\09meta_buffer_write ::= VkDescriptorBufferInfo\0A\09{\0A\09\09.buffer := passptr->metabuf;\0A\09\09.offset := 0;\0A\09\09.range := !0;\0A\09};\0A\0A\09descriptor_writes : VkWriteDescriptorSet mut#4;\0A\09// first write to the meta buffers.\0A\09deref(descriptor_writes at 0) = VkWriteDescriptorSet\0A\09{\0A\09\09.sType := 35;\0A\09\09.pNext := null;\0A\09\09.dstSet := deref(passptr->descriptor_sets at 0);\0A\09\09.dstBinding := 0;\0A\09\09.dstArrayElement := 0;\0A\09\09.descriptorCount := 1;\0A\09\09.descriptorType := 7; // VK_DESCRIPTOR_TYPE_STORAGE_BUFFER\0A\09\09.pImageInfo := null;\0A\09\09.pBufferInfo := ref meta_buffer_write;\0A\09\09.pTexelBufferView := null;\0A\09};\0A\0A\09deref(descriptor_writes at 1) = VkWriteDescriptorSet\0A\09{\0A\09\09.sType := 35;\0A\09\09.pNext := null;\0A\09\09.dstSet := deref(passptr->descriptor_sets at 1);\0A\09\09.dstBinding := 0;\0A\09\09.dstArrayElement := 0;\0A\09\09.descriptorCount := 1;\0A\09\09.descriptorType := 7; // VK_DESCRIPTOR_TYPE_STORAGE_BUFFER\0A\09\09.pImageInfo := null;\0A\09\09.pBufferInfo := ref meta_buffer_write;\0A\09\09.pTexelBufferView := null;\0A\09};\0A\0A\09// now let's do the images.\0A\09i : u32 mut;\0A\09j : u64 mut;\0A\09img_cursor : u64 mut := 0;\0A\09for(i = 0, i < frame_overlap, i = i + 1)\0A\09{\0A\09\09for(j = 0, j < (pinfo.resources_count), j = j + 1)\0A\09\09{\0A\09\09\09cur_resh = deref((pinfo.resources_data) at j);\0A\09\09\09if(cur_resh != (tz_gpu_resource.invalid))\0A\09\09\09{\0A\09\09\09\09if(cur_resh != (tz_gpu_resource.window_resource))\0A\09\09\09\09{\0A\09\09\09\09\09resptr = resources at (cur_resh@s64);\0A\09\09\09\09\09if(!(resptr->is_buffer))\0A\09\09\09\09\09{\0A\09\09\09\09\09\09deref(image_writes at img_cursor) = VkDescriptorImageInfo\0A\09\09\09\09\09\09{\0A\09\09\09\09\09\09\09.sampler := resptr->sampler;\0A\09\09\09\09\09\09\09.imageView := resptr->image_view;\0A\09\09\09\09\09\09\09.imageLayout := 5; // VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL\0A\09\09\09\09\09\09};\0A\09\09\09\09\09\09img_cursor = img_cursor + 1;\0A\09\09\09\09\09}\0A\09\09\09\09}\0A\09\09\09}\0A\09\09}\0A\09\09deref(descriptor_writes at (2 + i)) = VkWriteDescriptorSet\0A\09\09{\0A\09\09\09.sType := 35;\0A\09\09\09.pNext := null;\0A\09\09\09.dstSet := deref(passptr->descriptor_sets at i);\0A\09\09\09.dstBinding := image_array_descriptor_binding;\0A\09\09\09.dstArrayElement := 0;\0A\09\09\09.descriptorCount := image_count;\0A\09\09\09.descriptorType := 1; // VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER\0A\09\09\09.pImageInfo := image_writes at (i * image_count);\0A\09\09\09.pBufferInfo := ref meta_buffer_write;\0A\09\09\09.pTexelBufferView := null;\0A\09\09};\0A\09}\0A\0A\09write_count : u32 mut := 4;\0A\09if(image_count == 0)\0A\09{\0A\09\09write_count = 2;\0A\09}\0A\09vk.update_descriptor_sets(used_device, write_count, descriptor_writes at 0, 0, null);\0A};\0A\0A[[private]]\0Aimpl_shader_is_compute ::= func(shader : tz_gpu_shader) -> bool\0A{\0A\09shadptr ::= (shaders at (shader@s64));\0A\09return (shadptr->compute_module) != 0;\0A};\0A\0A[[private]]\0Aimpl_begin_scratch_commands ::= func() -> v0\0A{\0A\09create ::= VkCommandBufferBeginInfo\0A\09{\0A\09\09.sType := 42;\0A\09\09.pNext := null;\0A\09\09.flags := 0x00000001; /*VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT*/\0A\09\09.pInheritanceInfo := null;\0A\09};\0A\0A\09vk_check(vk.begin_command_buffer(scratch.cmds, ref create));\0A};\0A\0A[[private]]\0Aimpl_end_and_execute_scratch_commands ::= func() -> v0\0A{\0A\09vk_check(vk.end_command_buffer(scratch.cmds));\0A\09submit ::= VkSubmitInfo\0A\09{\0A\09\09.sType := 4;\0A\09\09.pNext := null;\0A\09\09.waitSemaphoreCount := 0;\0A\09\09.pWaitSemaphores := null;\0A\09\09.pWaitDstStageMask := null;\0A\09\09.commandBufferCount := 1;\0A\09\09.pCommandBuffers := ref (scratch.cmds);\0A\09\09.signalSemaphoreCount := 0;\0A\09\09.pSignalSemaphores := null;\0A\09};\0A\09vk_check(vk.queue_submit(graphics_queue, 1, ref submit, scratch.fence));\0A\09vk_check(vk.wait_for_fences(used_device, 1, ref (scratch.fence), 1, -1@u64));\0A\09vk_check(vk.reset_fences(used_device, 1, ref (scratch.fence)));\0A};\0A\0A[[private]]\0Aimpl_create_graphics_pipeline ::= func(shader : tz_gpu_shader, graphics : tz_gpu_graphics_state, a : arena mut&) -> u64\0A{\0A\09shadptr ::= (shaders at (shader@s64));\0A\09vertex_shader_module ::= shadptr->vertex_module;\0A\09if(vertex_shader_module == 0)\0A\09{\0A\09\09puts(\22invalid vertex shader\22);\0A\09\09__debugbreak();\0A\09}\0A\09fragment_shader_module ::= shadptr->fragment_module;\0A\09if(fragment_shader_module == 0)\0A\09{\0A\09\09puts(\22invalid fragment shader\22);\0A\09\09__debugbreak();\0A\09}\0A\0A\09shader_creates : VkPipelineShaderStageCreateInfo mut#2;\0A\09deref(shader_creates at 0) = VkPipelineShaderStageCreateInfo\0A\09{\0A\09\09.sType := 18;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.stage := 0x00000001;\0A\09\09.module := vertex_shader_module;\0A\09\09.pName := \22main\22;\0A\09\09.pSpecializationInfo := null;\0A\0A\09};\0A\09deref(shader_creates at 1) = VkPipelineShaderStageCreateInfo\0A\09{\0A\09\09.sType := 18;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.stage := 0x00000010;\0A\09\09.module := fragment_shader_module;\0A\09\09.pName := \22main\22;\0A\09\09.pSpecializationInfo := null;\0A\09};\0A\0A\09vtx ::= VkPipelineVertexInputStateCreateInfo\0A\09{\0A\09\09.sType := 19;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.vertexBindingDescriptionCount := 0;\0A\09\09.pVertexBindingDescriptions := null;\0A\09\09.vertexAttributeDescriptionCount := 0;\0A\09\09.pVertexAttributeDescriptions := null;\0A\09};\0A\0A\09iasm ::= VkPipelineInputAssemblyStateCreateInfo\0A\09{\0A\09\09.sType := 20;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.topology := 3;\0A\09\09.primitiveRestartEnable := 0;\0A\09};\0A\0A\09tess ::= VkPipelineTessellationStateCreateInfo\0A\09{\0A\09\09.sType := 21;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.patchControlPoints := 3;\0A\09};\0A\0A\09vwprt ::= VkPipelineViewportStateCreateInfo\0A\09{\0A\09\09.sType := 22;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.viewportCount := 1;\0A\09\09/*remember: this is dynamic state so we pass nulls even though there will be a viewport and scissor.*/\0A\09\09.pViewports := null;\0A\09\09.scissorCount := 1;\0A\09\09.pScissors := null;\0A\09};\0A\0A\09cull_bits : s32 mut;\0A\09if(graphics.culling == (tz_gpu_cull.both))\0A\09{\0A\09\09cull_bits = 3;\0A\09}\0A\09if(graphics.culling == (tz_gpu_cull.front))\0A\09{\0A\09\09cull_bits = 1;\0A\09}\0A\09if(graphics.culling == (tz_gpu_cull.back))\0A\09{\0A\09\09cull_bits = 2;\0A\09}\0A\09if(graphics.culling == (tz_gpu_cull.none))\0A\09{\0A\09\09cull_bits = 0;\0A\09}\0A\0A\09raster ::= VkPipelineRasterizationStateCreateInfo\0A\09{\0A\09\09.sType := 23;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.depthClampEnable := 0;\0A\09\09.rasterizerDiscardEnable := 0;\0A\09\09.polygonMode := 0;\0A\09\09.cullMode := cull_bits;\0A\09\09.frontFace := 0;\0A\09\09.depthBiasEnable := 0;\0A\09\09.depthBiasConstantFactor := 0.0;\0A\09\09.depthBiasClamp := 0.0;\0A\09\09.depthBiasSlopeFactor := 0.0;\0A\09\09.lineWidth := 1.0;\0A\09};\0A\0A\09multi ::= VkPipelineMultisampleStateCreateInfo\0A\09{\0A\09\09.sType := 24;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.rasterizationSamples := 1;\0A\09\09.sampleShadingEnable := 0;\0A\09\09.minSampleShading := 1.0;\0A\09\09.pSampleMask := null;\0A\09\09.alphaToCoverageEnable := 0;\0A\09\09.alphaToOneEnable := 0;\0A\09};\0A\0A\09depthTestEnable : u32 mut := 0;\0A\09depthWriteEnable : u32 mut := 1;\0A\0A\09stencil_op_state ::= VkStencilOpState\0A\09{\0A\09\09.failOp := 0;\0A\09\09.passOp := 0;\0A\09\09.depthFailOp := 0;\0A\09\09.compareOp := 0;\0A\09\09.compareMask := 0;\0A\09\09.writeMask := 0;\0A\09\09.reference := 0;\0A\09};\0A\0A\09depth_stencil ::= VkPipelineDepthStencilStateCreateInfo\0A\09{\0A\09\09.sType := 25;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.depthTestEnable := depthTestEnable;\0A\09\09.depthWriteEnable := depthWriteEnable;\0A\09\09.depthCompareOp := 1;\0A\09\09.depthBoundsTestEnable := 1;\0A\09\09.stencilTestEnable := 0;\0A\09\09.front := stencil_op_state;\0A\09\09.back := stencil_op_state;\0A\09\09.minDepthBounds := 0.0;\0A\09\09.maxDepthBounds := 1.0;\0A\09};\0A\0A\09counter : u64 mut;\0A\09blend_states : VkPipelineColorBlendAttachmentState mut& := arena_push(a, __sizeof(VkPipelineColorBlendAttachmentState) * (graphics.colour_targets_count));\0A\09for(counter = 0, counter < (graphics.colour_targets_count), counter = counter + 1)\0A\09{\0A\09\09deref(blend_states at counter) = VkPipelineColorBlendAttachmentState\0A\09\09{\0A\09\09\09.blendEnable := 0;\0A\09\09\09.srcColorBlendFactor := 1;\0A\09\09\09.dstColorBlendFactor := 0;\0A\09\09\09.colorBlendOp := 0;\0A\09\09\09.srcAlphaBlendFactor := 1;\0A\09\09\09.dstAlphaBlendFactor := 0;\0A\09\09\09.alphaBlendOp := 0;\0A\09\09\09.colorWriteMask := (0x00000001 | 0x00000002 | 0x00000004 | 0x00000008);\0A\09\09};\0A\09}\0A\0A\09blend ::= VkPipelineColorBlendStateCreateInfo\0A\09{\0A\09\09.sType := 26;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.logicOpEnable := 0;\0A\09\09.logicOp := 0;\0A\09\09.attachmentCount := (graphics.colour_targets_count)@_;\0A\09\09.pAttachments := blend_states at 0;\0A\09};\0A\09deref((blend.blendConstants) at 0) = 0.0;\0A\09deref((blend.blendConstants) at 1) = 0.0;\0A\09deref((blend.blendConstants) at 2) = 0.0;\0A\09deref((blend.blendConstants) at 3) = 0.0;\0A\0A\09color_formats : s32 mut& := arena_push(a, __sizeof(s32) * (graphics.colour_targets_count));\0A\09for(counter = 0, counter < (graphics.colour_targets_count), counter = counter + 1)\0A\09{\0A\09\09deref(color_formats at counter) = rgba_format;\0A\09}\0A\09counter = 0;\0A\0A\09rendering ::= VkPipelineRenderingCreateInfo\0A\09{\0A\09\09.sType := 1000044002;\0A\09\09.pNext := null;\0A\09\09.viewMask := 0;\0A\09\09.colorAttachmentCount := (graphics.colour_targets_count)@_;\0A\09\09.pColorAttachmentFormats := color_formats;\0A\09\09.depthAttachmentFormat := 126;\0A\09\09.stencilAttachmentFormat := 0;\0A\09};\0A\0A\09dynamic_states : s32 mut#2;\0A\09deref(dynamic_states at 0) = 0; /*VK_DYNAMIC_STATE_VIEWPORT*/\0A\09deref(dynamic_states at 1) = 1; /*VK_DYNAMIC_STATE_SCISSOR*/\0A\0A\09dyn ::= VkPipelineDynamicStateCreateInfo\0A\09{\0A\09\09.sType := 27;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.dynamicStateCount := (__sizeof(dynamic_states) / __sizeof(deref(dynamic_states at 0)));\0A\09\09.pDynamicStates := dynamic_states at 0;\0A\09};\0A\0A\09create ::= VkGraphicsPipelineCreateInfo\0A\09{\0A\09\09.sType := 28;\0A\09\09.pNext := (ref rendering)@_;\0A\09\09.flags := 0;\0A\09\09.stageCount := 2;\0A\09\09.pStages := shader_creates at 0;\0A\09\09.pVertexInputState := ref vtx;\0A\09\09.pInputAssemblyState := ref iasm;\0A\09\09.pTessellationState := ref tess;\0A\09\09.pViewportState := ref vwprt;\0A\09\09.pRasterizationState := ref raster;\0A\09\09.pMultisampleState := ref multi;\0A\09\09.pDepthStencilState := ref depth_stencil;\0A\09\09.pColorBlendState := ref blend;\0A\09\09.pDynamicState := ref dyn;\0A\09\09.layout := pipeline_layout;\0A\09\09.renderPass := 0;\0A\09\09.subpass := 0;\0A\09\09.basePipelineHandle := 0;\0A\09\09.basePipelineIndex := -1;\0A\09};\0A\0A\09ret : u64 mut;\0A\09vk_check(vk.create_graphics_pipelines(used_device, 0, 1, ref create, null, ref ret));\0A\09return ret;\0A};\0A\0A[[private]]\0Aimpl_create_compute_pipeline ::= func(shader : tz_gpu_shader, compute : tz_gpu_compute_state) -> u64\0A{\0A\09shadptr ::= (shaders at (shader@s64));\0A\09compute_shader_module ::= shadptr->compute_module;\0A\09if(compute_shader_module == 0)\0A\09{\0A\09\09puts(\22invalid compute shader\22);\0A\09\09__debugbreak();\0A\09}\0A\09create ::= VkComputePipelineCreateInfo\0A\09{\0A\09\09.sType := 29;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.stage := VkPipelineShaderStageCreateInfo\0A\09\09{\0A\09\09\09.sType := 18;\0A\09\09\09.pNext := null;\0A\09\09\09.flags := 0;\0A\09\09\09.stage := 0x00000020; \0A\09\09\09.module := compute_shader_module;\0A\09\09\09.pName := \22main\22;\0A\09\09\09.pSpecializationInfo := null;\0A\09\09};\0A\09\09.layout := pipeline_layout;\0A\09\09.basePipelineHandle := 0;\0A\09\09.basePipelineIndex := -1;\0A\09};\0A\09ret : u64 mut;\0A\0A\09vk_check(vk.create_compute_pipelines(used_device, 0, 1, ref create, null, ref ret));\0A\09return ret;\0A};\0A\0A[[private]]\0Aimpl_bind_image_mem ::= func(image : u64, imgsize : u64) -> v0\0A{\0A\09valloc : valloc_t mut& mut := ref (vallocator.image_gpu);\0A\09if((valloc->cursor + imgsize) > (valloc->size))\0A\09{\0A\09\09puts(\22allocation too large. requested \22);\0A\09\09putuint(valloc->cursor + imgsize);\0A\09\09puts(\22B but there was only \22);\0A\09\09putuint(valloc->size);\0A\09\09puts(\22B remaining.\22);\0A\09\09__debugbreak();\0A\09}\0A\0A\09memreqs : VkMemoryRequirements mut;\0A\09vk.get_image_memory_requirements(used_device, image, ref memreqs);\0A\0A\09padding ::= ((memreqs.align) - ((valloc->cursor) % (memreqs.align)) % (memreqs.align));\0A\09(valloc->cursor) = (valloc->cursor) + (padding);\0A\0A\09ret ::= vk.bind_image_memory(used_device, image, valloc->device_mem, valloc->cursor);\0A\09if(ret == -1) /* out of host memory */\0A\09{\0A\09\09puts(\22oom when binding image memory. todo: multiple allocations\22);\0A\09\09__debugbreak();\0A\09}\0A\09if(ret == -2) /* out of device memory */\0A\09{\0A\09\09puts(\22voom when binding image memory. todo: multiple allocations\22);\0A\09\09__debugbreak();\0A\09}\0A\09// todo: align safely.\0A\09valloc->cursor = (valloc->cursor) + imgsize;\0A};\0A\0A[[private]]\0Aimpl_need_swapchain ::= func(w : u64, h : u64, wnd : tz_wnd_window, a : arena mut&) -> bool\0A{\0A\09if(surface == 0)\0A\09{\0A\09\09// create surface.\0A\09\09if static(__is_windows)\0A\09\09{\0A\09\09\09create ::= VkWin32SurfaceCreateInfoKHR\0A\09\09\09{\0A\09\09\09\09.sType := 1000009000;\0A\09\09\09\09.pNext := null;\0A\09\09\09\09.flags := 0;\0A\09\09\09\09.hinstance := GetModuleHandleA(null);\0A\09\09\09\09.hwnd := wnd@s64@u64;\0A\09\09\09};\0A\09\09\09vk_check(vk.create_win32_surface_khr(vkinst, ref create, null, ref surface));\0A\09\09}\0A\09\09if static(__is_linux)\0A\09\09{\0A\09\09\09__error(\22linux vulkan support NYI\22);\0A\09\09}\0A\09}\0A\0A\09if(swapchain_width@_ == w)\0A\09{\0A\09\09if(swapchain_height@_ == h)\0A\09\09{\0A\09\09\09return false;\0A\09\09}\0A\09}\0A\0A\09puts(\22(re)creating swapchain...\22);\0A\09putchar(10);\0A\0A\09caps : VkSurfaceCapabilitiesKHR mut;\0A\09vk.get_physical_device_surface_capabilities_khr(used_hardware, surface, ref caps);\0A\0A\09swch_create ::= VkSwapchainCreateInfoKHR\0A\09{\0A\09\09.sType := 1000001000;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.surface := surface;\0A\09\09.minImageCount := 2;\0A\09\09.imageFormat := swapchain_format;\0A\09\09.imageColorSpace := 0;\0A\09\09.imageExtent := VkExtent2D{.width := w@_; .height := h@_;};\0A\09\09.imageArrayLayers := 1;\0A\09\09.imageUsage := (0x00000010 | 0x00000002);\0A\09\09.imageSharingMode := 0;\0A\09\09.queueFamilyIndexCount := 1;\0A\09\09.pQueueFamilyIndices := ref used_qfi;\0A\09\09.preTransform := caps.currentTransform;\0A\09\09.compositeAlpha := 0x00000001;\0A\09\09// 0 = immediate. fifo (vsync) = 2\0A\09\09.presentMode := 0;\0A\09\09.clipped := 0;\0A\09\09.oldSwapchain := swapchain;\0A\09};\0A\09old_swapchain ::= swapchain;\0A\09vk_check(vk.create_swapchain_khr(used_device, ref swch_create, null, ref swapchain));\0A\0A\09// todo: destroy old swapchain images if they already existed. right now we arent checking that and are just stomping over swapchain_images and swapchain_views.\0A\09vk.get_swapchain_images_khr(used_device, swapchain, ref swapchain_image_count, null);\0A\09if(swapchain_images_cap != (swapchain_image_count@_))\0A\09{\0A\09\09swapchain_images = arena_push(a, __sizeof(u64) * swapchain_image_count);\0A\09\09swapchain_images_cap = (swapchain_image_count@_);\0A\09}\0A\09if(swapchain_views_cap != (swapchain_image_count@_))\0A\09{\0A\09\09swapchain_views = arena_push(a, __sizeof(u64) * swapchain_image_count);\0A\09\09swapchain_views_cap = (swapchain_image_count@_);\0A\09}\0A\09vk.get_swapchain_images_khr(used_device, swapchain, ref swapchain_image_count, swapchain_images);\0A\0A\09counter : u32 mut;\0A\09if(old_swapchain != 0)\0A\09{\0A\09\09// we already had a swapchain. we should delete the old images.\0A\09\09for(counter = 0, counter < swapchain_image_count, counter = counter + 1)\0A\09\09{\0A\09\09\09vk.destroy_image_view(used_device, deref(swapchain_views at counter), null);\0A\09\09}\0A\09\09vk.destroy_swapchain_khr(used_device, old_swapchain, null);\0A\09}\0A\0A\09view_create : VkImageViewCreateInfo mut := VkImageViewCreateInfo\0A\09{\0A.sType := 15;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.image := 0; // note: will overwrite this in coming for-loop.\0A\09\09.viewType := 1;\0A\09\09.format := swapchain_format;\0A\09\09.components := VkComponentMapping\0A\09\09{\0A\09\09\09.r := 0;\0A\09\09\09.g := 0;\0A\09\09\09.b := 0;\0A\09\09\09.a := 0;\0A\09\09};\0A\09\09.subresourceRange := VkImageSubresourceRange\0A\09\09{\0A\09\09\09.aspectMask := 0x00000001;\0A\09\09\09.baseMipLevel := 0;\0A\09\09\09.levelCount := 1;\0A\09\09\09.baseArrayLayer := 0;\0A\09\09\09.layerCount := 1;\0A\09\09};\0A\09};\0A\0A\09for(counter = 0, counter < swapchain_image_count, counter = counter + 1)\0A\09{\0A\09\09(view_create.image) = deref(swapchain_images at counter);\0A\0A\09\09vk_check(vk.create_image_view(used_device, ref view_create, null, swapchain_views at counter));\0A\09}\0A\0A\09if(system_image != 0)\0A\09{\0A\09\09// destroy old system image + view if they already exist. i am not bothering rn.\0A\09\09vk.destroy_image_view(used_device, system_image_view, null);\0A\09\09vk.destroy_image(used_device, system_image, null);\0A\09}\0A\09system_image_create ::= VkImageCreateInfo\0A\09{\0A\09\09.sType := 14;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.imageType := 1;\0A\09\09.format := rgba_format;\0A\09\09.extent := VkExtent3D\0A\09\09{\0A\09\09\09.width := w@_;\0A\09\09\09.height := h@_;\0A\09\09\09.depth := 1;\0A\09\09};\0A\09\09.mipLevels := 1;\0A\09\09.arrayLayers := 1;\0A\09\09.samples := 1;\0A\09\09.tiling := 0;\0A\09\09.usage := (0x00000010) | (0x00000001); // VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | VK_IMAGE_USAGE_TRANSFER_SRC_BIT\0A\09\09.sharingMode := 0;\0A\09\09.queueFamilyIndexCount := 1;\0A\09\09.pQueueFamilyIndices := ref used_qfi;\0A\09\09.initialLayout := 0;\0A\09};\0A\09vk_check(vk.create_image(used_device, ref system_image_create, null, ref system_image));\0A\09impl_bind_image_mem(system_image, w * h * 4);\0A\09view_create.image = system_image;\0A\09view_create.format = rgba_format;\0A\09vk_check(vk.create_image_view(used_device, ref view_create, null, ref system_image_view));\0A\0A\09swapchain_width = w;\0A\09swapchain_height = h;\0A\09// todo: system depth image\0A\0A\09return true;\0A};\0A\0A[[private]]\0Aimpl_require_swapchain ::= func(a : arena mut&) -> bool\0A{\0A\09windims ::= tz_wnd_get_dimensions(target_window);\0A\09x ::= windims.x;\0A\09y ::= windims.y;\0A\09if(x == 0)\0A\09{\0A\09\09swapchain_width = 0;\0A\09\09swapchain_height = 0;\0A\09}\0A\09if(y == 0)\0A\09{\0A\09\09swapchain_width = 0;\0A\09\09swapchain_height = 0;\0A\09}\0A\09return impl_need_swapchain(x@_, y@_, target_window, a);\0A};\0A\0A[[private]]\0Aimpl_get_pass_colour_target_dimensions ::= func(passptr : pass_data_t&) -> vec2u32\0A{\0A\09pinfo ::= passptr->info;\0A\09ginfo ::= pinfo.graphics;\0A\09if(ginfo.colour_targets_count == 0)\0A\09{\0A\09\09puts(\22bad pass - no colour targets.\22);\0A\09}\0A\09first_colour_target ::= deref ((ginfo.colour_targets_data) at 0);\0A\09if(first_colour_target == (tz_gpu_resource.window_resource))\0A\09{\0A\09\09return vec2u32\0A\09\09{\0A\09\09\09.x := swapchain_width@_;\0A\09\09\09.y := swapchain_height@_;\0A\09\09};\0A\09}\0A\09res ::= (resources at (first_colour_target@s64));\0A\09resinfo ::= res->info;\0A\09return resinfo.image_dimensions;\0A};\0A\0A[[private]]\0Aimpl_record_compute_work ::= func(passptr : pass_data_t mut&, frame_id : u64) -> v0\0A{\0A\09puts(\22compute work is NYI\22);\0A\09__debugbreak();\0A};\0A\0A[[private]]\0Aimpl_record_graphics_work ::= func(passptr : pass_data_t mut&, frame_id : u64, a : arena mut&) -> v0\0A{\0A\09frame ::= deref(frames at frame_id);\0A\09pinfo ::= passptr->info;\0A\09ginfo ::= pinfo.graphics;\0A\09ccount ::= ginfo.colour_targets_count;\0A\0A\09if(ccount == 0)\0A\09{\0A\09\09puts(\22doesn't make sense to have a graphics pass with no colour attachments. please use one.\22);\0A\09\09__debugbreak();\0A\09}\0A\0A\09colour_attachments : VkRenderingAttachmentInfo mut& := arena_push(a, __sizeof(VkRenderingAttachmentInfo) * ccount);\0A\09colour_transitions : VkImageMemoryBarrier mut& := arena_push(a, __sizeof(VkImageMemoryBarrier) * ccount);\0A\09colour_transition_count : u64 mut := 0;\0A\0A\09counter : u64 mut := 0;\0A\09colour_target : tz_gpu_resource mut;\0A\09resptr : resource_data_t mut& mut;\0A\09render_target : u64 mut;\0A\09render_target_view : u64 mut;\0A\0A\09if(passptr->targets_swapchain)\0A\09{\0A\09\09impl_require_swapchain(a);\0A\0A\09\09dims ::= passptr->colour_target_dimensions;\0A\09\09if(dims.x != swapchain_width@_)\0A\09\09{\0A\09\09\09(passptr->colour_target_dimensions) = impl_get_pass_colour_target_dimensions(passptr);\0A\09\09}\0A\09\09if(dims.y != swapchain_height@_)\0A\09\09{\0A\09\09\09(passptr->colour_target_dimensions) = impl_get_pass_colour_target_dimensions(passptr);\0A\09\09}\0A\09}\0A\09dimensions ::= (passptr->colour_target_dimensions);\0A\0A\09for(counter = 0, counter < ccount, counter = counter + 1)\0A\09{\0A\09\09colour_target = deref ((ginfo.colour_targets_data) at counter);\0A\09\09render_target = 0;\0A\09\09render_target_view = 0;\0A\0A\09\09if(colour_target == (tz_gpu_resource.window_resource))\0A\09\09{\0A\09\09\09// need a new swapchain!\0A\09\09\09render_target = system_image;\0A\09\09\09render_target_view = system_image_view;\0A\09\09}\0A\09\09/*else*/\0A\09\09if(colour_target != (tz_gpu_resource.window_resource))\0A\09\09{\0A\09\09\09resptr = (resources at (colour_target@s64));\0A\09\09\09render_target = (resptr->vk_handle);\0A\09\09\09render_target_view = (resptr->image_view);\0A\09\09}\0A\0A\09\09deref(colour_attachments at counter) = VkRenderingAttachmentInfo\0A\09\09{\0A\09\09\09.sType := 1000044001;\0A\09\09\09.pNext := null;\0A\09\09\09.imageView := render_target_view;\0A\09\09\09.imageLayout := 2; /*VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL*/\0A\09\09\09.resolveMode := 0;\0A\09\09\09.resolveImageView := 0;\0A\09\09\09.resolveImageLayout := 0;\0A\09\09\09//.loadOp := 0; // VK_ATTACHMENT_LOAD_OP_LOAD (if we're noit clearing colour targets)\0A\09\09\09.loadOp := 1; // VK_ATTACHMENT_LOAD_OP_CLEAR (if we are clearing colour targets)\0A\09\09\09.storeOp := 0;\0A\09\09\09.clearValue := VkClearValue{.color := VkClearColorValue{.float32 := ginfo.clear_colour;};};\0A\09\09};\0A\09\09if(true) /*todo: if we're not clearing colour targets*/\0A\09\09{\0A\09\09\09deref (colour_transitions at colour_transition_count) = VkImageMemoryBarrier\0A\09\09\09{\0A\09\09\09\09.sType := 45;\0A\09\09\09\09.pNext := null;\0A\09\09\09\09.srcAccessMask := 0;\0A\09\09\09\09.dstAccessMask := 0x00000100; // VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT\0A\09\09\09\09.oldLayout := 0;\0A\09\09\09\09.newLayout := 2; // VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL\0A\09\09\09\09.srcQueueFamilyIndex := !0;\0A\09\09\09\09.dstQueueFamilyIndex := !0;\0A\09\09\09\09.image := render_target;\0A\09\09\09\09.subresourceRange := VkImageSubresourceRange\0A\09\09\09\09{\0A\09\09\09\09\09.aspectMask := 0x00000001; // VK_IMAGE_ASPECT_COLOR_BIT \0A\09\09\09\09\09.baseMipLevel := 0;\0A\09\09\09\09\09.levelCount := 1;\0A\09\09\09\09\09.baseArrayLayer := 0;\0A\09\09\09\09\09.layerCount := 1;\0A\09\09\09\09};\0A\09\09\09};\0A\09\09\09colour_transition_count = colour_transition_count + 1;\0A\09\09}\0A\09}\0A\0A\09// if we have any colour transitions at all, do a pipeline barrier with them.\0A\09if(colour_transition_count > 0)\0A\09{\0A\09\09vk.cmd_pipeline_barrier(frame.cmds, 0x00002000, 0x00000400, 0, 0, null, 0, null, colour_transition_count@_, colour_transitions);\0A\09}\0A\09// todo: depth target stuffs.\0A\09render ::= VkRenderingInfo\0A\09{\0A\09\09.sType := 1000044000;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.renderArea := VkRect2D\0A\09\09{\0A\09\09\09.offset := VkOffset2D{.x := 0; .y := 0;};\0A\09\09\09.extent := VkExtent2D\0A\09\09\09{\0A\09\09\09\09.width := dimensions.x;\0A\09\09\09\09.height := dimensions.y;\0A\09\09\09};\0A\09\09};\0A\09\09.layerCount := 1;\0A\09\09.viewMask := 0;\0A\09\09.colorAttachmentCount := ccount@_;\0A\09\09.pColorAttachments := colour_attachments;\0A\09\09.pDepthAttachment := null;\0A\09\09.pStencilAttachment := null;\0A\09};\0A\09vk.cmd_begin_rendering(frame.cmds, ref render);\0A\09// actually do rendering.\0A\09vk.cmd_bind_pipeline(frame.cmds, 0, passptr->pipeline);\0A\09// todo: bind index buffer if it exists.\0A\09vk.cmd_bind_descriptor_sets(frame.cmds, 0, pipeline_layout, 0, 1, passptr->descriptor_sets at current_frame, 0, null);\0A\09viewport ::= VkViewport\0A\09{\0A\09\09.x := 0.0;\0A\09\09.y := (dimensions.y)@_;\0A\09\09.width := (dimensions.x)@_;\0A\09\09.height := -1.0 * ((dimensions.y)@_);\0A\09\09.minDepth := 0.0;\0A\09\09.maxDepth := 1.0;\0A\09};\0A\09vk.cmd_set_viewport(frame.cmds, 0, 1, ref viewport);\0A\0A\09scissor ::= VkRect2D\0A\09{\0A\09\09.offset := VkOffset2D\0A\09\09{\0A\09\09\09.x := 0;\0A\09\09\09.y := 0;\0A\09\09};\0A\09\09.extent := VkExtent2D\0A\09\09{\0A\09\09\09.width := dimensions.x;\0A\09\09\09.height := dimensions.y;\0A\09\09};\0A\09};\0A\09vk.cmd_set_scissor(frame.cmds, 0, 1, ref scissor);\0A\0A\09// todo: draw buffer logic.\0A\09// for now we just do the draw.\0A\09tri_count ::= ginfo.static_tri_count;\0A\09drawbuf ::= ginfo.draw_buffer;\0A\09idxbuf ::= ginfo.index_buffer;\0A\09if(idxbuf == (tz_gpu_resource.invalid))\0A\09{\0A\09\09if(drawbuf == (tz_gpu_resource.invalid))\0A\09\09{\0A\09\09\09vk.cmd_draw(frame.cmds, tri_count * 3, 1, 0, 0);\0A\09\09}\0A\09\09if(drawbuf != (tz_gpu_resource.invalid))\0A\09\09{\0A\09\09\09drawbufres ::= resources at (drawbuf@s64);\0A\09\09\09drawbufinfo ::= drawbufres->info;\0A\09\09\09draw_buf_max_size_unindexed ::= ((drawbufinfo.data_size) - __sizeof(u32)) / __sizeof(tz_gpu_draw_indirect_command);\0A\09\09\09vk.cmd_draw_indirect_count(frame.cmds, drawbufres->vk_handle, __sizeof(u32), drawbufres->vk_handle, 0, draw_buf_max_size_unindexed, __sizeof(tz_gpu_draw_indirect_command));\0A\09\09}\0A\09}\0A\09if(idxbuf != (tz_gpu_resource.invalid))\0A\09{\0A\09\09idxbufres ::= resources at (idxbuf@s64);\0A\09\09idxbufinfo ::= idxbufres->info;\0A\09\09vk.cmd_bind_index_buffer(frame.cmds, idxbufres->vk_handle, 0, 1);\0A\09\09if(drawbuf == (tz_gpu_resource.invalid))\0A\09\09{\0A\09\09\09vk.cmd_draw_indexed(frame.cmds, tri_count * 3, 1, 0, 0, 0);\0A\09\09}\0A\09\09if(drawbuf != (tz_gpu_resource.invalid))\0A\09\09{\0A\09\09\09drawbufres ::= resources at (drawbuf@s64);\0A\09\09\09drawbufinfo ::= drawbufres->info;\0A\09\09\09draw_buf_max_size_indexed ::= ((drawbufinfo.data_size) - __sizeof(u32)) / __sizeof(tz_gpu_draw_indexed_indirect_command);\0A\09\09\09vk.cmd_draw_indexed_indirect_count(frame.cmds, drawbufres->vk_handle, __sizeof(u32), drawbufres->vk_handle, 0, draw_buf_max_size_indexed, __sizeof(tz_gpu_draw_indexed_indirect_command));\0A\09\09}\0A\09}\0A\0A\09vk.cmd_end_rendering(frame.cmds);\0A};\0A\0A[[private]]\0Aimpl_record_gpu_work ::= func(pass : tz_gpu_pass, frame_id : u64, a : arena mut&) -> v0\0A{\0A\09if(pass == (tz_gpu_pass.present))\0A\09{\0A\09\09return;\0A\09}\0A\09passptr : pass_data_t mut& := passes at (pass@s64);\0A\09if(passptr->is_compute)\0A\09{\0A\09\09impl_record_compute_work(passptr, frame_id);\0A\09}\0A\09if(!(passptr->is_compute))\0A\09{\0A\09\09impl_record_graphics_work(passptr, frame_id, a);\0A\09}\0A};\0A\0A[[private]]\0Aimpl_graph_will_present ::= func(graph : tz_gpu_graph) -> bool\0A{\0A\09graphptr ::= graphs at (graph@s64);\0A\09count ::= graphptr->timeline_count;\0A\0A\09counter : u64 mut;\0A\09cur_entry : graph_entry mut;\0A\09for(counter = 0, counter < count, counter = counter + 1)\0A\09{\0A\09\09cur_entry = deref (graphptr->timeline at counter);\0A\09\09if((cur_entry.handle) == ((tz_gpu_pass.present)@s64@_))\0A\09\09{\0A\09\09\09return true;\0A\09\09}\0A\09}\0A\09return false;\0A};\0A\0A[[private]]\0Aimpl_pass_writes_to_system_image ::= func(pass : tz_gpu_pass) -> bool\0A{\0A\09if(pass == (tz_gpu_pass.present))\0A\09{\0A\09\09return false;\0A\09}\0A\09passptr ::= (passes at (pass@s64));\0A\09passinfo ::= passptr->info;\0A\09ginfo ::= passinfo.graphics;\0A\09counter : u64 mut := 0;\0A\09cur_colour_target : tz_gpu_resource mut;\0A\09if(!(passptr->is_compute))\0A\09{\0A\09\09for(counter = 0, counter < (ginfo.colour_targets_count), counter = counter + 1)\0A\09\09{\0A\09\09\09cur_colour_target = deref((ginfo.colour_targets_data) at counter);\0A\09\09\09if(cur_colour_target == (tz_gpu_resource.window_resource))\0A\09\09\09{\0A\09\09\09\09return true;\0A\09\09\09}\0A\09\09}\0A\09}\0A\09return false;\0A};\0A\0A[[private]]\0Aimpl_graph_writes_to_system_image ::= func(graph : tz_gpu_graph) -> bool\0A{\0A\09graphptr ::= graphs at (graph@s64);\0A\09count ::= graphptr->timeline_count;\0A\0A\09counter : u64 mut;\0A\09cur_entry : graph_entry mut;\0A\09cur_pass : tz_gpu_pass mut;\0A\09for(counter = 0, counter < count, counter = counter + 1)\0A\09{\0A\09\09cur_entry = deref (graphptr->timeline at counter);\0A\09\09if(!(cur_entry.is_graph))\0A\09\09{\0A\09\09\09cur_pass = ((cur_entry.handle)@s64@tz_gpu_pass);\0A\09\09\09if(impl_pass_writes_to_system_image(cur_pass))\0A\09\09\09{\0A\09\09\09\09return true;\0A\09\09\09}\0A\09\09}\0A\09}\0A\09return false;\0A};\0A\0A[[private]]\0Aimpl_alloc_new_pass ::= func(a : arena mut&) -> pass_data_t mut&\0A{\0A\09if(passes_cap == 0)\0A\09{\0A\09\09passes = arena_push(a, __sizeof(pass_data_t) * 32);\0A\09\09passes_cap = 32;\0A\09}\0A\09if(passes_count > passes_cap)\0A\09{\0A\09\09puts(\22ran out of pass capacity. todo: fix this.\22);\0A\09\09__debugbreak();\0A\09}\0A\09id ::= passes_count;\0A\09passes_count = passes_count + 1;\0A\09return passes at id;\0A};\0A\0A[[private]]\0Aimpl_alloc_new_shader ::= func(a : arena mut&) -> shader_data_t mut&\0A{\0A\09if(shaders_cap == 0)\0A\09{\0A\09\09shaders = arena_push(a, __sizeof(shader_data_t) * 32);\0A\09\09shaders_cap = 32;\0A\09}\0A\09if(shaders_count > shaders_cap)\0A\09{\0A\09\09puts(\22ran out of shader capacity. todo: fix this.\22);\0A\09\09__debugbreak();\0A\09}\0A\09id ::= shaders_count;\0A\09shaders_count = shaders_count + 1;\0A\09return shaders at id;\0A};\0A\0A[[private]]\0Aimpl_alloc_new_resource ::= func(a : arena mut&) -> resource_data_t mut&\0A{\0A\09if(resource_cap == 0)\0A\09{\0A\09\09resources = arena_push(a, __sizeof(resource_data_t) * 1024);\0A\09\09resource_cap = 1024;\0A\09}\0A\09if(resource_count > resource_cap)\0A\09{\0A\09\09puts(\22ran out of resources. todo: fix this.\22);\0A\09\09__debugbreak();\0A\09}\0A\09id ::= resource_count;\0A\09resource_count = resource_count + 1;\0A\09return resources at id;\0A};\0A\0A[[private]]\0Aimpl_alloc_new_graph ::= func(a : arena mut&) -> graph_data_t mut&\0A{\0A\09if(graph_cap == 0)\0A\09{\0A\09\09graphs = arena_push(a, __sizeof(graph_data_t) * 64);\0A\09\09graph_cap = 64;\0A\09}\0A\09if(graph_count > graph_cap)\0A\09{\0A\09\09puts(\22ran out of graphs. todo: fix this.\22);\0A\09\09__debugbreak();\0A\09}\0A\09id ::= graph_count;\0A\09graph_count = graph_count + 1;\0A\09return graphs at id;\0A};\0A\0A[[private]]\0Aimpl_vallocator_initial_setup ::= func() -> v0\0A{\0A\09bda_flags ::= VkMemoryAllocateFlagsInfo\0A\09{\0A\09\09.sType := 1000060000;\0A\09\09.pNext := null;\0A\09\09.flags := 0x00000002;\0A\09\09.deviceMask := 0;\0A\09};\0A\09gpucreate ::= VkMemoryAllocateInfo\0A\09{\0A\09\09.sType := 5;\0A\09\09.pNext := (ref bda_flags)@_;\0A\09\09.allocationSize := valloc_initial_size;\0A\09\09.memoryTypeIndex := used_mti_gpu;\0A\09};\0A\09cpucreate ::= VkMemoryAllocateInfo\0A\09{\0A\09\09.sType := 5;\0A\09\09.pNext := (ref bda_flags)@_;\0A\09\09.allocationSize := valloc_initial_size;\0A\09\09.memoryTypeIndex := used_mti_cpu;\0A\09};\0A\0A\09// create initial allocations for each case (buffer gpu, image gpu, buffer cpu).\0A\09bgpu ::= ref(vallocator.buffer_gpu);\0A\09vk_check(vk.allocate_memory(used_device, ref gpucreate, null, ref (bgpu->device_mem)));\0A\09bgpu->size = valloc_initial_size;\0A\09bgpu->cursor = 0;\0A\09igpu ::= ref(vallocator.image_gpu);\0A\09vk_check(vk.allocate_memory(used_device, ref gpucreate, null, ref (igpu->device_mem)));\0A\09igpu->size = valloc_initial_size;\0A\09igpu->cursor = 0;\0A\0A\09bcpu ::= ref(vallocator.buffer_cpu);\0A\09vk_check(vk.allocate_memory(used_device, ref cpucreate, null, ref (bcpu->device_mem)));\0A\09vk_check(vk.map_memory(used_device, bcpu->device_mem, 0, valloc_initial_size, 0, ref (bcpu->mapped_ptr)));\0A\09\0A\09bcpu->size = valloc_initial_size;\0A\09bcpu->cursor = 0;\0A};\0A\0A[[private]]\0Aimpl_vallocator_free_all ::= func() -> v0\0A{\0A\09bgpu ::= vallocator.buffer_gpu;\0A\09vk.free_memory(used_device, bgpu.device_mem, null);\0A\09igpu ::= vallocator.image_gpu;\0A\09vk.free_memory(used_device, igpu.device_mem, null);\0A\0A\09bcpu ::= vallocator.buffer_cpu;\0A\09vk.free_memory(used_device, bcpu.device_mem, null);\0A};\0A\0A[[private]]\0Aimpl_bind_buffer_mem ::= func(buffer : u64, bufsize : u64, gpu_memory : bool) -> u64\0A{\0A\09valloc : valloc_t mut& mut := ref (vallocator.buffer_cpu);\0A\09if(gpu_memory)\0A\09{\0A\09\09valloc = ref (vallocator.buffer_gpu);\0A\09}\0A\09if((valloc->cursor + bufsize) > (valloc->size))\0A\09{\0A\09\09puts(\22allocation too large. requested \22);\0A\09\09putuint(valloc->cursor + bufsize);\0A\09\09puts(\22B but there was only \22);\0A\09\09putuint(valloc->size);\0A\09\09puts(\22B remaining.\22);\0A\09\09__debugbreak();\0A\09}\0A\0A\09memreqs : VkMemoryRequirements mut;\0A\09vk.get_buffer_memory_requirements(used_device, buffer, ref memreqs);\0A\09padding ::= ((memreqs.align) - ((valloc->cursor) % (memreqs.align)) % (memreqs.align));\0A\09(valloc->cursor) = (valloc->cursor) + (padding);\0A\09offset_from_zero ::= valloc->cursor;\0A\0A\09ret ::= vk.bind_buffer_memory(used_device, buffer, valloc->device_mem, valloc->cursor);\0A\09if(ret == -1) /* out of host memory */\0A\09{\0A\09\09puts(\22oom when binding buffer memory. todo: multiple allocations\22);\0A\09\09__debugbreak();\0A\09}\0A\09if(ret == -2) /* out of device memory */\0A\09{\0A\09\09puts(\22voom when binding buffer memory. todo: multiple allocations\22);\0A\09\09__debugbreak();\0A\09}\0A\09(valloc->cursor) = (valloc->cursor) + bufsize;\0A\09return offset_from_zero;\0A};\0A\0A[[private]]\0Aimpl_cpu_gpu_transfer ::= func(dst_gpu_res : u64, dst_gpu_is_buffer : bool, src_data : u8& weak, src_data_size : u64, image_dimensions : vec2u32) -> v0\0A{\0A\09impl_begin_scratch_commands();\0A\09staging_create ::= VkBufferCreateInfo\0A\09{\0A\09\09.sType := 12;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.size := src_data_size;\0A\09\09.usage := 0x00000001; /*VK_BUFFER_USAGE_TRANSFER_SRC_BIT*/\0A\09\09.sharingMode := 0;\0A\09\09.queueFamilyIndexCount := 1;\0A\09\09.pQueueFamilyIndices := ref used_qfi;\0A\09};\0A\09staging : u64 mut;\0A\09vk.create_buffer(used_device, ref staging_create, null, ref staging);\0A\09// todo: write to the buffer using map memory.\0A\09old_cpumem ::= vallocator.buffer_cpu;\0A\09cursor ::= impl_bind_buffer_mem(staging, src_data_size, false);\0A\09cpumem ::= vallocator.buffer_cpu;\0A\09mapped_ptr ::= (cpumem.mapped_ptr)@u8 mut&;\0A\09__memcpy(mapped_ptr at cursor, src_data, src_data_size);\0A\0A\09aspect_mask : s32 := 1; // todo: suport depth.\0A\0A\09if(dst_gpu_is_buffer)\0A\09{\0A\09\09cpy ::= VkBufferCopy\0A\09\09{\0A\09\09\09.srcOffset := 0;\0A\09\09\09.dstOffset := 0;\0A\09\09\09.size := src_data_size;\0A\09\09};\0A\09\09vk.cmd_copy_buffer(scratch.cmds, staging, dst_gpu_res, 1, ref cpy);\0A\09}\0A\09if(!dst_gpu_is_buffer)\0A\09{\0A\09\09cpy ::= VkBufferImageCopy\0A\09\09{\0A\09\09\09.bufferOffset := 0;\0A\09\09\09.bufferRowLength := 0;\0A\09\09\09.bufferImageHeight := 0;\0A\09\09\09.imageSubresource := VkImageSubresourceLayers\0A\09\09\09{\0A\09\09\09\09.aspectMask := aspect_mask; // todo: do depth if the image is a depth image.\0A\09\09\09\09.mipLevel := 0;\0A\09\09\09\09.baseArrayLayer := 0;\0A\09\09\09\09.layerCount := 1;\0A\09\09\09};\0A\09\09\09.imageOffset := VkOffset3D{.x := 0; .y := 0; .z := 0;};\0A\09\09\09.imageExtent := VkExtent3D{.width := image_dimensions.x; .height := image_dimensions.y; .depth := 1;};\0A\09\09};\0A\09\09barrier ::= VkImageMemoryBarrier\0A\09\09{\0A\09\09\09.sType := 45;\0A\09\09\09.pNext := null;\0A\09\09\09.srcAccessMask := 0;\0A\09\09\09.dstAccessMask := 0x00001000;/*VK_ACCESS_TRANSFER_WRITE_BIT*/\0A\09\09\09.oldLayout := 0;\0A\09\09\09.newLayout := 7; // VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL\0A\09\09\09.srcQueueFamilyIndex := !0;\0A\09\09\09.dstQueueFamilyIndex := !0;\0A\09\09\09.image := dst_gpu_res;\0A\09\09\09.subresourceRange := VkImageSubresourceRange\0A\09\09\09{\0A\09\09\09\09.aspectMask := aspect_mask;\0A\09\09\09\09.baseMipLevel := 0;\0A\09\09\09\09.levelCount := 1;\0A\09\09\09\09.baseArrayLayer := 0;\0A\09\09\09\09.layerCount := 1;\0A\09\09\09};\0A\09\09};\0A\09\09vk.cmd_pipeline_barrier(scratch.cmds, 0, 0x00001000, 0, 0, null, 0, null, 1, ref barrier);\0A\09\09vk.cmd_copy_buffer_to_image(scratch.cmds, staging, dst_gpu_res, 7, 1, ref cpy);\0A\09}\0A\0A\09impl_end_and_execute_scratch_commands();\0A\09vk.destroy_buffer(used_device, staging, null);\0A};\0A\0A[[private]]\0Aimpl_write_a_resource ::= func(resptr : resource_data_t&) -> v0\0A{\0A\09rinfo ::= resptr->info;\0A\09is_dynamic_buffer : bool mut := resptr->is_buffer;\0A\09if(is_dynamic_buffer)\0A\09{\0A\09\09is_dynamic_buffer = (((rinfo.buffer_flags) & (tz_gpu_buffer_flag.dynamic)) > 0);\0A\09}\0A\09if(is_dynamic_buffer)\0A\09{\0A\09\09__memcpy(resptr->mapped_ptr, rinfo.data, rinfo.data_size);\0A\09}\0A\09if(!is_dynamic_buffer)\0A\09{\0A\09\09impl_cpu_gpu_transfer(resptr->vk_handle, resptr->is_buffer, rinfo.data, rinfo.data_size, rinfo.image_dimensions);\0A\09}\0A};\0A\0A[[private]]\0Aimpl_write_resources ::= func(passptr : pass_data_t mut&, long : arena mut&, short : arena mut&) -> v0\0A{\0A\09pinfo ::= passptr->info;\0A\09if((pinfo.resources_count) == 0)\0A\09{\0A\09\09return;\0A\09}\0A\0A\09buffer_addresses : u64 mut& := arena_push(short, passptr->metabuf_size);\0A\09bufcount : u64 mut := 0;\0A\0A\09i : u64 mut := 0;\0A\09curres : tz_gpu_resource mut;\0A\09resdata : resource_data_t mut;\0A\09for(i = 0, i < (pinfo.resources_count), i = i + 1)\0A\09{\0A\09\09curres = deref((pinfo.resources_data) at i);\0A\09\09if(curres != (tz_gpu_resource.invalid))\0A\09\09{\0A\09\09\09if(curres != (tz_gpu_resource.window_resource))\0A\09\09\09{\0A\09\09\09\09resdata = deref (resources at (curres@s64));\0A\09\09\09\09if(resdata.is_buffer)\0A\09\09\09\09{\0A\09\09\09\09\09defer bufcount = bufcount + 1;\0A\09\09\09\09\09deref(buffer_addresses at bufcount) = (resdata.buffer_device_address);\0A\09\09\09\09\09// todo: resource write buffer data to resdata.vk_handle.\0A\09\09\09\09}\0A\09\09\09\09if(!(resdata.is_buffer))\0A\09\09\09\09{\0A\09\09\09\09\09// todo: resource write image data to resdata.vk_handle.\0A\09\09\09\09}\0A\09\09\09}\0A\09\09}\0A\09}\0A\0A\09if(bufcount != ((passptr->metabuf_size) / __sizeof(u64)))\0A\09{\0A\09\09puts(\22internal metabuf logic error\22);\0A\09\09__debugbreak();\0A\09}\0A\0A\09// write to metabuffer.\0A\09if(bufcount > 0)\0A\09{\0A\09\09impl_cpu_gpu_transfer(passptr->metabuf, true, buffer_addresses, passptr->metabuf_size, vec2u32_zero());\0A\09}\0A};\0A\0A\0A[[private]]\0Aimpl_initialise_pipeline_layout ::= func() -> u64\0A{\0A\09bindings : VkDescriptorSetLayoutBinding mut#2;\0A\09deref(bindings at 0) = VkDescriptorSetLayoutBinding\0A\09{\0A\09\09.binding := 0;\0A\09\09.descriptorType := 7; /*storage buffer*/\0A\09\09.descriptorCount := 1;\0A\09\09.stageFlags := 0x7FFFFFFF;\0A\09\09.pImmutableSamplers := null;\0A\09};\0A\09deref(bindings at 1) = VkDescriptorSetLayoutBinding\0A\09{\0A\09\09.binding := 1;\0A\09\09.descriptorType := 1; /*combined image sampler*/\0A\09\09.descriptorCount := MAX_GLOBAL_IMAGE_COUNT@u32;\0A\09\09.stageFlags := 0x7FFFFFFF;\0A\09\09.pImmutableSamplers := null;\0A\09};\0A\09bindings_size : u32 := __sizeof(bindings) / __sizeof(deref(bindings at 0));\0A\0A\09flags : s32 mut#2;\0A\09deref(flags at 0) = 0;\0A\09deref(flags at 1) =\0A\09\09(0x00000004 | /*VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT*/ \0A\09\090x00000001 | /*VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT*/\0A\09\090x00000002 | /*VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT*/\0A\09\090x00000008); /*VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT*/\0A\09flags_size : u32 := __sizeof(flags) / __sizeof(deref(flags at 0));\0A\0A\09flags_create ::= VkDescriptorSetLayoutBindingFlagsCreateInfo\0A\09{\0A\09\09.sType := 1000161000;\0A\09\09.pNext := null;\0A\09\09.bindingCount := flags_size@u32;\0A\09\09.pBindingFlags := flags at 0;\0A\09};\0A\0A\09layout_create ::= VkDescriptorSetLayoutCreateInfo\0A\09{\0A\09\09.sType := 32;\0A\09\09.pNext := (ref flags_create)@_;\0A\09\09.flags := 0x00000002; /*VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT */\0A\09\09.bindingCount := bindings_size@u32;\0A\09\09.pBindings := bindings at 0;\0A\09};\0A\0A\09counter : u64 mut;\0A\09for(counter = 0, counter < frame_overlap, counter = counter + 1)\0A\09{\0A\09\09vk_check(vk.create_descriptor_set_layout(used_device, ref layout_create, null, set_layouts at counter));\0A\09}\0A\0A\09create ::= VkPipelineLayoutCreateInfo\0A\09{\0A\09\09.sType := 30;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.setLayoutCount := frame_overlap@u32;\0A\09\09.pSetLayouts := set_layouts at 0;\0A\09\09.pushConstantRangeCount := 0;\0A\09\09.pPushConstantRanges := null;\0A\09};\0A\0A\09ret : u64 mut;\0A\09vk_check(vk.create_pipeline_layout(used_device, ref create, null, ref ret));\0A\0A\09return ret;\0A};\0A\0A[[private]]\0Aimpl_fill_hardware_info ::= func(hw : tz_gpu_hardware mut&, pdev : u64, a : arena mut&) -> v0\0A{\0A\09props : VkPhysicalDeviceProperties mut;\0A\09vk.get_physical_device_properties(pdev, ref props);\0A\09memprops : VkPhysicalDeviceMemoryProperties mut;\0A\09vk.get_physical_device_memory_properties(pdev, ref memprops);\0A\0A\09(hw->id) = -1;\0A\09(hw->native_handle) = pdev;\0A\09(hw->vram_size_mib) = 0;\0A\09(hw->target_heap_gpu) = 0;\0A\09(hw->target_heap_cpu) = 0;\0A\0A\09(hw->type) = (tz_gpu_hardware_type.unknown);\0A\09if(props.deviceType == 0x01)\0A\09{\0A\09\09(hw->type) = (tz_gpu_hardware_type.igpu);\0A\09}\0A\09if(props.deviceType == 0x02)\0A\09{\0A\09\09(hw->type) = (tz_gpu_hardware_type.gpu);\0A\09}\0A\09if(props.deviceType == 0x04)\0A\09{\0A\09\09(hw->type) = (tz_gpu_hardware_type.cpu);\0A\09}\0A\09counter : u32 mut := 0;\0A\0A\09cur_vk_heap : VkMemoryHeap mut;\0A\09cur_mem_ty : VkMemoryType mut;\0A\0A\09size_gpu : u64 mut := 0;\0A\09size_cpu : u64 mut := 0;\0A\0A\09for(counter = 0, counter < (memprops.memoryTypeCount), counter = counter + 1)\0A\09{\0A\09\09cur_mem_ty = deref(memprops.memoryTypes at counter);\0A\09\09cur_vk_heap = deref(memprops.memoryHeaps at (cur_mem_ty.heapIndex));\0A\09\09if((cur_mem_ty.propertyFlags) & 0x00000002) /*HOST_VISIBLE*/\0A\09\09{\0A\09\09\09if(size_cpu < (cur_vk_heap.size))\0A\09\09\09{\0A\09\09\09\09(hw->target_heap_cpu) = counter@_;\0A\09\09\09\09size_cpu = (cur_vk_heap.size);\0A\09\09\09}\0A\09\09}\0A\09\09if((cur_mem_ty.propertyFlags) & 0x00000001) /*DEVICE_LOCAL*/\0A\09\09{\0A\09\09\09if(size_gpu < (cur_vk_heap.size))\0A\09\09\09{\0A\09\09\09\09(hw->target_heap_gpu) = counter@_;\0A\09\09\09\09size_gpu = (cur_vk_heap.size);\0A\09\09\09}\0A\09\09}\0A\09}\0A\09counter = 0;\0A\09for(counter = 0, counter < (memprops.memoryHeapCount), counter = counter + 1)\0A\09{\0A\09\09cur_vk_heap = deref(memprops.memoryHeaps at counter);\0A\09\09(hw->vram_size_mib) = (hw->vram_size_mib) + (cur_vk_heap.size);\0A\09}\0A\0A\09family_count : u32 mut := 0;\0A\09vk.get_physical_device_queue_family_properties(pdev, ref family_count, null);\0A\09families : VkQueueFamilyProperties mut& := arena_push(a, __sizeof(VkQueueFamilyProperties) * family_count);\0A\09vk.get_physical_device_queue_family_properties(pdev, ref family_count, families);\0A\0A\09cur_fam : VkQueueFamilyProperties mut;\0A\09for(counter = 0, counter < family_count, counter = counter + 1)\0A\09{\0A\09\09// hw->idx should be set to the first graphics compute queue.\0A\09\09cur_fam = deref(families at counter);\0A\09\09if((cur_fam.queueFlags) & 0x03)\0A\09\09{\0A\09\09\09(hw->id) = counter;\0A\09\09\09counter = family_count;\0A\09\09}\0A\09}\0A\0A\09(hw->name) = create_string(props.deviceName at 0, a);\0A};\0A\0A// api\0A\0Atz_gpu_init ::= func(info : tz_gpu_appinfo) -> v0\0A{\0A\09TZ_GPU_VERSION ::= VK_MAKE_API_VERSION(0, 0, 1, 0);\0A\09vulkan_init();\0A\0A\09appinfo ::= VkApplicationInfo\0A\09{\0A\09\09.sType := 0;\0A\09\09.pNext := null;\0A\09\09.pApplicationName := info.name;\0A\09\09.applicationVersion := VK_MAKE_API_VERSION(0, info.ver_maj, info.ver_min, 0);\0A\09\09.pEngineName := \22tz_gpu\22;\0A\09\09.engineVersion := TZ_GPU_VERSION;\0A\09\09.apiVersion := VK_MAKE_API_VERSION(0, 1, 3, 0);\0A\09};\0A\0A\09extensions : u8& mut#3;\0A\09deref(extensions at 0) = \22VK_KHR_surface\22;\0A\09if static(__is_windows)\0A\09{\0A\09\09deref(extensions at 1) = \22VK_KHR_win32_surface\22;\0A\09}\0A\09if static(__is_linux)\0A\09{\0A\09\09deref(extensions at 1) = \22VK_KHR_xlib_surface\22;\0A\09}\0A\09// todo: make VK_EXT_debug_utils optional.\0A\09deref(extensions at 2) = \22VK_EXT_debug_utils\22;\0A\09extension_count : u32 mut := __sizeof(extensions) / __sizeof(u8&);\0A\0A\09layers : u8& mut#1;\0A\09deref(layers at 0) = \22VK_LAYER_KHRONOS_validation\22;\0A\0A\09if static(__config() == \22debug\22)\0A\09{\0A\09\09layer_count ::= 1;\0A\09\09puts(\22validation layers enabled\22);\0A\09\09putchar(10);\0A\09}\0A\09if static(__config() == \22release\22)\0A\09{\0A\09\09layer_count ::= 0;\0A\09\09extension_count = (extension_count - 1);\0A\09}\0A\0A\0A\09create ::= VkInstanceCreateInfo\0A\09{\0A\09\09.sType := 1;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.pApplicationInfo := ref appinfo;\0A\09\09.enabledLayerCount := layer_count;\0A\09\09.ppEnabledLayerNames := layers at 0;\0A\09\09.enabledExtensionCount := extension_count;\0A\09\09.ppEnabledExtensionNames := extensions at 0;\0A\09};\0A\0A\09vk_check(vk.create_instance(ref create, null, ref vkinst));\0A\09vulkan_load_functions(vkinst);\0A};\0A\0Atz_gpu_term ::= func() -> v0\0A{\0A\09vk.device_wait_idle(used_device);\0A\09if(pipeline_layout != 0)\0A\09{\0A\09\09vk.destroy_pipeline_layout(used_device, pipeline_layout, null);\0A\09\09pipeline_layout = 0;\0A\09}\0A\09if(scratch.cpool != 0)\0A\09{\0A\09\09vk.destroy_command_pool(used_device, scratch.cpool, null);\0A\09\09scratch.cpool = 0;\0A\09}\0A\09if(scratch.fence != 0)\0A\09{\0A\09\09vk.destroy_fence(used_device, scratch.fence, null);\0A\09}\0A\09counter : u64 mut;\0A\09frame_ptr : frame_data mut& mut;\0A\09for(counter = 0, counter < frame_overlap, counter = counter + 1)\0A\09{\0A\09\09frame_ptr = (frames at counter);\0A\09\09if(frame_ptr->cpool != 0)\0A\09\09{\0A\09\09\09vk.destroy_command_pool(used_device, frame_ptr->cpool, null);\0A\09\09\09(frame_ptr->cpool) = 0;\0A\09\09}\0A\09\09if(frame_ptr->swapchain_fence != 0)\0A\09\09{\0A\09\09\09vk.destroy_fence(used_device, frame_ptr->swapchain_fence, null);\0A\09\09\09(frame_ptr->swapchain_fence) = 0;\0A\09\09}\0A\09\09if(frame_ptr->swapchain_sem != 0)\0A\09\09{\0A\09\09\09vk.destroy_semaphore(used_device, frame_ptr->swapchain_sem, null);\0A\09\09\09(frame_ptr->swapchain_sem) = 0;\0A\09\09}\0A\0A\09\09// dont forget descriptor layouts.\0A\09\09vk.destroy_descriptor_set_layout(used_device, deref(set_layouts at counter), null);\0A\09\09deref(set_layouts at counter) = 0;\0A\09}\0A\09for(counter = 0, counter < (swapchain_image_count@_), counter = counter + 1)\0A\09{\0A\09\09vk.destroy_image_view(used_device, deref(swapchain_views at counter), null);\0A\09}\0A\09if(swapchain != 0)\0A\09{\0A\09\09vk.destroy_swapchain_khr(used_device, swapchain, null);\0A\09}\0A\0A\09if(system_image_view != 0)\0A\09{\0A\09\09vk.destroy_image_view(used_device, system_image_view, null);\0A\09\09system_image_view = 0;\0A\09}\0A\09if(system_image != 0)\0A\09{\0A\09\09vk.destroy_image(used_device, system_image, null);\0A\09\09system_image = 0;\0A\09}\0A\0A\09// destroy all passes\0A\09passptr : pass_data_t mut& mut;\0A\09for(counter = 0, counter < passes_count, counter = counter + 1)\0A\09{\0A\09\09passptr = passes at counter;\09\0A\09\09vk.destroy_buffer(used_device, passptr->metabuf, null);\0A\09\09vk.destroy_pipeline(used_device, passptr->pipeline, null);\0A\09}\0A\09passes_count = 0;\0A\0A\09// destroy all resources.\0A\09resptr : resource_data_t mut& mut;\0A\09for(counter = 0, counter < resource_count, counter = counter + 1)\0A\09{\0A\09\09resptr = resources at counter;\09\0A\09\09if(resptr->is_buffer)\0A\09\09{\0A\09\09\09vk.destroy_buffer(used_device, resptr->vk_handle, null);\0A\09\09\09(resptr->vk_handle) = 0;\0A\09\09}\0A\09\09if(!(resptr->is_buffer))\0A\09\09{\0A\09\09\09vk.destroy_sampler(used_device, resptr->sampler, null);\0A\09\09\09vk.destroy_image_view(used_device, resptr->image_view, null);\0A\09\09\09vk.destroy_image(used_device, resptr->vk_handle, null);\0A\09\09\09(resptr->vk_handle) = 0;\0A\09\09}\0A\09}\0A\09resource_count = 0;\0A\0A\09for(counter = 0, counter < descriptor_pools_count, counter = counter + 1)\0A\09{\0A\09\09vk.destroy_descriptor_pool(used_device, deref(descriptor_pools_data at counter), null);\0A\09}\0A\09descriptor_pools_count = 0;\0A\0A\09// destroy all shaders.\0A\09shad : shader_data_t mut& mut;\0A\09for(counter = 0, counter < shaders_count, counter = counter + 1)\0A\09{\0A\09\09shad = shaders at counter;\09\0A\09\09if(shad->vertex_module != 0)\0A\09\09{\0A\09\09\09vk.destroy_shader_module(used_device, shad->vertex_module, null);\0A\09\09\09shad->vertex_module = 0;\0A\09\09}\0A\09\09if(shad->fragment_module != 0)\0A\09\09{\0A\09\09\09vk.destroy_shader_module(used_device, shad->fragment_module, null);\0A\09\09\09shad->fragment_module = 0;\0A\09\09}\0A\09\09if(shad->compute_module != 0)\0A\09\09{\0A\09\09\09vk.destroy_shader_module(used_device, shad->compute_module, null);\0A\09\09\09shad->compute_module = 0;\0A\09\09}\0A\09}\0A\09shaders_count = 0;\0A\0A\09impl_vallocator_free_all();\0A\0A\09vk.destroy_device(used_device, null);\0A\09if(surface != 0)\0A\09{\0A\09\09vk.destroy_surface_khr(vkinst, surface, null);\0A\09}\0A\09vk.destroy_instance(vkinst, null);\0A\09vulkan_term();\0A};\0A\0Atz_gpu_hardware_count ::= func() -> u64\0A{\0A\09ret : u32 mut;\0A\09vk_check(vk.enumerate_physical_devices(vkinst, ref ret, null));\0A\09return ret@_;\0A};\0A\0Atz_gpu_iterate_hardware ::= func(array : tz_gpu_hardware mut&, array_size : u64, a : arena mut&) -> tz_gpu_err\0A{\0A\09// need an array of VkPhysicalDevices for vulkan to write into.\0A\09pdev_storage : u64 mut& := arena_push(a, __sizeof(u64) * array_size);\0A\09physical_device_count : u32 mut := array_size@_;\0A\09result ::= vk.enumerate_physical_devices(vkinst, ref physical_device_count, pdev_storage);\0A\09if(result != 0)\0A\09{\0A\09\09return tz_gpu_err.unknown;\0A\09}\0A\09\0A\09counter : u64 mut;\0A\09for(counter = 0, counter < array_size, counter = counter + 1)\0A\09{\0A\09\09impl_fill_hardware_info(array at counter, deref(pdev_storage at counter), a);\0A\09}\0A\09return tz_gpu_err.none;\0A};\0A\0Atz_gpu_use_hardware ::= func(hardware : tz_gpu_hardware, window : tz_wnd_window) -> v0\0A{\0A\09target_window = window;\0A\09pdev ::= hardware.native_handle;\0A\09queue_priority : f32 := 1.0;\0A\0A\09qcreate ::= VkDeviceQueueCreateInfo\0A\09{\0A\09\09.sType := 2;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.queueFamilyIndex := hardware.id;\0A\09\09.queueCount := 1;\0A\09\09.pQueuePriorities := ref queue_priority;\0A\09};\0A\0A\09features13 ::= VkPhysicalDeviceVulkan13Features\0A\09{\0A\09\09.sType := 53;\0A\09\09.pNext := null;\0A\09\09.robustImageAccess := 0;\0A\09\09.inlineUniformBlock := 0;\0A\09\09.descriptorBindingInlineUniformBlockUpdateAfterBind := 0;\0A\09\09.pipelineCreationCacheControl := 0;\0A\09\09.privateData := 0;\0A\09\09.shaderDemoteToHelperInvocation := 0;\0A\09\09.shaderTerminateInvocation := 0;\0A\09\09.subgroupSizeControl := 0;\0A\09\09.computeFullSubgroups := 0;\0A\09\09.synchronization2 := 1;\0A\09\09.textureCompressionASTC_HDR := 0;\0A\09\09.shaderZeroInitializeWorkgroupMemory := 0;\0A\09\09.dynamicRendering := 1;\0A\09\09.shaderIntegerDotProduct := 0;\0A\09\09.maintenance4 := 0;\0A\09};\0A\0A\09features12 ::= VkPhysicalDeviceVulkan12Features \0A\09{\0A\09\09.sType := 51;\0A\09\09.pNext := (ref features13)@_;\0A\09\09.samplerMirrorClampToEdge := 0;\0A\09\09.drawIndirectCount := 1;\0A\09\09.storageBuffer8BitAccess := 0;\0A\09\09.uniformAndStorageBuffer8BitAccess := 0;\0A\09\09.storagePushConstant8 := 0;\0A\09\09.shaderBufferInt64Atomics := 0;\0A\09\09.shaderSharedInt64Atomics := 0;\0A\09\09.shaderFloat16 := 0;\0A\09\09.shaderInt8 := 0;\0A\09\09.descriptorIndexing := 1;\0A\09\09.shaderInputAttachmentArrayDynamicIndexing := 0;\0A\09\09.shaderUniformTexelBufferArrayDynamicIndexing := 0;\0A\09\09.shaderStorageTexelBufferArrayDynamicIndexing := 0;\0A\09\09.shaderUniformBufferArrayNonUniformIndexing := 0;\0A\09\09.shaderSampledImageArrayNonUniformIndexing := 1;\0A\09\09.shaderStorageBufferArrayNonUniformIndexing := 0;\0A\09\09.shaderStorageImageArrayNonUniformIndexing := 0;\0A\09\09.shaderInputAttachmentArrayNonUniformIndexing := 0;\0A\09\09.shaderUniformTexelBufferArrayNonUniformIndexing := 0;\0A\09\09.shaderStorageTexelBufferArrayNonUniformIndexing := 0;\0A\09\09.descriptorBindingUniformBufferUpdateAfterBind := 0;\0A\09\09.descriptorBindingSampledImageUpdateAfterBind := 1;\0A\09\09.descriptorBindingStorageImageUpdateAfterBind := 0;\0A\09\09.descriptorBindingStorageBufferUpdateAfterBind := 0;\0A\09\09.descriptorBindingUniformTexelBufferUpdateAfterBind := 0;\0A\09\09.descriptorBindingStorageTexelBufferUpdateAfterBind := 0;\0A\09\09.descriptorBindingUpdateUnusedWhilePending := 1;\0A\09\09.descriptorBindingPartiallyBound := 1;\0A\09\09.descriptorBindingVariableDescriptorCount := 1;\0A\09\09.runtimeDescriptorArray := 1;\0A\09\09.samplerFilterMinmax := 0;\0A\09\09.scalarBlockLayout := 0;\0A\09\09.imagelessFramebuffer := 0;\0A\09\09.uniformBufferStandardLayout := 0;\0A\09\09.shaderSubgroupExtendedTypes := 0;\0A\09\09.separateDepthStencilLayouts := 0;\0A\09\09.hostQueryReset := 0;\0A\09\09.timelineSemaphore := 1;\0A\09\09.bufferDeviceAddress := 1;\0A\09\09.bufferDeviceAddressCaptureReplay := 0;\0A\09\09.bufferDeviceAddressMultiDevice := 0;\0A\09\09.vulkanMemoryModel := 0;\0A\09\09.vulkanMemoryModelDeviceScope := 0;\0A\09\09.vulkanMemoryModelAvailabilityVisibilityChains := 0;\0A\09\09.shaderOutputViewportIndex := 0;\0A\09\09.shaderOutputLayer := 0;\0A\09\09.subgroupBroadcastDynamicId := 0;\0A\09};\0A\0A\09enabled_features ::= VkPhysicalDeviceFeatures2\0A\09{\0A\09\09.sType := 1000059000;\0A\09\09.pNext := (ref features12)@_;\0A\09\09.features := VkPhysicalDeviceFeatures\0A\09\09{\0A\09\09\09.robustBufferAccess := 0;\0A\09\09\09.fullDrawIndexUint32 := 0;\0A\09\09\09.imageCubeArray := 0;\0A\09\09\09.independentBlend := 0;\0A\09\09\09.geometryShader := 0;\0A\09\09\09.tessellationShader := 0;\0A\09\09\09.sampleRateShading := 0;\0A\09\09\09.dualSrcBlend := 0;\0A\09\09\09.logicOp := 0;\0A\09\09\09.multiDrawIndirect := 0;\0A\09\09\09.drawIndirectFirstInstance := 0;\0A\09\09\09.depthClamp := 0;\0A\09\09\09.depthBiasClamp := 0;\0A\09\09\09.fillModeNonSolid := 0;\0A\09\09\09.depthBounds := 0;\0A\09\09\09.wideLines := 0;\0A\09\09\09.largePoints := 0;\0A\09\09\09.alphaToOne := 0;\0A\09\09\09.multiViewport := 0;\0A\09\09\09.samplerAnisotropy := 0;\0A\09\09\09.textureCompressionETC2 := 0;\0A\09\09\09.textureCompressionASTC_LDR := 0;\0A\09\09\09.textureCompressionBC := 0;\0A\09\09\09.occlusionQueryPrecise := 0;\0A\09\09\09.pipelineStatisticsQuery := 0;\0A\09\09\09.vertexPipelineStoresAndAtomics := 0;\0A\09\09\09.fragmentStoresAndAtomics := 0;\0A\09\09\09.shaderTessellationAndGeometryPointSize := 0;\0A\09\09\09.shaderImageGatherExtended := 0;\0A\09\09\09.shaderStorageImageExtendedFormats := 0;\0A\09\09\09.shaderStorageImageMultisample := 0;\0A\09\09\09.shaderStorageImageReadWithoutFormat := 0;\0A\09\09\09.shaderStorageImageWriteWithoutFormat := 0;\0A\09\09\09.shaderUniformBufferArrayDynamicIndexing := 0;\0A\09\09\09.shaderSampledImageArrayDynamicIndexing := 0;\0A\09\09\09.shaderStorageBufferArrayDynamicIndexing := 0;\0A\09\09\09.shaderStorageImageArrayDynamicIndexing := 0;\0A\09\09\09.shaderClipDistance := 0;\0A\09\09\09.shaderCullDistance := 0;\0A\09\09\09.shaderFloat64 := 0;\0A\09\09\09.shaderInt64 := 0;\0A\09\09\09.shaderInt16 := 0;\0A\09\09\09.shaderResourceResidency := 0;\0A\09\09\09.shaderResourceMinLod := 0;\0A\09\09\09.sparseBinding := 0;\0A\09\09\09.sparseResidencyBuffer := 0;\0A\09\09\09.sparseResidencyImage2D := 0;\0A\09\09\09.sparseResidencyImage3D := 0;\0A\09\09\09.sparseResidency2Samples := 0;\0A\09\09\09.sparseResidency4Samples := 0;\0A\09\09\09.sparseResidency8Samples := 0;\0A\09\09\09.sparseResidency16Samples := 0;\0A\09\09\09.sparseResidencyAliased := 0;\0A\09\09\09.variableMultisampleRate := 0;\0A\09\09\09.inheritedQueries := 0;\0A\09\09};\0A\09};\0A\0A\09extensions : u8& mut#1;\0A\09deref(extensions at 0) = \22VK_KHR_swapchain\22;\0A\09extension_count : u32 := __sizeof(extensions) / __sizeof(u8&);\0A\0A\09create ::= VkDeviceCreateInfo\0A\09{\0A\09\09.sType := 3;\0A\09\09.pNext := (ref enabled_features)@_;\0A\09\09.flags := 0;\0A\09\09.queueCreateInfoCount := 1;\0A\09\09.pQueueCreateInfos := (ref qcreate)@_;\0A\09\09.enabledLayerCount := 0;\0A\09\09.ppEnabledLayerNames := null;\0A\09\09.enabledExtensionCount := extension_count;\0A\09\09.ppEnabledExtensionNames := extensions at 0;\0A\09\09.pEnabledFeatures := null;\0A\09};\0A\0A\09vk_check(vk.create_device(pdev, ref create, null, ref used_device));\0A\09used_hardware = pdev;\0A\09used_qfi = (hardware.id);\0A\09used_mti_gpu = (hardware.target_heap_gpu)@_;\0A\09used_mti_cpu = (hardware.target_heap_cpu)@_;\0A\0A\09vk.get_device_queue(used_device, used_qfi, 0, ref graphics_queue);\0A\09vk.get_device_queue(used_device, used_qfi, 0, ref compute_queue);\0A\0A\09pool_create ::= VkCommandPoolCreateInfo\0A\09{\0A\09\09.sType := 39;\0A\09\09.pNext := null;\0A\09\09.flags := 0x02;\0A\09\09.queueFamilyIndex := used_qfi;\0A\09};\0A\09\0A\09counter : u64 mut := 0;\0A\09frame_ptr : frame_data mut& mut;\0A\0A\09cmd_info : VkCommandBufferAllocateInfo mut := VkCommandBufferAllocateInfo\0A\09{\0A\09\09.sType := 40;\0A\09\09.pNext := null;\0A\09\09.commandPool := 0;\0A\09\09.level := 0;\0A\09\09.commandBufferCount := 1;\0A\09};\0A\0A\09fence_create ::= VkFenceCreateInfo\0A\09{\0A\09\09.sType := 8;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09};\0A\0A\09sem_create ::= VkSemaphoreCreateInfo\0A\09{\0A\09\09.sType := 9;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09};\0A\0A\09for(counter = 0, counter < frame_overlap, counter = counter + 1)\0A\09{\0A\09\09frame_ptr = (frames at counter);\0A\09\09vk_check(vk.create_command_pool(used_device, ref pool_create, null, ref (frame_ptr->cpool)));\0A\09\09cmd_info.commandPool = (frame_ptr->cpool);\0A\09\09vk_check(vk.allocate_command_buffers(used_device, ref cmd_info, ref (frame_ptr->cmds)));\0A\0A\09\09vk_check(vk.create_fence(used_device, ref fence_create, null, ref (frame_ptr->swapchain_fence)));\0A\09\09vk_check(vk.create_semaphore(used_device, ref sem_create, null, ref (frame_ptr->swapchain_sem)));\0A\09}\0A\0A\09vk_check(vk.create_command_pool(used_device, ref pool_create, null, ref (scratch.cpool)));\0A\09cmd_info.commandPool = scratch.cpool;\0A\09vk_check(vk.allocate_command_buffers(used_device, ref cmd_info, ref (scratch.cmds)));\0A\0A\09vk_check(vk.create_fence(used_device, ref fence_create, null, ref (scratch.fence)));\0A\0A\09pipeline_layout = impl_initialise_pipeline_layout();\0A\09impl_vallocator_initial_setup();\0A\0A\09puts(\22using \22);\0A\09print_string(ref (hardware.name));\0A\09putchar(10);\0A};\0A\0Atz_gpu_create_buffer ::= func(info : tz_gpu_resource_info, a : arena mut&) -> tz_gpu_resource\0A{\0A\09retid ::= resource_count;\0A\09resptr ::= impl_alloc_new_resource(a);\0A\09resptr->info = info;\0A\09resptr->is_buffer = true;\0A\09create : VkBufferCreateInfo mut := VkBufferCreateInfo\0A\09{\0A\09\09.sType := 12;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.size := info.data_size;\0A\09\09.usage := (0x00000020 | 0x00020000);\0A\09\09.sharingMode := 0;\0A\09\09.queueFamilyIndexCount := 1;\0A\09\09.pQueueFamilyIndices := ref used_qfi;\0A\09};\0A\09dynamic ::= ((info.buffer_flags) & (tz_gpu_buffer_flag.dynamic)) > 0;\0A\09if(!dynamic)\0A\09{\0A\09\09create.usage = (create.usage) | 0x00000002;\0A\09}\0A\09if(((info.buffer_flags) & (tz_gpu_buffer_flag.index_buffer)) > 0)\0A\09{\0A\09\09create.usage = (create.usage) | 0x00000040;\0A\09}\0A\09if(((info.buffer_flags) & (tz_gpu_buffer_flag.draw_buffer)) > 0)\0A\09{\0A\09\09create.usage = (create.usage) | 0x00000100;\0A\09}\0A\09vk_check(vk.create_buffer(used_device, ref create, null, ref (resptr->vk_handle)));\0A\09bda ::= VkBufferDeviceAddressInfo\0A\09{\0A\09\09.sType := 1000244001;\0A\09\09.pNext := null;\0A\09\09.buffer := resptr->vk_handle;\0A\09};\0A\09cursor ::= impl_bind_buffer_mem(resptr->vk_handle, info.data_size, !dynamic);\0A\09if(dynamic)\0A\09{\0A\09\09cpumem ::= vallocator.buffer_cpu;\0A\09\09mapped_ptr ::= (cpumem.mapped_ptr)@u8 mut&;\0A\09\09(resptr->mapped_ptr) = (mapped_ptr at cursor)@_;\0A\09}\0A\09tmp_bda ::= vk.get_buffer_device_address(used_device, ref bda);\0A\09(resptr->buffer_device_address) = tmp_bda;\0A\0A\09// make a copy of the resource data using the arena.\0A\09resinfo ::= ref(resptr->info);\0A\09resinfo->data = arena_push(a, info.data_size);\0A\09if(info.data != null)\0A\09{\0A\09\09__memcpy(resinfo->data, info.data, info.data_size);\0A\09}\0A\0A\09if(((info.flags) & (tz_gpu_resource_flag.zero_memory)) > 0)\0A\09{\0A\09\09__memset(resinfo->data, 0, info.data_size);\0A\09}\0A\0A\09// write resource data to gpu memory.\0A\09impl_write_a_resource(resptr);\0A\09return retid@tz_gpu_resource;\0A};\0A\0Atz_gpu_create_image ::= func(info : tz_gpu_resource_info, a : arena mut&) -> tz_gpu_resource\0A{\0A\09retid ::= resource_count;\0A\09resptr ::= impl_alloc_new_resource(a);\0A\09resptr->info = info;\0A\09resptr->is_buffer = false;\0A\09fmt : s32 mut;\0A\09aspect_mask : s32 mut;\0A\09if((info.image_type) == (tz_gpu_image_type.rgba))\0A\09{\0A\09\09fmt = rgba_format;\0A\09\09aspect_mask = 0x00000001;\0A\09}\0A\09if((info.image_type) == (tz_gpu_image_type.depth))\0A\09{\0A\09\09fmt = depth_format;\0A\09\09aspect_mask = 0x00000002;\0A\09}\0A\09dims ::= info.image_dimensions;\0A\09create : VkImageCreateInfo mut := VkImageCreateInfo\0A\09{\0A\09\09.sType := 14;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.imageType := 1;\0A\09\09.format := fmt;\0A\09\09.extent := VkExtent3D\0A\09\09{\0A\09\09\09.width := dims.x;\0A\09\09\09.height := dims.y;\0A\09\09\09.depth := 1;\0A\09\09};\0A\09\09.mipLevels := 1;\0A\09\09.arrayLayers := 1;\0A\09\09.samples := 1;\0A\09\09.tiling := 0;\0A\09\09.usage := (0x00000004 | 0x00000002); /* VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT */\0A\09\09.sharingMode := 0;\0A\09\09.queueFamilyIndexCount := 1;\0A\09\09.pQueueFamilyIndices := ref used_qfi;\0A\09\09.initialLayout := 0;\0A\09};\0A\09vk_check(vk.create_image(used_device, ref create, null, ref (resptr->vk_handle)));\0A\09w ::= dims.x;\0A\09h ::= dims.y;\0A\09impl_bind_image_mem(resptr->vk_handle, w * h * 4);\0A\0A\09view_create ::= VkImageViewCreateInfo\0A\09{\0A\09\09.sType := 15;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.image := resptr->vk_handle;\0A\09\09.viewType := 1;\0A\09\09.format := fmt;\0A\09\09.components := VkComponentMapping\0A\09\09{\0A\09\09\09.r := 0;\0A\09\09\09.g := 0;\0A\09\09\09.b := 0;\0A\09\09\09.a := 0;\0A\09\09};\0A\09\09.subresourceRange := VkImageSubresourceRange\0A\09\09{\0A\09\09\09.aspectMask := aspect_mask;\0A\09\09\09.baseMipLevel := 0;\0A\09\09\09.levelCount := 1;\0A\09\09\09.baseArrayLayer := 0;\0A\09\09\09.layerCount := 1;\0A\09\09};\0A\09};\0A\0A\09vk_check(vk.create_image_view(used_device, ref view_create, null, ref (resptr->image_view)));\0A\0A\09sampler_create ::= VkSamplerCreateInfo\0A\09{\0A\09\09.sType := 31;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.magFilter := 0;\0A\09\09.minFilter := 0;\0A\09\09.mipmapMode := 0;\0A\09\09.addressModeU := 2;\0A\09\09.addressModeV := 2;\0A\09\09.addressModeW := 2;\0A\09\09.mipLodBias := 0.0;\0A\09\09.anisotropyEnable := 0;\0A\09\09.maxAnisotropy := 0.0;\0A\09\09.compareEnable := 0;\0A\09\09.compareOp := 7;\0A\09\09.minLod := 0.0;\0A\09\09.maxLod := 0.0;\0A\09\09.borderColor := 3;\0A\09\09.unnormalizedCoordinates := 0;\0A\09};\0A\09vk_check(vk.create_sampler(used_device, ref sampler_create, null, ref (resptr->sampler)));\0A\0A\09// make a copy of the resource data using the arena.\0A\09resinfo ::= ref(resptr->info);\0A\09resinfo->data = arena_push(a, info.data_size);\0A\09if(info.data != null)\0A\09{\0A\09\09__memcpy(resinfo->data, info.data, info.data_size);\0A\09}\0A\0A\09if(((info.flags) & (tz_gpu_resource_flag.zero_memory)) > 0)\0A\09{\0A\09\09__memset(resinfo->data, 0, info.data_size);\0A\09}\0A\0A\09// write resource data to gpu memory.\0A\09impl_write_a_resource(resptr);\0A\0A\09return retid@tz_gpu_resource;\0A};\0A\0Atz_gpu_load_shader_files ::= func(vertex_spv_path : u8&, fragment_spv_path : u8&, a : arena mut&) -> tz_gpu_shader_sources\0A{\0A\09ret : tz_gpu_shader_sources mut;\0A\09ret.vertex_spv_count = file_size_bytes(vertex_spv_path);\0A\09ret.fragment_spv_count = file_size_bytes(fragment_spv_path);\0A\0A\09ret.vertex_spv_data = arena_push(a, ret.vertex_spv_count);\0A\09ret.fragment_spv_data = arena_push(a, ret.fragment_spv_count);\0A\0A\09file_read(vertex_spv_path, ret.vertex_spv_data, ret.vertex_spv_count);\0A\09file_read(fragment_spv_path, ret.fragment_spv_data, ret.fragment_spv_count);\0A\0A\09return ret;\0A};\0A\0Atz_gpu_create_graphics_shader ::= func(vertex_source : u8&, vertex_source_len : u64, fragment_source : u8&, fragment_source_len : u64, a : arena mut&) -> tz_gpu_shader\0A{\0A\09retid ::= shaders_count;\0A\09resptr ::= impl_alloc_new_shader(a);\0A\09resptr->is_graphics = true;\0A\09resptr->compute_module = 0;\0A\0A\09vcreate ::= VkShaderModuleCreateInfo\0A\09{\0A\09\09.sType := 16;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.codeSize := vertex_source_len@_;\0A\09\09.pCode := vertex_source@_;\0A\09};\0A\09vk.create_shader_module(used_device, ref vcreate, null, ref (resptr->vertex_module));\0A\09fcreate ::= VkShaderModuleCreateInfo\0A\09{\0A\09\09.sType := 16;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.codeSize := fragment_source_len@_;\0A\09\09.pCode := fragment_source@_;\0A\09};\0A\09vk.create_shader_module(used_device, ref fcreate, null, ref (resptr->fragment_module));\0A\0A\09return retid@tz_gpu_shader;\0A};\0A\0Atz_gpu_create_compute_shader ::= func(compute_source : u8&, compute_source_len : u64, a : arena mut&) -> tz_gpu_shader\0A{\0A\09retid ::= shaders_count;\0A\09resptr ::= impl_alloc_new_shader(a);\0A\09resptr->is_graphics = false;\0A\09resptr->vertex_module = 0;\0A\09resptr->fragment_module = 0;\0A\0A\09vcreate ::= VkShaderModuleCreateInfo\0A\09{\0A\09\09.sType := 16;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.codeSize := compute_source_len@_;\0A\09\09.pCode := compute_source@_;\0A\09};\0A\09vk.create_shader_module(used_device, ref vcreate, null, ref (resptr->compute_module));\0A\0A\09return retid@tz_gpu_shader;\0A};\0A\0Atz_gpu_create_pass ::= func(info : tz_gpu_pass_info, long : arena mut&, short : arena mut&) -> tz_gpu_pass\0A{\0A\09retid ::= passes_count;\0A\09passptr ::= impl_alloc_new_pass(long);\0A\09passptr->info = info;\0A\09// first thing we need is a metabuffer.\0A\09// this is a non-BDA buffer that contains all the BDA addresses.\0A\09// let's figure out how many buffer resources we have\0A\09buffer_rescount : u64 mut := 0;\0A\09counter : u64 mut;\0A\09cur_resource : resource_data_t mut;\0A\09for(counter = 0, counter < (info.resources_count), counter = counter + 1)\0A\09{\0A\09\09cur_resource = deref (resources at (deref(info.resources_data at counter)@s64));\0A\09\09if(cur_resource.is_buffer)\0A\09\09{\0A\09\09\09buffer_rescount = buffer_rescount + 1;\0A\09\09}\0A\09}\0A\0A\09size : u64 mut := 1;\0A\09if(buffer_rescount > 0)\0A\09{\0A\09\09size = buffer_rescount * __sizeof(u64);\0A\09}\0A\09meta_create ::= VkBufferCreateInfo\0A\09{\0A\09\09.sType := 12;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.size := size;\0A\09\09.usage := (0x00000020 | 0x00000002); /* VK_BUFFER_USAGE_STORAGE_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT */\0A\09\09.sharingMode := 0;\0A\09\09.queueFamilyIndexCount := 1;\0A\09\09.pQueueFamilyIndices := ref used_qfi;\0A\09};\0A\09vk_check(vk.create_buffer(used_device, ref meta_create, null, ref (passptr->metabuf)));\0A\09(passptr->metabuf_size) = size;\0A\09impl_bind_buffer_mem(passptr->metabuf, size, true);\0A\09// create pipeline.\0A\09if(passptr->is_compute)\0A\09{\0A\09\09passptr->pipeline = impl_create_compute_pipeline(info.shader, info.compute);\0A\09}\0A\0A\09passptr->targets_swapchain = false;\0A\0A\09passptr->is_compute = impl_shader_is_compute(info.shader);\0A\09ginfo ::= info.graphics;\0A\09cur_colour_target : tz_gpu_resource mut;\0A\09if(!(passptr->is_compute))\0A\09{\0A\09\09if((ginfo.draw_buffer) != (tz_gpu_resource.invalid))\0A\09\09{\0A\09\09\09drawbuf_handle ::= (ginfo.draw_buffer)@s64;\0A\09\09\09drawbuf : resource_data_t& := resources at drawbuf_handle;\0A\09\09\09dbinfo ::= drawbuf->info;\0A\09\09\09dbflags ::= dbinfo.buffer_flags;\0A\09\09\09if((dbflags & (tz_gpu_buffer_flag.draw_buffer)) <= 0)\0A\09\09\09{\0A\09\09\09\09puts(\22error: draw_buffer (\22);\0A\09\09\09\09putuint(drawbuf_handle);\0A\09\09\09\09puts(\22) passed to graphics renderer \22);\0A\09\09\09\09putchar('\22');\0A\09\09\09\09puts(info.name);\0A\09\09\09\09putchar('\22');\0A\09\09\09\09puts(\22 did not have tz_gpu_buffer_flag.draw_buffer.\22);\0A\09\09\09\09__debugbreak();\0A\09\09\09}\0A\09\09}\0A\0A\09\09passptr->pipeline = impl_create_graphics_pipeline(info.shader, info.graphics, long);\0A\09\09for(counter = 0, counter < (ginfo.colour_targets_count), counter = counter + 1)\0A\09\09{\0A\09\09\09cur_colour_target = deref((ginfo.colour_targets_data) at counter);\0A\09\09\09if(cur_colour_target == (tz_gpu_resource.window_resource))\0A\09\09\09{\0A\09\09\09\09impl_require_swapchain(long);\0A\09\09\09\09passptr->targets_swapchain = true;\0A\09\09\09}\0A\09\09}\0A\0A\09\09(passptr->colour_target_dimensions) = impl_get_pass_colour_target_dimensions(passptr);\0A\09}\0A\0A\09impl_write_resources(passptr, long, short);\0A\09impl_populate_descriptors(passptr, long, short);\0A\0A\09return retid@tz_gpu_pass;\0A};\0A\0Atz_gpu_create_graph ::= func(name : u8&, a : arena mut&) -> tz_gpu_graph\0A{\0A\09ret ::= graph_count;\0A\09graphptr ::= impl_alloc_new_graph(a);\0A\09graphptr->name = create_string(name, a);\0A\0A\09initial_timeline_capacity ::= 8;\0A\09graphptr->timeline = arena_push(a, __sizeof(graph_entry) * initial_timeline_capacity);\0A\09graphptr->timeline_count = 0;\0A\09graphptr->timeline_cap = initial_timeline_capacity;\0A\09return ret@tz_gpu_graph;\0A};\0A\0Atz_gpu_graph_add_pass ::= func(graph : tz_gpu_graph, pass : tz_gpu_pass) -> v0\0A{\0A\09graphptr ::= graphs at (graph@s64);\0A\09if(((graphptr->timeline_count) + 1) > (graphptr->timeline_cap))\0A\09{\0A\09\09puts(\22graph ran out of entries in timeline. todo: expand timeline array\22);\0A\09\09__debugbreak();\0A\09}\0A\09cur ::= graphptr->timeline_count;\0A\09entry_ptr ::= (graphptr->timeline) at cur;\0A\09(entry_ptr->handle) = (pass@s64@_);\0A\09entry_ptr->is_graph = false;\0A\09(graphptr->timeline_count) = (graphptr->timeline_count) + 1;\0A};\0A\0A// todo: take in render graph and go through the passes in that order instead.\0Atz_gpu_execute ::= func(graph : tz_gpu_graph, long : arena mut&, short : arena mut&) -> v0\0A{\0A\09graphptr ::= graphs at (graph@s64);\0A\09writes_to_system_image ::= impl_graph_writes_to_system_image(graph);\0A\09will_present ::= impl_graph_will_present(graph);\0A\0A\09frame ::= deref(frames at current_frame);\0A\0A\0A\09image_index : u32 mut := -1@u32;\0A\09swapchain_image : u64 mut := 0;\0A\09if(will_present)\0A\09{\0A\09\09// make sure swapchain is available.\0A\09\09impl_require_swapchain(long);\0A\09\09if(swapchain_width == 0)\0A\09\09{\0A\09\09\09return;\0A\09\09}\0A\09\09if(swapchain_height == 0)\0A\09\09{\0A\09\09\09return;\0A\09\09}\0A\0A\09\09vk_check(vk.acquire_next_image_khr(used_device, swapchain, 9999999999, 0, frame.swapchain_fence, ref image_index));\0A\09\09vk_check(vk.wait_for_fences(used_device, 1, ref (frame.swapchain_fence), 1, 9999999));\0A\09\09vk_check(vk.reset_fences(used_device, 1, ref (frame.swapchain_fence)));\0A\09\09swapchain_image = deref(swapchain_images at image_index);\0A\09}\0A\0A\09barrier : VkImageMemoryBarrier mut := VkImageMemoryBarrier\0A\09{\0A\09\09.sType := 45;\0A\09\09.pNext := null;\0A\09\09.srcAccessMask := 0;\0A\09\09.dstAccessMask := 0x00001000;/*VK_ACCESS_TRANSFER_WRITE_BIT*/\0A\09\09.oldLayout := 0;\0A\09\09.newLayout := 7; // VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL\0A\09\09.srcQueueFamilyIndex := !0;\0A\09\09.dstQueueFamilyIndex := !0;\0A\09\09.image := 0;\0A\09\09.subresourceRange := VkImageSubresourceRange\0A\09\09{\0A\09\09\09.aspectMask := 0x00000001;\0A\09\09\09.baseMipLevel := 0;\0A\09\09\09.levelCount := 1;\0A\09\09\09.baseArrayLayer := 0;\0A\09\09\09.layerCount := 1;\0A\09\09};\0A\09};\0A\09if(will_present)\0A\09{\0A\09\09(barrier.image) = swapchain_image;\0A\09}\0A\0A\09frame_begin ::= VkCommandBufferBeginInfo\0A\09{\0A\09\09.sType := 42;\0A\09\09.pNext := null;\0A\09\09.flags := 0;\0A\09\09.pInheritanceInfo := null;\0A\09};\0A\09vk_check(vk.begin_command_buffer(frame.cmds, ref frame_begin));\0A\0A\09if(will_present)\0A\09{\0A\09\09vk.cmd_pipeline_barrier(frame.cmds, 0x00002000, 0x00001000, 0, 0, null, 0, null, 1, ref barrier);\0A\09}\0A\0A\09counter : u64 mut;\0A\09cur_entry : graph_entry mut;\0A\09for(counter = 0, counter < (graphptr->timeline_count), counter = counter + 1)\0A\09{\0A\09\09cur_entry = deref((graphptr->timeline) at counter);\0A\09\09if(cur_entry.is_graph)\0A\09\09{\0A\09\09\09puts(\22subgraphs are not yet implemented\22);\0A\09\09\09__debugbreak();\0A\09\09}\0A\09\09impl_record_gpu_work((cur_entry.handle)@s64@tz_gpu_pass, current_frame, short);\0A\09}\0A\0A\09// if we just wrote to the system image:\0A\09// \091. system image must be in color attachment layout. to eventually present later on, we should now transition to transfer_src (to transfer it to swapchain image).\0A\09// \092. record a command to do the blit (swapchain image should be transfer_dst)\0A\09// \093. transition the swapchain image to present_src.\0A\09if(writes_to_system_image)\0A\09{\0A\09\09blit : VkImageBlit mut := VkImageBlit\0A\09\09{\0A\09\09\09.srcSubresource := VkImageSubresourceLayers\0A\09\09\09{\0A\09\09\09\09.aspectMask := 0x00000001;\0A\09\09\09\09.mipLevel := 0;\0A\09\09\09\09.baseArrayLayer := 0;\0A\09\09\09\09.layerCount := 1;\0A\09\09\09};\0A\09\09\09.dstSubresource := VkImageSubresourceLayers\0A\09\09\09{\0A\09\09\09\09.aspectMask := 0x00000001;\0A\09\09\09\09.mipLevel := 0;\0A\09\09\09\09.baseArrayLayer := 0;\0A\09\09\09\09.layerCount := 1;\0A\09\09\09};\0A\09\09};\0A\09\09deref((blit.srcOffsets) at 0) = VkOffset3D{.x := 0; .y := 0; .z := 0;};\0A\09\09deref((blit.srcOffsets) at 1) = VkOffset3D{.x := swapchain_width@_; .y := swapchain_height@_; .z := 1;};\0A\09\09deref((blit.dstOffsets) at 0) = VkOffset3D{.x := 0; .y := 0; .z := 0;};\0A\09\09deref((blit.dstOffsets) at 1) = VkOffset3D{.x := swapchain_width@_; .y := swapchain_height@_; .z := 1;};\0A\0A\09\09system_image_transition ::= VkImageMemoryBarrier\0A\09\09{\0A\09\09\09.sType := 45;\0A\09\09\09.pNext := null;\0A\09\09\09.srcAccessMask := 0x00000100; // VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT \0A\09\09\09.dstAccessMask := 0x00000800; // VK_ACCESS_TRANSFER_READ_BIT\0A\09\09\09.oldLayout := 2; // VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL\0A\09\09\09.newLayout := 6; // VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL\0A\09\09\09.srcQueueFamilyIndex := !0;\0A\09\09\09.dstQueueFamilyIndex := !0;\0A\09\09\09.image := system_image;\0A\09\09\09.subresourceRange := VkImageSubresourceRange\0A\09\09\09{\0A\09\09\09\09.aspectMask := 0x00000001;\0A\09\09\09\09.baseMipLevel := 0;\0A\09\09\09\09.levelCount := 1;\0A\09\09\09\09.baseArrayLayer := 0;\0A\09\09\09\09.layerCount := 1;\0A\09\09\09};\0A\09\09};\0A\0A\09\09vk.cmd_pipeline_barrier(frame.cmds, 0x00000400, 0x00001000, 0, 0, null, 0, null, 1, ref system_image_transition);\0A\09\09vk.cmd_blit_image(frame.cmds, system_image, 6, swapchain_image, 7, 1, ref blit, 0);\0A\09}\0A\0A\09if(will_present)\0A\09{\0A\09\09barrier.oldLayout = 7;\0A\09\09barrier.newLayout = 1000001002;\0A\09\09barrier.srcAccessMask = 0x00001000;\0A\09\09barrier.dstAccessMask = 0;\0A\09\09vk.cmd_pipeline_barrier(frame.cmds, 0x00001000, 0x00000001, 0, 0, null, 0, null, 1, ref barrier);\0A\09}\0A\0A\09vk_check(vk.end_command_buffer(frame.cmds));\0A\09wait_stage : s32 := 0;\0A\09submit ::= VkSubmitInfo\0A\09{\0A\09\09.sType := 4;\0A\09\09.pNext := null;\0A\09\09.waitSemaphoreCount := 0;\0A\09\09.pWaitSemaphores := null;\0A\09\09.pWaitDstStageMask := ref wait_stage;\0A\09\09.commandBufferCount := 1;\0A\09\09.pCommandBuffers := ref (frame.cmds);\0A\09\09.signalSemaphoreCount := 1;\0A\09\09.pSignalSemaphores := ref (frame.swapchain_sem);\0A\09\09.signalSemaphoreCount := 0;\0A\09\09.pSignalSemaphores := null;\0A\09};\0A\09vk_check(vk.queue_submit(graphics_queue, 1, ref submit, frame.swapchain_fence));\0A\09vk_check(vk.wait_for_fences(used_device, 1, ref (frame.swapchain_fence), 1, -1@u64));\0A\09vk_check(vk.reset_fences(used_device, 1, ref (frame.swapchain_fence)));\0A\0A\09// present if we need to.\0A\09present_res : s32 mut;\0A\09if(will_present)\0A\09{\0A\09\09present ::= VkPresentInfoKHR\0A\09\09{\0A\09\09\09.sType := 1000001001;\0A\09\09\09.pNext := null;\0A\09\09\09.waitSemaphoreCount := 1;\0A\09\09\09.pWaitSemaphores := ref (frame.swapchain_sem);\0A\09\09\09.swapchainCount := 1;\0A\09\09\09.pSwapchains := ref swapchain;\0A\09\09\09.pImageIndices := ref image_index;\0A\09\09\09.pResults := ref present_res;\0A\09\09};\0A\09\09vk_check(vk.queue_present_khr(graphics_queue, ref present));\0A\09\09vk_check(present_res);\0A\09}\0A\0A\09current_frame = ((current_frame + 1) % 2);\0A};\0A\0Atz_gpu_resource_write ::= func(res : tz_gpu_resource, data : v0& weak, data_size : u64, offset : u64) -> v0\0A{\0A\09vk.device_wait_idle(used_device);\0A\09resptr ::= (resources at (res@s64));\0A\09rinfo ::= ref (resptr->info);\0A\0A\09__memcpy(rinfo->data, data, data_size);\0A\09impl_write_a_resource(resptr);\0A};\0A\0Atz_gpu_resource_size ::= func(res : tz_gpu_resource) -> u64\0A{\0A\09resptr ::= resources at (res@s64);\0A\09rinfo ::= resptr->info;\0A\09return rinfo.data_size;\0A};\0A\0A== build ==\0A{\0A\09add_source_file(\22vulkan.psy\22);\0A\09add_source_file(\22tz_wnd.psy\22);\0A\09add_source_file(\22file.psy\22);\0A}\0A")
!979 = !DISubroutineType(types: !980)
!980 = !{!147, !981}
!981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !982, size: 8)
!982 = !DICompositeType(tag: DW_TAG_structure_type, name: "resource_data_t", scope: !978, file: !978, line: 270, size: 832, align: 64, flags: DIFlagPublic, elements: !983)
!983 = !{!984, !994, !995, !996, !997, !998, !999}
!984 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !978, file: !978, line: 270, baseType: !985, size: 448, flags: DIFlagPublic)
!985 = !DICompositeType(tag: DW_TAG_structure_type, name: "tz_gpu_resource_info", scope: !978, file: !978, line: 69, size: 448, align: 64, flags: DIFlagPublic, elements: !986)
!986 = !{!987, !988, !989, !990, !991, !992, !993}
!987 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !978, file: !978, line: 69, baseType: !214, size: 64, flags: DIFlagPublic)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "data_size", scope: !978, file: !978, line: 69, baseType: !147, size: 64, offset: 64, flags: DIFlagPublic)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "image_dimensions", scope: !978, file: !978, line: 69, baseType: !40, size: 64, offset: 128, flags: DIFlagPublic)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "image_type", scope: !978, file: !978, line: 69, baseType: !166, size: 64, offset: 192, flags: DIFlagPublic)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !978, file: !978, line: 69, baseType: !166, size: 64, offset: 256, flags: DIFlagPublic)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_flags", scope: !978, file: !978, line: 69, baseType: !166, size: 64, offset: 320, flags: DIFlagPublic)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "image_flags", scope: !978, file: !978, line: 69, baseType: !166, size: 64, offset: 384, flags: DIFlagPublic)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "is_buffer", scope: !978, file: !978, line: 270, baseType: !266, size: 8, offset: 448, flags: DIFlagPublic)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "vk_handle", scope: !978, file: !978, line: 270, baseType: !147, size: 64, offset: 480, flags: DIFlagPublic)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "image_view", scope: !978, file: !978, line: 270, baseType: !147, size: 64, offset: 544, flags: DIFlagPublic)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "sampler", scope: !978, file: !978, line: 270, baseType: !147, size: 64, offset: 608, flags: DIFlagPublic)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_device_address", scope: !978, file: !978, line: 270, baseType: !147, size: 64, offset: 672, flags: DIFlagPublic)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "mapped_ptr", scope: !978, file: !978, line: 270, baseType: !214, size: 64, offset: 768, flags: DIFlagPublic)
!1000 = !DILocalVariable(name: "resptr", arg: 1, scope: !977, file: !978, line: 336, type: !981)
!1001 = !DILocation(line: 336, scope: !977)
!1002 = !DILocation(line: 337, column: 1, scope: !977)
!1003 = !DILocation(line: 338, column: 2, scope: !977)
!1004 = !DILocalVariable(name: "rinfo", scope: !977, file: !978, line: 338, type: !985)
!1005 = !DILocation(line: 338, scope: !977)
!1006 = !DILocation(line: 339, column: 2, scope: !977)
!1007 = distinct !DISubprogram(scope: !978, file: !978, line: 343, type: !1008, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1008 = !DISubroutineType(types: !1009)
!1009 = !{!147, !227}
!1010 = !DILocalVariable(name: "a", arg: 1, scope: !1007, file: !978, line: 343, type: !227)
!1011 = !DILocation(line: 343, scope: !1007)
!1012 = !DILocation(line: 345, column: 2, scope: !1007)
!1013 = !DILocation(line: 347, column: 3, scope: !1007)
!1014 = !DILocation(line: 348, column: 3, scope: !1007)
!1015 = !DILocation(line: 350, column: 2, scope: !1007)
!1016 = !DILocation(line: 352, column: 3, scope: !1007)
!1017 = !DILocation(line: 353, column: 3, scope: !1007)
!1018 = !DILocation(line: 355, column: 2, scope: !1007)
!1019 = !DILocation(line: 357, column: 3, scope: !1007)
!1020 = !DILocation(line: 358, column: 3, scope: !1007)
!1021 = !DILocation(line: 361, column: 2, scope: !1007)
!1022 = !DILocalVariable(name: "image_limit", scope: !1007, file: !978, line: 361, type: !1023)
!1023 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkDescriptorPoolSize", scope: !491, file: !491, line: 951, size: 64, align: 32, flags: DIFlagPublic, elements: !1024)
!1024 = !{!1025, !1026}
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !491, file: !491, line: 951, baseType: !631, size: 32, flags: DIFlagPublic)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorCount", scope: !491, file: !491, line: 951, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!1027 = !DILocation(line: 361, scope: !1007)
!1028 = !DILocation(line: 366, column: 2, scope: !1007)
!1029 = !DILocalVariable(name: "create", scope: !1007, file: !978, line: 366, type: !1030)
!1030 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkDescriptorPoolCreateInfo", scope: !491, file: !491, line: 957, size: 320, align: 64, flags: DIFlagPublic, elements: !1031)
!1031 = !{!1032, !1033, !1034, !1035, !1036, !1037}
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 957, baseType: !631, size: 32, flags: DIFlagPublic)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 957, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 957, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "maxSets", scope: !491, file: !491, line: 957, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "poolSizeCount", scope: !491, file: !491, line: 957, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "pPoolSizes", scope: !491, file: !491, line: 957, baseType: !1038, size: 64, offset: 256, flags: DIFlagPublic)
!1038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1023, size: 8)
!1039 = !DILocation(line: 366, scope: !1007)
!1040 = !DILocation(line: 375, column: 2, scope: !1007)
!1041 = !DILocalVariable(name: "newpool", scope: !1007, file: !978, line: 375, type: !147)
!1042 = !DILocation(line: 375, scope: !1007)
!1043 = !DILocation(line: 376, column: 2, scope: !1007)
!1044 = !DILocation(line: 377, column: 2, scope: !1007)
!1045 = !DILocation(line: 378, column: 2, scope: !1007)
!1046 = !DILocation(line: 379, column: 2, scope: !1007)
!1047 = distinct !DISubprogram(scope: !978, file: !978, line: 383, type: !1048, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1048 = !DISubroutineType(types: !1049)
!1049 = !{!266, !147, !698, !43}
!1050 = !DILocalVariable(name: "pool", arg: 1, scope: !1047, file: !978, line: 383, type: !147)
!1051 = !DILocation(line: 383, scope: !1047)
!1052 = !DILocalVariable(name: "sets_data", arg: 2, scope: !1047, file: !978, line: 383, type: !698)
!1053 = !DILocalVariable(name: "image_count", arg: 3, scope: !1047, file: !978, line: 383, type: !43)
!1054 = !DILocation(line: 385, column: 2, scope: !1047)
!1055 = !DILocalVariable(name: "variable_counts", scope: !1047, file: !978, line: 385, type: !1056)
!1056 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 8)
!1057 = !DILocation(line: 385, scope: !1047)
!1058 = !DILocation(line: 386, column: 2, scope: !1047)
!1059 = !DILocation(line: 387, column: 2, scope: !1047)
!1060 = !DILocation(line: 389, column: 2, scope: !1047)
!1061 = !DILocalVariable(name: "variable_alloc", scope: !1047, file: !978, line: 389, type: !1062)
!1062 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkDescriptorSetVariableDescriptorCountAllocateInfo", scope: !491, file: !491, line: 967, size: 256, align: 64, flags: DIFlagPublic, elements: !1063)
!1063 = !{!1064, !1065, !1066, !1067}
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 967, baseType: !631, size: 32, flags: DIFlagPublic)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 967, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorSetCount", scope: !491, file: !491, line: 967, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "pDescriptorCounts", scope: !491, file: !491, line: 967, baseType: !1056, size: 64, offset: 192, flags: DIFlagPublic)
!1068 = !DILocation(line: 389, scope: !1047)
!1069 = !DILocation(line: 396, column: 2, scope: !1047)
!1070 = !DILocalVariable(name: "alloc", scope: !1047, file: !978, line: 396, type: !1071)
!1071 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkDescriptorSetAllocateInfo", scope: !491, file: !491, line: 975, size: 320, align: 64, flags: DIFlagPublic, elements: !1072)
!1072 = !{!1073, !1074, !1075, !1076, !1077}
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 975, baseType: !631, size: 32, flags: DIFlagPublic)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 975, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorPool", scope: !491, file: !491, line: 975, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorSetCount", scope: !491, file: !491, line: 975, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "pSetLayouts", scope: !491, file: !491, line: 975, baseType: !698, size: 64, offset: 256, flags: DIFlagPublic)
!1078 = !DILocation(line: 396, scope: !1047)
!1079 = !DILocation(line: 404, column: 2, scope: !1047)
!1080 = distinct !DISubprogram(scope: !978, file: !978, line: 408, type: !1081, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1081 = !DISubroutineType(types: !1082)
!1082 = !{!6, !1083, !227, !227}
!1083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1084, size: 8)
!1084 = !DICompositeType(tag: DW_TAG_structure_type, name: "pass_data_t", scope: !978, file: !978, line: 316, size: 1536, align: 64, flags: DIFlagPublic, elements: !1085)
!1085 = !{!1086, !1112, !1113, !1114, !1115, !1116, !1117, !1118}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !978, file: !978, line: 316, baseType: !1087, size: 1088, flags: DIFlagPublic)
!1087 = !DICompositeType(tag: DW_TAG_structure_type, name: "tz_gpu_pass_info", scope: !978, file: !978, line: 127, size: 1088, align: 64, flags: DIFlagPublic, elements: !1088)
!1088 = !{!1089, !1102, !1108, !1109, !1110, !1111}
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "graphics", scope: !978, file: !978, line: 127, baseType: !1090, size: 704, flags: DIFlagPublic)
!1090 = !DICompositeType(tag: DW_TAG_structure_type, name: "tz_gpu_graphics_state", scope: !978, file: !978, line: 107, size: 704, align: 64, flags: DIFlagPublic, elements: !1091)
!1091 = !{!1092, !1093, !1094, !1096, !1097, !1098, !1099, !1100, !1101}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "clear_colour", scope: !978, file: !978, line: 107, baseType: !96, size: 128, flags: DIFlagPublic)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "scissor", scope: !978, file: !978, line: 107, baseType: !125, size: 128, offset: 128, flags: DIFlagPublic)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "colour_targets_data", scope: !978, file: !978, line: 107, baseType: !1095, size: 64, offset: 256, flags: DIFlagPublic)
!1095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !166, size: 8)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "colour_targets_count", scope: !978, file: !978, line: 107, baseType: !147, size: 64, offset: 320, flags: DIFlagPublic)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "depth_target", scope: !978, file: !978, line: 107, baseType: !166, size: 64, offset: 384, flags: DIFlagPublic)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "index_buffer", scope: !978, file: !978, line: 107, baseType: !166, size: 64, offset: 448, flags: DIFlagPublic)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "draw_buffer", scope: !978, file: !978, line: 107, baseType: !166, size: 64, offset: 512, flags: DIFlagPublic)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "culling", scope: !978, file: !978, line: 107, baseType: !166, size: 64, offset: 576, flags: DIFlagPublic)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "static_tri_count", scope: !978, file: !978, line: 107, baseType: !147, size: 64, offset: 640, flags: DIFlagPublic)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "compute", scope: !978, file: !978, line: 127, baseType: !1103, size: 96, offset: 704, flags: DIFlagPublic)
!1103 = !DICompositeType(tag: DW_TAG_structure_type, name: "tz_gpu_compute_state", scope: !978, file: !978, line: 120, size: 96, align: 32, flags: DIFlagPublic, elements: !1104)
!1104 = !{!1105, !1106, !1107}
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "kernelx", scope: !978, file: !978, line: 120, baseType: !43, size: 32, flags: DIFlagPublic)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "kernely", scope: !978, file: !978, line: 120, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "kernelz", scope: !978, file: !978, line: 120, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "shader", scope: !978, file: !978, line: 127, baseType: !166, size: 64, offset: 800, flags: DIFlagPublic)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "resources_data", scope: !978, file: !978, line: 127, baseType: !1095, size: 64, offset: 896, flags: DIFlagPublic)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "resources_count", scope: !978, file: !978, line: 127, baseType: !147, size: 64, offset: 960, flags: DIFlagPublic)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !978, file: !978, line: 127, baseType: !177, size: 64, offset: 1024, flags: DIFlagPublic)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "metabuf", scope: !978, file: !978, line: 316, baseType: !147, size: 64, offset: 1088, flags: DIFlagPublic)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "metabuf_size", scope: !978, file: !978, line: 316, baseType: !147, size: 64, offset: 1152, flags: DIFlagPublic)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "is_compute", scope: !978, file: !978, line: 316, baseType: !266, size: 8, offset: 1216, flags: DIFlagPublic)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "pipeline", scope: !978, file: !978, line: 316, baseType: !147, size: 64, offset: 1248, flags: DIFlagPublic)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "targets_swapchain", scope: !978, file: !978, line: 316, baseType: !266, size: 8, offset: 1312, flags: DIFlagPublic)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "colour_target_dimensions", scope: !978, file: !978, line: 316, baseType: !40, size: 64, offset: 1344, flags: DIFlagPublic)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "descriptor_sets", scope: !978, file: !978, line: 316, baseType: !698, size: 128, offset: 1408, flags: DIFlagPublic)
!1119 = !DILocalVariable(name: "passptr", arg: 1, scope: !1080, file: !978, line: 408, type: !1083)
!1120 = !DILocation(line: 408, scope: !1080)
!1121 = !DILocalVariable(name: "long", arg: 2, scope: !1080, file: !978, line: 408, type: !227)
!1122 = !DILocalVariable(name: "short", arg: 3, scope: !1080, file: !978, line: 408, type: !227)
!1123 = !DILocation(line: 409, column: 1, scope: !1080)
!1124 = !DILocation(line: 410, column: 2, scope: !1080)
!1125 = !DILocalVariable(name: "pinfo", scope: !1080, file: !978, line: 410, type: !1087)
!1126 = !DILocation(line: 410, scope: !1080)
!1127 = !DILocation(line: 411, column: 2, scope: !1080)
!1128 = !DILocation(line: 413, column: 3, scope: !1080)
!1129 = !DILocation(line: 415, column: 2, scope: !1080)
!1130 = !DILocalVariable(name: "pool", scope: !1080, file: !978, line: 415, type: !147)
!1131 = !DILocation(line: 415, scope: !1080)
!1132 = !DILocation(line: 417, column: 2, scope: !1080)
!1133 = !DILocalVariable(name: "image_count", scope: !1080, file: !978, line: 417, type: !43)
!1134 = !DILocation(line: 417, scope: !1080)
!1135 = !DILocation(line: 418, column: 2, scope: !1080)
!1136 = !DILocalVariable(name: "counter", scope: !1080, file: !978, line: 418, type: !147)
!1137 = !DILocation(line: 418, scope: !1080)
!1138 = !DILocation(line: 419, column: 2, scope: !1080)
!1139 = !DILocalVariable(name: "cur_resh", scope: !1080, file: !978, line: 419, type: !166)
!1140 = !DILocation(line: 419, scope: !1080)
!1141 = !DILocation(line: 420, column: 2, scope: !1080)
!1142 = !DILocalVariable(name: "resptr", scope: !1080, file: !978, line: 420, type: !981)
!1143 = !DILocation(line: 420, scope: !1080)
!1144 = !DILocation(line: 421, column: 2, scope: !1080)
!1145 = !DILocation(line: 423, column: 3, scope: !1080)
!1146 = !DILocation(line: 424, column: 3, scope: !1080)
!1147 = !DILocation(line: 442, column: 2, scope: !1080)
!1148 = !DILocalVariable(name: "alloc_success", scope: !1080, file: !978, line: 442, type: !266)
!1149 = !DILocation(line: 442, scope: !1080)
!1150 = !DILocation(line: 443, column: 2, scope: !1080)
!1151 = !DILocation(line: 426, column: 4, scope: !1080)
!1152 = !DILocation(line: 435, column: 6, scope: !1080)
!1153 = !DILocation(line: 428, column: 5, scope: !1080)
!1154 = !DILocation(line: 430, column: 4, scope: !1080)
!1155 = !DILocation(line: 432, column: 5, scope: !1080)
!1156 = !DILocation(line: 433, column: 5, scope: !1080)
!1157 = !DILocation(line: 445, column: 3, scope: !1080)
!1158 = !DILocation(line: 446, column: 3, scope: !1080)
!1159 = !DILocation(line: 450, column: 2, scope: !1080)
!1160 = !DILocalVariable(name: "image_array_descriptor_binding", scope: !1080, file: !978, line: 450, type: !166)
!1161 = !DILocation(line: 450, scope: !1080)
!1162 = !DILocation(line: 451, column: 2, scope: !1080)
!1163 = !DILocalVariable(name: "image_writes", scope: !1080, file: !978, line: 451, type: !1164)
!1164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1165, size: 8)
!1165 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkDescriptorImageInfo", scope: !491, file: !491, line: 984, size: 160, align: 32, flags: DIFlagPublic, elements: !1166)
!1166 = !{!1167, !1168, !1169}
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "sampler", scope: !491, file: !491, line: 984, baseType: !147, size: 64, flags: DIFlagPublic)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "imageView", scope: !491, file: !491, line: 984, baseType: !147, size: 64, offset: 64, flags: DIFlagPublic)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "imageLayout", scope: !491, file: !491, line: 984, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1170 = !DILocation(line: 451, scope: !1080)
!1171 = !DILocation(line: 453, column: 2, scope: !1080)
!1172 = !DILocalVariable(name: "meta_buffer_write", scope: !1080, file: !978, line: 453, type: !1173)
!1173 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkDescriptorBufferInfo", scope: !491, file: !491, line: 991, size: 192, align: 32, flags: DIFlagPublic, elements: !1174)
!1174 = !{!1175, !1176, !1177}
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !491, file: !491, line: 991, baseType: !147, size: 64, flags: DIFlagPublic)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !491, file: !491, line: 991, baseType: !147, size: 64, offset: 64, flags: DIFlagPublic)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "range", scope: !491, file: !491, line: 991, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!1178 = !DILocation(line: 453, scope: !1080)
!1179 = !DILocation(line: 460, column: 2, scope: !1080)
!1180 = !DILocalVariable(name: "descriptor_writes", scope: !1080, file: !978, line: 460, type: !1181)
!1181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1182, size: 8)
!1182 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkWriteDescriptorSet", scope: !491, file: !491, line: 998, size: 512, align: 64, flags: DIFlagPublic, elements: !1183)
!1183 = !{!1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1194}
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 998, baseType: !631, size: 32, flags: DIFlagPublic)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 998, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "dstSet", scope: !491, file: !491, line: 998, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "dstBinding", scope: !491, file: !491, line: 998, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "dstArrayElement", scope: !491, file: !491, line: 998, baseType: !43, size: 32, offset: 224, flags: DIFlagPublic)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorCount", scope: !491, file: !491, line: 998, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorType", scope: !491, file: !491, line: 998, baseType: !631, size: 32, offset: 288, flags: DIFlagPublic)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "pImageInfo", scope: !491, file: !491, line: 998, baseType: !1164, size: 64, offset: 320, flags: DIFlagPublic)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "pBufferInfo", scope: !491, file: !491, line: 998, baseType: !1193, size: 64, offset: 384, flags: DIFlagPublic)
!1193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1173, size: 8)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "pTexelBufferView", scope: !491, file: !491, line: 998, baseType: !1195, size: 64, offset: 448, flags: DIFlagPublic)
!1195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !631, size: 8)
!1196 = !DILocation(line: 460, scope: !1080)
!1197 = !DILocation(line: 462, column: 2, scope: !1080)
!1198 = !DILocation(line: 476, column: 2, scope: !1080)
!1199 = !DILocation(line: 491, column: 2, scope: !1080)
!1200 = !DILocalVariable(name: "i", scope: !1080, file: !978, line: 491, type: !43)
!1201 = !DILocation(line: 491, scope: !1080)
!1202 = !DILocation(line: 492, column: 2, scope: !1080)
!1203 = !DILocalVariable(name: "j", scope: !1080, file: !978, line: 492, type: !147)
!1204 = !DILocation(line: 492, scope: !1080)
!1205 = !DILocation(line: 493, column: 2, scope: !1080)
!1206 = !DILocalVariable(name: "img_cursor", scope: !1080, file: !978, line: 493, type: !147)
!1207 = !DILocation(line: 493, scope: !1080)
!1208 = !DILocation(line: 494, column: 2, scope: !1080)
!1209 = !DILocation(line: 496, column: 3, scope: !1080)
!1210 = !DILocation(line: 532, column: 2, scope: !1080)
!1211 = !DILocalVariable(name: "write_count", scope: !1080, file: !978, line: 532, type: !43)
!1212 = !DILocation(line: 532, scope: !1080)
!1213 = !DILocation(line: 533, column: 2, scope: !1080)
!1214 = !DILocation(line: 498, column: 4, scope: !1080)
!1215 = !DILocation(line: 499, column: 4, scope: !1080)
!1216 = !DILocation(line: 517, column: 3, scope: !1080)
!1217 = !DILocation(line: 501, column: 5, scope: !1080)
!1218 = !DILocation(line: 512, column: 7, scope: !1080)
!1219 = !DILocation(line: 503, column: 6, scope: !1080)
!1220 = !DILocation(line: 504, column: 6, scope: !1080)
!1221 = !DILocation(line: 506, column: 7, scope: !1080)
!1222 = !DILocation(line: 535, column: 3, scope: !1080)
!1223 = !DILocation(line: 537, column: 2, scope: !1080)
!1224 = distinct !DISubprogram(scope: !978, file: !978, line: 541, type: !762, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1225 = !DILocalVariable(name: "shader", arg: 1, scope: !1224, file: !978, line: 541, type: !166)
!1226 = !DILocation(line: 541, scope: !1224)
!1227 = !DILocation(line: 542, column: 1, scope: !1224)
!1228 = !DILocation(line: 543, column: 2, scope: !1224)
!1229 = !DILocalVariable(name: "shadptr", scope: !1224, file: !978, line: 543, type: !1230)
!1230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1231, size: 8)
!1231 = !DICompositeType(tag: DW_TAG_structure_type, name: "shader_data_t", scope: !978, file: !978, line: 285, size: 224, align: 32, flags: DIFlagPublic, elements: !1232)
!1232 = !{!1233, !1234, !1235, !1236}
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "is_graphics", scope: !978, file: !978, line: 285, baseType: !266, size: 8, flags: DIFlagPublic)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "vertex_module", scope: !978, file: !978, line: 285, baseType: !147, size: 64, offset: 32, flags: DIFlagPublic)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_module", scope: !978, file: !978, line: 285, baseType: !147, size: 64, offset: 96, flags: DIFlagPublic)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "compute_module", scope: !978, file: !978, line: 285, baseType: !147, size: 64, offset: 160, flags: DIFlagPublic)
!1237 = !DILocation(line: 543, scope: !1224)
!1238 = !DILocation(line: 544, column: 2, scope: !1224)
!1239 = distinct !DISubprogram(scope: !978, file: !978, line: 548, type: !4, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1240 = !DILocation(line: 550, column: 2, scope: !1239)
!1241 = !DILocalVariable(name: "create", scope: !1239, file: !978, line: 550, type: !1242)
!1242 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkCommandBufferBeginInfo", scope: !491, file: !491, line: 762, size: 256, align: 64, flags: DIFlagPublic, elements: !1243)
!1243 = !{!1244, !1245, !1246, !1247}
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 762, baseType: !631, size: 32, flags: DIFlagPublic)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 762, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 762, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "pInheritanceInfo", scope: !491, file: !491, line: 762, baseType: !214, size: 64, offset: 192, flags: DIFlagPublic)
!1248 = !DILocation(line: 550, scope: !1239)
!1249 = !DILocation(line: 558, column: 2, scope: !1239)
!1250 = !DILocation(line: 549, column: 1, scope: !1239)
!1251 = distinct !DISubprogram(scope: !978, file: !978, line: 562, type: !4, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1252 = !DILocation(line: 564, column: 2, scope: !1251)
!1253 = !DILocation(line: 565, column: 2, scope: !1251)
!1254 = !DILocalVariable(name: "submit", scope: !1251, file: !978, line: 565, type: !1255)
!1255 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkSubmitInfo", scope: !491, file: !491, line: 770, size: 576, align: 64, flags: DIFlagPublic, elements: !1256)
!1256 = !{!1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265}
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 770, baseType: !631, size: 32, flags: DIFlagPublic)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 770, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "waitSemaphoreCount", scope: !491, file: !491, line: 770, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "pWaitSemaphores", scope: !491, file: !491, line: 770, baseType: !698, size: 64, offset: 192, flags: DIFlagPublic)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "pWaitDstStageMask", scope: !491, file: !491, line: 770, baseType: !1195, size: 64, offset: 256, flags: DIFlagPublic)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "commandBufferCount", scope: !491, file: !491, line: 770, baseType: !43, size: 32, offset: 320, flags: DIFlagPublic)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "pCommandBuffers", scope: !491, file: !491, line: 770, baseType: !698, size: 64, offset: 384, flags: DIFlagPublic)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "signalSemaphoreCount", scope: !491, file: !491, line: 770, baseType: !43, size: 32, offset: 448, flags: DIFlagPublic)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "pSignalSemaphores", scope: !491, file: !491, line: 770, baseType: !698, size: 64, offset: 512, flags: DIFlagPublic)
!1266 = !DILocation(line: 565, scope: !1251)
!1267 = !DILocation(line: 577, column: 2, scope: !1251)
!1268 = !DILocation(line: 578, column: 2, scope: !1251)
!1269 = !DILocation(line: 579, column: 2, scope: !1251)
!1270 = !DILocation(line: 563, column: 1, scope: !1251)
!1271 = distinct !DISubprogram(scope: !978, file: !978, line: 583, type: !1272, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1272 = !DISubroutineType(types: !1273)
!1273 = !{!147, !166, !1090, !227}
!1274 = !DILocalVariable(name: "shader", arg: 1, scope: !1271, file: !978, line: 583, type: !166)
!1275 = !DILocation(line: 583, scope: !1271)
!1276 = !DILocalVariable(name: "graphics", arg: 2, scope: !1271, file: !978, line: 583, type: !1090)
!1277 = !DILocalVariable(name: "a", arg: 3, scope: !1271, file: !978, line: 583, type: !227)
!1278 = !DILocation(line: 584, column: 1, scope: !1271)
!1279 = !DILocation(line: 585, column: 2, scope: !1271)
!1280 = !DILocalVariable(name: "shadptr", scope: !1271, file: !978, line: 585, type: !1230)
!1281 = !DILocation(line: 585, scope: !1271)
!1282 = !DILocation(line: 586, column: 2, scope: !1271)
!1283 = !DILocalVariable(name: "vertex_shader_module", scope: !1271, file: !978, line: 586, type: !147)
!1284 = !DILocation(line: 586, scope: !1271)
!1285 = !DILocation(line: 587, column: 2, scope: !1271)
!1286 = !DILocation(line: 589, column: 3, scope: !1271)
!1287 = !DILocation(line: 590, column: 3, scope: !1271)
!1288 = !DILocation(line: 592, column: 2, scope: !1271)
!1289 = !DILocalVariable(name: "fragment_shader_module", scope: !1271, file: !978, line: 592, type: !147)
!1290 = !DILocation(line: 592, scope: !1271)
!1291 = !DILocation(line: 593, column: 2, scope: !1271)
!1292 = !DILocation(line: 595, column: 3, scope: !1271)
!1293 = !DILocation(line: 596, column: 3, scope: !1271)
!1294 = !DILocation(line: 599, column: 2, scope: !1271)
!1295 = !DILocalVariable(name: "shader_creates", scope: !1271, file: !978, line: 599, type: !1296)
!1296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1297, size: 8)
!1297 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineShaderStageCreateInfo", scope: !491, file: !491, line: 577, size: 384, align: 64, flags: DIFlagPublic, elements: !1298)
!1298 = !{!1299, !1300, !1301, !1302, !1303, !1304, !1305}
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 577, baseType: !631, size: 32, flags: DIFlagPublic)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 577, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 577, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "stage", scope: !491, file: !491, line: 577, baseType: !631, size: 32, offset: 160, flags: DIFlagPublic)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "module", scope: !491, file: !491, line: 577, baseType: !147, size: 64, offset: 192, flags: DIFlagPublic)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "pName", scope: !491, file: !491, line: 577, baseType: !177, size: 64, offset: 256, flags: DIFlagPublic)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "pSpecializationInfo", scope: !491, file: !491, line: 577, baseType: !214, size: 64, offset: 320, flags: DIFlagPublic)
!1306 = !DILocation(line: 599, scope: !1271)
!1307 = !DILocation(line: 600, column: 2, scope: !1271)
!1308 = !DILocation(line: 611, column: 2, scope: !1271)
!1309 = !DILocation(line: 622, column: 2, scope: !1271)
!1310 = !DILocalVariable(name: "vtx", scope: !1271, file: !978, line: 622, type: !1311)
!1311 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineVertexInputStateCreateInfo", scope: !491, file: !491, line: 599, size: 384, align: 64, flags: DIFlagPublic, elements: !1312)
!1312 = !{!1313, !1314, !1315, !1316, !1317, !1318, !1319}
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 599, baseType: !631, size: 32, flags: DIFlagPublic)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 599, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 599, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "vertexBindingDescriptionCount", scope: !491, file: !491, line: 599, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "pVertexBindingDescriptions", scope: !491, file: !491, line: 599, baseType: !214, size: 64, offset: 192, flags: DIFlagPublic)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "vertexAttributeDescriptionCount", scope: !491, file: !491, line: 599, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "pVertexAttributeDescriptions", scope: !491, file: !491, line: 599, baseType: !214, size: 64, offset: 320, flags: DIFlagPublic)
!1320 = !DILocation(line: 622, scope: !1271)
!1321 = !DILocation(line: 633, column: 2, scope: !1271)
!1322 = !DILocalVariable(name: "iasm", scope: !1271, file: !978, line: 633, type: !1323)
!1323 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineInputAssemblyStateCreateInfo", scope: !491, file: !491, line: 610, size: 256, align: 64, flags: DIFlagPublic, elements: !1324)
!1324 = !{!1325, !1326, !1327, !1328, !1329}
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 610, baseType: !631, size: 32, flags: DIFlagPublic)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 610, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 610, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "topology", scope: !491, file: !491, line: 610, baseType: !631, size: 32, offset: 160, flags: DIFlagPublic)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "primitiveRestartEnable", scope: !491, file: !491, line: 610, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!1330 = !DILocation(line: 633, scope: !1271)
!1331 = !DILocation(line: 642, column: 2, scope: !1271)
!1332 = !DILocalVariable(name: "tess", scope: !1271, file: !978, line: 642, type: !1333)
!1333 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineTessellationStateCreateInfo", scope: !491, file: !491, line: 619, size: 192, align: 64, flags: DIFlagPublic, elements: !1334)
!1334 = !{!1335, !1336, !1337, !1338}
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 619, baseType: !631, size: 32, flags: DIFlagPublic)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 619, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 619, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "patchControlPoints", scope: !491, file: !491, line: 619, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!1339 = !DILocation(line: 642, scope: !1271)
!1340 = !DILocation(line: 650, column: 2, scope: !1271)
!1341 = !DILocalVariable(name: "vwprt", scope: !1271, file: !978, line: 650, type: !1342)
!1342 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineViewportStateCreateInfo", scope: !491, file: !491, line: 627, size: 384, align: 64, flags: DIFlagPublic, elements: !1343)
!1343 = !{!1344, !1345, !1346, !1347, !1348, !1349, !1350}
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 627, baseType: !631, size: 32, flags: DIFlagPublic)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 627, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 627, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "viewportCount", scope: !491, file: !491, line: 627, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "pViewports", scope: !491, file: !491, line: 627, baseType: !214, size: 64, offset: 192, flags: DIFlagPublic)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "scissorCount", scope: !491, file: !491, line: 627, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "pScissors", scope: !491, file: !491, line: 627, baseType: !214, size: 64, offset: 320, flags: DIFlagPublic)
!1351 = !DILocation(line: 650, scope: !1271)
!1352 = !DILocation(line: 662, column: 2, scope: !1271)
!1353 = !DILocalVariable(name: "cull_bits", scope: !1271, file: !978, line: 662, type: !631)
!1354 = !DILocation(line: 662, scope: !1271)
!1355 = !DILocation(line: 663, column: 2, scope: !1271)
!1356 = !DILocation(line: 665, column: 3, scope: !1271)
!1357 = !DILocation(line: 667, column: 2, scope: !1271)
!1358 = !DILocation(line: 669, column: 3, scope: !1271)
!1359 = !DILocation(line: 671, column: 2, scope: !1271)
!1360 = !DILocation(line: 673, column: 3, scope: !1271)
!1361 = !DILocation(line: 675, column: 2, scope: !1271)
!1362 = !DILocation(line: 677, column: 3, scope: !1271)
!1363 = !DILocation(line: 680, column: 2, scope: !1271)
!1364 = !DILocalVariable(name: "raster", scope: !1271, file: !978, line: 680, type: !1365)
!1365 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineRasterizationStateCreateInfo", scope: !491, file: !491, line: 638, size: 512, align: 64, flags: DIFlagPublic, elements: !1366)
!1366 = !{!1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 638, baseType: !631, size: 32, flags: DIFlagPublic)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 638, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 638, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "depthClampEnable", scope: !491, file: !491, line: 638, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "rasterizerDiscardEnable", scope: !491, file: !491, line: 638, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "polygonMode", scope: !491, file: !491, line: 638, baseType: !631, size: 32, offset: 224, flags: DIFlagPublic)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "cullMode", scope: !491, file: !491, line: 638, baseType: !631, size: 32, offset: 256, flags: DIFlagPublic)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "frontFace", scope: !491, file: !491, line: 638, baseType: !631, size: 32, offset: 288, flags: DIFlagPublic)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "depthBiasEnable", scope: !491, file: !491, line: 638, baseType: !43, size: 32, offset: 320, flags: DIFlagPublic)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "depthBiasConstantFactor", scope: !491, file: !491, line: 638, baseType: !15, size: 32, offset: 352, flags: DIFlagPublic)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "depthBiasClamp", scope: !491, file: !491, line: 638, baseType: !15, size: 32, offset: 384, flags: DIFlagPublic)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "depthBiasSlopeFactor", scope: !491, file: !491, line: 638, baseType: !15, size: 32, offset: 416, flags: DIFlagPublic)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "lineWidth", scope: !491, file: !491, line: 638, baseType: !15, size: 32, offset: 448, flags: DIFlagPublic)
!1380 = !DILocation(line: 680, scope: !1271)
!1381 = !DILocation(line: 697, column: 2, scope: !1271)
!1382 = !DILocalVariable(name: "multi", scope: !1271, file: !978, line: 697, type: !1383)
!1383 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineMultisampleStateCreateInfo", scope: !491, file: !491, line: 655, size: 384, align: 64, flags: DIFlagPublic, elements: !1384)
!1384 = !{!1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393}
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 655, baseType: !631, size: 32, flags: DIFlagPublic)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 655, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 655, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "rasterizationSamples", scope: !491, file: !491, line: 655, baseType: !631, size: 32, offset: 160, flags: DIFlagPublic)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "sampleShadingEnable", scope: !491, file: !491, line: 655, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "minSampleShading", scope: !491, file: !491, line: 655, baseType: !15, size: 32, offset: 224, flags: DIFlagPublic)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "pSampleMask", scope: !491, file: !491, line: 655, baseType: !214, size: 64, offset: 256, flags: DIFlagPublic)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "alphaToCoverageEnable", scope: !491, file: !491, line: 655, baseType: !43, size: 32, offset: 320, flags: DIFlagPublic)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "alphaToOneEnable", scope: !491, file: !491, line: 655, baseType: !43, size: 32, offset: 352, flags: DIFlagPublic)
!1394 = !DILocation(line: 697, scope: !1271)
!1395 = !DILocation(line: 710, column: 2, scope: !1271)
!1396 = !DILocalVariable(name: "depthTestEnable", scope: !1271, file: !978, line: 710, type: !43)
!1397 = !DILocation(line: 710, scope: !1271)
!1398 = !DILocation(line: 711, column: 2, scope: !1271)
!1399 = !DILocalVariable(name: "depthWriteEnable", scope: !1271, file: !978, line: 711, type: !43)
!1400 = !DILocation(line: 711, scope: !1271)
!1401 = !DILocation(line: 713, column: 2, scope: !1271)
!1402 = !DILocalVariable(name: "stencil_op_state", scope: !1271, file: !978, line: 713, type: !1403)
!1403 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkStencilOpState", scope: !491, file: !491, line: 668, size: 224, align: 32, flags: DIFlagPublic, elements: !1404)
!1404 = !{!1405, !1406, !1407, !1408, !1409, !1410, !1411}
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "failOp", scope: !491, file: !491, line: 668, baseType: !631, size: 32, flags: DIFlagPublic)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "passOp", scope: !491, file: !491, line: 668, baseType: !631, size: 32, offset: 32, flags: DIFlagPublic)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "depthFailOp", scope: !491, file: !491, line: 668, baseType: !631, size: 32, offset: 64, flags: DIFlagPublic)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "compareOp", scope: !491, file: !491, line: 668, baseType: !631, size: 32, offset: 96, flags: DIFlagPublic)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "compareMask", scope: !491, file: !491, line: 668, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "writeMask", scope: !491, file: !491, line: 668, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "reference", scope: !491, file: !491, line: 668, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!1412 = !DILocation(line: 713, scope: !1271)
!1413 = !DILocation(line: 724, column: 2, scope: !1271)
!1414 = !DILocalVariable(name: "depth_stencil", scope: !1271, file: !978, line: 724, type: !1415)
!1415 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineDepthStencilStateCreateInfo", scope: !491, file: !491, line: 679, size: 832, align: 64, flags: DIFlagPublic, elements: !1416)
!1416 = !{!1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428}
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 679, baseType: !631, size: 32, flags: DIFlagPublic)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 679, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 679, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "depthTestEnable", scope: !491, file: !491, line: 679, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "depthWriteEnable", scope: !491, file: !491, line: 679, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "depthCompareOp", scope: !491, file: !491, line: 679, baseType: !631, size: 32, offset: 224, flags: DIFlagPublic)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "depthBoundsTestEnable", scope: !491, file: !491, line: 679, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "stencilTestEnable", scope: !491, file: !491, line: 679, baseType: !43, size: 32, offset: 288, flags: DIFlagPublic)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "front", scope: !491, file: !491, line: 679, baseType: !1403, size: 224, offset: 320, flags: DIFlagPublic)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "back", scope: !491, file: !491, line: 679, baseType: !1403, size: 224, offset: 544, flags: DIFlagPublic)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "minDepthBounds", scope: !491, file: !491, line: 679, baseType: !15, size: 32, offset: 768, flags: DIFlagPublic)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "maxDepthBounds", scope: !491, file: !491, line: 679, baseType: !15, size: 32, offset: 800, flags: DIFlagPublic)
!1429 = !DILocation(line: 724, scope: !1271)
!1430 = !DILocation(line: 740, column: 2, scope: !1271)
!1431 = !DILocalVariable(name: "counter", scope: !1271, file: !978, line: 740, type: !147)
!1432 = !DILocation(line: 740, scope: !1271)
!1433 = !DILocation(line: 741, column: 2, scope: !1271)
!1434 = !DILocalVariable(name: "blend_states", scope: !1271, file: !978, line: 741, type: !1435)
!1435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1436, size: 8)
!1436 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineColorBlendAttachmentState", scope: !491, file: !491, line: 695, size: 256, align: 32, flags: DIFlagPublic, elements: !1437)
!1437 = !{!1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445}
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "blendEnable", scope: !491, file: !491, line: 695, baseType: !43, size: 32, flags: DIFlagPublic)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "srcColorBlendFactor", scope: !491, file: !491, line: 695, baseType: !631, size: 32, offset: 32, flags: DIFlagPublic)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "dstColorBlendFactor", scope: !491, file: !491, line: 695, baseType: !631, size: 32, offset: 64, flags: DIFlagPublic)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "colorBlendOp", scope: !491, file: !491, line: 695, baseType: !631, size: 32, offset: 96, flags: DIFlagPublic)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "srcAlphaBlendFactor", scope: !491, file: !491, line: 695, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "dstAlphaBlendFactor", scope: !491, file: !491, line: 695, baseType: !631, size: 32, offset: 160, flags: DIFlagPublic)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "alphaBlendOp", scope: !491, file: !491, line: 695, baseType: !631, size: 32, offset: 192, flags: DIFlagPublic)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "colorWriteMask", scope: !491, file: !491, line: 695, baseType: !631, size: 32, offset: 224, flags: DIFlagPublic)
!1446 = !DILocation(line: 741, scope: !1271)
!1447 = !DILocation(line: 742, column: 2, scope: !1271)
!1448 = !DILocation(line: 744, column: 3, scope: !1271)
!1449 = !DILocation(line: 757, column: 2, scope: !1271)
!1450 = !DILocalVariable(name: "blend", scope: !1271, file: !978, line: 757, type: !1451)
!1451 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineColorBlendStateCreateInfo", scope: !491, file: !491, line: 707, size: 448, align: 64, flags: DIFlagPublic, elements: !1452)
!1452 = !{!1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460}
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 707, baseType: !631, size: 32, flags: DIFlagPublic)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 707, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 707, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "logicOpEnable", scope: !491, file: !491, line: 707, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "logicOp", scope: !491, file: !491, line: 707, baseType: !631, size: 32, offset: 192, flags: DIFlagPublic)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "attachmentCount", scope: !491, file: !491, line: 707, baseType: !43, size: 32, offset: 224, flags: DIFlagPublic)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "pAttachments", scope: !491, file: !491, line: 707, baseType: !1435, size: 64, offset: 256, flags: DIFlagPublic)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "blendConstants", scope: !491, file: !491, line: 707, baseType: !1461, size: 128, offset: 320, flags: DIFlagPublic)
!1461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 8)
!1462 = !DILocation(line: 757, scope: !1271)
!1463 = !DILocation(line: 767, column: 2, scope: !1271)
!1464 = !DILocation(line: 768, column: 2, scope: !1271)
!1465 = !DILocation(line: 769, column: 2, scope: !1271)
!1466 = !DILocation(line: 770, column: 2, scope: !1271)
!1467 = !DILocation(line: 772, column: 2, scope: !1271)
!1468 = !DILocalVariable(name: "color_formats", scope: !1271, file: !978, line: 772, type: !1195)
!1469 = !DILocation(line: 772, scope: !1271)
!1470 = !DILocation(line: 773, column: 2, scope: !1271)
!1471 = !DILocation(line: 775, column: 3, scope: !1271)
!1472 = !DILocation(line: 777, column: 2, scope: !1271)
!1473 = !DILocation(line: 779, column: 2, scope: !1271)
!1474 = !DILocalVariable(name: "rendering", scope: !1271, file: !978, line: 779, type: !1475)
!1475 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineRenderingCreateInfo", scope: !491, file: !491, line: 719, size: 320, align: 64, flags: DIFlagPublic, elements: !1476)
!1476 = !{!1477, !1478, !1479, !1480, !1481, !1482, !1483}
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 719, baseType: !631, size: 32, flags: DIFlagPublic)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 719, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "viewMask", scope: !491, file: !491, line: 719, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "colorAttachmentCount", scope: !491, file: !491, line: 719, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "pColorAttachmentFormats", scope: !491, file: !491, line: 719, baseType: !1195, size: 64, offset: 192, flags: DIFlagPublic)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "depthAttachmentFormat", scope: !491, file: !491, line: 719, baseType: !631, size: 32, offset: 256, flags: DIFlagPublic)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "stencilAttachmentFormat", scope: !491, file: !491, line: 719, baseType: !631, size: 32, offset: 288, flags: DIFlagPublic)
!1484 = !DILocation(line: 779, scope: !1271)
!1485 = !DILocation(line: 790, column: 2, scope: !1271)
!1486 = !DILocalVariable(name: "dynamic_states", scope: !1271, file: !978, line: 790, type: !1195)
!1487 = !DILocation(line: 790, scope: !1271)
!1488 = !DILocation(line: 791, column: 2, scope: !1271)
!1489 = !DILocation(line: 792, column: 2, scope: !1271)
!1490 = !DILocation(line: 794, column: 2, scope: !1271)
!1491 = !DILocalVariable(name: "dyn", scope: !1271, file: !978, line: 794, type: !1492)
!1492 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineDynamicStateCreateInfo", scope: !491, file: !491, line: 730, size: 256, align: 64, flags: DIFlagPublic, elements: !1493)
!1493 = !{!1494, !1495, !1496, !1497, !1498}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 730, baseType: !631, size: 32, flags: DIFlagPublic)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 730, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 730, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "dynamicStateCount", scope: !491, file: !491, line: 730, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pDynamicStates", scope: !491, file: !491, line: 730, baseType: !1195, size: 64, offset: 192, flags: DIFlagPublic)
!1499 = !DILocation(line: 794, scope: !1271)
!1500 = !DILocation(line: 803, column: 2, scope: !1271)
!1501 = !DILocalVariable(name: "create", scope: !1271, file: !978, line: 803, type: !1502)
!1502 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkGraphicsPipelineCreateInfo", scope: !491, file: !491, line: 739, size: 1088, align: 64, flags: DIFlagPublic, elements: !1503)
!1503 = !{!1504, !1505, !1506, !1507, !1508, !1509, !1511, !1513, !1515, !1517, !1519, !1521, !1523, !1525, !1527, !1528, !1529, !1530, !1531}
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 739, baseType: !631, size: 32, flags: DIFlagPublic)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 739, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 739, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "stageCount", scope: !491, file: !491, line: 739, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "pStages", scope: !491, file: !491, line: 739, baseType: !1296, size: 64, offset: 192, flags: DIFlagPublic)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "pVertexInputState", scope: !491, file: !491, line: 739, baseType: !1510, size: 64, offset: 256, flags: DIFlagPublic)
!1510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1311, size: 8)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "pInputAssemblyState", scope: !491, file: !491, line: 739, baseType: !1512, size: 64, offset: 320, flags: DIFlagPublic)
!1512 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1323, size: 8)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "pTessellationState", scope: !491, file: !491, line: 739, baseType: !1514, size: 64, offset: 384, flags: DIFlagPublic)
!1514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1333, size: 8)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "pViewportState", scope: !491, file: !491, line: 739, baseType: !1516, size: 64, offset: 448, flags: DIFlagPublic)
!1516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1342, size: 8)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "pRasterizationState", scope: !491, file: !491, line: 739, baseType: !1518, size: 64, offset: 512, flags: DIFlagPublic)
!1518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1365, size: 8)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "pMultisampleState", scope: !491, file: !491, line: 739, baseType: !1520, size: 64, offset: 576, flags: DIFlagPublic)
!1520 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1383, size: 8)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "pDepthStencilState", scope: !491, file: !491, line: 739, baseType: !1522, size: 64, offset: 640, flags: DIFlagPublic)
!1522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1415, size: 8)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "pColorBlendState", scope: !491, file: !491, line: 739, baseType: !1524, size: 64, offset: 704, flags: DIFlagPublic)
!1524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1451, size: 8)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "pDynamicState", scope: !491, file: !491, line: 739, baseType: !1526, size: 64, offset: 768, flags: DIFlagPublic)
!1526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1492, size: 8)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "layout", scope: !491, file: !491, line: 739, baseType: !147, size: 64, offset: 832, flags: DIFlagPublic)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "renderPass", scope: !491, file: !491, line: 739, baseType: !147, size: 64, offset: 896, flags: DIFlagPublic)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "subpass", scope: !491, file: !491, line: 739, baseType: !43, size: 32, offset: 960, flags: DIFlagPublic)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "basePipelineHandle", scope: !491, file: !491, line: 739, baseType: !147, size: 64, offset: 992, flags: DIFlagPublic)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "basePipelineIndex", scope: !491, file: !491, line: 739, baseType: !631, size: 32, offset: 1056, flags: DIFlagPublic)
!1532 = !DILocation(line: 803, scope: !1271)
!1533 = !DILocation(line: 826, column: 2, scope: !1271)
!1534 = !DILocalVariable(name: "ret", scope: !1271, file: !978, line: 826, type: !147)
!1535 = !DILocation(line: 826, scope: !1271)
!1536 = !DILocation(line: 827, column: 2, scope: !1271)
!1537 = !DILocation(line: 828, column: 2, scope: !1271)
!1538 = distinct !DISubprogram(scope: !978, file: !978, line: 832, type: !1539, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1539 = !DISubroutineType(types: !1540)
!1540 = !{!147, !166, !1103}
!1541 = !DILocalVariable(name: "shader", arg: 1, scope: !1538, file: !978, line: 832, type: !166)
!1542 = !DILocation(line: 832, scope: !1538)
!1543 = !DILocalVariable(name: "compute", arg: 2, scope: !1538, file: !978, line: 832, type: !1103)
!1544 = !DILocation(line: 833, column: 1, scope: !1538)
!1545 = !DILocation(line: 834, column: 2, scope: !1538)
!1546 = !DILocalVariable(name: "shadptr", scope: !1538, file: !978, line: 834, type: !1230)
!1547 = !DILocation(line: 834, scope: !1538)
!1548 = !DILocation(line: 835, column: 2, scope: !1538)
!1549 = !DILocalVariable(name: "compute_shader_module", scope: !1538, file: !978, line: 835, type: !147)
!1550 = !DILocation(line: 835, scope: !1538)
!1551 = !DILocation(line: 836, column: 2, scope: !1538)
!1552 = !DILocation(line: 838, column: 3, scope: !1538)
!1553 = !DILocation(line: 839, column: 3, scope: !1538)
!1554 = !DILocation(line: 841, column: 2, scope: !1538)
!1555 = !DILocalVariable(name: "create", scope: !1538, file: !978, line: 841, type: !1556)
!1556 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkComputePipelineCreateInfo", scope: !491, file: !491, line: 588, size: 768, align: 64, flags: DIFlagPublic, elements: !1557)
!1557 = !{!1558, !1559, !1560, !1561, !1562, !1563, !1564}
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 588, baseType: !631, size: 32, flags: DIFlagPublic)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 588, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 588, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "stage", scope: !491, file: !491, line: 588, baseType: !1297, size: 384, offset: 192, flags: DIFlagPublic)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "layout", scope: !491, file: !491, line: 588, baseType: !147, size: 64, offset: 576, flags: DIFlagPublic)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "basePipelineHandle", scope: !491, file: !491, line: 588, baseType: !147, size: 64, offset: 640, flags: DIFlagPublic)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "basePipelineIndex", scope: !491, file: !491, line: 588, baseType: !631, size: 32, offset: 704, flags: DIFlagPublic)
!1565 = !DILocation(line: 841, scope: !1538)
!1566 = !DILocation(line: 860, column: 2, scope: !1538)
!1567 = !DILocalVariable(name: "ret", scope: !1538, file: !978, line: 860, type: !147)
!1568 = !DILocation(line: 860, scope: !1538)
!1569 = !DILocation(line: 862, column: 2, scope: !1538)
!1570 = !DILocation(line: 863, column: 2, scope: !1538)
!1571 = distinct !DISubprogram(scope: !978, file: !978, line: 867, type: !1572, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1572 = !DISubroutineType(types: !1573)
!1573 = !{!6, !147, !147}
!1574 = !DILocalVariable(name: "image", arg: 1, scope: !1571, file: !978, line: 867, type: !147)
!1575 = !DILocation(line: 867, scope: !1571)
!1576 = !DILocalVariable(name: "imgsize", arg: 2, scope: !1571, file: !978, line: 867, type: !147)
!1577 = !DILocation(line: 869, column: 2, scope: !1571)
!1578 = !DILocalVariable(name: "valloc", scope: !1571, file: !978, line: 869, type: !1579)
!1579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1580, size: 8)
!1580 = !DICompositeType(tag: DW_TAG_structure_type, name: "valloc_t", scope: !978, file: !978, line: 167, size: 256, align: 64, flags: DIFlagPublic, elements: !1581)
!1581 = !{!1582, !1583, !1584, !1585}
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "device_mem", scope: !978, file: !978, line: 167, baseType: !147, size: 64, flags: DIFlagPublic)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !978, file: !978, line: 167, baseType: !147, size: 64, offset: 64, flags: DIFlagPublic)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "cursor", scope: !978, file: !978, line: 167, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "mapped_ptr", scope: !978, file: !978, line: 167, baseType: !214, size: 64, offset: 192, flags: DIFlagPublic)
!1586 = !DILocation(line: 869, scope: !1571)
!1587 = !DILocation(line: 870, column: 2, scope: !1571)
!1588 = !DILocation(line: 872, column: 3, scope: !1571)
!1589 = !DILocation(line: 873, column: 3, scope: !1571)
!1590 = !DILocation(line: 874, column: 3, scope: !1571)
!1591 = !DILocation(line: 875, column: 3, scope: !1571)
!1592 = !DILocation(line: 876, column: 3, scope: !1571)
!1593 = !DILocation(line: 877, column: 3, scope: !1571)
!1594 = !DILocation(line: 880, column: 2, scope: !1571)
!1595 = !DILocalVariable(name: "memreqs", scope: !1571, file: !978, line: 880, type: !1596)
!1596 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkMemoryRequirements", scope: !491, file: !491, line: 827, size: 160, align: 32, flags: DIFlagPublic, elements: !1597)
!1597 = !{!1598, !1599, !1600}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !491, file: !491, line: 827, baseType: !147, size: 64, flags: DIFlagPublic)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !491, file: !491, line: 827, baseType: !147, size: 64, offset: 64, flags: DIFlagPublic)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "memoryTypeBits", scope: !491, file: !491, line: 827, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!1601 = !DILocation(line: 880, scope: !1571)
!1602 = !DILocation(line: 881, column: 2, scope: !1571)
!1603 = !DILocation(line: 883, column: 2, scope: !1571)
!1604 = !DILocalVariable(name: "padding", scope: !1571, file: !978, line: 883, type: !147)
!1605 = !DILocation(line: 883, scope: !1571)
!1606 = !DILocation(line: 884, column: 2, scope: !1571)
!1607 = !DILocation(line: 886, column: 2, scope: !1571)
!1608 = !DILocalVariable(name: "ret", scope: !1571, file: !978, line: 886, type: !631)
!1609 = !DILocation(line: 886, scope: !1571)
!1610 = !DILocation(line: 887, column: 2, scope: !1571)
!1611 = !DILocation(line: 889, column: 3, scope: !1571)
!1612 = !DILocation(line: 890, column: 3, scope: !1571)
!1613 = !DILocation(line: 892, column: 2, scope: !1571)
!1614 = !DILocation(line: 894, column: 3, scope: !1571)
!1615 = !DILocation(line: 895, column: 3, scope: !1571)
!1616 = !DILocation(line: 898, column: 2, scope: !1571)
!1617 = !DILocation(line: 868, column: 1, scope: !1571)
!1618 = distinct !DISubprogram(scope: !978, file: !978, line: 902, type: !1619, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1619 = !DISubroutineType(types: !1620)
!1620 = !{!266, !147, !147, !166, !227}
!1621 = !DILocalVariable(name: "w", arg: 1, scope: !1618, file: !978, line: 902, type: !147)
!1622 = !DILocation(line: 902, scope: !1618)
!1623 = !DILocalVariable(name: "h", arg: 2, scope: !1618, file: !978, line: 902, type: !147)
!1624 = !DILocalVariable(name: "wnd", arg: 3, scope: !1618, file: !978, line: 902, type: !166)
!1625 = !DILocalVariable(name: "a", arg: 4, scope: !1618, file: !978, line: 902, type: !227)
!1626 = !DILocation(line: 904, column: 2, scope: !1618)
!1627 = !DILocation(line: 909, column: 4, scope: !1618)
!1628 = !DILocalVariable(name: "create", scope: !1618, file: !978, line: 909, type: !1629)
!1629 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkWin32SurfaceCreateInfoKHR", scope: !491, file: !491, line: 72, size: 320, align: 64, flags: DIFlagPublic, elements: !1630)
!1630 = !{!1631, !1632, !1633, !1634, !1635}
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 72, baseType: !631, size: 32, flags: DIFlagPublic)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 72, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 72, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "hinstance", scope: !491, file: !491, line: 72, baseType: !147, size: 64, offset: 160, flags: DIFlagPublic)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "hwnd", scope: !491, file: !491, line: 72, baseType: !147, size: 64, offset: 224, flags: DIFlagPublic)
!1636 = !DILocation(line: 909, scope: !1618)
!1637 = !DILocation(line: 917, column: 4, scope: !1618)
!1638 = !DILocation(line: 919, column: 3, scope: !1618)
!1639 = !DILocation(line: 925, column: 2, scope: !1618)
!1640 = !DILocation(line: 927, column: 3, scope: !1618)
!1641 = !DILocation(line: 933, column: 2, scope: !1618)
!1642 = !DILocation(line: 934, column: 2, scope: !1618)
!1643 = !DILocation(line: 936, column: 2, scope: !1618)
!1644 = !DILocalVariable(name: "caps", scope: !1618, file: !978, line: 936, type: !1645)
!1645 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkSurfaceCapabilitiesKHR", scope: !491, file: !491, line: 419, size: 416, align: 32, flags: DIFlagPublic, elements: !1646)
!1646 = !{!1647, !1648, !1649, !1654, !1655, !1656, !1657, !1658, !1659, !1660}
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "minImageCount", scope: !491, file: !491, line: 419, baseType: !43, size: 32, flags: DIFlagPublic)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "maxImageCount", scope: !491, file: !491, line: 419, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "currentExtent", scope: !491, file: !491, line: 419, baseType: !1650, size: 64, offset: 64, flags: DIFlagPublic)
!1650 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkExtent2D", scope: !491, file: !491, line: 398, size: 64, align: 32, flags: DIFlagPublic, elements: !1651)
!1651 = !{!1652, !1653}
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !491, file: !491, line: 398, baseType: !43, size: 32, flags: DIFlagPublic)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !491, file: !491, line: 398, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "minImageExtent", scope: !491, file: !491, line: 419, baseType: !1650, size: 64, offset: 128, flags: DIFlagPublic)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "maxImageExtent", scope: !491, file: !491, line: 419, baseType: !1650, size: 64, offset: 192, flags: DIFlagPublic)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "maxImageArrayLayers", scope: !491, file: !491, line: 419, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "supportedTransforms", scope: !491, file: !491, line: 419, baseType: !631, size: 32, offset: 288, flags: DIFlagPublic)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "currentTransform", scope: !491, file: !491, line: 419, baseType: !631, size: 32, offset: 320, flags: DIFlagPublic)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "supportedCompositeAlpha", scope: !491, file: !491, line: 419, baseType: !631, size: 32, offset: 352, flags: DIFlagPublic)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "supportedUsageFlags", scope: !491, file: !491, line: 419, baseType: !631, size: 32, offset: 384, flags: DIFlagPublic)
!1661 = !DILocation(line: 936, scope: !1618)
!1662 = !DILocation(line: 937, column: 2, scope: !1618)
!1663 = !DILocation(line: 939, column: 2, scope: !1618)
!1664 = !DILocalVariable(name: "swch_create", scope: !1618, file: !978, line: 939, type: !1665)
!1665 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkSwapchainCreateInfoKHR", scope: !491, file: !491, line: 433, size: 768, align: 64, flags: DIFlagPublic, elements: !1666)
!1666 = !{!1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684}
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 433, baseType: !631, size: 32, flags: DIFlagPublic)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 433, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 433, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "surface", scope: !491, file: !491, line: 433, baseType: !147, size: 64, offset: 160, flags: DIFlagPublic)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "minImageCount", scope: !491, file: !491, line: 433, baseType: !43, size: 32, offset: 224, flags: DIFlagPublic)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "imageFormat", scope: !491, file: !491, line: 433, baseType: !631, size: 32, offset: 256, flags: DIFlagPublic)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "imageColorSpace", scope: !491, file: !491, line: 433, baseType: !631, size: 32, offset: 288, flags: DIFlagPublic)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "imageExtent", scope: !491, file: !491, line: 433, baseType: !1650, size: 64, offset: 320, flags: DIFlagPublic)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "imageArrayLayers", scope: !491, file: !491, line: 433, baseType: !43, size: 32, offset: 384, flags: DIFlagPublic)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "imageUsage", scope: !491, file: !491, line: 433, baseType: !631, size: 32, offset: 416, flags: DIFlagPublic)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "imageSharingMode", scope: !491, file: !491, line: 433, baseType: !631, size: 32, offset: 448, flags: DIFlagPublic)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "queueFamilyIndexCount", scope: !491, file: !491, line: 433, baseType: !43, size: 32, offset: 480, flags: DIFlagPublic)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "pQueueFamilyIndices", scope: !491, file: !491, line: 433, baseType: !1056, size: 64, offset: 512, flags: DIFlagPublic)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "preTransform", scope: !491, file: !491, line: 433, baseType: !631, size: 32, offset: 576, flags: DIFlagPublic)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "compositeAlpha", scope: !491, file: !491, line: 433, baseType: !631, size: 32, offset: 608, flags: DIFlagPublic)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "presentMode", scope: !491, file: !491, line: 433, baseType: !631, size: 32, offset: 640, flags: DIFlagPublic)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "clipped", scope: !491, file: !491, line: 433, baseType: !43, size: 32, offset: 672, flags: DIFlagPublic)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "oldSwapchain", scope: !491, file: !491, line: 433, baseType: !147, size: 64, offset: 704, flags: DIFlagPublic)
!1685 = !DILocation(line: 939, scope: !1618)
!1686 = !DILocation(line: 961, column: 2, scope: !1618)
!1687 = !DILocalVariable(name: "old_swapchain", scope: !1618, file: !978, line: 961, type: !147)
!1688 = !DILocation(line: 961, scope: !1618)
!1689 = !DILocation(line: 962, column: 2, scope: !1618)
!1690 = !DILocation(line: 965, column: 2, scope: !1618)
!1691 = !DILocation(line: 966, column: 2, scope: !1618)
!1692 = !DILocation(line: 929, column: 4, scope: !1618)
!1693 = !DILocation(line: 968, column: 3, scope: !1618)
!1694 = !DILocation(line: 969, column: 3, scope: !1618)
!1695 = !DILocation(line: 971, column: 2, scope: !1618)
!1696 = !DILocation(line: 973, column: 3, scope: !1618)
!1697 = !DILocation(line: 974, column: 3, scope: !1618)
!1698 = !DILocation(line: 976, column: 2, scope: !1618)
!1699 = !DILocation(line: 978, column: 2, scope: !1618)
!1700 = !DILocalVariable(name: "counter", scope: !1618, file: !978, line: 978, type: !43)
!1701 = !DILocation(line: 978, scope: !1618)
!1702 = !DILocation(line: 979, column: 2, scope: !1618)
!1703 = !DILocation(line: 982, column: 3, scope: !1618)
!1704 = !DILocation(line: 989, column: 2, scope: !1618)
!1705 = !DILocalVariable(name: "view_create", scope: !1618, file: !978, line: 989, type: !1706)
!1706 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkImageViewCreateInfo", scope: !491, file: !491, line: 894, size: 576, align: 64, flags: DIFlagPublic, elements: !1707)
!1707 = !{!1708, !1709, !1710, !1711, !1712, !1713, !1714, !1721}
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 894, baseType: !631, size: 32, flags: DIFlagPublic)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 894, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 894, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "image", scope: !491, file: !491, line: 894, baseType: !147, size: 64, offset: 160, flags: DIFlagPublic)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "viewType", scope: !491, file: !491, line: 894, baseType: !631, size: 32, offset: 224, flags: DIFlagPublic)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !491, file: !491, line: 894, baseType: !631, size: 32, offset: 256, flags: DIFlagPublic)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "components", scope: !491, file: !491, line: 894, baseType: !1715, size: 128, offset: 288, flags: DIFlagPublic)
!1715 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkComponentMapping", scope: !491, file: !491, line: 886, size: 128, align: 32, flags: DIFlagPublic, elements: !1716)
!1716 = !{!1717, !1718, !1719, !1720}
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !491, file: !491, line: 886, baseType: !631, size: 32, flags: DIFlagPublic)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !491, file: !491, line: 886, baseType: !631, size: 32, offset: 32, flags: DIFlagPublic)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !491, file: !491, line: 886, baseType: !631, size: 32, offset: 64, flags: DIFlagPublic)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !491, file: !491, line: 886, baseType: !631, size: 32, offset: 96, flags: DIFlagPublic)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "subresourceRange", scope: !491, file: !491, line: 894, baseType: !1722, size: 160, offset: 416, flags: DIFlagPublic)
!1722 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkImageSubresourceRange", scope: !491, file: !491, line: 804, size: 160, align: 32, flags: DIFlagPublic, elements: !1723)
!1723 = !{!1724, !1725, !1726, !1727, !1728}
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "aspectMask", scope: !491, file: !491, line: 804, baseType: !631, size: 32, flags: DIFlagPublic)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "baseMipLevel", scope: !491, file: !491, line: 804, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "levelCount", scope: !491, file: !491, line: 804, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "baseArrayLayer", scope: !491, file: !491, line: 804, baseType: !43, size: 32, offset: 96, flags: DIFlagPublic)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "layerCount", scope: !491, file: !491, line: 804, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!1729 = !DILocation(line: 989, scope: !1618)
!1730 = !DILocation(line: 1014, column: 2, scope: !1618)
!1731 = !DILocation(line: 984, column: 4, scope: !1618)
!1732 = !DILocation(line: 986, column: 3, scope: !1618)
!1733 = !DILocation(line: 1016, column: 3, scope: !1618)
!1734 = !DILocation(line: 1018, column: 3, scope: !1618)
!1735 = !DILocation(line: 1021, column: 2, scope: !1618)
!1736 = !DILocation(line: 1024, column: 3, scope: !1618)
!1737 = !DILocation(line: 1025, column: 3, scope: !1618)
!1738 = !DILocation(line: 1027, column: 2, scope: !1618)
!1739 = !DILocalVariable(name: "system_image_create", scope: !1618, file: !978, line: 1027, type: !1740)
!1740 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkImageCreateInfo", scope: !491, file: !491, line: 530, size: 704, align: 64, flags: DIFlagPublic, elements: !1741)
!1741 = !{!1742, !1743, !1744, !1745, !1746, !1747, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761}
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 530, baseType: !631, size: 32, flags: DIFlagPublic)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 530, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 530, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "imageType", scope: !491, file: !491, line: 530, baseType: !631, size: 32, offset: 160, flags: DIFlagPublic)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !491, file: !491, line: 530, baseType: !631, size: 32, offset: 192, flags: DIFlagPublic)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "extent", scope: !491, file: !491, line: 530, baseType: !1748, size: 96, offset: 224, flags: DIFlagPublic)
!1748 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkExtent3D", scope: !491, file: !491, line: 404, size: 96, align: 32, flags: DIFlagPublic, elements: !1749)
!1749 = !{!1750, !1751, !1752}
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !491, file: !491, line: 404, baseType: !43, size: 32, flags: DIFlagPublic)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !491, file: !491, line: 404, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !491, file: !491, line: 404, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "mipLevels", scope: !491, file: !491, line: 530, baseType: !43, size: 32, offset: 320, flags: DIFlagPublic)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "arrayLayers", scope: !491, file: !491, line: 530, baseType: !43, size: 32, offset: 352, flags: DIFlagPublic)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "samples", scope: !491, file: !491, line: 530, baseType: !631, size: 32, offset: 384, flags: DIFlagPublic)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "tiling", scope: !491, file: !491, line: 530, baseType: !631, size: 32, offset: 416, flags: DIFlagPublic)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !491, file: !491, line: 530, baseType: !631, size: 32, offset: 448, flags: DIFlagPublic)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "sharingMode", scope: !491, file: !491, line: 530, baseType: !631, size: 32, offset: 480, flags: DIFlagPublic)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "queueFamilyIndexCount", scope: !491, file: !491, line: 530, baseType: !43, size: 32, offset: 512, flags: DIFlagPublic)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "pQueueFamilyIndices", scope: !491, file: !491, line: 530, baseType: !1056, size: 64, offset: 576, flags: DIFlagPublic)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "initialLayout", scope: !491, file: !491, line: 530, baseType: !631, size: 32, offset: 640, flags: DIFlagPublic)
!1762 = !DILocation(line: 1027, scope: !1618)
!1763 = !DILocation(line: 1050, column: 2, scope: !1618)
!1764 = !DILocation(line: 1051, column: 2, scope: !1618)
!1765 = !DILocation(line: 1052, column: 2, scope: !1618)
!1766 = !DILocation(line: 1053, column: 2, scope: !1618)
!1767 = !DILocation(line: 1054, column: 2, scope: !1618)
!1768 = !DILocation(line: 1056, column: 2, scope: !1618)
!1769 = !DILocation(line: 1057, column: 2, scope: !1618)
!1770 = !DILocation(line: 1060, column: 2, scope: !1618)
!1771 = distinct !DISubprogram(scope: !978, file: !978, line: 1064, type: !1772, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1772 = !DISubroutineType(types: !1773)
!1773 = !{!266, !227}
!1774 = !DILocalVariable(name: "a", arg: 1, scope: !1771, file: !978, line: 1064, type: !227)
!1775 = !DILocation(line: 1064, scope: !1771)
!1776 = !DILocation(line: 1066, column: 2, scope: !1771)
!1777 = !DILocalVariable(name: "windims", scope: !1771, file: !978, line: 1066, type: !40)
!1778 = !DILocation(line: 1066, scope: !1771)
!1779 = !DILocation(line: 1067, column: 2, scope: !1771)
!1780 = !DILocalVariable(name: "x", scope: !1771, file: !978, line: 1067, type: !43)
!1781 = !DILocation(line: 1067, scope: !1771)
!1782 = !DILocation(line: 1068, column: 2, scope: !1771)
!1783 = !DILocalVariable(name: "y", scope: !1771, file: !978, line: 1068, type: !43)
!1784 = !DILocation(line: 1068, scope: !1771)
!1785 = !DILocation(line: 1069, column: 2, scope: !1771)
!1786 = !DILocation(line: 1071, column: 3, scope: !1771)
!1787 = !DILocation(line: 1072, column: 3, scope: !1771)
!1788 = !DILocation(line: 1074, column: 2, scope: !1771)
!1789 = !DILocation(line: 1076, column: 3, scope: !1771)
!1790 = !DILocation(line: 1077, column: 3, scope: !1771)
!1791 = !DILocation(line: 1079, column: 2, scope: !1771)
!1792 = distinct !DISubprogram(scope: !978, file: !978, line: 1083, type: !1793, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1793 = !DISubroutineType(types: !1794)
!1794 = !{!40, !1083}
!1795 = !DILocalVariable(name: "passptr", arg: 1, scope: !1792, file: !978, line: 1083, type: !1083)
!1796 = !DILocation(line: 1083, scope: !1792)
!1797 = !DILocation(line: 1084, column: 1, scope: !1792)
!1798 = !DILocation(line: 1085, column: 2, scope: !1792)
!1799 = !DILocalVariable(name: "pinfo", scope: !1792, file: !978, line: 1085, type: !1087)
!1800 = !DILocation(line: 1085, scope: !1792)
!1801 = !DILocation(line: 1086, column: 2, scope: !1792)
!1802 = !DILocalVariable(name: "ginfo", scope: !1792, file: !978, line: 1086, type: !1090)
!1803 = !DILocation(line: 1086, scope: !1792)
!1804 = !DILocation(line: 1087, column: 2, scope: !1792)
!1805 = !DILocation(line: 1089, column: 3, scope: !1792)
!1806 = !DILocation(line: 1091, column: 2, scope: !1792)
!1807 = !DILocalVariable(name: "first_colour_target", scope: !1792, file: !978, line: 1091, type: !166)
!1808 = !DILocation(line: 1091, scope: !1792)
!1809 = !DILocation(line: 1092, column: 2, scope: !1792)
!1810 = !DILocation(line: 1094, column: 3, scope: !1792)
!1811 = !DILocation(line: 1100, column: 2, scope: !1792)
!1812 = !DILocalVariable(name: "res", scope: !1792, file: !978, line: 1100, type: !981)
!1813 = !DILocation(line: 1100, scope: !1792)
!1814 = !DILocation(line: 1101, column: 2, scope: !1792)
!1815 = !DILocalVariable(name: "resinfo", scope: !1792, file: !978, line: 1101, type: !985)
!1816 = !DILocation(line: 1101, scope: !1792)
!1817 = !DILocation(line: 1102, column: 2, scope: !1792)
!1818 = distinct !DISubprogram(scope: !978, file: !978, line: 1106, type: !1819, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1819 = !DISubroutineType(types: !1820)
!1820 = !{!6, !1083, !147}
!1821 = !DILocalVariable(name: "passptr", arg: 1, scope: !1818, file: !978, line: 1106, type: !1083)
!1822 = !DILocation(line: 1106, scope: !1818)
!1823 = !DILocalVariable(name: "frame_id", arg: 2, scope: !1818, file: !978, line: 1106, type: !147)
!1824 = !DILocation(line: 1108, column: 2, scope: !1818)
!1825 = !DILocation(line: 1109, column: 2, scope: !1818)
!1826 = !DILocation(line: 1107, column: 1, scope: !1818)
!1827 = distinct !DISubprogram(scope: !978, file: !978, line: 1113, type: !1828, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!1828 = !DISubroutineType(types: !1829)
!1829 = !{!6, !1083, !147, !227}
!1830 = !DILocalVariable(name: "passptr", arg: 1, scope: !1827, file: !978, line: 1113, type: !1083)
!1831 = !DILocation(line: 1113, scope: !1827)
!1832 = !DILocalVariable(name: "frame_id", arg: 2, scope: !1827, file: !978, line: 1113, type: !147)
!1833 = !DILocalVariable(name: "a", arg: 3, scope: !1827, file: !978, line: 1113, type: !227)
!1834 = !DILocation(line: 1114, column: 1, scope: !1827)
!1835 = !DILocation(line: 1115, column: 2, scope: !1827)
!1836 = !DILocalVariable(name: "frame", scope: !1827, file: !978, line: 1115, type: !1837)
!1837 = !DICompositeType(tag: DW_TAG_structure_type, name: "frame_data", scope: !978, file: !978, line: 182, size: 256, align: 32, flags: DIFlagPublic, elements: !1838)
!1838 = !{!1839, !1840, !1841, !1842}
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "cpool", scope: !978, file: !978, line: 182, baseType: !147, size: 64, flags: DIFlagPublic)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "cmds", scope: !978, file: !978, line: 182, baseType: !147, size: 64, offset: 64, flags: DIFlagPublic)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "swapchain_fence", scope: !978, file: !978, line: 182, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "swapchain_sem", scope: !978, file: !978, line: 182, baseType: !147, size: 64, offset: 192, flags: DIFlagPublic)
!1843 = !DILocation(line: 1115, scope: !1827)
!1844 = !DILocation(line: 1116, column: 2, scope: !1827)
!1845 = !DILocalVariable(name: "pinfo", scope: !1827, file: !978, line: 1116, type: !1087)
!1846 = !DILocation(line: 1116, scope: !1827)
!1847 = !DILocation(line: 1117, column: 2, scope: !1827)
!1848 = !DILocalVariable(name: "ginfo", scope: !1827, file: !978, line: 1117, type: !1090)
!1849 = !DILocation(line: 1117, scope: !1827)
!1850 = !DILocation(line: 1118, column: 2, scope: !1827)
!1851 = !DILocalVariable(name: "ccount", scope: !1827, file: !978, line: 1118, type: !147)
!1852 = !DILocation(line: 1118, scope: !1827)
!1853 = !DILocation(line: 1120, column: 2, scope: !1827)
!1854 = !DILocation(line: 1122, column: 3, scope: !1827)
!1855 = !DILocation(line: 1123, column: 3, scope: !1827)
!1856 = !DILocation(line: 1126, column: 2, scope: !1827)
!1857 = !DILocalVariable(name: "colour_attachments", scope: !1827, file: !978, line: 1126, type: !1858)
!1858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1859, size: 8)
!1859 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkRenderingAttachmentInfo", scope: !491, file: !491, line: 858, size: 576, align: 64, flags: DIFlagPublic, elements: !1860)
!1860 = !{!1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870}
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 858, baseType: !631, size: 32, flags: DIFlagPublic)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 858, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "imageView", scope: !491, file: !491, line: 858, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "imageLayout", scope: !491, file: !491, line: 858, baseType: !631, size: 32, offset: 192, flags: DIFlagPublic)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "resolveMode", scope: !491, file: !491, line: 858, baseType: !631, size: 32, offset: 224, flags: DIFlagPublic)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "resolveImageView", scope: !491, file: !491, line: 858, baseType: !147, size: 64, offset: 256, flags: DIFlagPublic)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "resolveImageLayout", scope: !491, file: !491, line: 858, baseType: !631, size: 32, offset: 320, flags: DIFlagPublic)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "loadOp", scope: !491, file: !491, line: 858, baseType: !631, size: 32, offset: 352, flags: DIFlagPublic)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "storeOp", scope: !491, file: !491, line: 858, baseType: !631, size: 32, offset: 384, flags: DIFlagPublic)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "clearValue", scope: !491, file: !491, line: 858, baseType: !1871, size: 128, offset: 416, flags: DIFlagPublic)
!1871 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkClearValue", scope: !491, file: !491, line: 853, size: 128, align: 32, flags: DIFlagPublic, elements: !1872)
!1872 = !{!1873}
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "color", scope: !491, file: !491, line: 853, baseType: !1874, size: 128, flags: DIFlagPublic)
!1874 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkClearColorValue", scope: !491, file: !491, line: 846, size: 128, align: 32, flags: DIFlagPublic, elements: !1875)
!1875 = !{!1876}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "float32", scope: !491, file: !491, line: 846, baseType: !96, size: 128, flags: DIFlagPublic)
!1877 = !DILocation(line: 1126, scope: !1827)
!1878 = !DILocation(line: 1127, column: 2, scope: !1827)
!1879 = !DILocalVariable(name: "colour_transitions", scope: !1827, file: !978, line: 1127, type: !1880)
!1880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1881, size: 8)
!1881 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkImageMemoryBarrier", scope: !491, file: !491, line: 813, size: 576, align: 64, flags: DIFlagPublic, elements: !1882)
!1882 = !{!1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892}
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 813, baseType: !631, size: 32, flags: DIFlagPublic)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 813, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "srcAccessMask", scope: !491, file: !491, line: 813, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "dstAccessMask", scope: !491, file: !491, line: 813, baseType: !631, size: 32, offset: 160, flags: DIFlagPublic)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "oldLayout", scope: !491, file: !491, line: 813, baseType: !631, size: 32, offset: 192, flags: DIFlagPublic)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "newLayout", scope: !491, file: !491, line: 813, baseType: !631, size: 32, offset: 224, flags: DIFlagPublic)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "srcQueueFamilyIndex", scope: !491, file: !491, line: 813, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "dstQueueFamilyIndex", scope: !491, file: !491, line: 813, baseType: !43, size: 32, offset: 288, flags: DIFlagPublic)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "image", scope: !491, file: !491, line: 813, baseType: !147, size: 64, offset: 320, flags: DIFlagPublic)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "subresourceRange", scope: !491, file: !491, line: 813, baseType: !1722, size: 160, offset: 384, flags: DIFlagPublic)
!1893 = !DILocation(line: 1127, scope: !1827)
!1894 = !DILocation(line: 1128, column: 2, scope: !1827)
!1895 = !DILocalVariable(name: "colour_transition_count", scope: !1827, file: !978, line: 1128, type: !147)
!1896 = !DILocation(line: 1128, scope: !1827)
!1897 = !DILocation(line: 1130, column: 2, scope: !1827)
!1898 = !DILocalVariable(name: "counter", scope: !1827, file: !978, line: 1130, type: !147)
!1899 = !DILocation(line: 1130, scope: !1827)
!1900 = !DILocation(line: 1131, column: 2, scope: !1827)
!1901 = !DILocalVariable(name: "colour_target", scope: !1827, file: !978, line: 1131, type: !166)
!1902 = !DILocation(line: 1131, scope: !1827)
!1903 = !DILocation(line: 1132, column: 2, scope: !1827)
!1904 = !DILocalVariable(name: "resptr", scope: !1827, file: !978, line: 1132, type: !981)
!1905 = !DILocation(line: 1132, scope: !1827)
!1906 = !DILocation(line: 1133, column: 2, scope: !1827)
!1907 = !DILocalVariable(name: "render_target", scope: !1827, file: !978, line: 1133, type: !147)
!1908 = !DILocation(line: 1133, scope: !1827)
!1909 = !DILocation(line: 1134, column: 2, scope: !1827)
!1910 = !DILocalVariable(name: "render_target_view", scope: !1827, file: !978, line: 1134, type: !147)
!1911 = !DILocation(line: 1134, scope: !1827)
!1912 = !DILocation(line: 1136, column: 2, scope: !1827)
!1913 = !DILocation(line: 1138, column: 3, scope: !1827)
!1914 = !DILocation(line: 1140, column: 3, scope: !1827)
!1915 = !DILocalVariable(name: "dims", scope: !1827, file: !978, line: 1140, type: !40)
!1916 = !DILocation(line: 1140, scope: !1827)
!1917 = !DILocation(line: 1141, column: 3, scope: !1827)
!1918 = !DILocation(line: 1147, column: 4, scope: !1827)
!1919 = !DILocation(line: 1150, column: 2, scope: !1827)
!1920 = !DILocalVariable(name: "dimensions", scope: !1827, file: !978, line: 1150, type: !40)
!1921 = !DILocation(line: 1150, scope: !1827)
!1922 = !DILocation(line: 1152, column: 2, scope: !1827)
!1923 = !DILocation(line: 1143, column: 4, scope: !1827)
!1924 = !DILocation(line: 1145, column: 3, scope: !1827)
!1925 = !DILocation(line: 1154, column: 3, scope: !1827)
!1926 = !DILocation(line: 1155, column: 3, scope: !1827)
!1927 = !DILocation(line: 1156, column: 3, scope: !1827)
!1928 = !DILocation(line: 1158, column: 3, scope: !1827)
!1929 = !DILocation(line: 1213, column: 2, scope: !1827)
!1930 = !DILocation(line: 1161, column: 4, scope: !1827)
!1931 = !DILocation(line: 1162, column: 4, scope: !1827)
!1932 = !DILocation(line: 1165, column: 3, scope: !1827)
!1933 = !DILocation(line: 1167, column: 4, scope: !1827)
!1934 = !DILocation(line: 1168, column: 4, scope: !1827)
!1935 = !DILocation(line: 1169, column: 4, scope: !1827)
!1936 = !DILocation(line: 1172, column: 3, scope: !1827)
!1937 = !DILocation(line: 1186, column: 3, scope: !1827)
!1938 = !DILocation(line: 1188, column: 4, scope: !1827)
!1939 = !DILocation(line: 1208, column: 4, scope: !1827)
!1940 = !DILocation(line: 1215, column: 3, scope: !1827)
!1941 = !DILocation(line: 1218, column: 2, scope: !1827)
!1942 = !DILocalVariable(name: "render", scope: !1827, file: !978, line: 1218, type: !1943)
!1943 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkRenderingInfo", scope: !491, file: !491, line: 872, size: 576, align: 64, flags: DIFlagPublic, elements: !1944)
!1944 = !{!1945, !1946, !1947, !1948, !1957, !1958, !1959, !1960, !1961, !1962}
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 872, baseType: !631, size: 32, flags: DIFlagPublic)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 872, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 872, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "renderArea", scope: !491, file: !491, line: 872, baseType: !1949, size: 128, offset: 160, flags: DIFlagPublic)
!1949 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkRect2D", scope: !491, file: !491, line: 840, size: 128, align: 32, flags: DIFlagPublic, elements: !1950)
!1950 = !{!1951, !1956}
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !491, file: !491, line: 840, baseType: !1952, size: 64, flags: DIFlagPublic)
!1952 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkOffset2D", scope: !491, file: !491, line: 834, size: 64, align: 32, flags: DIFlagPublic, elements: !1953)
!1953 = !{!1954, !1955}
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !491, file: !491, line: 834, baseType: !631, size: 32, flags: DIFlagPublic)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !491, file: !491, line: 834, baseType: !631, size: 32, offset: 32, flags: DIFlagPublic)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "extent", scope: !491, file: !491, line: 840, baseType: !1650, size: 64, offset: 64, flags: DIFlagPublic)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "layerCount", scope: !491, file: !491, line: 872, baseType: !43, size: 32, offset: 288, flags: DIFlagPublic)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "viewMask", scope: !491, file: !491, line: 872, baseType: !43, size: 32, offset: 320, flags: DIFlagPublic)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "colorAttachmentCount", scope: !491, file: !491, line: 872, baseType: !43, size: 32, offset: 352, flags: DIFlagPublic)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "pColorAttachments", scope: !491, file: !491, line: 872, baseType: !1858, size: 64, offset: 384, flags: DIFlagPublic)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "pDepthAttachment", scope: !491, file: !491, line: 872, baseType: !1858, size: 64, offset: 448, flags: DIFlagPublic)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "pStencilAttachment", scope: !491, file: !491, line: 872, baseType: !1858, size: 64, offset: 512, flags: DIFlagPublic)
!1963 = !DILocation(line: 1218, scope: !1827)
!1964 = !DILocation(line: 1239, column: 2, scope: !1827)
!1965 = !DILocation(line: 1241, column: 2, scope: !1827)
!1966 = !DILocation(line: 1243, column: 2, scope: !1827)
!1967 = !DILocation(line: 1244, column: 2, scope: !1827)
!1968 = !DILocalVariable(name: "viewport", scope: !1827, file: !978, line: 1244, type: !1969)
!1969 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkViewport", scope: !491, file: !491, line: 906, size: 192, align: 32, flags: DIFlagPublic, elements: !1970)
!1970 = !{!1971, !1972, !1973, !1974, !1975, !1976}
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !491, file: !491, line: 906, baseType: !15, size: 32, flags: DIFlagPublic)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !491, file: !491, line: 906, baseType: !15, size: 32, offset: 32, flags: DIFlagPublic)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !491, file: !491, line: 906, baseType: !15, size: 32, offset: 64, flags: DIFlagPublic)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !491, file: !491, line: 906, baseType: !15, size: 32, offset: 96, flags: DIFlagPublic)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "minDepth", scope: !491, file: !491, line: 906, baseType: !15, size: 32, offset: 128, flags: DIFlagPublic)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "maxDepth", scope: !491, file: !491, line: 906, baseType: !15, size: 32, offset: 160, flags: DIFlagPublic)
!1977 = !DILocation(line: 1244, scope: !1827)
!1978 = !DILocation(line: 1253, column: 2, scope: !1827)
!1979 = !DILocation(line: 1255, column: 2, scope: !1827)
!1980 = !DILocalVariable(name: "scissor", scope: !1827, file: !978, line: 1255, type: !1949)
!1981 = !DILocation(line: 1255, scope: !1827)
!1982 = !DILocation(line: 1268, column: 2, scope: !1827)
!1983 = !DILocation(line: 1272, column: 2, scope: !1827)
!1984 = !DILocalVariable(name: "tri_count", scope: !1827, file: !978, line: 1272, type: !147)
!1985 = !DILocation(line: 1272, scope: !1827)
!1986 = !DILocation(line: 1273, column: 2, scope: !1827)
!1987 = !DILocalVariable(name: "drawbuf", scope: !1827, file: !978, line: 1273, type: !166)
!1988 = !DILocation(line: 1273, scope: !1827)
!1989 = !DILocation(line: 1274, column: 2, scope: !1827)
!1990 = !DILocalVariable(name: "idxbuf", scope: !1827, file: !978, line: 1274, type: !166)
!1991 = !DILocation(line: 1274, scope: !1827)
!1992 = !DILocation(line: 1275, column: 2, scope: !1827)
!1993 = !DILocation(line: 1277, column: 3, scope: !1827)
!1994 = !DILocation(line: 1289, column: 2, scope: !1827)
!1995 = !DILocation(line: 1279, column: 4, scope: !1827)
!1996 = !DILocation(line: 1281, column: 3, scope: !1827)
!1997 = !DILocation(line: 1282, column: 3, scope: !1827)
!1998 = !DILocation(line: 1283, column: 4, scope: !1827)
!1999 = !DILocalVariable(name: "drawbufres", scope: !1827, file: !978, line: 1283, type: !981)
!2000 = !DILocation(line: 1283, scope: !1827)
!2001 = !DILocation(line: 1284, column: 4, scope: !1827)
!2002 = !DILocalVariable(name: "drawbufinfo", scope: !1827, file: !978, line: 1284, type: !985)
!2003 = !DILocation(line: 1284, scope: !1827)
!2004 = !DILocation(line: 1285, column: 4, scope: !1827)
!2005 = !DILocalVariable(name: "draw_buf_max_size_unindexed", scope: !1827, file: !978, line: 1285, type: !147)
!2006 = !DILocation(line: 1285, scope: !1827)
!2007 = !DILocation(line: 1286, column: 4, scope: !1827)
!2008 = !DILocation(line: 1290, column: 2, scope: !1827)
!2009 = !DILocation(line: 1291, column: 3, scope: !1827)
!2010 = !DILocalVariable(name: "idxbufres", scope: !1827, file: !978, line: 1291, type: !981)
!2011 = !DILocation(line: 1291, scope: !1827)
!2012 = !DILocation(line: 1292, column: 3, scope: !1827)
!2013 = !DILocalVariable(name: "idxbufinfo", scope: !1827, file: !978, line: 1292, type: !985)
!2014 = !DILocation(line: 1292, scope: !1827)
!2015 = !DILocation(line: 1293, column: 3, scope: !1827)
!2016 = !DILocation(line: 1294, column: 3, scope: !1827)
!2017 = !DILocation(line: 1307, column: 2, scope: !1827)
!2018 = !DILocation(line: 1296, column: 4, scope: !1827)
!2019 = !DILocation(line: 1298, column: 3, scope: !1827)
!2020 = !DILocation(line: 1299, column: 3, scope: !1827)
!2021 = !DILocation(line: 1300, column: 4, scope: !1827)
!2022 = !DILocalVariable(name: "drawbufres", scope: !1827, file: !978, line: 1300, type: !981)
!2023 = !DILocation(line: 1300, scope: !1827)
!2024 = !DILocation(line: 1301, column: 4, scope: !1827)
!2025 = !DILocalVariable(name: "drawbufinfo", scope: !1827, file: !978, line: 1301, type: !985)
!2026 = !DILocation(line: 1301, scope: !1827)
!2027 = !DILocation(line: 1302, column: 4, scope: !1827)
!2028 = !DILocalVariable(name: "draw_buf_max_size_indexed", scope: !1827, file: !978, line: 1302, type: !147)
!2029 = !DILocation(line: 1302, scope: !1827)
!2030 = !DILocation(line: 1303, column: 4, scope: !1827)
!2031 = distinct !DISubprogram(scope: !978, file: !978, line: 1311, type: !2032, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2032 = !DISubroutineType(types: !2033)
!2033 = !{!6, !166, !147, !227}
!2034 = !DILocalVariable(name: "pass", arg: 1, scope: !2031, file: !978, line: 1311, type: !166)
!2035 = !DILocation(line: 1311, scope: !2031)
!2036 = !DILocalVariable(name: "frame_id", arg: 2, scope: !2031, file: !978, line: 1311, type: !147)
!2037 = !DILocalVariable(name: "a", arg: 3, scope: !2031, file: !978, line: 1311, type: !227)
!2038 = !DILocation(line: 1313, column: 2, scope: !2031)
!2039 = !DILocation(line: 1315, column: 3, scope: !2031)
!2040 = !DILocation(line: 1317, column: 2, scope: !2031)
!2041 = !DILocalVariable(name: "passptr", scope: !2031, file: !978, line: 1317, type: !1083)
!2042 = !DILocation(line: 1317, scope: !2031)
!2043 = !DILocation(line: 1318, column: 2, scope: !2031)
!2044 = !DILocation(line: 1320, column: 3, scope: !2031)
!2045 = !DILocation(line: 1322, column: 2, scope: !2031)
!2046 = !DILocation(line: 1324, column: 3, scope: !2031)
!2047 = !DILocation(line: 1312, column: 1, scope: !2031)
!2048 = distinct !DISubprogram(scope: !978, file: !978, line: 1329, type: !762, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2049 = !DILocalVariable(name: "graph", arg: 1, scope: !2048, file: !978, line: 1329, type: !166)
!2050 = !DILocation(line: 1329, scope: !2048)
!2051 = !DILocation(line: 1330, column: 1, scope: !2048)
!2052 = !DILocation(line: 1331, column: 2, scope: !2048)
!2053 = !DILocalVariable(name: "graphptr", scope: !2048, file: !978, line: 1331, type: !2054)
!2054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2055, size: 8)
!2055 = !DICompositeType(tag: DW_TAG_structure_type, name: "graph_data_t", scope: !978, file: !978, line: 303, size: 640, align: 64, flags: DIFlagPublic, elements: !2056)
!2056 = !{!2057, !2058, !2064, !2065}
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !978, file: !978, line: 303, baseType: !324, size: 448, flags: DIFlagPublic)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "timeline", scope: !978, file: !978, line: 303, baseType: !2059, size: 64, offset: 448, flags: DIFlagPublic)
!2059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2060, size: 8)
!2060 = !DICompositeType(tag: DW_TAG_structure_type, name: "graph_entry", scope: !978, file: !978, line: 297, size: 96, align: 32, flags: DIFlagPublic, elements: !2061)
!2061 = !{!2062, !2063}
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "handle", scope: !978, file: !978, line: 297, baseType: !147, size: 64, flags: DIFlagPublic)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "is_graph", scope: !978, file: !978, line: 297, baseType: !266, size: 8, offset: 64, flags: DIFlagPublic)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "timeline_count", scope: !978, file: !978, line: 303, baseType: !147, size: 64, offset: 512, flags: DIFlagPublic)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "timeline_cap", scope: !978, file: !978, line: 303, baseType: !147, size: 64, offset: 576, flags: DIFlagPublic)
!2066 = !DILocation(line: 1331, scope: !2048)
!2067 = !DILocation(line: 1332, column: 2, scope: !2048)
!2068 = !DILocalVariable(name: "count", scope: !2048, file: !978, line: 1332, type: !147)
!2069 = !DILocation(line: 1332, scope: !2048)
!2070 = !DILocation(line: 1334, column: 2, scope: !2048)
!2071 = !DILocalVariable(name: "counter", scope: !2048, file: !978, line: 1334, type: !147)
!2072 = !DILocation(line: 1334, scope: !2048)
!2073 = !DILocation(line: 1335, column: 2, scope: !2048)
!2074 = !DILocalVariable(name: "cur_entry", scope: !2048, file: !978, line: 1335, type: !2060)
!2075 = !DILocation(line: 1335, scope: !2048)
!2076 = !DILocation(line: 1336, column: 2, scope: !2048)
!2077 = !DILocation(line: 1338, column: 3, scope: !2048)
!2078 = !DILocation(line: 1339, column: 3, scope: !2048)
!2079 = !DILocation(line: 1344, column: 2, scope: !2048)
!2080 = !DILocation(line: 1341, column: 4, scope: !2048)
!2081 = distinct !DISubprogram(scope: !978, file: !978, line: 1348, type: !762, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2082 = !DILocalVariable(name: "pass", arg: 1, scope: !2081, file: !978, line: 1348, type: !166)
!2083 = !DILocation(line: 1348, scope: !2081)
!2084 = !DILocation(line: 1350, column: 2, scope: !2081)
!2085 = !DILocation(line: 1352, column: 3, scope: !2081)
!2086 = !DILocation(line: 1354, column: 2, scope: !2081)
!2087 = !DILocalVariable(name: "passptr", scope: !2081, file: !978, line: 1354, type: !1083)
!2088 = !DILocation(line: 1354, scope: !2081)
!2089 = !DILocation(line: 1355, column: 2, scope: !2081)
!2090 = !DILocalVariable(name: "passinfo", scope: !2081, file: !978, line: 1355, type: !1087)
!2091 = !DILocation(line: 1355, scope: !2081)
!2092 = !DILocation(line: 1356, column: 2, scope: !2081)
!2093 = !DILocalVariable(name: "ginfo", scope: !2081, file: !978, line: 1356, type: !1090)
!2094 = !DILocation(line: 1356, scope: !2081)
!2095 = !DILocation(line: 1357, column: 2, scope: !2081)
!2096 = !DILocalVariable(name: "counter", scope: !2081, file: !978, line: 1357, type: !147)
!2097 = !DILocation(line: 1357, scope: !2081)
!2098 = !DILocation(line: 1358, column: 2, scope: !2081)
!2099 = !DILocalVariable(name: "cur_colour_target", scope: !2081, file: !978, line: 1358, type: !166)
!2100 = !DILocation(line: 1358, scope: !2081)
!2101 = !DILocation(line: 1359, column: 2, scope: !2081)
!2102 = !DILocation(line: 1361, column: 3, scope: !2081)
!2103 = !DILocation(line: 1370, column: 2, scope: !2081)
!2104 = !DILocation(line: 1363, column: 4, scope: !2081)
!2105 = !DILocation(line: 1364, column: 4, scope: !2081)
!2106 = !DILocation(line: 1366, column: 5, scope: !2081)
!2107 = distinct !DISubprogram(scope: !978, file: !978, line: 1374, type: !762, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2108 = !DILocalVariable(name: "graph", arg: 1, scope: !2107, file: !978, line: 1374, type: !166)
!2109 = !DILocation(line: 1374, scope: !2107)
!2110 = !DILocation(line: 1375, column: 1, scope: !2107)
!2111 = !DILocation(line: 1376, column: 2, scope: !2107)
!2112 = !DILocalVariable(name: "graphptr", scope: !2107, file: !978, line: 1376, type: !2054)
!2113 = !DILocation(line: 1376, scope: !2107)
!2114 = !DILocation(line: 1377, column: 2, scope: !2107)
!2115 = !DILocalVariable(name: "count", scope: !2107, file: !978, line: 1377, type: !147)
!2116 = !DILocation(line: 1377, scope: !2107)
!2117 = !DILocation(line: 1379, column: 2, scope: !2107)
!2118 = !DILocalVariable(name: "counter", scope: !2107, file: !978, line: 1379, type: !147)
!2119 = !DILocation(line: 1379, scope: !2107)
!2120 = !DILocation(line: 1380, column: 2, scope: !2107)
!2121 = !DILocalVariable(name: "cur_entry", scope: !2107, file: !978, line: 1380, type: !2060)
!2122 = !DILocation(line: 1380, scope: !2107)
!2123 = !DILocation(line: 1381, column: 2, scope: !2107)
!2124 = !DILocalVariable(name: "cur_pass", scope: !2107, file: !978, line: 1381, type: !166)
!2125 = !DILocation(line: 1381, scope: !2107)
!2126 = !DILocation(line: 1382, column: 2, scope: !2107)
!2127 = !DILocation(line: 1384, column: 3, scope: !2107)
!2128 = !DILocation(line: 1385, column: 3, scope: !2107)
!2129 = !DILocation(line: 1394, column: 2, scope: !2107)
!2130 = !DILocation(line: 1387, column: 4, scope: !2107)
!2131 = !DILocation(line: 1388, column: 4, scope: !2107)
!2132 = !DILocation(line: 1390, column: 5, scope: !2107)
!2133 = distinct !DISubprogram(scope: !978, file: !978, line: 1398, type: !2134, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2134 = !DISubroutineType(types: !2135)
!2135 = !{!1083, !227}
!2136 = !DILocalVariable(name: "a", arg: 1, scope: !2133, file: !978, line: 1398, type: !227)
!2137 = !DILocation(line: 1398, scope: !2133)
!2138 = !DILocation(line: 1400, column: 2, scope: !2133)
!2139 = !DILocation(line: 1402, column: 3, scope: !2133)
!2140 = !DILocation(line: 1403, column: 3, scope: !2133)
!2141 = !DILocation(line: 1405, column: 2, scope: !2133)
!2142 = !DILocation(line: 1407, column: 3, scope: !2133)
!2143 = !DILocation(line: 1408, column: 3, scope: !2133)
!2144 = !DILocation(line: 1410, column: 2, scope: !2133)
!2145 = !DILocalVariable(name: "id", scope: !2133, file: !978, line: 1410, type: !147)
!2146 = !DILocation(line: 1410, scope: !2133)
!2147 = !DILocation(line: 1411, column: 2, scope: !2133)
!2148 = !DILocation(line: 1412, column: 2, scope: !2133)
!2149 = distinct !DISubprogram(scope: !978, file: !978, line: 1416, type: !2150, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2150 = !DISubroutineType(types: !2151)
!2151 = !{!1230, !227}
!2152 = !DILocalVariable(name: "a", arg: 1, scope: !2149, file: !978, line: 1416, type: !227)
!2153 = !DILocation(line: 1416, scope: !2149)
!2154 = !DILocation(line: 1418, column: 2, scope: !2149)
!2155 = !DILocation(line: 1420, column: 3, scope: !2149)
!2156 = !DILocation(line: 1421, column: 3, scope: !2149)
!2157 = !DILocation(line: 1423, column: 2, scope: !2149)
!2158 = !DILocation(line: 1425, column: 3, scope: !2149)
!2159 = !DILocation(line: 1426, column: 3, scope: !2149)
!2160 = !DILocation(line: 1428, column: 2, scope: !2149)
!2161 = !DILocalVariable(name: "id", scope: !2149, file: !978, line: 1428, type: !147)
!2162 = !DILocation(line: 1428, scope: !2149)
!2163 = !DILocation(line: 1429, column: 2, scope: !2149)
!2164 = !DILocation(line: 1430, column: 2, scope: !2149)
!2165 = distinct !DISubprogram(scope: !978, file: !978, line: 1434, type: !2166, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2166 = !DISubroutineType(types: !2167)
!2167 = !{!981, !227}
!2168 = !DILocalVariable(name: "a", arg: 1, scope: !2165, file: !978, line: 1434, type: !227)
!2169 = !DILocation(line: 1434, scope: !2165)
!2170 = !DILocation(line: 1436, column: 2, scope: !2165)
!2171 = !DILocation(line: 1438, column: 3, scope: !2165)
!2172 = !DILocation(line: 1439, column: 3, scope: !2165)
!2173 = !DILocation(line: 1441, column: 2, scope: !2165)
!2174 = !DILocation(line: 1443, column: 3, scope: !2165)
!2175 = !DILocation(line: 1444, column: 3, scope: !2165)
!2176 = !DILocation(line: 1446, column: 2, scope: !2165)
!2177 = !DILocalVariable(name: "id", scope: !2165, file: !978, line: 1446, type: !147)
!2178 = !DILocation(line: 1446, scope: !2165)
!2179 = !DILocation(line: 1447, column: 2, scope: !2165)
!2180 = !DILocation(line: 1448, column: 2, scope: !2165)
!2181 = distinct !DISubprogram(scope: !978, file: !978, line: 1452, type: !2182, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2182 = !DISubroutineType(types: !2183)
!2183 = !{!2054, !227}
!2184 = !DILocalVariable(name: "a", arg: 1, scope: !2181, file: !978, line: 1452, type: !227)
!2185 = !DILocation(line: 1452, scope: !2181)
!2186 = !DILocation(line: 1454, column: 2, scope: !2181)
!2187 = !DILocation(line: 1456, column: 3, scope: !2181)
!2188 = !DILocation(line: 1457, column: 3, scope: !2181)
!2189 = !DILocation(line: 1459, column: 2, scope: !2181)
!2190 = !DILocation(line: 1461, column: 3, scope: !2181)
!2191 = !DILocation(line: 1462, column: 3, scope: !2181)
!2192 = !DILocation(line: 1464, column: 2, scope: !2181)
!2193 = !DILocalVariable(name: "id", scope: !2181, file: !978, line: 1464, type: !147)
!2194 = !DILocation(line: 1464, scope: !2181)
!2195 = !DILocation(line: 1465, column: 2, scope: !2181)
!2196 = !DILocation(line: 1466, column: 2, scope: !2181)
!2197 = distinct !DISubprogram(scope: !978, file: !978, line: 1470, type: !4, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2198 = !DILocation(line: 1472, column: 2, scope: !2197)
!2199 = !DILocalVariable(name: "bda_flags", scope: !2197, file: !978, line: 1472, type: !2200)
!2200 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkMemoryAllocateFlagsInfo", scope: !491, file: !491, line: 54, size: 192, align: 64, flags: DIFlagPublic, elements: !2201)
!2201 = !{!2202, !2203, !2204, !2205}
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 54, baseType: !631, size: 32, flags: DIFlagPublic)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 54, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 54, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "deviceMask", scope: !491, file: !491, line: 54, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!2206 = !DILocation(line: 1472, scope: !2197)
!2207 = !DILocation(line: 1479, column: 2, scope: !2197)
!2208 = !DILocalVariable(name: "gpucreate", scope: !2197, file: !978, line: 1479, type: !2209)
!2209 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkMemoryAllocateInfo", scope: !491, file: !491, line: 62, size: 256, align: 64, flags: DIFlagPublic, elements: !2210)
!2210 = !{!2211, !2212, !2213, !2214}
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 62, baseType: !631, size: 32, flags: DIFlagPublic)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 62, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "allocationSize", scope: !491, file: !491, line: 62, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "memoryTypeIndex", scope: !491, file: !491, line: 62, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!2215 = !DILocation(line: 1479, scope: !2197)
!2216 = !DILocation(line: 1486, column: 2, scope: !2197)
!2217 = !DILocalVariable(name: "cpucreate", scope: !2197, file: !978, line: 1486, type: !2209)
!2218 = !DILocation(line: 1486, scope: !2197)
!2219 = !DILocation(line: 1495, column: 2, scope: !2197)
!2220 = !DILocalVariable(name: "bgpu", scope: !2197, file: !978, line: 1495, type: !1579)
!2221 = !DILocation(line: 1495, scope: !2197)
!2222 = !DILocation(line: 1496, column: 2, scope: !2197)
!2223 = !DILocation(line: 1497, column: 2, scope: !2197)
!2224 = !DILocation(line: 1498, column: 2, scope: !2197)
!2225 = !DILocation(line: 1499, column: 2, scope: !2197)
!2226 = !DILocalVariable(name: "igpu", scope: !2197, file: !978, line: 1499, type: !1579)
!2227 = !DILocation(line: 1499, scope: !2197)
!2228 = !DILocation(line: 1500, column: 2, scope: !2197)
!2229 = !DILocation(line: 1501, column: 2, scope: !2197)
!2230 = !DILocation(line: 1502, column: 2, scope: !2197)
!2231 = !DILocation(line: 1504, column: 2, scope: !2197)
!2232 = !DILocalVariable(name: "bcpu", scope: !2197, file: !978, line: 1504, type: !1579)
!2233 = !DILocation(line: 1504, scope: !2197)
!2234 = !DILocation(line: 1505, column: 2, scope: !2197)
!2235 = !DILocation(line: 1506, column: 2, scope: !2197)
!2236 = !DILocation(line: 1508, column: 2, scope: !2197)
!2237 = !DILocation(line: 1509, column: 2, scope: !2197)
!2238 = !DILocation(line: 1471, column: 1, scope: !2197)
!2239 = distinct !DISubprogram(scope: !978, file: !978, line: 1513, type: !4, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2240 = !DILocation(line: 1515, column: 2, scope: !2239)
!2241 = !DILocalVariable(name: "bgpu", scope: !2239, file: !978, line: 1515, type: !1580)
!2242 = !DILocation(line: 1515, scope: !2239)
!2243 = !DILocation(line: 1516, column: 2, scope: !2239)
!2244 = !DILocation(line: 1517, column: 2, scope: !2239)
!2245 = !DILocalVariable(name: "igpu", scope: !2239, file: !978, line: 1517, type: !1580)
!2246 = !DILocation(line: 1517, scope: !2239)
!2247 = !DILocation(line: 1518, column: 2, scope: !2239)
!2248 = !DILocation(line: 1520, column: 2, scope: !2239)
!2249 = !DILocalVariable(name: "bcpu", scope: !2239, file: !978, line: 1520, type: !1580)
!2250 = !DILocation(line: 1520, scope: !2239)
!2251 = !DILocation(line: 1521, column: 2, scope: !2239)
!2252 = !DILocation(line: 1514, column: 1, scope: !2239)
!2253 = distinct !DISubprogram(scope: !978, file: !978, line: 1525, type: !2254, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2254 = !DISubroutineType(types: !2255)
!2255 = !{!147, !147, !147, !266}
!2256 = !DILocalVariable(name: "buffer", arg: 1, scope: !2253, file: !978, line: 1525, type: !147)
!2257 = !DILocation(line: 1525, scope: !2253)
!2258 = !DILocalVariable(name: "bufsize", arg: 2, scope: !2253, file: !978, line: 1525, type: !147)
!2259 = !DILocalVariable(name: "gpu_memory", arg: 3, scope: !2253, file: !978, line: 1525, type: !266)
!2260 = !DILocation(line: 1527, column: 2, scope: !2253)
!2261 = !DILocalVariable(name: "valloc", scope: !2253, file: !978, line: 1527, type: !1579)
!2262 = !DILocation(line: 1527, scope: !2253)
!2263 = !DILocation(line: 1528, column: 2, scope: !2253)
!2264 = !DILocation(line: 1530, column: 3, scope: !2253)
!2265 = !DILocation(line: 1532, column: 2, scope: !2253)
!2266 = !DILocation(line: 1534, column: 3, scope: !2253)
!2267 = !DILocation(line: 1535, column: 3, scope: !2253)
!2268 = !DILocation(line: 1536, column: 3, scope: !2253)
!2269 = !DILocation(line: 1537, column: 3, scope: !2253)
!2270 = !DILocation(line: 1538, column: 3, scope: !2253)
!2271 = !DILocation(line: 1539, column: 3, scope: !2253)
!2272 = !DILocation(line: 1542, column: 2, scope: !2253)
!2273 = !DILocalVariable(name: "memreqs", scope: !2253, file: !978, line: 1542, type: !1596)
!2274 = !DILocation(line: 1542, scope: !2253)
!2275 = !DILocation(line: 1543, column: 2, scope: !2253)
!2276 = !DILocation(line: 1544, column: 2, scope: !2253)
!2277 = !DILocalVariable(name: "padding", scope: !2253, file: !978, line: 1544, type: !147)
!2278 = !DILocation(line: 1544, scope: !2253)
!2279 = !DILocation(line: 1545, column: 2, scope: !2253)
!2280 = !DILocation(line: 1546, column: 2, scope: !2253)
!2281 = !DILocalVariable(name: "offset_from_zero", scope: !2253, file: !978, line: 1546, type: !147)
!2282 = !DILocation(line: 1546, scope: !2253)
!2283 = !DILocation(line: 1548, column: 2, scope: !2253)
!2284 = !DILocalVariable(name: "ret", scope: !2253, file: !978, line: 1548, type: !631)
!2285 = !DILocation(line: 1548, scope: !2253)
!2286 = !DILocation(line: 1549, column: 2, scope: !2253)
!2287 = !DILocation(line: 1551, column: 3, scope: !2253)
!2288 = !DILocation(line: 1552, column: 3, scope: !2253)
!2289 = !DILocation(line: 1554, column: 2, scope: !2253)
!2290 = !DILocation(line: 1556, column: 3, scope: !2253)
!2291 = !DILocation(line: 1557, column: 3, scope: !2253)
!2292 = !DILocation(line: 1559, column: 2, scope: !2253)
!2293 = !DILocation(line: 1560, column: 2, scope: !2253)
!2294 = distinct !DISubprogram(scope: !978, file: !978, line: 1564, type: !2295, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2295 = !DISubroutineType(types: !2296)
!2296 = !{!6, !147, !266, !177, !147, !40}
!2297 = !DILocalVariable(name: "dst_gpu_res", arg: 1, scope: !2294, file: !978, line: 1564, type: !147)
!2298 = !DILocation(line: 1564, scope: !2294)
!2299 = !DILocalVariable(name: "dst_gpu_is_buffer", arg: 2, scope: !2294, file: !978, line: 1564, type: !266)
!2300 = !DILocalVariable(name: "src_data", arg: 3, scope: !2294, file: !978, line: 1564, type: !177)
!2301 = !DILocalVariable(name: "src_data_size", arg: 4, scope: !2294, file: !978, line: 1564, type: !147)
!2302 = !DILocalVariable(name: "image_dimensions", arg: 5, scope: !2294, file: !978, line: 1564, type: !40)
!2303 = !DILocation(line: 1566, column: 2, scope: !2294)
!2304 = !DILocation(line: 1567, column: 2, scope: !2294)
!2305 = !DILocalVariable(name: "staging_create", scope: !2294, file: !978, line: 1567, type: !2306)
!2306 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkBufferCreateInfo", scope: !491, file: !491, line: 549, size: 384, align: 64, flags: DIFlagPublic, elements: !2307)
!2307 = !{!2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315}
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 549, baseType: !631, size: 32, flags: DIFlagPublic)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 549, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 549, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !491, file: !491, line: 549, baseType: !147, size: 64, offset: 160, flags: DIFlagPublic)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !491, file: !491, line: 549, baseType: !631, size: 32, offset: 224, flags: DIFlagPublic)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "sharingMode", scope: !491, file: !491, line: 549, baseType: !631, size: 32, offset: 256, flags: DIFlagPublic)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "queueFamilyIndexCount", scope: !491, file: !491, line: 549, baseType: !43, size: 32, offset: 288, flags: DIFlagPublic)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "pQueueFamilyIndices", scope: !491, file: !491, line: 549, baseType: !1056, size: 64, offset: 320, flags: DIFlagPublic)
!2316 = !DILocation(line: 1567, scope: !2294)
!2317 = !DILocation(line: 1578, column: 2, scope: !2294)
!2318 = !DILocalVariable(name: "staging", scope: !2294, file: !978, line: 1578, type: !147)
!2319 = !DILocation(line: 1578, scope: !2294)
!2320 = !DILocation(line: 1579, column: 2, scope: !2294)
!2321 = !DILocation(line: 1581, column: 2, scope: !2294)
!2322 = !DILocalVariable(name: "old_cpumem", scope: !2294, file: !978, line: 1581, type: !1580)
!2323 = !DILocation(line: 1581, scope: !2294)
!2324 = !DILocation(line: 1582, column: 2, scope: !2294)
!2325 = !DILocalVariable(name: "cursor", scope: !2294, file: !978, line: 1582, type: !147)
!2326 = !DILocation(line: 1582, scope: !2294)
!2327 = !DILocation(line: 1583, column: 2, scope: !2294)
!2328 = !DILocalVariable(name: "cpumem", scope: !2294, file: !978, line: 1583, type: !1580)
!2329 = !DILocation(line: 1583, scope: !2294)
!2330 = !DILocation(line: 1584, column: 2, scope: !2294)
!2331 = !DILocalVariable(name: "mapped_ptr", scope: !2294, file: !978, line: 1584, type: !177)
!2332 = !DILocation(line: 1584, scope: !2294)
!2333 = !DILocation(line: 1585, column: 2, scope: !2294)
!2334 = !DILocation(line: 1587, column: 2, scope: !2294)
!2335 = !DILocalVariable(name: "aspect_mask", scope: !2294, file: !978, line: 1587, type: !631)
!2336 = !DILocation(line: 1587, scope: !2294)
!2337 = !DILocation(line: 1589, column: 2, scope: !2294)
!2338 = !DILocation(line: 1591, column: 3, scope: !2294)
!2339 = !DILocalVariable(name: "cpy", scope: !2294, file: !978, line: 1591, type: !2340)
!2340 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkBufferCopy", scope: !491, file: !491, line: 1025, size: 192, align: 32, flags: DIFlagPublic, elements: !2341)
!2341 = !{!2342, !2343, !2344}
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "srcOffset", scope: !491, file: !491, line: 1025, baseType: !147, size: 64, flags: DIFlagPublic)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "dstOffset", scope: !491, file: !491, line: 1025, baseType: !147, size: 64, offset: 64, flags: DIFlagPublic)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !491, file: !491, line: 1025, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!2345 = !DILocation(line: 1591, scope: !2294)
!2346 = !DILocation(line: 1597, column: 3, scope: !2294)
!2347 = !DILocation(line: 1599, column: 2, scope: !2294)
!2348 = !DILocation(line: 1601, column: 3, scope: !2294)
!2349 = !DILocalVariable(name: "cpy", scope: !2294, file: !978, line: 1601, type: !2350)
!2350 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkBufferImageCopy", scope: !491, file: !491, line: 1032, size: 448, align: 32, flags: DIFlagPublic, elements: !2351)
!2351 = !{!2352, !2353, !2354, !2355, !2362, !2368}
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "bufferOffset", scope: !491, file: !491, line: 1032, baseType: !147, size: 64, flags: DIFlagPublic)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "bufferRowLength", scope: !491, file: !491, line: 1032, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "bufferImageHeight", scope: !491, file: !491, line: 1032, baseType: !43, size: 32, offset: 96, flags: DIFlagPublic)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "imageSubresource", scope: !491, file: !491, line: 1032, baseType: !2356, size: 128, offset: 128, flags: DIFlagPublic)
!2356 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkImageSubresourceLayers", scope: !491, file: !491, line: 916, size: 128, align: 32, flags: DIFlagPublic, elements: !2357)
!2357 = !{!2358, !2359, !2360, !2361}
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "aspectMask", scope: !491, file: !491, line: 916, baseType: !631, size: 32, flags: DIFlagPublic)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "mipLevel", scope: !491, file: !491, line: 916, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "baseArrayLayer", scope: !491, file: !491, line: 916, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "layerCount", scope: !491, file: !491, line: 916, baseType: !43, size: 32, offset: 96, flags: DIFlagPublic)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "imageOffset", scope: !491, file: !491, line: 1032, baseType: !2363, size: 96, offset: 256, flags: DIFlagPublic)
!2363 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkOffset3D", scope: !491, file: !491, line: 924, size: 96, align: 32, flags: DIFlagPublic, elements: !2364)
!2364 = !{!2365, !2366, !2367}
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !491, file: !491, line: 924, baseType: !631, size: 32, flags: DIFlagPublic)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !491, file: !491, line: 924, baseType: !631, size: 32, offset: 32, flags: DIFlagPublic)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "z", scope: !491, file: !491, line: 924, baseType: !631, size: 32, offset: 64, flags: DIFlagPublic)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "imageExtent", scope: !491, file: !491, line: 1032, baseType: !1748, size: 96, offset: 352, flags: DIFlagPublic)
!2369 = !DILocation(line: 1601, scope: !2294)
!2370 = !DILocation(line: 1616, column: 3, scope: !2294)
!2371 = !DILocalVariable(name: "barrier", scope: !2294, file: !978, line: 1616, type: !1881)
!2372 = !DILocation(line: 1616, scope: !2294)
!2373 = !DILocation(line: 1636, column: 3, scope: !2294)
!2374 = !DILocation(line: 1637, column: 3, scope: !2294)
!2375 = !DILocation(line: 1640, column: 2, scope: !2294)
!2376 = !DILocation(line: 1641, column: 2, scope: !2294)
!2377 = !DILocation(line: 1565, column: 1, scope: !2294)
!2378 = distinct !DISubprogram(scope: !978, file: !978, line: 1645, type: !2379, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2379 = !DISubroutineType(types: !2380)
!2380 = !{!6, !981}
!2381 = !DILocalVariable(name: "resptr", arg: 1, scope: !2378, file: !978, line: 1645, type: !981)
!2382 = !DILocation(line: 1645, scope: !2378)
!2383 = !DILocation(line: 1646, column: 1, scope: !2378)
!2384 = !DILocation(line: 1647, column: 2, scope: !2378)
!2385 = !DILocalVariable(name: "rinfo", scope: !2378, file: !978, line: 1647, type: !985)
!2386 = !DILocation(line: 1647, scope: !2378)
!2387 = !DILocation(line: 1648, column: 2, scope: !2378)
!2388 = !DILocalVariable(name: "is_dynamic_buffer", scope: !2378, file: !978, line: 1648, type: !266)
!2389 = !DILocation(line: 1648, scope: !2378)
!2390 = !DILocation(line: 1649, column: 2, scope: !2378)
!2391 = !DILocation(line: 1651, column: 3, scope: !2378)
!2392 = !DILocation(line: 1653, column: 2, scope: !2378)
!2393 = !DILocation(line: 1655, column: 3, scope: !2378)
!2394 = !DILocation(line: 1657, column: 2, scope: !2378)
!2395 = !DILocation(line: 1659, column: 3, scope: !2378)
!2396 = distinct !DISubprogram(scope: !978, file: !978, line: 1664, type: !1081, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2397 = !DILocalVariable(name: "passptr", arg: 1, scope: !2396, file: !978, line: 1664, type: !1083)
!2398 = !DILocation(line: 1664, scope: !2396)
!2399 = !DILocalVariable(name: "long", arg: 2, scope: !2396, file: !978, line: 1664, type: !227)
!2400 = !DILocalVariable(name: "short", arg: 3, scope: !2396, file: !978, line: 1664, type: !227)
!2401 = !DILocation(line: 1665, column: 1, scope: !2396)
!2402 = !DILocation(line: 1666, column: 2, scope: !2396)
!2403 = !DILocalVariable(name: "pinfo", scope: !2396, file: !978, line: 1666, type: !1087)
!2404 = !DILocation(line: 1666, scope: !2396)
!2405 = !DILocation(line: 1667, column: 2, scope: !2396)
!2406 = !DILocation(line: 1669, column: 3, scope: !2396)
!2407 = !DILocation(line: 1672, column: 2, scope: !2396)
!2408 = !DILocalVariable(name: "buffer_addresses", scope: !2396, file: !978, line: 1672, type: !698)
!2409 = !DILocation(line: 1672, scope: !2396)
!2410 = !DILocation(line: 1673, column: 2, scope: !2396)
!2411 = !DILocalVariable(name: "bufcount", scope: !2396, file: !978, line: 1673, type: !147)
!2412 = !DILocation(line: 1673, scope: !2396)
!2413 = !DILocation(line: 1675, column: 2, scope: !2396)
!2414 = !DILocalVariable(name: "i", scope: !2396, file: !978, line: 1675, type: !147)
!2415 = !DILocation(line: 1675, scope: !2396)
!2416 = !DILocation(line: 1676, column: 2, scope: !2396)
!2417 = !DILocalVariable(name: "curres", scope: !2396, file: !978, line: 1676, type: !166)
!2418 = !DILocation(line: 1676, scope: !2396)
!2419 = !DILocation(line: 1677, column: 2, scope: !2396)
!2420 = !DILocalVariable(name: "resdata", scope: !2396, file: !978, line: 1677, type: !982)
!2421 = !DILocation(line: 1677, scope: !2396)
!2422 = !DILocation(line: 1678, column: 2, scope: !2396)
!2423 = !DILocation(line: 1680, column: 3, scope: !2396)
!2424 = !DILocation(line: 1681, column: 3, scope: !2396)
!2425 = !DILocation(line: 1700, column: 2, scope: !2396)
!2426 = !DILocation(line: 1683, column: 4, scope: !2396)
!2427 = !DILocation(line: 0, scope: !2396)
!2428 = !DILocation(line: 1685, column: 5, scope: !2396)
!2429 = !DILocation(line: 1686, column: 5, scope: !2396)
!2430 = !DILocation(line: 1689, column: 6, scope: !2396)
!2431 = !DILocation(line: 1688, column: 12, scope: !2396)
!2432 = !DILocation(line: 1692, column: 5, scope: !2396)
!2433 = !DILocation(line: 1702, column: 3, scope: !2396)
!2434 = !DILocation(line: 1703, column: 3, scope: !2396)
!2435 = !DILocation(line: 1707, column: 2, scope: !2396)
!2436 = !DILocation(line: 1709, column: 3, scope: !2396)
!2437 = distinct !DISubprogram(scope: !978, file: !978, line: 1715, type: !2438, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2438 = !DISubroutineType(types: !2439)
!2439 = !{!147}
!2440 = !DILocation(line: 1717, column: 2, scope: !2437)
!2441 = !DILocalVariable(name: "bindings", scope: !2437, file: !978, line: 1717, type: !2442)
!2442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2443, size: 8)
!2443 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkDescriptorSetLayoutBinding", scope: !491, file: !491, line: 486, size: 192, align: 64, flags: DIFlagPublic, elements: !2444)
!2444 = !{!2445, !2446, !2447, !2448, !2449}
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "binding", scope: !491, file: !491, line: 486, baseType: !43, size: 32, flags: DIFlagPublic)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorType", scope: !491, file: !491, line: 486, baseType: !631, size: 32, offset: 32, flags: DIFlagPublic)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorCount", scope: !491, file: !491, line: 486, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "stageFlags", scope: !491, file: !491, line: 486, baseType: !631, size: 32, offset: 96, flags: DIFlagPublic)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "pImmutableSamplers", scope: !491, file: !491, line: 486, baseType: !698, size: 64, offset: 128, flags: DIFlagPublic)
!2450 = !DILocation(line: 1717, scope: !2437)
!2451 = !DILocation(line: 1718, column: 2, scope: !2437)
!2452 = !DILocation(line: 1726, column: 2, scope: !2437)
!2453 = !DILocation(line: 1734, column: 2, scope: !2437)
!2454 = !DILocalVariable(name: "bindings_size", scope: !2437, file: !978, line: 1734, type: !43)
!2455 = !DILocation(line: 1734, scope: !2437)
!2456 = !DILocation(line: 1736, column: 2, scope: !2437)
!2457 = !DILocalVariable(name: "flags", scope: !2437, file: !978, line: 1736, type: !1195)
!2458 = !DILocation(line: 1736, scope: !2437)
!2459 = !DILocation(line: 1737, column: 2, scope: !2437)
!2460 = !DILocation(line: 1738, column: 2, scope: !2437)
!2461 = !DILocation(line: 1743, column: 2, scope: !2437)
!2462 = !DILocalVariable(name: "flags_size", scope: !2437, file: !978, line: 1743, type: !43)
!2463 = !DILocation(line: 1743, scope: !2437)
!2464 = !DILocation(line: 1745, column: 2, scope: !2437)
!2465 = !DILocalVariable(name: "flags_create", scope: !2437, file: !978, line: 1745, type: !2466)
!2466 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkDescriptorSetLayoutBindingFlagsCreateInfo", scope: !491, file: !491, line: 495, size: 256, align: 64, flags: DIFlagPublic, elements: !2467)
!2467 = !{!2468, !2469, !2470, !2471}
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 495, baseType: !631, size: 32, flags: DIFlagPublic)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 495, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "bindingCount", scope: !491, file: !491, line: 495, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "pBindingFlags", scope: !491, file: !491, line: 495, baseType: !1195, size: 64, offset: 192, flags: DIFlagPublic)
!2472 = !DILocation(line: 1745, scope: !2437)
!2473 = !DILocation(line: 1753, column: 2, scope: !2437)
!2474 = !DILocalVariable(name: "layout_create", scope: !2437, file: !978, line: 1753, type: !2475)
!2475 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkDescriptorSetLayoutCreateInfo", scope: !491, file: !491, line: 503, size: 256, align: 64, flags: DIFlagPublic, elements: !2476)
!2476 = !{!2477, !2478, !2479, !2480, !2481}
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 503, baseType: !631, size: 32, flags: DIFlagPublic)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 503, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 503, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "bindingCount", scope: !491, file: !491, line: 503, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "pBindings", scope: !491, file: !491, line: 503, baseType: !2442, size: 64, offset: 192, flags: DIFlagPublic)
!2482 = !DILocation(line: 1753, scope: !2437)
!2483 = !DILocation(line: 1762, column: 2, scope: !2437)
!2484 = !DILocalVariable(name: "counter", scope: !2437, file: !978, line: 1762, type: !147)
!2485 = !DILocation(line: 1762, scope: !2437)
!2486 = !DILocation(line: 1763, column: 2, scope: !2437)
!2487 = !DILocation(line: 1765, column: 3, scope: !2437)
!2488 = !DILocation(line: 1768, column: 2, scope: !2437)
!2489 = !DILocalVariable(name: "create", scope: !2437, file: !978, line: 1768, type: !2490)
!2490 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPipelineLayoutCreateInfo", scope: !491, file: !491, line: 519, size: 384, align: 64, flags: DIFlagPublic, elements: !2491)
!2491 = !{!2492, !2493, !2494, !2495, !2496, !2497, !2498}
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 519, baseType: !631, size: 32, flags: DIFlagPublic)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 519, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 519, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "setLayoutCount", scope: !491, file: !491, line: 519, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "pSetLayouts", scope: !491, file: !491, line: 519, baseType: !698, size: 64, offset: 192, flags: DIFlagPublic)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "pushConstantRangeCount", scope: !491, file: !491, line: 519, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "pPushConstantRanges", scope: !491, file: !491, line: 519, baseType: !2499, size: 64, offset: 320, flags: DIFlagPublic)
!2499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2500, size: 8)
!2500 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPushConstantRange", scope: !491, file: !491, line: 512, size: 96, align: 32, flags: DIFlagPublic, elements: !2501)
!2501 = !{!2502, !2503, !2504}
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "stageFlags", scope: !491, file: !491, line: 512, baseType: !631, size: 32, flags: DIFlagPublic)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !491, file: !491, line: 512, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !491, file: !491, line: 512, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!2505 = !DILocation(line: 1768, scope: !2437)
!2506 = !DILocation(line: 1779, column: 2, scope: !2437)
!2507 = !DILocalVariable(name: "ret", scope: !2437, file: !978, line: 1779, type: !147)
!2508 = !DILocation(line: 1779, scope: !2437)
!2509 = !DILocation(line: 1780, column: 2, scope: !2437)
!2510 = !DILocation(line: 1782, column: 2, scope: !2437)
!2511 = distinct !DISubprogram(scope: !978, file: !978, line: 1786, type: !2512, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2512 = !DISubroutineType(types: !2513)
!2513 = !{!6, !2514, !147, !227}
!2514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2515, size: 8)
!2515 = !DICompositeType(tag: DW_TAG_structure_type, name: "tz_gpu_hardware", scope: !978, file: !978, line: 31, size: 896, align: 64, flags: DIFlagPublic, elements: !2516)
!2516 = !{!2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524}
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !978, file: !978, line: 31, baseType: !324, size: 448, flags: DIFlagPublic)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "target_heap_gpu", scope: !978, file: !978, line: 31, baseType: !147, size: 64, offset: 448, flags: DIFlagPublic)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "target_heap_cpu", scope: !978, file: !978, line: 31, baseType: !147, size: 64, offset: 512, flags: DIFlagPublic)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "vram_size_mib", scope: !978, file: !978, line: 31, baseType: !147, size: 64, offset: 576, flags: DIFlagPublic)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !978, file: !978, line: 31, baseType: !166, size: 64, offset: 640, flags: DIFlagPublic)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "caps", scope: !978, file: !978, line: 31, baseType: !166, size: 64, offset: 704, flags: DIFlagPublic)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !978, file: !978, line: 31, baseType: !43, size: 32, offset: 768, flags: DIFlagPublic)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "native_handle", scope: !978, file: !978, line: 31, baseType: !147, size: 64, offset: 800, flags: DIFlagPublic)
!2525 = !DILocalVariable(name: "hw", arg: 1, scope: !2511, file: !978, line: 1786, type: !2514)
!2526 = !DILocation(line: 1786, scope: !2511)
!2527 = !DILocalVariable(name: "pdev", arg: 2, scope: !2511, file: !978, line: 1786, type: !147)
!2528 = !DILocalVariable(name: "a", arg: 3, scope: !2511, file: !978, line: 1786, type: !227)
!2529 = !DILocation(line: 1788, column: 2, scope: !2511)
!2530 = !DILocalVariable(name: "props", scope: !2511, file: !978, line: 1788, type: !2531)
!2531 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPhysicalDeviceProperties", scope: !491, file: !491, line: 201, size: 6432, align: 32, flags: DIFlagPublic, elements: !2532)
!2532 = !{!2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2649}
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "apiVersion", scope: !491, file: !491, line: 201, baseType: !43, size: 32, flags: DIFlagPublic)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "driverVersion", scope: !491, file: !491, line: 201, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "vendorID", scope: !491, file: !491, line: 201, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "deviceID", scope: !491, file: !491, line: 201, baseType: !43, size: 32, offset: 96, flags: DIFlagPublic)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "deviceType", scope: !491, file: !491, line: 201, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "deviceName", scope: !491, file: !491, line: 201, baseType: !177, size: 2048, offset: 160, flags: DIFlagPublic)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "pipelineCacheUUID", scope: !491, file: !491, line: 201, baseType: !177, size: 128, offset: 2208, flags: DIFlagPublic)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "limits", scope: !491, file: !491, line: 201, baseType: !2541, size: 3936, offset: 2336, flags: DIFlagPublic)
!2541 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPhysicalDeviceLimits", scope: !491, file: !491, line: 82, size: 3936, align: 32, flags: DIFlagPublic, elements: !2542)
!2542 = !{!2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648}
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "maxImageDimension1D", scope: !491, file: !491, line: 82, baseType: !43, size: 32, flags: DIFlagPublic)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "maxImageDimension2D", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "maxImageDimension3D", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "maxImageDimensionCube", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 96, flags: DIFlagPublic)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "maxImageArrayLayers", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "maxTexelBufferElements", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "maxUniformBufferRange", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "maxStorageBufferRange", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 224, flags: DIFlagPublic)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "maxPushConstantSize", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "maxMemoryAllocationCount", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 288, flags: DIFlagPublic)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "maxSamplerAllocationCount", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 320, flags: DIFlagPublic)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "bufferImageGranularity", scope: !491, file: !491, line: 82, baseType: !147, size: 64, offset: 352, flags: DIFlagPublic)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "sparseAddressSpaceSize", scope: !491, file: !491, line: 82, baseType: !147, size: 64, offset: 416, flags: DIFlagPublic)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "maxBoundDescriptorSets", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 480, flags: DIFlagPublic)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "maxPerStageDescriptorSamplers", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 512, flags: DIFlagPublic)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "maxPerStageDescriptorUniformSamplers", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 544, flags: DIFlagPublic)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "maxPerStageDescriptorStorageSamplers", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 576, flags: DIFlagPublic)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "maxPerStageDescriptorSampledImages", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 608, flags: DIFlagPublic)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "maxPerStageDescriptorStorageImages", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 640, flags: DIFlagPublic)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "maxPerStageDescriptorInputAttachments", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 672, flags: DIFlagPublic)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "maxPerStageResources", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 704, flags: DIFlagPublic)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "maxDescriptorSetSamplers", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 736, flags: DIFlagPublic)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "maxDescriptorSetUniformBuffers", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 768, flags: DIFlagPublic)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "maxDescriptorSetUniformBuffersDynamic", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 800, flags: DIFlagPublic)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "maxDescriptorSetStorageBuffers", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 832, flags: DIFlagPublic)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "maxDescriptorSetStorageBuffersDynamic", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 864, flags: DIFlagPublic)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "maxDescriptorSetSampledImages", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 896, flags: DIFlagPublic)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "maxDescriptorSetStorageImages", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 928, flags: DIFlagPublic)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "maxDescriptorSetInputAttachments", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 960, flags: DIFlagPublic)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "maxVertexInputAttributes", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 992, flags: DIFlagPublic)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "maxVertexInputBindings", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1024, flags: DIFlagPublic)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "maxVertexInputAttributeOffset", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1056, flags: DIFlagPublic)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "maxVertexInputBindingStride", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1088, flags: DIFlagPublic)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "maxVertexOutputComponents", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1120, flags: DIFlagPublic)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "maxTessellationGenerationLevel", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1152, flags: DIFlagPublic)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "maxTessellationPatchSize", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1184, flags: DIFlagPublic)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "maxTessellationControlPerVertexInputComponents", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1216, flags: DIFlagPublic)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "maxTessellationControlPerVertexOutputComponents", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1248, flags: DIFlagPublic)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "maxTessellationControlPerPatchOutputComponents", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1280, flags: DIFlagPublic)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "maxTessellationControlTotalOutputComponents", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1312, flags: DIFlagPublic)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "maxTessellationEvaluationInputComponents", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1344, flags: DIFlagPublic)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "maxTessellationEvaluationOutputComponents", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1376, flags: DIFlagPublic)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "maxGeometryShaderInvocations", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1408, flags: DIFlagPublic)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "maxGeometryInputComponents", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1440, flags: DIFlagPublic)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "maxGeometryOutputComponents", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1472, flags: DIFlagPublic)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "maxGeometryOutputVertices", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1504, flags: DIFlagPublic)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "maxGeometryTotalOutputComponents", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1536, flags: DIFlagPublic)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "maxFragmentInputComponents", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1568, flags: DIFlagPublic)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "maxFragmentOutputAttachments", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1600, flags: DIFlagPublic)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "maxFragmentDualSrcAttachments", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1632, flags: DIFlagPublic)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "maxFragmentCombinedOutputResources", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1664, flags: DIFlagPublic)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "maxComputeSharedMemorySize", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1696, flags: DIFlagPublic)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "maxComputeWorkGroupCount", scope: !491, file: !491, line: 82, baseType: !1056, size: 96, offset: 1728, flags: DIFlagPublic)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "maxComputeWorkGroupInvocations", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1824, flags: DIFlagPublic)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "maxComputeWorkGroupSize", scope: !491, file: !491, line: 82, baseType: !1056, size: 96, offset: 1856, flags: DIFlagPublic)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "subPixelPrecisionBits", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1952, flags: DIFlagPublic)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "subTexelPrecisionBits", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 1984, flags: DIFlagPublic)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "mipmapPrecisionBits", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2016, flags: DIFlagPublic)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "maxDrawIndexedIndexValue", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2048, flags: DIFlagPublic)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "maxDrawIndirectCount", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2080, flags: DIFlagPublic)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "maxSamplerLodBias", scope: !491, file: !491, line: 82, baseType: !15, size: 32, offset: 2112, flags: DIFlagPublic)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "maxSamplerAnisotropy", scope: !491, file: !491, line: 82, baseType: !15, size: 32, offset: 2144, flags: DIFlagPublic)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "maxViewports", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2176, flags: DIFlagPublic)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "maxViewportDimensions", scope: !491, file: !491, line: 82, baseType: !1056, size: 64, offset: 2208, flags: DIFlagPublic)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "viewportBoundsRange", scope: !491, file: !491, line: 82, baseType: !1461, size: 64, offset: 2272, flags: DIFlagPublic)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "viewportSubPixelBits", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2336, flags: DIFlagPublic)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "minMemoryMapAlignment", scope: !491, file: !491, line: 82, baseType: !147, size: 64, offset: 2368, flags: DIFlagPublic)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "minTexelBufferOffsetAlignment", scope: !491, file: !491, line: 82, baseType: !147, size: 64, offset: 2432, flags: DIFlagPublic)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "minUniformBufferOffsetAlignment", scope: !491, file: !491, line: 82, baseType: !147, size: 64, offset: 2496, flags: DIFlagPublic)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "minStorageBufferOffsetAlignment", scope: !491, file: !491, line: 82, baseType: !147, size: 64, offset: 2560, flags: DIFlagPublic)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "minTexelOffset", scope: !491, file: !491, line: 82, baseType: !631, size: 32, offset: 2624, flags: DIFlagPublic)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "maxTexelOffset", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2656, flags: DIFlagPublic)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "minTexelGatherOffset", scope: !491, file: !491, line: 82, baseType: !631, size: 32, offset: 2688, flags: DIFlagPublic)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "maxTexelGatherOffset", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2720, flags: DIFlagPublic)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "minInterpolationOffset", scope: !491, file: !491, line: 82, baseType: !15, size: 32, offset: 2752, flags: DIFlagPublic)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "maxInterpolationOffset", scope: !491, file: !491, line: 82, baseType: !15, size: 32, offset: 2784, flags: DIFlagPublic)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "subPixelInterpolationOffsetBits", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2816, flags: DIFlagPublic)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "maxFramebufferWidth", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2848, flags: DIFlagPublic)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "maxFramebufferHeight", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2880, flags: DIFlagPublic)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "maxFramebufferLayers", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2912, flags: DIFlagPublic)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "framebufferColorSampleCounts", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2944, flags: DIFlagPublic)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "framebufferDepthSampleCounts", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 2976, flags: DIFlagPublic)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "framebufferStencilSampleCounts", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3008, flags: DIFlagPublic)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "framebufferNoAttachmentsSampleCounts", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3040, flags: DIFlagPublic)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "maxColorAttachments", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3072, flags: DIFlagPublic)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "sampledImageColorSampleCounts", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3104, flags: DIFlagPublic)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "sampledImageIntegerSampleCounts", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3136, flags: DIFlagPublic)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "sampledImageDepthSampleCounts", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3168, flags: DIFlagPublic)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "sampledImageStencilSampleCounts", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3200, flags: DIFlagPublic)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "storageImageSampleCounts", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3232, flags: DIFlagPublic)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "maxSampleMaskWords", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3264, flags: DIFlagPublic)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "timestampComputeAndGraphics", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3296, flags: DIFlagPublic)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "timestampPeriod", scope: !491, file: !491, line: 82, baseType: !15, size: 32, offset: 3328, flags: DIFlagPublic)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "maxClipDistances", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3360, flags: DIFlagPublic)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "maxCullDistances", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3392, flags: DIFlagPublic)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "maxCombinedClipAndCullDistances", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3424, flags: DIFlagPublic)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "discreteQueuePriorities", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3456, flags: DIFlagPublic)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "pointSizeRange", scope: !491, file: !491, line: 82, baseType: !1461, size: 64, offset: 3488, flags: DIFlagPublic)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "lineWidthRange", scope: !491, file: !491, line: 82, baseType: !1461, size: 64, offset: 3552, flags: DIFlagPublic)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "pointSizeGranularity", scope: !491, file: !491, line: 82, baseType: !15, size: 32, offset: 3616, flags: DIFlagPublic)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "lineWidthGranularity", scope: !491, file: !491, line: 82, baseType: !15, size: 32, offset: 3648, flags: DIFlagPublic)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "strictLines", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3680, flags: DIFlagPublic)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "standardSampleLocations", scope: !491, file: !491, line: 82, baseType: !43, size: 32, offset: 3712, flags: DIFlagPublic)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "optimalBufferCopyOffsetAlignment", scope: !491, file: !491, line: 82, baseType: !147, size: 64, offset: 3744, flags: DIFlagPublic)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "optimalBufferCopyRowPitchAlignment", scope: !491, file: !491, line: 82, baseType: !147, size: 64, offset: 3808, flags: DIFlagPublic)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "nonCoherentAtomSize", scope: !491, file: !491, line: 82, baseType: !147, size: 64, offset: 3872, flags: DIFlagPublic)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "sparseProperties", scope: !491, file: !491, line: 201, baseType: !2650, size: 160, offset: 6272, flags: DIFlagPublic)
!2650 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPhysicalDeviceSparseProperties", scope: !491, file: !491, line: 192, size: 160, align: 32, flags: DIFlagPublic, elements: !2651)
!2651 = !{!2652, !2653, !2654, !2655, !2656}
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "residencyStandard2DBlockShape", scope: !491, file: !491, line: 192, baseType: !43, size: 32, flags: DIFlagPublic)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "residencyStandard2DMultisampleBlockShape", scope: !491, file: !491, line: 192, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "residencyStandard3DBlockShape", scope: !491, file: !491, line: 192, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "residencyAlignedMipSize", scope: !491, file: !491, line: 192, baseType: !43, size: 32, offset: 96, flags: DIFlagPublic)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "residencyNonResidentStrict", scope: !491, file: !491, line: 192, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!2657 = !DILocation(line: 1788, scope: !2511)
!2658 = !DILocation(line: 1789, column: 2, scope: !2511)
!2659 = !DILocation(line: 1790, column: 2, scope: !2511)
!2660 = !DILocalVariable(name: "memprops", scope: !2511, file: !978, line: 1790, type: !2661)
!2661 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPhysicalDeviceMemoryProperties", scope: !491, file: !491, line: 226, size: 5184, align: 32, flags: DIFlagPublic, elements: !2662)
!2662 = !{!2663, !2664, !2670, !2671}
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "memoryTypeCount", scope: !491, file: !491, line: 226, baseType: !43, size: 32, flags: DIFlagPublic)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "memoryTypes", scope: !491, file: !491, line: 226, baseType: !2665, size: 2048, offset: 32, flags: DIFlagPublic)
!2665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2666, size: 8)
!2666 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkMemoryType", scope: !491, file: !491, line: 214, size: 64, align: 32, flags: DIFlagPublic, elements: !2667)
!2667 = !{!2668, !2669}
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "propertyFlags", scope: !491, file: !491, line: 214, baseType: !631, size: 32, flags: DIFlagPublic)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "heapIndex", scope: !491, file: !491, line: 214, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "memoryHeapCount", scope: !491, file: !491, line: 226, baseType: !43, size: 32, offset: 2080, flags: DIFlagPublic)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "memoryHeaps", scope: !491, file: !491, line: 226, baseType: !2672, size: 3072, offset: 2112, flags: DIFlagPublic)
!2672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2673, size: 8)
!2673 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkMemoryHeap", scope: !491, file: !491, line: 220, size: 96, align: 32, flags: DIFlagPublic, elements: !2674)
!2674 = !{!2675, !2676}
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !491, file: !491, line: 220, baseType: !147, size: 64, flags: DIFlagPublic)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 220, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!2677 = !DILocation(line: 1790, scope: !2511)
!2678 = !DILocation(line: 1791, column: 2, scope: !2511)
!2679 = !DILocation(line: 1793, column: 2, scope: !2511)
!2680 = !DILocation(line: 1794, column: 2, scope: !2511)
!2681 = !DILocation(line: 1795, column: 2, scope: !2511)
!2682 = !DILocation(line: 1796, column: 2, scope: !2511)
!2683 = !DILocation(line: 1797, column: 2, scope: !2511)
!2684 = !DILocation(line: 1799, column: 2, scope: !2511)
!2685 = !DILocation(line: 1800, column: 2, scope: !2511)
!2686 = !DILocation(line: 1802, column: 3, scope: !2511)
!2687 = !DILocation(line: 1804, column: 2, scope: !2511)
!2688 = !DILocation(line: 1806, column: 3, scope: !2511)
!2689 = !DILocation(line: 1808, column: 2, scope: !2511)
!2690 = !DILocation(line: 1810, column: 3, scope: !2511)
!2691 = !DILocation(line: 1812, column: 2, scope: !2511)
!2692 = !DILocalVariable(name: "counter", scope: !2511, file: !978, line: 1812, type: !43)
!2693 = !DILocation(line: 1812, scope: !2511)
!2694 = !DILocation(line: 1814, column: 2, scope: !2511)
!2695 = !DILocalVariable(name: "cur_vk_heap", scope: !2511, file: !978, line: 1814, type: !2673)
!2696 = !DILocation(line: 1814, scope: !2511)
!2697 = !DILocation(line: 1815, column: 2, scope: !2511)
!2698 = !DILocalVariable(name: "cur_mem_ty", scope: !2511, file: !978, line: 1815, type: !2666)
!2699 = !DILocation(line: 1815, scope: !2511)
!2700 = !DILocation(line: 1817, column: 2, scope: !2511)
!2701 = !DILocalVariable(name: "size_gpu", scope: !2511, file: !978, line: 1817, type: !147)
!2702 = !DILocation(line: 1817, scope: !2511)
!2703 = !DILocation(line: 1818, column: 2, scope: !2511)
!2704 = !DILocalVariable(name: "size_cpu", scope: !2511, file: !978, line: 1818, type: !147)
!2705 = !DILocation(line: 1818, scope: !2511)
!2706 = !DILocation(line: 1820, column: 2, scope: !2511)
!2707 = !DILocation(line: 1822, column: 3, scope: !2511)
!2708 = !DILocation(line: 1823, column: 3, scope: !2511)
!2709 = !DILocation(line: 1824, column: 3, scope: !2511)
!2710 = !DILocation(line: 1841, column: 2, scope: !2511)
!2711 = !DILocation(line: 1842, column: 2, scope: !2511)
!2712 = !DILocation(line: 1826, column: 4, scope: !2511)
!2713 = !DILocation(line: 1832, column: 3, scope: !2511)
!2714 = !DILocation(line: 1828, column: 5, scope: !2511)
!2715 = !DILocation(line: 1829, column: 5, scope: !2511)
!2716 = !DILocation(line: 1834, column: 4, scope: !2511)
!2717 = !DILocation(line: 1837, column: 5, scope: !2511)
!2718 = !DILocation(line: 1836, column: 5, scope: !2511)
!2719 = !DILocation(line: 1844, column: 3, scope: !2511)
!2720 = !DILocation(line: 1845, column: 3, scope: !2511)
!2721 = !DILocation(line: 1848, column: 2, scope: !2511)
!2722 = !DILocalVariable(name: "family_count", scope: !2511, file: !978, line: 1848, type: !43)
!2723 = !DILocation(line: 1848, scope: !2511)
!2724 = !DILocation(line: 1849, column: 2, scope: !2511)
!2725 = !DILocation(line: 1850, column: 2, scope: !2511)
!2726 = !DILocalVariable(name: "families", scope: !2511, file: !978, line: 1850, type: !2727)
!2727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2728, size: 8)
!2728 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkQueueFamilyProperties", scope: !491, file: !491, line: 411, size: 192, align: 32, flags: DIFlagPublic, elements: !2729)
!2729 = !{!2730, !2731, !2732, !2733}
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "queueFlags", scope: !491, file: !491, line: 411, baseType: !43, size: 32, flags: DIFlagPublic)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "queueCount", scope: !491, file: !491, line: 411, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "timestampValidBits", scope: !491, file: !491, line: 411, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "minImageTransferGranularity", scope: !491, file: !491, line: 411, baseType: !1748, size: 96, offset: 96, flags: DIFlagPublic)
!2734 = !DILocation(line: 1850, scope: !2511)
!2735 = !DILocation(line: 1851, column: 2, scope: !2511)
!2736 = !DILocation(line: 1853, column: 2, scope: !2511)
!2737 = !DILocalVariable(name: "cur_fam", scope: !2511, file: !978, line: 1853, type: !2728)
!2738 = !DILocation(line: 1853, scope: !2511)
!2739 = !DILocation(line: 1854, column: 2, scope: !2511)
!2740 = !DILocation(line: 1857, column: 3, scope: !2511)
!2741 = !DILocation(line: 1858, column: 3, scope: !2511)
!2742 = !DILocation(line: 1865, column: 2, scope: !2511)
!2743 = !DILocation(line: 1787, column: 1, scope: !2511)
!2744 = !DILocation(line: 1860, column: 4, scope: !2511)
!2745 = !DILocation(line: 1861, column: 4, scope: !2511)
!2746 = distinct !DISubprogram(scope: !978, file: !978, line: 1870, type: !2747, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2747 = !DISubroutineType(types: !2748)
!2748 = !{!6, !2749}
!2749 = !DICompositeType(tag: DW_TAG_structure_type, name: "tz_gpu_appinfo", scope: !978, file: !978, line: 2, size: 128, align: 64, flags: DIFlagPublic, elements: !2750)
!2750 = !{!2751, !2752, !2753}
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !978, file: !978, line: 2, baseType: !177, size: 64, flags: DIFlagPublic)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "ver_maj", scope: !978, file: !978, line: 2, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "ver_min", scope: !978, file: !978, line: 2, baseType: !43, size: 32, offset: 96, flags: DIFlagPublic)
!2754 = !DILocalVariable(name: "info", arg: 1, scope: !2746, file: !978, line: 1870, type: !2749)
!2755 = !DILocation(line: 1870, scope: !2746)
!2756 = !DILocation(line: 1872, column: 2, scope: !2746)
!2757 = !DILocalVariable(name: "TZ_GPU_VERSION", scope: !2746, file: !978, line: 1872, type: !43)
!2758 = !DILocation(line: 1872, scope: !2746)
!2759 = !DILocation(line: 1873, column: 2, scope: !2746)
!2760 = !DILocation(line: 1875, column: 2, scope: !2746)
!2761 = !DILocalVariable(name: "appinfo", scope: !2746, file: !978, line: 1875, type: !2762)
!2762 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkApplicationInfo", scope: !491, file: !491, line: 7, size: 384, align: 64, flags: DIFlagPublic, elements: !2763)
!2763 = !{!2764, !2765, !2766, !2767, !2768, !2769, !2770}
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 7, baseType: !631, size: 32, flags: DIFlagPublic)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 7, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "pApplicationName", scope: !491, file: !491, line: 7, baseType: !177, size: 64, offset: 128, flags: DIFlagPublic)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "applicationVersion", scope: !491, file: !491, line: 7, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "pEngineName", scope: !491, file: !491, line: 7, baseType: !177, size: 64, offset: 256, flags: DIFlagPublic)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "engineVersion", scope: !491, file: !491, line: 7, baseType: !43, size: 32, offset: 320, flags: DIFlagPublic)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "apiVersion", scope: !491, file: !491, line: 7, baseType: !43, size: 32, offset: 352, flags: DIFlagPublic)
!2771 = !DILocation(line: 1875, scope: !2746)
!2772 = !DILocation(line: 1886, column: 2, scope: !2746)
!2773 = !DILocalVariable(name: "extensions", scope: !2746, file: !978, line: 1886, type: !2774)
!2774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !177, size: 8)
!2775 = !DILocation(line: 1886, scope: !2746)
!2776 = !DILocation(line: 1887, column: 2, scope: !2746)
!2777 = !DILocation(line: 1890, column: 3, scope: !2746)
!2778 = !DILocation(line: 1897, column: 2, scope: !2746)
!2779 = !DILocation(line: 1898, column: 2, scope: !2746)
!2780 = !DILocalVariable(name: "extension_count", scope: !2746, file: !978, line: 1898, type: !43)
!2781 = !DILocation(line: 1898, scope: !2746)
!2782 = !DILocation(line: 1900, column: 2, scope: !2746)
!2783 = !DILocalVariable(name: "layers", scope: !2746, file: !978, line: 1900, type: !2774)
!2784 = !DILocation(line: 1900, scope: !2746)
!2785 = !DILocation(line: 1901, column: 2, scope: !2746)
!2786 = !DILocation(line: 1905, column: 3, scope: !2746)
!2787 = !DILocalVariable(name: "layer_count", scope: !2746, file: !978, line: 1905, type: !166)
!2788 = !DILocation(line: 1905, scope: !2746)
!2789 = !DILocation(line: 1906, column: 3, scope: !2746)
!2790 = !DILocation(line: 1907, column: 3, scope: !2746)
!2791 = !DILocation(line: 1916, column: 2, scope: !2746)
!2792 = !DILocalVariable(name: "create", scope: !2746, file: !978, line: 1916, type: !2793)
!2793 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkInstanceCreateInfo", scope: !491, file: !491, line: 18, size: 512, align: 64, flags: DIFlagPublic, elements: !2794)
!2794 = !{!2795, !2796, !2797, !2798, !2800, !2801, !2802, !2803}
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 18, baseType: !631, size: 32, flags: DIFlagPublic)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 18, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 18, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "pApplicationInfo", scope: !491, file: !491, line: 18, baseType: !2799, size: 64, offset: 192, flags: DIFlagPublic)
!2799 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2762, size: 8)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "enabledLayerCount", scope: !491, file: !491, line: 18, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "ppEnabledLayerNames", scope: !491, file: !491, line: 18, baseType: !2774, size: 64, offset: 320, flags: DIFlagPublic)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "enabledExtensionCount", scope: !491, file: !491, line: 18, baseType: !43, size: 32, offset: 384, flags: DIFlagPublic)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "ppEnabledExtensionNames", scope: !491, file: !491, line: 18, baseType: !2774, size: 64, offset: 448, flags: DIFlagPublic)
!2804 = !DILocation(line: 1916, scope: !2746)
!2805 = !DILocation(line: 1928, column: 2, scope: !2746)
!2806 = !DILocation(line: 1929, column: 2, scope: !2746)
!2807 = !DILocation(line: 1871, column: 1, scope: !2746)
!2808 = distinct !DISubprogram(scope: !978, file: !978, line: 1932, type: !4, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2809 = !DILocation(line: 1934, column: 2, scope: !2808)
!2810 = !DILocation(line: 1935, column: 2, scope: !2808)
!2811 = !DILocation(line: 1937, column: 3, scope: !2808)
!2812 = !DILocation(line: 1938, column: 3, scope: !2808)
!2813 = !DILocation(line: 1940, column: 2, scope: !2808)
!2814 = !DILocation(line: 1942, column: 3, scope: !2808)
!2815 = !DILocation(line: 1943, column: 3, scope: !2808)
!2816 = !DILocation(line: 1945, column: 2, scope: !2808)
!2817 = !DILocation(line: 1947, column: 3, scope: !2808)
!2818 = !DILocation(line: 1949, column: 2, scope: !2808)
!2819 = !DILocalVariable(name: "counter", scope: !2808, file: !978, line: 1949, type: !147)
!2820 = !DILocation(line: 1949, scope: !2808)
!2821 = !DILocation(line: 1950, column: 2, scope: !2808)
!2822 = !DILocalVariable(name: "frame_ptr", scope: !2808, file: !978, line: 1950, type: !2823)
!2823 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1837, size: 8)
!2824 = !DILocation(line: 1950, scope: !2808)
!2825 = !DILocation(line: 1951, column: 2, scope: !2808)
!2826 = !DILocation(line: 1953, column: 3, scope: !2808)
!2827 = !DILocation(line: 1954, column: 3, scope: !2808)
!2828 = !DILocation(line: 1974, column: 2, scope: !2808)
!2829 = !DILocation(line: 1956, column: 4, scope: !2808)
!2830 = !DILocation(line: 1957, column: 4, scope: !2808)
!2831 = !DILocation(line: 1959, column: 3, scope: !2808)
!2832 = !DILocation(line: 1961, column: 4, scope: !2808)
!2833 = !DILocation(line: 1962, column: 4, scope: !2808)
!2834 = !DILocation(line: 1964, column: 3, scope: !2808)
!2835 = !DILocation(line: 1966, column: 4, scope: !2808)
!2836 = !DILocation(line: 1967, column: 4, scope: !2808)
!2837 = !DILocation(line: 1971, column: 3, scope: !2808)
!2838 = !DILocation(line: 1972, column: 3, scope: !2808)
!2839 = !DILocation(line: 1976, column: 3, scope: !2808)
!2840 = !DILocation(line: 1978, column: 2, scope: !2808)
!2841 = !DILocation(line: 1980, column: 3, scope: !2808)
!2842 = !DILocation(line: 1983, column: 2, scope: !2808)
!2843 = !DILocation(line: 1985, column: 3, scope: !2808)
!2844 = !DILocation(line: 1986, column: 3, scope: !2808)
!2845 = !DILocation(line: 1988, column: 2, scope: !2808)
!2846 = !DILocation(line: 1990, column: 3, scope: !2808)
!2847 = !DILocation(line: 1991, column: 3, scope: !2808)
!2848 = !DILocation(line: 1995, column: 2, scope: !2808)
!2849 = !DILocalVariable(name: "passptr", scope: !2808, file: !978, line: 1995, type: !1083)
!2850 = !DILocation(line: 1995, scope: !2808)
!2851 = !DILocation(line: 1996, column: 2, scope: !2808)
!2852 = !DILocation(line: 1998, column: 3, scope: !2808)
!2853 = !DILocation(line: 1999, column: 3, scope: !2808)
!2854 = !DILocation(line: 2000, column: 3, scope: !2808)
!2855 = !DILocation(line: 2002, column: 2, scope: !2808)
!2856 = !DILocation(line: 2005, column: 2, scope: !2808)
!2857 = !DILocalVariable(name: "resptr", scope: !2808, file: !978, line: 2005, type: !981)
!2858 = !DILocation(line: 2005, scope: !2808)
!2859 = !DILocation(line: 2006, column: 2, scope: !2808)
!2860 = !DILocation(line: 2008, column: 3, scope: !2808)
!2861 = !DILocation(line: 2009, column: 3, scope: !2808)
!2862 = !DILocation(line: 2022, column: 2, scope: !2808)
!2863 = !DILocation(line: 2024, column: 2, scope: !2808)
!2864 = !DILocation(line: 2011, column: 4, scope: !2808)
!2865 = !DILocation(line: 2012, column: 4, scope: !2808)
!2866 = !DILocation(line: 2014, column: 3, scope: !2808)
!2867 = !DILocation(line: 2016, column: 4, scope: !2808)
!2868 = !DILocation(line: 2017, column: 4, scope: !2808)
!2869 = !DILocation(line: 2018, column: 4, scope: !2808)
!2870 = !DILocation(line: 2019, column: 4, scope: !2808)
!2871 = !DILocation(line: 2026, column: 3, scope: !2808)
!2872 = !DILocation(line: 2028, column: 2, scope: !2808)
!2873 = !DILocation(line: 2031, column: 2, scope: !2808)
!2874 = !DILocalVariable(name: "shad", scope: !2808, file: !978, line: 2031, type: !1230)
!2875 = !DILocation(line: 2031, scope: !2808)
!2876 = !DILocation(line: 2032, column: 2, scope: !2808)
!2877 = !DILocation(line: 2034, column: 3, scope: !2808)
!2878 = !DILocation(line: 2035, column: 3, scope: !2808)
!2879 = !DILocation(line: 2051, column: 2, scope: !2808)
!2880 = !DILocation(line: 2053, column: 2, scope: !2808)
!2881 = !DILocation(line: 2055, column: 2, scope: !2808)
!2882 = !DILocation(line: 2056, column: 2, scope: !2808)
!2883 = !DILocation(line: 2037, column: 4, scope: !2808)
!2884 = !DILocation(line: 2038, column: 4, scope: !2808)
!2885 = !DILocation(line: 2040, column: 3, scope: !2808)
!2886 = !DILocation(line: 2042, column: 4, scope: !2808)
!2887 = !DILocation(line: 2043, column: 4, scope: !2808)
!2888 = !DILocation(line: 2045, column: 3, scope: !2808)
!2889 = !DILocation(line: 2047, column: 4, scope: !2808)
!2890 = !DILocation(line: 2048, column: 4, scope: !2808)
!2891 = !DILocation(line: 2058, column: 3, scope: !2808)
!2892 = !DILocation(line: 2060, column: 2, scope: !2808)
!2893 = !DILocation(line: 2061, column: 2, scope: !2808)
!2894 = !DILocation(line: 1933, column: 1, scope: !2808)
!2895 = distinct !DISubprogram(scope: !978, file: !978, line: 2064, type: !2438, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2896 = !DILocation(line: 2066, column: 2, scope: !2895)
!2897 = !DILocalVariable(name: "ret", scope: !2895, file: !978, line: 2066, type: !43)
!2898 = !DILocation(line: 2066, scope: !2895)
!2899 = !DILocation(line: 2067, column: 2, scope: !2895)
!2900 = !DILocation(line: 2068, column: 2, scope: !2895)
!2901 = distinct !DISubprogram(scope: !978, file: !978, line: 2071, type: !2902, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2902 = !DISubroutineType(types: !2903)
!2903 = !{!166, !2514, !147, !227}
!2904 = !DILocalVariable(name: "array", arg: 1, scope: !2901, file: !978, line: 2071, type: !2514)
!2905 = !DILocation(line: 2071, scope: !2901)
!2906 = !DILocalVariable(name: "array_size", arg: 2, scope: !2901, file: !978, line: 2071, type: !147)
!2907 = !DILocalVariable(name: "a", arg: 3, scope: !2901, file: !978, line: 2071, type: !227)
!2908 = !DILocation(line: 2074, column: 2, scope: !2901)
!2909 = !DILocalVariable(name: "pdev_storage", scope: !2901, file: !978, line: 2074, type: !698)
!2910 = !DILocation(line: 2074, scope: !2901)
!2911 = !DILocation(line: 2075, column: 2, scope: !2901)
!2912 = !DILocalVariable(name: "physical_device_count", scope: !2901, file: !978, line: 2075, type: !43)
!2913 = !DILocation(line: 2075, scope: !2901)
!2914 = !DILocation(line: 2076, column: 2, scope: !2901)
!2915 = !DILocalVariable(name: "result", scope: !2901, file: !978, line: 2076, type: !631)
!2916 = !DILocation(line: 2076, scope: !2901)
!2917 = !DILocation(line: 2077, column: 2, scope: !2901)
!2918 = !DILocation(line: 2079, column: 3, scope: !2901)
!2919 = !DILocation(line: 2082, column: 2, scope: !2901)
!2920 = !DILocalVariable(name: "counter", scope: !2901, file: !978, line: 2082, type: !147)
!2921 = !DILocation(line: 2082, scope: !2901)
!2922 = !DILocation(line: 2083, column: 2, scope: !2901)
!2923 = !DILocation(line: 2085, column: 3, scope: !2901)
!2924 = !DILocation(line: 2087, column: 2, scope: !2901)
!2925 = distinct !DISubprogram(scope: !978, file: !978, line: 2090, type: !2926, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!2926 = !DISubroutineType(types: !2927)
!2927 = !{!6, !2515, !166}
!2928 = !DILocalVariable(name: "hardware", arg: 1, scope: !2925, file: !978, line: 2090, type: !2515)
!2929 = !DILocation(line: 2090, scope: !2925)
!2930 = !DILocalVariable(name: "window", arg: 2, scope: !2925, file: !978, line: 2090, type: !166)
!2931 = !DILocation(line: 2092, column: 2, scope: !2925)
!2932 = !DILocation(line: 2093, column: 2, scope: !2925)
!2933 = !DILocalVariable(name: "pdev", scope: !2925, file: !978, line: 2093, type: !147)
!2934 = !DILocation(line: 2093, scope: !2925)
!2935 = !DILocation(line: 2094, column: 2, scope: !2925)
!2936 = !DILocalVariable(name: "queue_priority", scope: !2925, file: !978, line: 2094, type: !15)
!2937 = !DILocation(line: 2094, scope: !2925)
!2938 = !DILocation(line: 2096, column: 2, scope: !2925)
!2939 = !DILocalVariable(name: "qcreate", scope: !2925, file: !978, line: 2096, type: !2940)
!2940 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkDeviceQueueCreateInfo", scope: !491, file: !491, line: 234, size: 320, align: 64, flags: DIFlagPublic, elements: !2941)
!2941 = !{!2942, !2943, !2944, !2945, !2946, !2947}
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 234, baseType: !631, size: 32, flags: DIFlagPublic)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 234, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 234, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "queueFamilyIndex", scope: !491, file: !491, line: 234, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "queueCount", scope: !491, file: !491, line: 234, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "pQueuePriorities", scope: !491, file: !491, line: 234, baseType: !1461, size: 64, offset: 256, flags: DIFlagPublic)
!2948 = !DILocation(line: 2096, scope: !2925)
!2949 = !DILocation(line: 2106, column: 2, scope: !2925)
!2950 = !DILocalVariable(name: "features13", scope: !2925, file: !978, line: 2106, type: !2951)
!2951 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPhysicalDeviceVulkan13Features", scope: !491, file: !491, line: 244, size: 640, align: 64, flags: DIFlagPublic, elements: !2952)
!2952 = !{!2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969}
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 244, baseType: !631, size: 32, flags: DIFlagPublic)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 244, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "robustImageAccess", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "inlineUniformBlock", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorBindingInlineUniformBlockUpdateAfterBind", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "pipelineCreationCacheControl", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 224, flags: DIFlagPublic)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "privateData", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "shaderDemoteToHelperInvocation", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 288, flags: DIFlagPublic)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "shaderTerminateInvocation", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 320, flags: DIFlagPublic)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "subgroupSizeControl", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 352, flags: DIFlagPublic)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "computeFullSubgroups", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 384, flags: DIFlagPublic)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "synchronization2", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 416, flags: DIFlagPublic)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "textureCompressionASTC_HDR", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 448, flags: DIFlagPublic)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "shaderZeroInitializeWorkgroupMemory", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 480, flags: DIFlagPublic)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "dynamicRendering", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 512, flags: DIFlagPublic)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "shaderIntegerDotProduct", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 544, flags: DIFlagPublic)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "maintenance4", scope: !491, file: !491, line: 244, baseType: !43, size: 32, offset: 576, flags: DIFlagPublic)
!2970 = !DILocation(line: 2106, scope: !2925)
!2971 = !DILocation(line: 2127, column: 2, scope: !2925)
!2972 = !DILocalVariable(name: "features12", scope: !2925, file: !978, line: 2127, type: !2973)
!2973 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPhysicalDeviceVulkan12Features", scope: !491, file: !491, line: 265, size: 1664, align: 64, flags: DIFlagPublic, elements: !2974)
!2974 = !{!2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023}
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 265, baseType: !631, size: 32, flags: DIFlagPublic)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 265, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "samplerMirrorClampToEdge", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "drawIndirectCount", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "storageBuffer8BitAccess", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "uniformAndStorageBuffer8BitAccess", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 224, flags: DIFlagPublic)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "storagePushConstant8", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "shaderBufferInt64Atomics", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 288, flags: DIFlagPublic)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "shaderSharedInt64Atomics", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 320, flags: DIFlagPublic)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "shaderFloat16", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 352, flags: DIFlagPublic)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "shaderInt8", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 384, flags: DIFlagPublic)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorIndexing", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 416, flags: DIFlagPublic)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "shaderInputAttachmentArrayDynamicIndexing", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 448, flags: DIFlagPublic)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "shaderUniformTexelBufferArrayDynamicIndexing", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 480, flags: DIFlagPublic)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "shaderStorageTexelBufferArrayDynamicIndexing", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 512, flags: DIFlagPublic)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "shaderUniformBufferArrayNonUniformIndexing", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 544, flags: DIFlagPublic)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "shaderSampledImageArrayNonUniformIndexing", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 576, flags: DIFlagPublic)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "shaderStorageBufferArrayNonUniformIndexing", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 608, flags: DIFlagPublic)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "shaderStorageImageArrayNonUniformIndexing", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 640, flags: DIFlagPublic)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "shaderInputAttachmentArrayNonUniformIndexing", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 672, flags: DIFlagPublic)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "shaderUniformTexelBufferArrayNonUniformIndexing", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 704, flags: DIFlagPublic)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "shaderStorageTexelBufferArrayNonUniformIndexing", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 736, flags: DIFlagPublic)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorBindingUniformBufferUpdateAfterBind", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 768, flags: DIFlagPublic)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorBindingSampledImageUpdateAfterBind", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 800, flags: DIFlagPublic)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorBindingStorageImageUpdateAfterBind", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 832, flags: DIFlagPublic)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorBindingStorageBufferUpdateAfterBind", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 864, flags: DIFlagPublic)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorBindingUniformTexelBufferUpdateAfterBind", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 896, flags: DIFlagPublic)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorBindingStorageTexelBufferUpdateAfterBind", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 928, flags: DIFlagPublic)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorBindingUpdateUnusedWhilePending", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 960, flags: DIFlagPublic)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorBindingPartiallyBound", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 992, flags: DIFlagPublic)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "descriptorBindingVariableDescriptorCount", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1024, flags: DIFlagPublic)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "runtimeDescriptorArray", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1056, flags: DIFlagPublic)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "samplerFilterMinmax", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1088, flags: DIFlagPublic)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "scalarBlockLayout", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1120, flags: DIFlagPublic)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "imagelessFramebuffer", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1152, flags: DIFlagPublic)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "uniformBufferStandardLayout", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1184, flags: DIFlagPublic)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "shaderSubgroupExtendedTypes", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1216, flags: DIFlagPublic)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "separateDepthStencilLayouts", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1248, flags: DIFlagPublic)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "hostQueryReset", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1280, flags: DIFlagPublic)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "timelineSemaphore", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1312, flags: DIFlagPublic)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "bufferDeviceAddress", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1344, flags: DIFlagPublic)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "bufferDeviceAddressCaptureReplay", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1376, flags: DIFlagPublic)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "bufferDeviceAddressMultiDevice", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1408, flags: DIFlagPublic)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "vulkanMemoryModel", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1440, flags: DIFlagPublic)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "vulkanMemoryModelDeviceScope", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1472, flags: DIFlagPublic)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "vulkanMemoryModelAvailabilityVisibilityChains", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1504, flags: DIFlagPublic)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "shaderOutputViewportIndex", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1536, flags: DIFlagPublic)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "shaderOutputLayer", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1568, flags: DIFlagPublic)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "subgroupBroadcastDynamicId", scope: !491, file: !491, line: 265, baseType: !43, size: 32, offset: 1600, flags: DIFlagPublic)
!3024 = !DILocation(line: 2127, scope: !2925)
!3025 = !DILocation(line: 2180, column: 2, scope: !2925)
!3026 = !DILocalVariable(name: "enabled_features", scope: !2925, file: !978, line: 2180, type: !3027)
!3027 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPhysicalDeviceFeatures2", scope: !491, file: !491, line: 377, size: 1920, align: 64, flags: DIFlagPublic, elements: !3028)
!3028 = !{!3029, !3030, !3031}
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 377, baseType: !631, size: 32, flags: DIFlagPublic)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 377, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "features", scope: !491, file: !491, line: 377, baseType: !3032, size: 1760, offset: 128, flags: DIFlagPublic)
!3032 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPhysicalDeviceFeatures", scope: !491, file: !491, line: 318, size: 1760, align: 32, flags: DIFlagPublic, elements: !3033)
!3033 = !{!3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088}
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "robustBufferAccess", scope: !491, file: !491, line: 318, baseType: !43, size: 32, flags: DIFlagPublic)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "fullDrawIndexUint32", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "imageCubeArray", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "independentBlend", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 96, flags: DIFlagPublic)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "geometryShader", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "tessellationShader", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "sampleRateShading", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 192, flags: DIFlagPublic)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "dualSrcBlend", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 224, flags: DIFlagPublic)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "logicOp", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "multiDrawIndirect", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 288, flags: DIFlagPublic)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "drawIndirectFirstInstance", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 320, flags: DIFlagPublic)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "depthClamp", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 352, flags: DIFlagPublic)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "depthBiasClamp", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 384, flags: DIFlagPublic)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "fillModeNonSolid", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 416, flags: DIFlagPublic)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "depthBounds", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 448, flags: DIFlagPublic)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "wideLines", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 480, flags: DIFlagPublic)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "largePoints", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 512, flags: DIFlagPublic)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "alphaToOne", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 544, flags: DIFlagPublic)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "multiViewport", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 576, flags: DIFlagPublic)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "samplerAnisotropy", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 608, flags: DIFlagPublic)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "textureCompressionETC2", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 640, flags: DIFlagPublic)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "textureCompressionASTC_LDR", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 672, flags: DIFlagPublic)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "textureCompressionBC", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 704, flags: DIFlagPublic)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "occlusionQueryPrecise", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 736, flags: DIFlagPublic)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "pipelineStatisticsQuery", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 768, flags: DIFlagPublic)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "vertexPipelineStoresAndAtomics", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 800, flags: DIFlagPublic)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "fragmentStoresAndAtomics", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 832, flags: DIFlagPublic)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "shaderTessellationAndGeometryPointSize", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 864, flags: DIFlagPublic)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "shaderImageGatherExtended", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 896, flags: DIFlagPublic)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "shaderStorageImageExtendedFormats", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 928, flags: DIFlagPublic)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "shaderStorageImageMultisample", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 960, flags: DIFlagPublic)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "shaderStorageImageReadWithoutFormat", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 992, flags: DIFlagPublic)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "shaderStorageImageWriteWithoutFormat", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1024, flags: DIFlagPublic)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "shaderUniformBufferArrayDynamicIndexing", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1056, flags: DIFlagPublic)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "shaderSampledImageArrayDynamicIndexing", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1088, flags: DIFlagPublic)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "shaderStorageBufferArrayDynamicIndexing", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1120, flags: DIFlagPublic)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "shaderStorageImageArrayDynamicIndexing", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1152, flags: DIFlagPublic)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "shaderClipDistance", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1184, flags: DIFlagPublic)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "shaderCullDistance", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1216, flags: DIFlagPublic)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "shaderFloat64", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1248, flags: DIFlagPublic)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "shaderInt64", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1280, flags: DIFlagPublic)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "shaderInt16", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1312, flags: DIFlagPublic)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "shaderResourceResidency", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1344, flags: DIFlagPublic)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "shaderResourceMinLod", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1376, flags: DIFlagPublic)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "sparseBinding", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1408, flags: DIFlagPublic)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "sparseResidencyBuffer", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1440, flags: DIFlagPublic)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "sparseResidencyImage2D", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1472, flags: DIFlagPublic)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "sparseResidencyImage3D", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1504, flags: DIFlagPublic)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "sparseResidency2Samples", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1536, flags: DIFlagPublic)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "sparseResidency4Samples", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1568, flags: DIFlagPublic)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "sparseResidency8Samples", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1600, flags: DIFlagPublic)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "sparseResidency16Samples", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1632, flags: DIFlagPublic)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "sparseResidencyAliased", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1664, flags: DIFlagPublic)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "variableMultisampleRate", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1696, flags: DIFlagPublic)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "inheritedQueries", scope: !491, file: !491, line: 318, baseType: !43, size: 32, offset: 1728, flags: DIFlagPublic)
!3089 = !DILocation(line: 2180, scope: !2925)
!3090 = !DILocation(line: 2244, column: 2, scope: !2925)
!3091 = !DILocalVariable(name: "extensions", scope: !2925, file: !978, line: 2244, type: !2774)
!3092 = !DILocation(line: 2244, scope: !2925)
!3093 = !DILocation(line: 2245, column: 2, scope: !2925)
!3094 = !DILocation(line: 2246, column: 2, scope: !2925)
!3095 = !DILocalVariable(name: "extension_count", scope: !2925, file: !978, line: 2246, type: !43)
!3096 = !DILocation(line: 2246, scope: !2925)
!3097 = !DILocation(line: 2248, column: 2, scope: !2925)
!3098 = !DILocalVariable(name: "create", scope: !2925, file: !978, line: 2248, type: !3099)
!3099 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkDeviceCreateInfo", scope: !491, file: !491, line: 384, size: 576, align: 64, flags: DIFlagPublic, elements: !3100)
!3100 = !{!3101, !3102, !3103, !3104, !3105, !3107, !3108, !3109, !3110, !3111}
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 384, baseType: !631, size: 32, flags: DIFlagPublic)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 384, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 384, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "queueCreateInfoCount", scope: !491, file: !491, line: 384, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "pQueueCreateInfos", scope: !491, file: !491, line: 384, baseType: !3106, size: 64, offset: 192, flags: DIFlagPublic)
!3106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2940, size: 8)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "enabledLayerCount", scope: !491, file: !491, line: 384, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "ppEnabledLayerNames", scope: !491, file: !491, line: 384, baseType: !2774, size: 64, offset: 320, flags: DIFlagPublic)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "enabledExtensionCount", scope: !491, file: !491, line: 384, baseType: !43, size: 32, offset: 384, flags: DIFlagPublic)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "ppEnabledExtensionNames", scope: !491, file: !491, line: 384, baseType: !2774, size: 64, offset: 448, flags: DIFlagPublic)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "pEnabledFeatures", scope: !491, file: !491, line: 384, baseType: !3112, size: 64, offset: 512, flags: DIFlagPublic)
!3112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3032, size: 8)
!3113 = !DILocation(line: 2248, scope: !2925)
!3114 = !DILocation(line: 2262, column: 2, scope: !2925)
!3115 = !DILocation(line: 2263, column: 2, scope: !2925)
!3116 = !DILocation(line: 2264, column: 2, scope: !2925)
!3117 = !DILocation(line: 2265, column: 2, scope: !2925)
!3118 = !DILocation(line: 2266, column: 2, scope: !2925)
!3119 = !DILocation(line: 2268, column: 2, scope: !2925)
!3120 = !DILocation(line: 2269, column: 2, scope: !2925)
!3121 = !DILocation(line: 2271, column: 2, scope: !2925)
!3122 = !DILocalVariable(name: "pool_create", scope: !2925, file: !978, line: 2271, type: !3123)
!3123 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkCommandPoolCreateInfo", scope: !491, file: !491, line: 455, size: 192, align: 64, flags: DIFlagPublic, elements: !3124)
!3124 = !{!3125, !3126, !3127, !3128}
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 455, baseType: !631, size: 32, flags: DIFlagPublic)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 455, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 455, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "queueFamilyIndex", scope: !491, file: !491, line: 455, baseType: !43, size: 32, offset: 160, flags: DIFlagPublic)
!3129 = !DILocation(line: 2271, scope: !2925)
!3130 = !DILocation(line: 2279, column: 2, scope: !2925)
!3131 = !DILocalVariable(name: "counter", scope: !2925, file: !978, line: 2279, type: !147)
!3132 = !DILocation(line: 2279, scope: !2925)
!3133 = !DILocation(line: 2280, column: 2, scope: !2925)
!3134 = !DILocalVariable(name: "frame_ptr", scope: !2925, file: !978, line: 2280, type: !2823)
!3135 = !DILocation(line: 2280, scope: !2925)
!3136 = !DILocation(line: 2282, column: 2, scope: !2925)
!3137 = !DILocalVariable(name: "cmd_info", scope: !2925, file: !978, line: 2282, type: !3138)
!3138 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkCommandBufferAllocateInfo", scope: !491, file: !491, line: 463, size: 256, align: 64, flags: DIFlagPublic, elements: !3139)
!3139 = !{!3140, !3141, !3142, !3143, !3144}
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 463, baseType: !631, size: 32, flags: DIFlagPublic)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 463, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "commandPool", scope: !491, file: !491, line: 463, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !491, file: !491, line: 463, baseType: !631, size: 32, offset: 192, flags: DIFlagPublic)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "commandBufferCount", scope: !491, file: !491, line: 463, baseType: !43, size: 32, offset: 224, flags: DIFlagPublic)
!3145 = !DILocation(line: 2282, scope: !2925)
!3146 = !DILocation(line: 2291, column: 2, scope: !2925)
!3147 = !DILocalVariable(name: "fence_create", scope: !2925, file: !978, line: 2291, type: !3148)
!3148 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkSemaphoreCreateInfo", scope: !491, file: !491, line: 479, size: 192, align: 64, flags: DIFlagPublic, elements: !3149)
!3149 = !{!3150, !3151, !3152}
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 479, baseType: !631, size: 32, flags: DIFlagPublic)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 479, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 479, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!3153 = !DILocation(line: 2291, scope: !2925)
!3154 = !DILocation(line: 2298, column: 2, scope: !2925)
!3155 = !DILocalVariable(name: "sem_create", scope: !2925, file: !978, line: 2298, type: !3148)
!3156 = !DILocation(line: 2298, scope: !2925)
!3157 = !DILocation(line: 2305, column: 2, scope: !2925)
!3158 = !DILocation(line: 2307, column: 3, scope: !2925)
!3159 = !DILocation(line: 2308, column: 3, scope: !2925)
!3160 = !DILocation(line: 2309, column: 3, scope: !2925)
!3161 = !DILocation(line: 2310, column: 3, scope: !2925)
!3162 = !DILocation(line: 2312, column: 3, scope: !2925)
!3163 = !DILocation(line: 2313, column: 3, scope: !2925)
!3164 = !DILocation(line: 2316, column: 2, scope: !2925)
!3165 = !DILocation(line: 2318, column: 2, scope: !2925)
!3166 = !DILocation(line: 2320, column: 2, scope: !2925)
!3167 = !DILocation(line: 2322, column: 2, scope: !2925)
!3168 = !DILocation(line: 2323, column: 2, scope: !2925)
!3169 = !DILocation(line: 2325, column: 2, scope: !2925)
!3170 = !DILocation(line: 2326, column: 2, scope: !2925)
!3171 = !DILocation(line: 2327, column: 2, scope: !2925)
!3172 = !DILocation(line: 2091, column: 1, scope: !2925)
!3173 = distinct !DISubprogram(scope: !978, file: !978, line: 2330, type: !3174, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3174 = !DISubroutineType(types: !3175)
!3175 = !{!166, !985, !227}
!3176 = !DILocalVariable(name: "info", arg: 1, scope: !3173, file: !978, line: 2330, type: !985)
!3177 = !DILocation(line: 2330, scope: !3173)
!3178 = !DILocalVariable(name: "a", arg: 2, scope: !3173, file: !978, line: 2330, type: !227)
!3179 = !DILocation(line: 2332, column: 2, scope: !3173)
!3180 = !DILocalVariable(name: "retid", scope: !3173, file: !978, line: 2332, type: !147)
!3181 = !DILocation(line: 2332, scope: !3173)
!3182 = !DILocation(line: 2333, column: 2, scope: !3173)
!3183 = !DILocalVariable(name: "resptr", scope: !3173, file: !978, line: 2333, type: !981)
!3184 = !DILocation(line: 2333, scope: !3173)
!3185 = !DILocation(line: 2334, column: 2, scope: !3173)
!3186 = !DILocation(line: 2335, column: 2, scope: !3173)
!3187 = !DILocation(line: 2336, column: 2, scope: !3173)
!3188 = !DILocalVariable(name: "create", scope: !3173, file: !978, line: 2336, type: !2306)
!3189 = !DILocation(line: 2336, scope: !3173)
!3190 = !DILocation(line: 2347, column: 2, scope: !3173)
!3191 = !DILocalVariable(name: "dynamic", scope: !3173, file: !978, line: 2347, type: !266)
!3192 = !DILocation(line: 2347, scope: !3173)
!3193 = !DILocation(line: 2348, column: 2, scope: !3173)
!3194 = !DILocation(line: 2350, column: 3, scope: !3173)
!3195 = !DILocation(line: 2352, column: 2, scope: !3173)
!3196 = !DILocation(line: 2354, column: 3, scope: !3173)
!3197 = !DILocation(line: 2356, column: 2, scope: !3173)
!3198 = !DILocation(line: 2358, column: 3, scope: !3173)
!3199 = !DILocation(line: 2360, column: 2, scope: !3173)
!3200 = !DILocation(line: 2361, column: 2, scope: !3173)
!3201 = !DILocalVariable(name: "bda", scope: !3173, file: !978, line: 2361, type: !3202)
!3202 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkBufferDeviceAddressInfo", scope: !491, file: !491, line: 561, size: 192, align: 64, flags: DIFlagPublic, elements: !3203)
!3203 = !{!3204, !3205, !3206}
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 561, baseType: !631, size: 32, flags: DIFlagPublic)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 561, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !491, file: !491, line: 561, baseType: !147, size: 64, offset: 128, flags: DIFlagPublic)
!3207 = !DILocation(line: 2361, scope: !3173)
!3208 = !DILocation(line: 2367, column: 2, scope: !3173)
!3209 = !DILocalVariable(name: "cursor", scope: !3173, file: !978, line: 2367, type: !147)
!3210 = !DILocation(line: 2367, scope: !3173)
!3211 = !DILocation(line: 2368, column: 2, scope: !3173)
!3212 = !DILocation(line: 2370, column: 3, scope: !3173)
!3213 = !DILocalVariable(name: "cpumem", scope: !3173, file: !978, line: 2370, type: !1580)
!3214 = !DILocation(line: 2370, scope: !3173)
!3215 = !DILocation(line: 2371, column: 3, scope: !3173)
!3216 = !DILocalVariable(name: "mapped_ptr", scope: !3173, file: !978, line: 2371, type: !177)
!3217 = !DILocation(line: 2371, scope: !3173)
!3218 = !DILocation(line: 2372, column: 3, scope: !3173)
!3219 = !DILocation(line: 2374, column: 2, scope: !3173)
!3220 = !DILocalVariable(name: "tmp_bda", scope: !3173, file: !978, line: 2374, type: !147)
!3221 = !DILocation(line: 2374, scope: !3173)
!3222 = !DILocation(line: 2375, column: 2, scope: !3173)
!3223 = !DILocation(line: 2378, column: 2, scope: !3173)
!3224 = !DILocalVariable(name: "resinfo", scope: !3173, file: !978, line: 2378, type: !3225)
!3225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !985, size: 8)
!3226 = !DILocation(line: 2378, scope: !3173)
!3227 = !DILocation(line: 2379, column: 2, scope: !3173)
!3228 = !DILocation(line: 2380, column: 2, scope: !3173)
!3229 = !DILocation(line: 2382, column: 3, scope: !3173)
!3230 = !DILocation(line: 2385, column: 2, scope: !3173)
!3231 = !DILocation(line: 2387, column: 3, scope: !3173)
!3232 = !DILocation(line: 2391, column: 2, scope: !3173)
!3233 = !DILocation(line: 2392, column: 2, scope: !3173)
!3234 = distinct !DISubprogram(scope: !978, file: !978, line: 2395, type: !3174, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3235 = !DILocalVariable(name: "info", arg: 1, scope: !3234, file: !978, line: 2395, type: !985)
!3236 = !DILocation(line: 2395, scope: !3234)
!3237 = !DILocalVariable(name: "a", arg: 2, scope: !3234, file: !978, line: 2395, type: !227)
!3238 = !DILocation(line: 2397, column: 2, scope: !3234)
!3239 = !DILocalVariable(name: "retid", scope: !3234, file: !978, line: 2397, type: !147)
!3240 = !DILocation(line: 2397, scope: !3234)
!3241 = !DILocation(line: 2398, column: 2, scope: !3234)
!3242 = !DILocalVariable(name: "resptr", scope: !3234, file: !978, line: 2398, type: !981)
!3243 = !DILocation(line: 2398, scope: !3234)
!3244 = !DILocation(line: 2399, column: 2, scope: !3234)
!3245 = !DILocation(line: 2400, column: 2, scope: !3234)
!3246 = !DILocation(line: 2401, column: 2, scope: !3234)
!3247 = !DILocalVariable(name: "fmt", scope: !3234, file: !978, line: 2401, type: !631)
!3248 = !DILocation(line: 2401, scope: !3234)
!3249 = !DILocation(line: 2402, column: 2, scope: !3234)
!3250 = !DILocalVariable(name: "aspect_mask", scope: !3234, file: !978, line: 2402, type: !631)
!3251 = !DILocation(line: 2402, scope: !3234)
!3252 = !DILocation(line: 2403, column: 2, scope: !3234)
!3253 = !DILocation(line: 2405, column: 3, scope: !3234)
!3254 = !DILocation(line: 2406, column: 3, scope: !3234)
!3255 = !DILocation(line: 2408, column: 2, scope: !3234)
!3256 = !DILocation(line: 2410, column: 3, scope: !3234)
!3257 = !DILocation(line: 2411, column: 3, scope: !3234)
!3258 = !DILocation(line: 2413, column: 2, scope: !3234)
!3259 = !DILocalVariable(name: "dims", scope: !3234, file: !978, line: 2413, type: !40)
!3260 = !DILocation(line: 2413, scope: !3234)
!3261 = !DILocation(line: 2414, column: 2, scope: !3234)
!3262 = !DILocalVariable(name: "create", scope: !3234, file: !978, line: 2414, type: !1740)
!3263 = !DILocation(line: 2414, scope: !3234)
!3264 = !DILocation(line: 2437, column: 2, scope: !3234)
!3265 = !DILocation(line: 2438, column: 2, scope: !3234)
!3266 = !DILocalVariable(name: "w", scope: !3234, file: !978, line: 2438, type: !43)
!3267 = !DILocation(line: 2438, scope: !3234)
!3268 = !DILocation(line: 2439, column: 2, scope: !3234)
!3269 = !DILocalVariable(name: "h", scope: !3234, file: !978, line: 2439, type: !43)
!3270 = !DILocation(line: 2439, scope: !3234)
!3271 = !DILocation(line: 2440, column: 2, scope: !3234)
!3272 = !DILocation(line: 2442, column: 2, scope: !3234)
!3273 = !DILocalVariable(name: "view_create", scope: !3234, file: !978, line: 2442, type: !1706)
!3274 = !DILocation(line: 2442, scope: !3234)
!3275 = !DILocation(line: 2467, column: 2, scope: !3234)
!3276 = !DILocation(line: 2469, column: 2, scope: !3234)
!3277 = !DILocalVariable(name: "sampler_create", scope: !3234, file: !978, line: 2469, type: !3278)
!3278 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkSamplerCreateInfo", scope: !491, file: !491, line: 1042, size: 640, align: 64, flags: DIFlagPublic, elements: !3279)
!3279 = !{!3280, !3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288, !3289, !3290, !3291, !3292, !3293, !3294, !3295, !3296, !3297}
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 1042, baseType: !631, size: 32, flags: DIFlagPublic)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 1042, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 1042, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "magFilter", scope: !491, file: !491, line: 1042, baseType: !631, size: 32, offset: 160, flags: DIFlagPublic)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "minFilter", scope: !491, file: !491, line: 1042, baseType: !631, size: 32, offset: 192, flags: DIFlagPublic)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "mipmapMode", scope: !491, file: !491, line: 1042, baseType: !631, size: 32, offset: 224, flags: DIFlagPublic)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "addressModeU", scope: !491, file: !491, line: 1042, baseType: !631, size: 32, offset: 256, flags: DIFlagPublic)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "addressModeV", scope: !491, file: !491, line: 1042, baseType: !631, size: 32, offset: 288, flags: DIFlagPublic)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "addressModeW", scope: !491, file: !491, line: 1042, baseType: !631, size: 32, offset: 320, flags: DIFlagPublic)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "mipLodBias", scope: !491, file: !491, line: 1042, baseType: !15, size: 32, offset: 352, flags: DIFlagPublic)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "anisotropyEnable", scope: !491, file: !491, line: 1042, baseType: !43, size: 32, offset: 384, flags: DIFlagPublic)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "maxAnisotropy", scope: !491, file: !491, line: 1042, baseType: !15, size: 32, offset: 416, flags: DIFlagPublic)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "compareEnable", scope: !491, file: !491, line: 1042, baseType: !43, size: 32, offset: 448, flags: DIFlagPublic)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "compareOp", scope: !491, file: !491, line: 1042, baseType: !631, size: 32, offset: 480, flags: DIFlagPublic)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "minLod", scope: !491, file: !491, line: 1042, baseType: !15, size: 32, offset: 512, flags: DIFlagPublic)
!3295 = !DIDerivedType(tag: DW_TAG_member, name: "maxLod", scope: !491, file: !491, line: 1042, baseType: !15, size: 32, offset: 544, flags: DIFlagPublic)
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "borderColor", scope: !491, file: !491, line: 1042, baseType: !631, size: 32, offset: 576, flags: DIFlagPublic)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "unnormalizedCoordinates", scope: !491, file: !491, line: 1042, baseType: !43, size: 32, offset: 608, flags: DIFlagPublic)
!3298 = !DILocation(line: 2469, scope: !3234)
!3299 = !DILocation(line: 2490, column: 2, scope: !3234)
!3300 = !DILocation(line: 2493, column: 2, scope: !3234)
!3301 = !DILocalVariable(name: "resinfo", scope: !3234, file: !978, line: 2493, type: !3225)
!3302 = !DILocation(line: 2493, scope: !3234)
!3303 = !DILocation(line: 2494, column: 2, scope: !3234)
!3304 = !DILocation(line: 2495, column: 2, scope: !3234)
!3305 = !DILocation(line: 2497, column: 3, scope: !3234)
!3306 = !DILocation(line: 2500, column: 2, scope: !3234)
!3307 = !DILocation(line: 2502, column: 3, scope: !3234)
!3308 = !DILocation(line: 2506, column: 2, scope: !3234)
!3309 = !DILocation(line: 2508, column: 2, scope: !3234)
!3310 = distinct !DISubprogram(scope: !978, file: !978, line: 2511, type: !3311, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3311 = !DISubroutineType(types: !3312)
!3312 = !{!3313, !177, !177, !227}
!3313 = !DICompositeType(tag: DW_TAG_structure_type, name: "tz_gpu_shader_sources", scope: !978, file: !978, line: 86, size: 256, align: 64, flags: DIFlagPublic, elements: !3314)
!3314 = !{!3315, !3316, !3317, !3318}
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "vertex_spv_data", scope: !978, file: !978, line: 86, baseType: !177, size: 64, flags: DIFlagPublic)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "vertex_spv_count", scope: !978, file: !978, line: 86, baseType: !147, size: 64, offset: 64, flags: DIFlagPublic)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_spv_data", scope: !978, file: !978, line: 86, baseType: !177, size: 64, offset: 128, flags: DIFlagPublic)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_spv_count", scope: !978, file: !978, line: 86, baseType: !147, size: 64, offset: 192, flags: DIFlagPublic)
!3319 = !DILocalVariable(name: "vertex_spv_path", arg: 1, scope: !3310, file: !978, line: 2511, type: !177)
!3320 = !DILocation(line: 2511, scope: !3310)
!3321 = !DILocalVariable(name: "fragment_spv_path", arg: 2, scope: !3310, file: !978, line: 2511, type: !177)
!3322 = !DILocalVariable(name: "a", arg: 3, scope: !3310, file: !978, line: 2511, type: !227)
!3323 = !DILocation(line: 2513, column: 2, scope: !3310)
!3324 = !DILocalVariable(name: "ret", scope: !3310, file: !978, line: 2513, type: !3313)
!3325 = !DILocation(line: 2513, scope: !3310)
!3326 = !DILocation(line: 2514, column: 2, scope: !3310)
!3327 = !DILocation(line: 2515, column: 2, scope: !3310)
!3328 = !DILocation(line: 2517, column: 2, scope: !3310)
!3329 = !DILocation(line: 2518, column: 2, scope: !3310)
!3330 = !DILocation(line: 2520, column: 2, scope: !3310)
!3331 = !DILocation(line: 2521, column: 2, scope: !3310)
!3332 = !DILocation(line: 2523, column: 2, scope: !3310)
!3333 = distinct !DISubprogram(scope: !978, file: !978, line: 2526, type: !3334, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3334 = !DISubroutineType(types: !3335)
!3335 = !{!166, !177, !147, !177, !147, !227}
!3336 = !DILocalVariable(name: "vertex_source", arg: 1, scope: !3333, file: !978, line: 2526, type: !177)
!3337 = !DILocation(line: 2526, scope: !3333)
!3338 = !DILocalVariable(name: "vertex_source_len", arg: 2, scope: !3333, file: !978, line: 2526, type: !147)
!3339 = !DILocalVariable(name: "fragment_source", arg: 3, scope: !3333, file: !978, line: 2526, type: !177)
!3340 = !DILocalVariable(name: "fragment_source_len", arg: 4, scope: !3333, file: !978, line: 2526, type: !147)
!3341 = !DILocalVariable(name: "a", arg: 5, scope: !3333, file: !978, line: 2526, type: !227)
!3342 = !DILocation(line: 2528, column: 2, scope: !3333)
!3343 = !DILocalVariable(name: "retid", scope: !3333, file: !978, line: 2528, type: !147)
!3344 = !DILocation(line: 2528, scope: !3333)
!3345 = !DILocation(line: 2529, column: 2, scope: !3333)
!3346 = !DILocalVariable(name: "resptr", scope: !3333, file: !978, line: 2529, type: !1230)
!3347 = !DILocation(line: 2529, scope: !3333)
!3348 = !DILocation(line: 2530, column: 2, scope: !3333)
!3349 = !DILocation(line: 2531, column: 2, scope: !3333)
!3350 = !DILocation(line: 2533, column: 2, scope: !3333)
!3351 = !DILocalVariable(name: "vcreate", scope: !3333, file: !978, line: 2533, type: !3352)
!3352 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkShaderModuleCreateInfo", scope: !491, file: !491, line: 568, size: 320, align: 64, flags: DIFlagPublic, elements: !3353)
!3353 = !{!3354, !3355, !3356, !3357, !3358}
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 568, baseType: !631, size: 32, flags: DIFlagPublic)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 568, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !491, file: !491, line: 568, baseType: !631, size: 32, offset: 128, flags: DIFlagPublic)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "codeSize", scope: !491, file: !491, line: 568, baseType: !147, size: 64, offset: 160, flags: DIFlagPublic)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "pCode", scope: !491, file: !491, line: 568, baseType: !1056, size: 64, offset: 256, flags: DIFlagPublic)
!3359 = !DILocation(line: 2533, scope: !3333)
!3360 = !DILocation(line: 2541, column: 2, scope: !3333)
!3361 = !DILocation(line: 2542, column: 2, scope: !3333)
!3362 = !DILocalVariable(name: "fcreate", scope: !3333, file: !978, line: 2542, type: !3352)
!3363 = !DILocation(line: 2542, scope: !3333)
!3364 = !DILocation(line: 2550, column: 2, scope: !3333)
!3365 = !DILocation(line: 2552, column: 2, scope: !3333)
!3366 = distinct !DISubprogram(scope: !978, file: !978, line: 2555, type: !3367, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3367 = !DISubroutineType(types: !3368)
!3368 = !{!166, !177, !147, !227}
!3369 = !DILocalVariable(name: "compute_source", arg: 1, scope: !3366, file: !978, line: 2555, type: !177)
!3370 = !DILocation(line: 2555, scope: !3366)
!3371 = !DILocalVariable(name: "compute_source_len", arg: 2, scope: !3366, file: !978, line: 2555, type: !147)
!3372 = !DILocalVariable(name: "a", arg: 3, scope: !3366, file: !978, line: 2555, type: !227)
!3373 = !DILocation(line: 2557, column: 2, scope: !3366)
!3374 = !DILocalVariable(name: "retid", scope: !3366, file: !978, line: 2557, type: !147)
!3375 = !DILocation(line: 2557, scope: !3366)
!3376 = !DILocation(line: 2558, column: 2, scope: !3366)
!3377 = !DILocalVariable(name: "resptr", scope: !3366, file: !978, line: 2558, type: !1230)
!3378 = !DILocation(line: 2558, scope: !3366)
!3379 = !DILocation(line: 2559, column: 2, scope: !3366)
!3380 = !DILocation(line: 2560, column: 2, scope: !3366)
!3381 = !DILocation(line: 2561, column: 2, scope: !3366)
!3382 = !DILocation(line: 2563, column: 2, scope: !3366)
!3383 = !DILocalVariable(name: "vcreate", scope: !3366, file: !978, line: 2563, type: !3352)
!3384 = !DILocation(line: 2563, scope: !3366)
!3385 = !DILocation(line: 2571, column: 2, scope: !3366)
!3386 = !DILocation(line: 2573, column: 2, scope: !3366)
!3387 = distinct !DISubprogram(scope: !978, file: !978, line: 2576, type: !3388, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3388 = !DISubroutineType(types: !3389)
!3389 = !{!166, !1087, !227, !227}
!3390 = !DILocalVariable(name: "info", arg: 1, scope: !3387, file: !978, line: 2576, type: !1087)
!3391 = !DILocation(line: 2576, scope: !3387)
!3392 = !DILocalVariable(name: "long", arg: 2, scope: !3387, file: !978, line: 2576, type: !227)
!3393 = !DILocalVariable(name: "short", arg: 3, scope: !3387, file: !978, line: 2576, type: !227)
!3394 = !DILocation(line: 2578, column: 2, scope: !3387)
!3395 = !DILocalVariable(name: "retid", scope: !3387, file: !978, line: 2578, type: !147)
!3396 = !DILocation(line: 2578, scope: !3387)
!3397 = !DILocation(line: 2579, column: 2, scope: !3387)
!3398 = !DILocalVariable(name: "passptr", scope: !3387, file: !978, line: 2579, type: !1083)
!3399 = !DILocation(line: 2579, scope: !3387)
!3400 = !DILocation(line: 2580, column: 2, scope: !3387)
!3401 = !DILocation(line: 2584, column: 2, scope: !3387)
!3402 = !DILocalVariable(name: "buffer_rescount", scope: !3387, file: !978, line: 2584, type: !147)
!3403 = !DILocation(line: 2584, scope: !3387)
!3404 = !DILocation(line: 2585, column: 2, scope: !3387)
!3405 = !DILocalVariable(name: "counter", scope: !3387, file: !978, line: 2585, type: !147)
!3406 = !DILocation(line: 2585, scope: !3387)
!3407 = !DILocation(line: 2586, column: 2, scope: !3387)
!3408 = !DILocalVariable(name: "cur_resource", scope: !3387, file: !978, line: 2586, type: !982)
!3409 = !DILocation(line: 2586, scope: !3387)
!3410 = !DILocation(line: 2587, column: 2, scope: !3387)
!3411 = !DILocation(line: 2589, column: 3, scope: !3387)
!3412 = !DILocation(line: 2590, column: 3, scope: !3387)
!3413 = !DILocation(line: 2596, column: 2, scope: !3387)
!3414 = !DILocalVariable(name: "size", scope: !3387, file: !978, line: 2596, type: !147)
!3415 = !DILocation(line: 2596, scope: !3387)
!3416 = !DILocation(line: 2597, column: 2, scope: !3387)
!3417 = !DILocation(line: 2592, column: 4, scope: !3387)
!3418 = !DILocation(line: 2599, column: 3, scope: !3387)
!3419 = !DILocation(line: 2601, column: 2, scope: !3387)
!3420 = !DILocalVariable(name: "meta_create", scope: !3387, file: !978, line: 2601, type: !2306)
!3421 = !DILocation(line: 2601, scope: !3387)
!3422 = !DILocation(line: 2612, column: 2, scope: !3387)
!3423 = !DILocation(line: 2613, column: 2, scope: !3387)
!3424 = !DILocation(line: 2614, column: 2, scope: !3387)
!3425 = !DILocation(line: 2616, column: 2, scope: !3387)
!3426 = !DILocation(line: 2618, column: 3, scope: !3387)
!3427 = !DILocation(line: 2621, column: 2, scope: !3387)
!3428 = !DILocation(line: 2623, column: 2, scope: !3387)
!3429 = !DILocation(line: 2624, column: 2, scope: !3387)
!3430 = !DILocalVariable(name: "ginfo", scope: !3387, file: !978, line: 2624, type: !1090)
!3431 = !DILocation(line: 2624, scope: !3387)
!3432 = !DILocation(line: 2625, column: 2, scope: !3387)
!3433 = !DILocalVariable(name: "cur_colour_target", scope: !3387, file: !978, line: 2625, type: !166)
!3434 = !DILocation(line: 2625, scope: !3387)
!3435 = !DILocation(line: 2626, column: 2, scope: !3387)
!3436 = !DILocation(line: 2628, column: 3, scope: !3387)
!3437 = !DILocation(line: 2661, column: 2, scope: !3387)
!3438 = !DILocation(line: 2662, column: 2, scope: !3387)
!3439 = !DILocation(line: 2664, column: 2, scope: !3387)
!3440 = !DILocation(line: 2629, column: 3, scope: !3387)
!3441 = !DILocation(line: 2630, column: 4, scope: !3387)
!3442 = !DILocalVariable(name: "drawbuf_handle", scope: !3387, file: !978, line: 2630, type: !166)
!3443 = !DILocation(line: 2630, scope: !3387)
!3444 = !DILocation(line: 2631, column: 4, scope: !3387)
!3445 = !DILocalVariable(name: "drawbuf", scope: !3387, file: !978, line: 2631, type: !981)
!3446 = !DILocation(line: 2631, scope: !3387)
!3447 = !DILocation(line: 2632, column: 4, scope: !3387)
!3448 = !DILocalVariable(name: "dbinfo", scope: !3387, file: !978, line: 2632, type: !985)
!3449 = !DILocation(line: 2632, scope: !3387)
!3450 = !DILocation(line: 2633, column: 4, scope: !3387)
!3451 = !DILocalVariable(name: "dbflags", scope: !3387, file: !978, line: 2633, type: !166)
!3452 = !DILocation(line: 2633, scope: !3387)
!3453 = !DILocation(line: 2634, column: 4, scope: !3387)
!3454 = !DILocation(line: 2647, column: 3, scope: !3387)
!3455 = !DILocation(line: 2648, column: 3, scope: !3387)
!3456 = !DILocation(line: 2636, column: 5, scope: !3387)
!3457 = !DILocation(line: 2637, column: 5, scope: !3387)
!3458 = !DILocation(line: 2638, column: 5, scope: !3387)
!3459 = !DILocation(line: 2639, column: 5, scope: !3387)
!3460 = !DILocation(line: 2640, column: 5, scope: !3387)
!3461 = !DILocation(line: 2641, column: 5, scope: !3387)
!3462 = !DILocation(line: 2642, column: 5, scope: !3387)
!3463 = !DILocation(line: 2643, column: 5, scope: !3387)
!3464 = !DILocation(line: 2650, column: 4, scope: !3387)
!3465 = !DILocation(line: 2651, column: 4, scope: !3387)
!3466 = !DILocation(line: 2658, column: 3, scope: !3387)
!3467 = !DILocation(line: 2653, column: 5, scope: !3387)
!3468 = !DILocation(line: 2654, column: 5, scope: !3387)
!3469 = distinct !DISubprogram(scope: !978, file: !978, line: 2667, type: !3470, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3470 = !DISubroutineType(types: !3471)
!3471 = !{!166, !177, !227}
!3472 = !DILocalVariable(name: "name", arg: 1, scope: !3469, file: !978, line: 2667, type: !177)
!3473 = !DILocation(line: 2667, scope: !3469)
!3474 = !DILocalVariable(name: "a", arg: 2, scope: !3469, file: !978, line: 2667, type: !227)
!3475 = !DILocation(line: 2669, column: 2, scope: !3469)
!3476 = !DILocalVariable(name: "ret", scope: !3469, file: !978, line: 2669, type: !147)
!3477 = !DILocation(line: 2669, scope: !3469)
!3478 = !DILocation(line: 2670, column: 2, scope: !3469)
!3479 = !DILocalVariable(name: "graphptr", scope: !3469, file: !978, line: 2670, type: !2054)
!3480 = !DILocation(line: 2670, scope: !3469)
!3481 = !DILocation(line: 2671, column: 2, scope: !3469)
!3482 = !DILocation(line: 2673, column: 2, scope: !3469)
!3483 = !DILocalVariable(name: "initial_timeline_capacity", scope: !3469, file: !978, line: 2673, type: !166)
!3484 = !DILocation(line: 2673, scope: !3469)
!3485 = !DILocation(line: 2674, column: 2, scope: !3469)
!3486 = !DILocation(line: 2675, column: 2, scope: !3469)
!3487 = !DILocation(line: 2676, column: 2, scope: !3469)
!3488 = !DILocation(line: 2677, column: 2, scope: !3469)
!3489 = distinct !DISubprogram(scope: !978, file: !978, line: 2680, type: !3490, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3490 = !DISubroutineType(types: !3491)
!3491 = !{!6, !166, !166}
!3492 = !DILocalVariable(name: "graph", arg: 1, scope: !3489, file: !978, line: 2680, type: !166)
!3493 = !DILocation(line: 2680, scope: !3489)
!3494 = !DILocalVariable(name: "pass", arg: 2, scope: !3489, file: !978, line: 2680, type: !166)
!3495 = !DILocation(line: 2681, column: 1, scope: !3489)
!3496 = !DILocation(line: 2682, column: 2, scope: !3489)
!3497 = !DILocalVariable(name: "graphptr", scope: !3489, file: !978, line: 2682, type: !2054)
!3498 = !DILocation(line: 2682, scope: !3489)
!3499 = !DILocation(line: 2683, column: 2, scope: !3489)
!3500 = !DILocation(line: 2685, column: 3, scope: !3489)
!3501 = !DILocation(line: 2686, column: 3, scope: !3489)
!3502 = !DILocation(line: 2688, column: 2, scope: !3489)
!3503 = !DILocalVariable(name: "cur", scope: !3489, file: !978, line: 2688, type: !147)
!3504 = !DILocation(line: 2688, scope: !3489)
!3505 = !DILocation(line: 2689, column: 2, scope: !3489)
!3506 = !DILocalVariable(name: "entry_ptr", scope: !3489, file: !978, line: 2689, type: !2059)
!3507 = !DILocation(line: 2689, scope: !3489)
!3508 = !DILocation(line: 2690, column: 2, scope: !3489)
!3509 = !DILocation(line: 2691, column: 2, scope: !3489)
!3510 = !DILocation(line: 2692, column: 2, scope: !3489)
!3511 = distinct !DISubprogram(scope: !978, file: !978, line: 2696, type: !3512, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3512 = !DISubroutineType(types: !3513)
!3513 = !{!6, !166, !227, !227}
!3514 = !DILocalVariable(name: "graph", arg: 1, scope: !3511, file: !978, line: 2696, type: !166)
!3515 = !DILocation(line: 2696, scope: !3511)
!3516 = !DILocalVariable(name: "long", arg: 2, scope: !3511, file: !978, line: 2696, type: !227)
!3517 = !DILocalVariable(name: "short", arg: 3, scope: !3511, file: !978, line: 2696, type: !227)
!3518 = !DILocation(line: 2697, column: 1, scope: !3511)
!3519 = !DILocation(line: 2698, column: 2, scope: !3511)
!3520 = !DILocalVariable(name: "graphptr", scope: !3511, file: !978, line: 2698, type: !2054)
!3521 = !DILocation(line: 2698, scope: !3511)
!3522 = !DILocation(line: 2699, column: 2, scope: !3511)
!3523 = !DILocalVariable(name: "writes_to_system_image", scope: !3511, file: !978, line: 2699, type: !266)
!3524 = !DILocation(line: 2699, scope: !3511)
!3525 = !DILocation(line: 2700, column: 2, scope: !3511)
!3526 = !DILocalVariable(name: "will_present", scope: !3511, file: !978, line: 2700, type: !266)
!3527 = !DILocation(line: 2700, scope: !3511)
!3528 = !DILocation(line: 2702, column: 2, scope: !3511)
!3529 = !DILocalVariable(name: "frame", scope: !3511, file: !978, line: 2702, type: !1837)
!3530 = !DILocation(line: 2702, scope: !3511)
!3531 = !DILocation(line: 2705, column: 2, scope: !3511)
!3532 = !DILocalVariable(name: "image_index", scope: !3511, file: !978, line: 2705, type: !43)
!3533 = !DILocation(line: 2705, scope: !3511)
!3534 = !DILocation(line: 2706, column: 2, scope: !3511)
!3535 = !DILocalVariable(name: "swapchain_image", scope: !3511, file: !978, line: 2706, type: !147)
!3536 = !DILocation(line: 2706, scope: !3511)
!3537 = !DILocation(line: 2707, column: 2, scope: !3511)
!3538 = !DILocation(line: 2710, column: 3, scope: !3511)
!3539 = !DILocation(line: 2711, column: 3, scope: !3511)
!3540 = !DILocation(line: 2726, column: 2, scope: !3511)
!3541 = !DILocalVariable(name: "barrier", scope: !3511, file: !978, line: 2726, type: !1881)
!3542 = !DILocation(line: 2726, scope: !3511)
!3543 = !DILocation(line: 2746, column: 2, scope: !3511)
!3544 = !DILocation(line: 2713, column: 4, scope: !3511)
!3545 = !DILocation(line: 2715, column: 3, scope: !3511)
!3546 = !DILocation(line: 2717, column: 4, scope: !3511)
!3547 = !DILocation(line: 2720, column: 3, scope: !3511)
!3548 = !DILocation(line: 2721, column: 3, scope: !3511)
!3549 = !DILocation(line: 2722, column: 3, scope: !3511)
!3550 = !DILocation(line: 2723, column: 3, scope: !3511)
!3551 = !DILocation(line: 2748, column: 3, scope: !3511)
!3552 = !DILocation(line: 2751, column: 2, scope: !3511)
!3553 = !DILocalVariable(name: "frame_begin", scope: !3511, file: !978, line: 2751, type: !1242)
!3554 = !DILocation(line: 2751, scope: !3511)
!3555 = !DILocation(line: 2758, column: 2, scope: !3511)
!3556 = !DILocation(line: 2760, column: 2, scope: !3511)
!3557 = !DILocation(line: 2762, column: 3, scope: !3511)
!3558 = !DILocation(line: 2765, column: 2, scope: !3511)
!3559 = !DILocalVariable(name: "counter", scope: !3511, file: !978, line: 2765, type: !147)
!3560 = !DILocation(line: 2765, scope: !3511)
!3561 = !DILocation(line: 2766, column: 2, scope: !3511)
!3562 = !DILocalVariable(name: "cur_entry", scope: !3511, file: !978, line: 2766, type: !2060)
!3563 = !DILocation(line: 2766, scope: !3511)
!3564 = !DILocation(line: 2767, column: 2, scope: !3511)
!3565 = !DILocation(line: 2769, column: 3, scope: !3511)
!3566 = !DILocation(line: 2770, column: 3, scope: !3511)
!3567 = !DILocation(line: 2782, column: 2, scope: !3511)
!3568 = !DILocation(line: 2772, column: 4, scope: !3511)
!3569 = !DILocation(line: 2773, column: 4, scope: !3511)
!3570 = !DILocation(line: 2775, column: 3, scope: !3511)
!3571 = !DILocation(line: 2784, column: 3, scope: !3511)
!3572 = !DILocalVariable(name: "blit", scope: !3511, file: !978, line: 2784, type: !3573)
!3573 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkImageBlit", scope: !491, file: !491, line: 931, size: 640, align: 32, flags: DIFlagPublic, elements: !3574)
!3574 = !{!3575, !3576, !3578, !3579}
!3575 = !DIDerivedType(tag: DW_TAG_member, name: "srcSubresource", scope: !491, file: !491, line: 931, baseType: !2356, size: 128, flags: DIFlagPublic)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "srcOffsets", scope: !491, file: !491, line: 931, baseType: !3577, size: 192, offset: 128, flags: DIFlagPublic)
!3577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2363, size: 8)
!3578 = !DIDerivedType(tag: DW_TAG_member, name: "dstSubresource", scope: !491, file: !491, line: 931, baseType: !2356, size: 128, offset: 320, flags: DIFlagPublic)
!3579 = !DIDerivedType(tag: DW_TAG_member, name: "dstOffsets", scope: !491, file: !491, line: 931, baseType: !3577, size: 192, offset: 448, flags: DIFlagPublic)
!3580 = !DILocation(line: 2784, scope: !3511)
!3581 = !DILocation(line: 2801, column: 3, scope: !3511)
!3582 = !DILocation(line: 2802, column: 3, scope: !3511)
!3583 = !DILocation(line: 2803, column: 3, scope: !3511)
!3584 = !DILocation(line: 2804, column: 3, scope: !3511)
!3585 = !DILocation(line: 2806, column: 3, scope: !3511)
!3586 = !DILocalVariable(name: "system_image_transition", scope: !3511, file: !978, line: 2806, type: !1881)
!3587 = !DILocation(line: 2806, scope: !3511)
!3588 = !DILocation(line: 2827, column: 3, scope: !3511)
!3589 = !DILocation(line: 2828, column: 3, scope: !3511)
!3590 = !DILocation(line: 2831, column: 2, scope: !3511)
!3591 = !DILocation(line: 2833, column: 3, scope: !3511)
!3592 = !DILocation(line: 2834, column: 3, scope: !3511)
!3593 = !DILocation(line: 2835, column: 3, scope: !3511)
!3594 = !DILocation(line: 2836, column: 3, scope: !3511)
!3595 = !DILocation(line: 2837, column: 3, scope: !3511)
!3596 = !DILocation(line: 2840, column: 2, scope: !3511)
!3597 = !DILocation(line: 2841, column: 2, scope: !3511)
!3598 = !DILocalVariable(name: "wait_stage", scope: !3511, file: !978, line: 2841, type: !631)
!3599 = !DILocation(line: 2841, scope: !3511)
!3600 = !DILocation(line: 2842, column: 2, scope: !3511)
!3601 = !DILocalVariable(name: "submit", scope: !3511, file: !978, line: 2842, type: !1255)
!3602 = !DILocation(line: 2842, scope: !3511)
!3603 = !DILocation(line: 2856, column: 2, scope: !3511)
!3604 = !DILocation(line: 2857, column: 2, scope: !3511)
!3605 = !DILocation(line: 2858, column: 2, scope: !3511)
!3606 = !DILocation(line: 2861, column: 2, scope: !3511)
!3607 = !DILocalVariable(name: "present_res", scope: !3511, file: !978, line: 2861, type: !631)
!3608 = !DILocation(line: 2861, scope: !3511)
!3609 = !DILocation(line: 2862, column: 2, scope: !3511)
!3610 = !DILocation(line: 2864, column: 3, scope: !3511)
!3611 = !DILocalVariable(name: "present", scope: !3511, file: !978, line: 2864, type: !3612)
!3612 = !DICompositeType(tag: DW_TAG_structure_type, name: "VkPresentInfoKHR", scope: !491, file: !491, line: 939, size: 512, align: 64, flags: DIFlagPublic, elements: !3613)
!3613 = !{!3614, !3615, !3616, !3617, !3618, !3619, !3620, !3621}
!3614 = !DIDerivedType(tag: DW_TAG_member, name: "sType", scope: !491, file: !491, line: 939, baseType: !631, size: 32, flags: DIFlagPublic)
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "pNext", scope: !491, file: !491, line: 939, baseType: !214, size: 64, offset: 64, flags: DIFlagPublic)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "waitSemaphoreCount", scope: !491, file: !491, line: 939, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "pWaitSemaphores", scope: !491, file: !491, line: 939, baseType: !698, size: 64, offset: 192, flags: DIFlagPublic)
!3618 = !DIDerivedType(tag: DW_TAG_member, name: "swapchainCount", scope: !491, file: !491, line: 939, baseType: !43, size: 32, offset: 256, flags: DIFlagPublic)
!3619 = !DIDerivedType(tag: DW_TAG_member, name: "pSwapchains", scope: !491, file: !491, line: 939, baseType: !698, size: 64, offset: 320, flags: DIFlagPublic)
!3620 = !DIDerivedType(tag: DW_TAG_member, name: "pImageIndices", scope: !491, file: !491, line: 939, baseType: !1056, size: 64, offset: 384, flags: DIFlagPublic)
!3621 = !DIDerivedType(tag: DW_TAG_member, name: "pResults", scope: !491, file: !491, line: 939, baseType: !1195, size: 64, offset: 448, flags: DIFlagPublic)
!3622 = !DILocation(line: 2864, scope: !3511)
!3623 = !DILocation(line: 2875, column: 3, scope: !3511)
!3624 = !DILocation(line: 2876, column: 3, scope: !3511)
!3625 = !DILocation(line: 2879, column: 2, scope: !3511)
!3626 = distinct !DISubprogram(scope: !978, file: !978, line: 2882, type: !3627, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3627 = !DISubroutineType(types: !3628)
!3628 = !{!6, !166, !214, !147, !147}
!3629 = !DILocalVariable(name: "res", arg: 1, scope: !3626, file: !978, line: 2882, type: !166)
!3630 = !DILocation(line: 2882, scope: !3626)
!3631 = !DILocalVariable(name: "data", arg: 2, scope: !3626, file: !978, line: 2882, type: !214)
!3632 = !DILocalVariable(name: "data_size", arg: 3, scope: !3626, file: !978, line: 2882, type: !147)
!3633 = !DILocalVariable(name: "offset", arg: 4, scope: !3626, file: !978, line: 2882, type: !147)
!3634 = !DILocation(line: 2884, column: 2, scope: !3626)
!3635 = !DILocation(line: 2885, column: 2, scope: !3626)
!3636 = !DILocalVariable(name: "resptr", scope: !3626, file: !978, line: 2885, type: !981)
!3637 = !DILocation(line: 2885, scope: !3626)
!3638 = !DILocation(line: 2886, column: 2, scope: !3626)
!3639 = !DILocalVariable(name: "rinfo", scope: !3626, file: !978, line: 2886, type: !3225)
!3640 = !DILocation(line: 2886, scope: !3626)
!3641 = !DILocation(line: 2888, column: 2, scope: !3626)
!3642 = !DILocation(line: 2889, column: 2, scope: !3626)
!3643 = !DILocation(line: 2883, column: 1, scope: !3626)
!3644 = distinct !DISubprogram(scope: !978, file: !978, line: 2892, type: !3645, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3645 = !DISubroutineType(types: !3646)
!3646 = !{!147, !166}
!3647 = !DILocalVariable(name: "res", arg: 1, scope: !3644, file: !978, line: 2892, type: !166)
!3648 = !DILocation(line: 2892, scope: !3644)
!3649 = !DILocation(line: 2893, column: 1, scope: !3644)
!3650 = !DILocation(line: 2894, column: 2, scope: !3644)
!3651 = !DILocalVariable(name: "resptr", scope: !3644, file: !978, line: 2894, type: !981)
!3652 = !DILocation(line: 2894, scope: !3644)
!3653 = !DILocation(line: 2895, column: 2, scope: !3644)
!3654 = !DILocalVariable(name: "rinfo", scope: !3644, file: !978, line: 2895, type: !985)
!3655 = !DILocation(line: 2895, scope: !3644)
!3656 = !DILocation(line: 2896, column: 2, scope: !3644)
!3657 = distinct !DISubprogram(scope: !3658, file: !3658, line: 125, type: !762, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3658 = !DIFile(filename: "keyboard.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz\\src", source: "key ::= enum\0A{\0A\09.backspace := 8;\0A\09.tab := 9;\0A\09.enter := 13;\0A\09.left_shift := 160;\0A\09.left_ctrl := 162;\0A\09.left_alt := 164;\0A\09.pause := 19;\0A\09.caps_lock := 20;\0A\09.escape := 27;\0A\09.spacebar := 32;\0A\09.page_down := 34;\0A\09.page_up := 33;\0A\09.end := 35;\0A\09.home := 36;\0A\09.arrow_left := 37;\0A\09.arrow_up := 38;\0A\09.arrow_right := 39;\0A\09.arrow_down := 40;\0A\09.select := 41;\0A\09.print := 42;\0A\09.print_screen := 44;\0A\09.insert := 45;\0A\09.delete := 46;\0A\09.num0 := 48;\0A\09.num1 := 49;\0A\09.num2 := 50;\0A\09.num3 := 51;\0A\09.num4 := 52;\0A\09.num5 := 53;\0A\09.num6 := 54;\0A\09.num7 := 55;\0A\09.num8 := 56;\0A\09.num9 := 57;\0A\09.a := 65;\0A\09.b := 66;\0A\09.c := 67;\0A\09.d := 68;\0A\09.e := 69;\0A\09.f := 70;\0A\09.g := 71;\0A\09.h := 72;\0A\09.i := 73;\0A\09.j := 74;\0A\09.k := 75;\0A\09.l := 76;\0A\09.m := 77;\0A\09.n := 78;\0A\09.o := 79;\0A\09.p := 80;\0A\09.q := 81;\0A\09.r := 82;\0A\09.s := 83;\0A\09.t := 84;\0A\09.u := 85;\0A\09.v := 86;\0A\09.w := 87;\0A\09.x := 88;\0A\09.y := 89;\0A\09.z := 90;\0A\09.winkey_left := 91;\0A\09.winkey_right := 92;\0A\09.apps := 93;\0A\09.sleep := 95;\0A\09.numpad0 := 96;\0A\09.numpad1 := 97;\0A\09.numpad2 := 98;\0A\09.numpad3 := 99;\0A\09.numpad4 := 100;\0A\09.numpad5 := 101;\0A\09.numpad6 := 102;\0A\09.numpad7 := 103;\0A\09.numpad8 := 104;\0A\09.numpad9 := 105;\0A\09.numpad_mul := 106;\0A\09.numpad_add := 107;\0A\09.numpad_separator := 108;\0A\09.numpad_subtract := 109;\0A\09.numpad_decimal := 110;\0A\09.numpad_divide := 111;\0A\09.f1 := 112;\0A\09.f2 := 113;\0A\09.f3 := 114;\0A\09.f4 := 115;\0A\09.f5 := 116;\0A\09.f6 := 117;\0A\09.f7 := 118;\0A\09.f8 := 119;\0A\09.f9 := 120;\0A\09.f10 := 121;\0A\09.f11 := 122;\0A\09.f12 := 123;\0A\09.f13 := 124;\0A\09.f14 := 125;\0A\09.f15 := 126;\0A\09.f16 := 127;\0A\09.f17 := 128;\0A\09.f18 := 129;\0A\09.f19 := 130;\0A\09.f20 := 131;\0A\09.f21 := 132;\0A\09.f22 := 133;\0A\09.f23 := 134;\0A\09.f24 := 135;\0A\09.num_lock := 144;\0A\09.scroll_lock := 145;\0A\09.right_shift := 161;\0A\09.right_ctrl := 163;\0A\09.right_alt := 165;\0A\09.semicol := 186;\0A\09.period := 190;\0A\09.plus := 187;\0A\09.minus := 189;\0A\09.obrack := 219;\0A\09.cbrack := 221;\0A\09.fslash := 191;\0A\09.bslash := 220;\0A\09.apostrophe := 222;\0A\09.grave := 192;\0A};\0A\0AGetAsyncKeyState ::= func(vkey : s32) -> s16 := extern;\0A\0Ais_key_down ::= func(k : key) -> bool\0A{\0A\09downval ::= GetAsyncKeyState((k@s64)@s32);\0A\09// need the equivalent of a & 0x8000\0A\09// doesnt exist in the language yet\0A\09// todo: bitwise and.\0A\09// crazy magic to do it now.\0A\09unsigned : u32 mut := (downval@u32);\0A\09// 0x8000 = 32768\0A\09unsigned = (unsigned / 32768) * 32768;\0A\09return unsigned != 0;\0A};\0A\0A== build ==\0A{\0A\09add_link_library(\22User32.lib\22);\0A}\0A")
!3659 = !DILocalVariable(name: "k", arg: 1, scope: !3657, file: !3658, line: 125, type: !166)
!3660 = !DILocation(line: 125, scope: !3657)
!3661 = !DILocation(line: 127, column: 2, scope: !3657)
!3662 = !DILocalVariable(name: "downval", scope: !3657, file: !3658, line: 127, type: !3663)
!3663 = !DIBasicType(name: "s16", size: 16, encoding: DW_ATE_signed)
!3664 = !DILocation(line: 127, scope: !3657)
!3665 = !DILocation(line: 132, column: 2, scope: !3657)
!3666 = !DILocalVariable(name: "unsigned", scope: !3657, file: !3658, line: 132, type: !43)
!3667 = !DILocation(line: 132, scope: !3657)
!3668 = !DILocation(line: 134, column: 2, scope: !3657)
!3669 = !DILocation(line: 135, column: 2, scope: !3657)
!3670 = distinct !DISubprogram(scope: !3671, file: !3671, line: 1, type: !3672, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3671 = !DIFile(filename: "topaz.psy", directory: "C:\\Users\\Harry\\Documents\\psypaz", source: "ogl_debug_callback ::= func(source : s32, type : s32, id : u32, severity : s32, length : u32, msg : u8 mut&) -> v0\0A{\0A\09puts(msg);\0A\09__debugbreak();\0A};\0A\0Awrangle_window_class ::= macro() -> v0\0A{\0A\09register_wndclass();\0A\09defer unregister_wndclass();\0A};\0A\0Asetup_arenas ::= macro() -> v0\0A{\0A\09permanent_arena_val : arena mut := arena_create(4096 * 1024);\0A\09permanent_arena ::= ref permanent_arena_val;\0A\09defer puts(\22arena free: \22);\0A\09defer putuint(permanent_arena_val.cursor);\0A\09defer puts(\22B\22);\0A\09defer putchar(10);\0A\09defer arena_destroy(permanent_arena_val);\0A\0A\09frame_arena_val : arena mut := arena_create(4096 * 1024);\0A\09frame_arena ::= ref frame_arena_val;\0A\09defer arena_destroy(frame_arena_val);\0A};\0A\0Asingle_draw ::= struct\0A{\0A\09count : u32;\0A\09command : tz_gpu_draw_indexed_indirect_command;\0A};\0A\0Amain ::= func() -> s32\0A{\0A\09wrangle_window_class();\0A\09setup_arenas();\0A\0A\09print(\22type of '5' = \22);\0A\09print(__typename(5));\0A\09print(' ');\0A\09putchar(10);\0A\0A\09wnd ::= tz_wnd_open_window(800, 600, \22Topaz Test\22, permanent_arena);\0A\09defer tz_wnd_close_window(wnd);\0A\0A\09puts(\22watch as i count to 10!\22);\0A\09putchar(10);\0A\09counter : u64 mut;\0A\09for(counter = 0, counter <= 10, counter = counter + 1)\0A\09{\0A\09\09putuint(counter);\0A\09\09putchar(10);\0A\09}\0A\0A\09tz_gpu_init(tz_gpu_appinfo\0A\09{\0A\09\09.name := \22Topaz\22;\0A\09\09.ver_maj := 6;\0A\09\09.ver_min := 0;\0A\09});\0A\0A\09hardware_count ::= tz_gpu_hardware_count();\0A\09puts(\22hardware count: \22);\0A\09putuint(hardware_count);\0A\09putchar(10);\0A\0A\09hardware_list : tz_gpu_hardware mut& := arena_push_one(permanent_arena, tz_gpu_hardware{});\0A\09tz_gpu_iterate_hardware(hardware_list, hardware_count, permanent_arena);\0A\09tz_gpu_use_hardware(deref(hardware_list at 0), wnd);\0A\0A\09pos : vec4 mut := vec4{.x := 0.0; .y := 0.0; .z := 0.0; .w := 0.0;};\0A\0A\09drawdata ::= single_draw\0A\09{\0A\09\09.count := 1;\0A\09\09.command := tz_gpu_draw_indexed_indirect_command\0A\09\09{\0A\09\09\09.index_count := 3;\0A\09\09\09.instance_count := 1;\0A\09\09\09.first_index := 0;\0A\09\09\09.vertex_offset := 0;\0A\09\09\09.first_instance := 0;\0A\09\09};\0A\09};\0A\0A\09drawbuf ::= tz_gpu_create_buffer(tz_gpu_resource_info\0A\09{\0A\09\09.data := ref drawdata;\0A\09\09.data_size := __sizeof(drawdata);\0A\09\09.flags := tz_gpu_resource_flag.none;\0A\09\09.buffer_flags := (tz_gpu_buffer_flag.draw_buffer);\0A\09}, permanent_arena);\0A\0A\09buf ::= tz_gpu_create_buffer(tz_gpu_resource_info\0A\09{\0A\09\09.data := ref pos;\0A\09\09.data_size := __sizeof(pos);\0A\09\09.flags := tz_gpu_resource_flag.none;\0A\09\09.buffer_flags := tz_gpu_buffer_flag.dynamic;\0A\09}, permanent_arena);\0A\0A\09indices : u32 mut#3;\0A\09deref(indices at 0) = 0;\0A\09deref(indices at 1) = 1;\0A\09deref(indices at 2) = 2;\0A\0A\09idxbuf ::= tz_gpu_create_buffer(tz_gpu_resource_info\0A\09{\0A\09\09.data := indices at 0;\0A\09\09.data_size := __sizeof(indices);\0A\09\09.flags := tz_gpu_resource_flag.none;\0A\09\09.buffer_flags := tz_gpu_buffer_flag.index_buffer;\0A\09}, permanent_arena);\0A\0A\09imgdata : u32 mut#4;\0A\09deref(imgdata at 0) = 0xFFFF0000;\0A\09deref(imgdata at 1) = 0xFF0000FF;\0A\09deref(imgdata at 2) = 0xFF0000FF;\0A\09deref(imgdata at 3) = 0xFFFF0000;\0A\0A\09img ::= tz_gpu_create_image(tz_gpu_resource_info\0A\09{\0A\09\09.data := imgdata at 0;\0A\09\09.data_size := __sizeof(imgdata);\0A\09\09.image_dimensions := vec2u32{.x := 2; .y := 2;};\0A\09\09.image_type := tz_gpu_image_type.rgba;\0A\09\09.flags := tz_gpu_resource_flag.none;\0A\09}, permanent_arena);\0A\0A\09gpu_resources : tz_gpu_resource mut#2;\0A\09deref(gpu_resources at 0) = buf;\0A\09deref(gpu_resources at 1) = img;\0A\0A\09if(buf == (tz_gpu_resource.invalid))\0A\09{\0A\09\09puts(\22failed to create buffer\22);\0A\09\09__debugbreak();\0A\09}\0A\09puts(\22buffer resource handle: \22);\0A\09putuint(buf@s64);\0A\09putchar(10);\0A\0A\09shader_data ::= tz_gpu_load_shader_files(\22build/vertex.spv\22, \22build/fragment.spv\22, permanent_arena);\0A\09shader ::= tz_gpu_create_graphics_shader(shader_data.vertex_spv_data, shader_data.vertex_spv_count, shader_data.fragment_spv_data, shader_data.fragment_spv_count, permanent_arena);\0A\09if(shader == (tz_gpu_shader.invalid))\0A\09{\0A\09\09puts(\22failed to create shader\22);\0A\09\09__debugbreak();\0A\09}\0A\0A\09colour_target ::= tz_gpu_resource.window_resource;\0A\0A\09pass ::= tz_gpu_create_pass(tz_gpu_pass_info\0A\09{\0A\09\09.graphics := tz_gpu_graphics_state\0A\09\09{\0A\09\09\09.clear_colour := vec4{.x := 0.7; .y := 0.5; .z := 0.0; .w := 1.0;};\0A\09\09\09.scissor := vec4u32_zero();\0A\09\09\09.colour_targets_data := ref colour_target;\0A\09\09\09.colour_targets_count := 1;\0A\09\09\09.depth_target := tz_gpu_resource.invalid;\0A\09\09\09.index_buffer := idxbuf;\0A\09\09\09.draw_buffer := drawbuf;\0A\09\09\09.culling := tz_gpu_cull.none;\0A\09\09\09.static_tri_count := 1;\0A\09\09};\0A\09\09.shader := shader;\0A\09\09.resources_data := gpu_resources at 0;\0A\09\09.resources_count := 2;\0A\09\09.name := \22Triangle Renderer\22;\0A\09}, permanent_arena, frame_arena);\0A\09if(pass == (tz_gpu_pass.invalid))\0A\09{\0A\09\09puts(\22failed to create pass\22);\0A\09\09__debugbreak();\0A\09}\0A\0A\09graph ::= tz_gpu_create_graph(\22triangle renderer\22, permanent_arena);\0A\09tz_gpu_graph_add_pass(graph, pass);\0A\09tz_gpu_graph_add_pass(graph, tz_gpu_pass.present);\0A\0A\09defer tz_gpu_term();\0A\0A\09while(tz_wnd_is_open(wnd))\0A\09{\0A\09\09if(frame_arena_val.cursor > 0)\0A\09\09{\0A\09\09\09/*\0A\09\09\09puts(\22frame arena free: \22);\0A\09\09\09putuint(frame_arena_val.cursor);\0A\09\09\09puts(\22B\22);\0A\09\09\09putchar(10);\0A\09\09\09*/\0A\09\09}\0A\09\09arena_clear(frame_arena);\0A\0A\09\09tz_gpu_execute(graph, permanent_arena, frame_arena);\0A\09\09tz_wnd_update();\0A\09\09if(is_key_down(key.escape))\0A\09\09{\0A\09\09\09puts(\22goodbye\22);\0A\09\09\09tz_wnd_close_window(wnd);\0A\09\09}\0A\09\09speed ::= 0.0002;\0A\09\09if(is_key_down(key.w))\0A\09\09{\0A\09\09\09pos.y = (pos.y + speed);\0A\09\09\09tz_gpu_resource_write(buf, ref pos, __sizeof(vec4), 0);\0A\09\09}\0A\09\09if(is_key_down(key.s))\0A\09\09{\0A\09\09\09pos.y = (pos.y - speed);\0A\09\09\09tz_gpu_resource_write(buf, ref pos, __sizeof(vec4), 0);\0A\09\09}\0A\09\09if(is_key_down(key.a))\0A\09\09{\0A\09\09\09pos.x = (pos.x - speed);\0A\09\09\09tz_gpu_resource_write(buf, ref pos, __sizeof(vec4), 0);\0A\09\09}\0A\09\09if(is_key_down(key.d))\0A\09\09{\0A\09\09\09pos.x = (pos.x + speed);\0A\09\09\09tz_gpu_resource_write(buf, ref pos, __sizeof(vec4), 0);\0A\09\09}\0A\09}\0A\09return 0;\0A};\0A\0A== build ==\0A{\0A\09add_source_file(\22src/debug.psy\22);\0A\09add_source_file(\22src/tz_gpu.psy\22);\0A\09add_source_file(\22src/keyboard.psy\22);\0A\09add_source_file(\22src/tz_wnd.psy\22);\0A\0A\09set_output_directory(\22build\22);\0A\09set_executable(\22tz\22);\0A\0A\09if static(__config() == \22debug\22)\0A\09{\0A\09\09set_optimisation(0);\0A\09\09enable_debug_symbols(true);\0A\09}\0A\09if static(__config() == \22release\22)\0A\09{\0A\09\09set_optimisation(3);\0A\09\09enable_debug_symbols(false);\0A\09}\0A\0A\09run_command(\22glslc -o build/vertex.spv src/vertex.glsl\22);\0A\09run_command(\22glslc -o build/fragment.spv src/fragment.glsl\22);\0A}\0A")
!3672 = !DISubroutineType(types: !3673)
!3673 = !{!6, !631, !631, !43, !631, !43, !177}
!3674 = !DILocalVariable(name: "source", arg: 1, scope: !3670, file: !3671, line: 1, type: !631)
!3675 = !DILocation(line: 1, scope: !3670)
!3676 = !DILocalVariable(name: "type", arg: 2, scope: !3670, file: !3671, line: 1, type: !631)
!3677 = !DILocalVariable(name: "id", arg: 3, scope: !3670, file: !3671, line: 1, type: !43)
!3678 = !DILocalVariable(name: "severity", arg: 4, scope: !3670, file: !3671, line: 1, type: !631)
!3679 = !DILocalVariable(name: "length", arg: 5, scope: !3670, file: !3671, line: 1, type: !43)
!3680 = !DILocalVariable(name: "msg", arg: 6, scope: !3670, file: !3671, line: 1, type: !177)
!3681 = !DILocation(line: 3, column: 2, scope: !3670)
!3682 = !DILocation(line: 4, column: 2, scope: !3670)
!3683 = !DILocation(line: 2, column: 1, scope: !3670)
!3684 = distinct !DISubprogram(scope: !3671, file: !3671, line: 34, type: !3685, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!3685 = !DISubroutineType(types: !3686)
!3686 = !{!631}
!3687 = !DILocation(line: 9, column: 2, scope: !3684)
!3688 = !DILocation(line: 15, column: 2, scope: !3684)
!3689 = !DILocalVariable(name: "permanent_arena_val", scope: !3684, file: !3671, line: 15, type: !211)
!3690 = !DILocation(line: 15, scope: !3684)
!3691 = !DILocation(line: 16, column: 2, scope: !3684)
!3692 = !DILocalVariable(name: "permanent_arena", scope: !3684, file: !3671, line: 16, type: !227)
!3693 = !DILocation(line: 16, scope: !3684)
!3694 = !DILocation(line: 23, column: 2, scope: !3684)
!3695 = !DILocalVariable(name: "frame_arena_val", scope: !3684, file: !3671, line: 23, type: !211)
!3696 = !DILocation(line: 23, scope: !3684)
!3697 = !DILocation(line: 24, column: 2, scope: !3684)
!3698 = !DILocalVariable(name: "frame_arena", scope: !3684, file: !3671, line: 24, type: !227)
!3699 = !DILocation(line: 24, scope: !3684)
!3700 = !DILocation(line: 62, column: 3, scope: !3684)
!3701 = !DILocation(line: 42, column: 2, scope: !3684)
!3702 = !DILocation(line: 44, column: 2, scope: !3684)
!3703 = !DILocalVariable(name: "wnd", scope: !3684, file: !3671, line: 44, type: !166)
!3704 = !DILocation(line: 44, scope: !3684)
!3705 = !DILocation(line: 47, column: 2, scope: !3684)
!3706 = !DILocation(line: 48, column: 2, scope: !3684)
!3707 = !DILocation(line: 49, column: 2, scope: !3684)
!3708 = !DILocalVariable(name: "counter", scope: !3684, file: !3671, line: 49, type: !147)
!3709 = !DILocation(line: 49, scope: !3684)
!3710 = !DILocation(line: 50, column: 2, scope: !3684)
!3711 = !DILocation(line: 52, column: 3, scope: !3684)
!3712 = !DILocation(line: 53, column: 3, scope: !3684)
!3713 = !DILocation(line: 56, column: 2, scope: !3684)
!3714 = !DILocation(line: 63, column: 2, scope: !3684)
!3715 = !DILocalVariable(name: "hardware_count", scope: !3684, file: !3671, line: 63, type: !147)
!3716 = !DILocation(line: 63, scope: !3684)
!3717 = !DILocation(line: 64, column: 2, scope: !3684)
!3718 = !DILocation(line: 65, column: 2, scope: !3684)
!3719 = !DILocation(line: 66, column: 2, scope: !3684)
!3720 = !DILocation(line: 68, column: 2, scope: !3684)
!3721 = !DILocalVariable(name: "hardware_list", scope: !3684, file: !3671, line: 68, type: !2514)
!3722 = !DILocation(line: 68, scope: !3684)
!3723 = !DILocation(line: 69, column: 2, scope: !3684)
!3724 = !DILocation(line: 70, column: 2, scope: !3684)
!3725 = !DILocation(line: 72, column: 2, scope: !3684)
!3726 = !DILocalVariable(name: "pos", scope: !3684, file: !3671, line: 72, type: !96)
!3727 = !DILocation(line: 72, scope: !3684)
!3728 = !DILocation(line: 74, column: 2, scope: !3684)
!3729 = !DILocalVariable(name: "drawdata", scope: !3684, file: !3671, line: 74, type: !3730)
!3730 = !DICompositeType(tag: DW_TAG_structure_type, name: "single_draw", scope: !3671, file: !3671, line: 29, size: 192, align: 32, flags: DIFlagPublic, elements: !3731)
!3731 = !{!3732, !3733}
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3671, file: !3671, line: 29, baseType: !43, size: 32, flags: DIFlagPublic)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "command", scope: !3671, file: !3671, line: 29, baseType: !3734, size: 160, offset: 32, flags: DIFlagPublic)
!3734 = !DICompositeType(tag: DW_TAG_structure_type, name: "tz_gpu_draw_indexed_indirect_command", scope: !978, file: !978, line: 156, size: 160, align: 32, flags: DIFlagPublic, elements: !3735)
!3735 = !{!3736, !3737, !3738, !3739, !3740}
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "index_count", scope: !978, file: !978, line: 156, baseType: !43, size: 32, flags: DIFlagPublic)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "instance_count", scope: !978, file: !978, line: 156, baseType: !43, size: 32, offset: 32, flags: DIFlagPublic)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "first_index", scope: !978, file: !978, line: 156, baseType: !43, size: 32, offset: 64, flags: DIFlagPublic)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "vertex_offset", scope: !978, file: !978, line: 156, baseType: !631, size: 32, offset: 96, flags: DIFlagPublic)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "first_instance", scope: !978, file: !978, line: 156, baseType: !43, size: 32, offset: 128, flags: DIFlagPublic)
!3741 = !DILocation(line: 74, scope: !3684)
!3742 = !DILocation(line: 87, column: 2, scope: !3684)
!3743 = !DILocalVariable(name: "drawbuf", scope: !3684, file: !3671, line: 87, type: !166)
!3744 = !DILocation(line: 87, scope: !3684)
!3745 = !DILocation(line: 95, column: 2, scope: !3684)
!3746 = !DILocalVariable(name: "buf", scope: !3684, file: !3671, line: 95, type: !166)
!3747 = !DILocation(line: 95, scope: !3684)
!3748 = !DILocation(line: 103, column: 2, scope: !3684)
!3749 = !DILocalVariable(name: "indices", scope: !3684, file: !3671, line: 103, type: !1056)
!3750 = !DILocation(line: 103, scope: !3684)
!3751 = !DILocation(line: 104, column: 2, scope: !3684)
!3752 = !DILocation(line: 105, column: 2, scope: !3684)
!3753 = !DILocation(line: 106, column: 2, scope: !3684)
!3754 = !DILocation(line: 108, column: 2, scope: !3684)
!3755 = !DILocalVariable(name: "idxbuf", scope: !3684, file: !3671, line: 108, type: !166)
!3756 = !DILocation(line: 108, scope: !3684)
!3757 = !DILocation(line: 116, column: 2, scope: !3684)
!3758 = !DILocalVariable(name: "imgdata", scope: !3684, file: !3671, line: 116, type: !1056)
!3759 = !DILocation(line: 116, scope: !3684)
!3760 = !DILocation(line: 117, column: 2, scope: !3684)
!3761 = !DILocation(line: 118, column: 2, scope: !3684)
!3762 = !DILocation(line: 119, column: 2, scope: !3684)
!3763 = !DILocation(line: 120, column: 2, scope: !3684)
!3764 = !DILocation(line: 122, column: 2, scope: !3684)
!3765 = !DILocalVariable(name: "img", scope: !3684, file: !3671, line: 122, type: !166)
!3766 = !DILocation(line: 122, scope: !3684)
!3767 = !DILocation(line: 131, column: 2, scope: !3684)
!3768 = !DILocalVariable(name: "gpu_resources", scope: !3684, file: !3671, line: 131, type: !1095)
!3769 = !DILocation(line: 131, scope: !3684)
!3770 = !DILocation(line: 132, column: 2, scope: !3684)
!3771 = !DILocation(line: 133, column: 2, scope: !3684)
!3772 = !DILocation(line: 135, column: 2, scope: !3684)
!3773 = !DILocation(line: 137, column: 3, scope: !3684)
!3774 = !DILocation(line: 138, column: 3, scope: !3684)
!3775 = !DILocation(line: 140, column: 2, scope: !3684)
!3776 = !DILocation(line: 141, column: 2, scope: !3684)
!3777 = !DILocation(line: 142, column: 2, scope: !3684)
!3778 = !DILocation(line: 144, column: 2, scope: !3684)
!3779 = !DILocalVariable(name: "shader_data", scope: !3684, file: !3671, line: 144, type: !3313)
!3780 = !DILocation(line: 144, scope: !3684)
!3781 = !DILocation(line: 145, column: 2, scope: !3684)
!3782 = !DILocalVariable(name: "shader", scope: !3684, file: !3671, line: 145, type: !166)
!3783 = !DILocation(line: 145, scope: !3684)
!3784 = !DILocation(line: 146, column: 2, scope: !3684)
!3785 = !DILocation(line: 148, column: 3, scope: !3684)
!3786 = !DILocation(line: 149, column: 3, scope: !3684)
!3787 = !DILocation(line: 152, column: 2, scope: !3684)
!3788 = !DILocalVariable(name: "colour_target", scope: !3684, file: !3671, line: 152, type: !166)
!3789 = !DILocation(line: 152, scope: !3684)
!3790 = !DILocation(line: 154, column: 2, scope: !3684)
!3791 = !DILocalVariable(name: "pass", scope: !3684, file: !3671, line: 154, type: !166)
!3792 = !DILocation(line: 154, scope: !3684)
!3793 = !DILocation(line: 173, column: 2, scope: !3684)
!3794 = !DILocation(line: 175, column: 3, scope: !3684)
!3795 = !DILocation(line: 176, column: 3, scope: !3684)
!3796 = !DILocation(line: 179, column: 2, scope: !3684)
!3797 = !DILocalVariable(name: "graph", scope: !3684, file: !3671, line: 179, type: !166)
!3798 = !DILocation(line: 179, scope: !3684)
!3799 = !DILocation(line: 180, column: 2, scope: !3684)
!3800 = !DILocation(line: 181, column: 2, scope: !3684)
!3801 = !DILocation(line: 185, column: 2, scope: !3684)
!3802 = !DILocation(line: 205, column: 3, scope: !3684)
!3803 = !DILocalVariable(name: "speed", scope: !3684, file: !3671, line: 205, type: !3804)
!3804 = !DIBasicType(name: "f64", size: 64, encoding: DW_ATE_float)
!3805 = !DILocation(line: 205, scope: !3684)
!3806 = !DILocation(line: 187, column: 3, scope: !3684)
!3807 = !DILocation(line: 183, column: 8, scope: !3684)
!3808 = !DILocation(line: 45, column: 8, scope: !3684)
!3809 = !DILocation(line: 17, column: 8, scope: !3684)
!3810 = !DILocation(line: 18, column: 8, scope: !3684)
!3811 = !DILocation(line: 19, column: 8, scope: !3684)
!3812 = !DILocation(line: 20, column: 8, scope: !3684)
!3813 = !DILocation(line: 21, column: 8, scope: !3684)
!3814 = !DILocation(line: 25, column: 8, scope: !3684)
!3815 = !DILocation(
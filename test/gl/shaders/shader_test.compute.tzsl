shader(type = compute);
kernel(1, 1, 1);

import <debug>
import <matrix>
import <math>

void matrix_tests()
{
	vec4 quat = vec4(0.0, 0.0, 0.0, 1.0);
	mat4 quatmat = tz::matrix::decompose_quaternion(quat);
	vec4 point = vec4(1.0, 0.0, 1.0, 1.0);
	vec4 after = quatmat * point;
	tz::debug::assert(point == after);

	tz::debug::assert(tz::matrix::determinant(mat4(1.0)) == 1.0f);

	tz::debug::assert(tz::matrix::inverse(mat4(1.0)) == mat4(1.0));
	tz::debug::assert(tz::matrix::transpose(mat4(1.0)) == mat4(1.0));
}

void math_tests()
{
	tz::debug::assert(tz::math::abs(-1.5f) == 1.5f);

	tz::debug::assert(tz::math::acos(tz::math::cos(0)) == 0);
	tz::debug::assert(tz::math::asin(tz::math::sin(0)) == 0);
	tz::debug::assert(tz::math::atan(tz::math::tan(0)) == 0);

	tz::debug::assert(tz::math::ceil(3.1f) == 4.0f);
	tz::debug::assert(tz::math::ceil(2.9f) == 3.0f);
	tz::debug::assert(tz::math::floor(3.1f) == 3.0f);
	tz::debug::assert(tz::math::floor(2.9f) == 2.0f);
	tz::debug::assert(tz::math::round(3.1f) == 3.0f);
	tz::debug::assert(tz::math::round(2.9f) == 3.0f);
	tz::debug::assert(tz::math::trunc(3.1f) == 3.0f);
	tz::debug::assert(tz::math::trunc(2.9f) == 2.0f);
	tz::debug::assert(tz::math::fract(3.1f) == 3.1f - tz::math::floor(3.1f));
	tz::debug::assert(tz::math::fract(2.9f) == 2.9f - tz::math::floor(2.9f));

	tz::debug::assert(tz::math::sign(4.1f) == 1.0f);
	tz::debug::assert(tz::math::sign(-1.0f) == -1.0f);

	tz::debug::assert(tz::math::clamp(1.5f, 1.0f, 2.0f) == 1.5f);
	tz::debug::assert(tz::math::clamp(0.5f, 1.0f, 2.0f) == 1.0f);
	tz::debug::assert(tz::math::clamp(2.5f, 1.0f, 2.0f) == 2.0f);

	tz::debug::assert(tz::math::distance(vec2(0.0f, 0.0f), vec2(0.0f, 0.0f)) == 0.0f);
	tz::debug::assert(tz::math::dot(vec2(2.0f, 0.0f), vec2(2.0f, 0.0f)) == 4.0f);

	tz::debug::assert(tz::math::ln(tz::math::exp(2.0f)) == 2.0f);
	tz::debug::assert(tz::math::log(tz::math::exp2(2.0f)) == 2.0f);

	tz::debug::assert(tz::math::inverse_sqrt(3.0f) == (1.0f / tz::math::sqrt(3.0f)));

	tz::debug::assert(!tz::math::is_infinity(1.0f));
	tz::debug::assert(!tz::math::is_nan(1.0f));
	tz::debug::assert(tz::math::magnitude(tz::math::normalise(vec3(56.0f, 0.1f, 90.0f))) == 1.0f);
}

void main()
{
	matrix_tests();
	math_tests();
}

name: "Unit Test Runs (OpenGL Debug)"

# Controls when the action will run. 
on:
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  gcc_linux:
    runs-on: ubuntu-latest
    steps:
      - name: Install necessary linux dependencies
        run:   |
          sudo apt-get clean
          sudo apt-get update
          sudo apt-get install libxrandr-dev libxinerama-dev x11-xkb-utils libxcursor-dev libxi-dev xvfb mesa-utils gdb
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Build Unit Tests (ogl_gcc_debug)'
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: "CMakeListsTxtAdvanced"
          cmakeGenerator: UnixMakefiles
          cmakeAppendedArgs: "-B \"${{ github.workspace }}/../../_temp/build/debug\" -DTOPAZ_BUILDCONFIG=debug -DTOPAZ_RENDERAPI=opengl -DCMAKE_CXX_COMPILER=g++-10"
          buildWithCMake: true
          buildWithCMakeArgs: "--target tztest_build --parallel 4"
          buildDirectory: "${{ github.workspace }}/../../_temp/build/debug"
      - name: 'Check OpenGL Support'
        run:  |
          cd ${{ github.workspace }}/../../_temp/build/debug
          echo Retrieving OpenGL supported version...
          xvfb-run -a -s '-screen 0 1024x768x24' glxinfo | grep -i "opengl core profile version" | sed 's/OpenGL core profile version string: //' | sed 's/ (Core Profile).*//' > ogl_version.txt
          cat ogl_version.txt
      - name: 'Collaborate unit test executables'
        run:  |
          cd ${{ github.workspace }}/../../_temp/build/debug
          ctest -V | grep "Test command" | sed 's/[0-9]\+: Test command: \/home\/runner//' > unit_test_executables.txt
          echo Unit Test Executables:
          cat unit_test_executables.txt
      - name: 'Run Unit Tests via xvfb'
        run:  |
          cd ${{ github.workspace }}/../../_temp/build/debug
          echo Running all unit tests
          for i in $(cat unit_test_executables.txt)
          do
            echo Running "$i"
            #xvfb-run -a -s '-screen 0 1024x768x24' gdb -return-child-result -ex run -ex "thread apply all bt" -ex "quit" --args ~/$i
            xvfb-run -a -s '-screen 0 1024x768x24' ~/$i
          done


  clang_linux:
    runs-on: ubuntu-latest
    steps:
      - name: Install necessary linux dependencies
        run:   |
          sudo apt-get clean
          sudo apt-get update
          sudo apt-get install libxrandr-dev libxinerama-dev x11-xkb-utils libxcursor-dev libxi-dev xvfb mesa-utils gdb
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: 'Build Unit Tests (ogl_clang_debug)'
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: "CMakeListsTxtAdvanced"
          cmakeGenerator: UnixMakefiles
          cmakeAppendedArgs: "-B \"${{ github.workspace }}/../../_temp/build/debug\" -DTOPAZ_BUILDCONFIG=debug -DTOPAZ_RENDERAPI=opengl -DCMAKE_CXX_COMPILER=clang++-12 -DCMAKE_C_COMPILER=clang-12"
          buildWithCMake: true
          buildWithCMakeArgs: "--target tztest_build --parallel 4"
          buildDirectory: "${{ github.workspace }}/../../_temp/build/debug"
      - name: 'Check OpenGL Support'
        run:  |
          cd ${{ github.workspace }}/../../_temp/build/debug
          echo Retrieving OpenGL supported version...
          xvfb-run -a -s '-screen 0 1024x768x24' glxinfo | grep -i "opengl core profile version" | sed 's/OpenGL core profile version string: //' | sed 's/ (Core Profile).*//' > ogl_version.txt
          cat ogl_version.txt
      - name: 'Collaborate unit test executables'
        run:  |
          cd ${{ github.workspace }}/../../_temp/build/debug
          ctest -V | grep "Test command" | sed 's/[0-9]\+: Test command: \/home\/runner//' > unit_test_executables.txt
          echo Unit Test Executables:
          cat unit_test_executables.txt
      - name: 'Run Unit Tests via xvfb'
        run:  |
          cd ${{ github.workspace }}/../../_temp/build/debug
          echo Running all unit tests
          for i in $(cat unit_test_executables.txt)
          do
            echo Running "$i"
            # xvfb-run -a -s '-screen 0 1024x768x24' gdb -return-child-result -ex run -ex "thread apply all bt" -ex "quit" --args ~/$i
            xvfb-run -a -s '-screen 0 1024x768x24' ~/$i
          done

          #  msvc_windows:
          #    runs-on: windows-2022
          #    steps:
          #      - uses: actions/checkout@v2
          #        with:
          #          submodules: recursive
          #      - name: 'Download mesa for windows'
          #        run:  |
          #          cd ${{ github.workspace }}
          #          mkdir mesa
          #          cd mesa
          #          curl --location --request GET https://downloads.fdossena.com/geth.php?r=mesa64-latest -o mesa_download.7z
          #          mkdir mesa_download
          #          7z x mesa_download.7z -omesa_download
          #          cd mesa_download
          #          dir
          #      - name: 'Build Unit Tests (ogl_msvc_debug)'
          #        uses: lukka/run-cmake@v3
          #        with:
          #          cmakeListsOrSettingsJson: "CMakeListsTxtAdvanced"
          #          cmakeGenerator: UnixMakefiles
          #          cmakeAppendedArgs: "-B \"${{ github.workspace }}/../../_temp/build/debug\" -DTOPAZ_BUILDCONFIG=debug -DTOPAZ_RENDERAPI=opengl"
          #          buildWithCMake: true
          #          buildWithCMakeArgs: "--target tztest_build --parallel 4"
          #          buildDirectory: "${{ github.workspace }}/../../_temp/build/debug"
          #      - name: 'Copy mesa opengl dll to output directories'
          #        run:  |
          #          cd ${{ github.workspace }}/mesa/mesa_download
          #          copy opengl32.dll ${{ github.workspace }}/../../_temp/build/debug/test/gl
          #          copy opengl32.dll ${{ github.workspace }}/../../_temp/build/debug/test/gl/ogl2
          #      - name: 'Run Unit Tests (ogl_msvc_debug)'
          #        uses: lukka/run-cmake@v3
          #        with:
          #          cmakeListsOrSettingsJson: "CMakeListsTxtAdvanced"
          #          cmakeGenerator: UnixMakefiles
          #          cmakeAppendedArgs: "-B \"${{ github.workspace }}/../../_temp/build/debug\" -DTOPAZ_BUILDCONFIG=debug -DTOPAZ_RENDERAPI=opengl"
          #          buildWithCMake: true
          #          buildWithCMakeArgs: "--target tztest --parallel 4"
          #          buildDirectory: "${{ github.workspace }}/../../_temp/build/debug"

#ifndef TZSLC_STDLIB_MATRIX_TZSL
#define TZSLC_STDLIB_MATRIX_TZSL
/*
 * TZSL stdlib: <matrix>
 * harrand 29/04/2022 for tz3.3
 */

/**
 * @ingroup tzsl
 * @defgroup tzsl_matrix Matrix Operations
 * Access matrix operations. Import <matrix>
 */

// Documentation purposes only.
#define DOCONLY TZ_VULKAN && TZ_OGL
#if DOCONLY

/**
 * @ingroup tzsl_matrix
 * Contains matrix-specific mathematical functions.
 */
namespace tz::matrix
{

	 /**
	  * @ingroup tzsl_matrix
	  * Given the quaternion parameter, retrieve a rotational 4x4 matrix which represents a similar rotation in 3D space.
	  * @note `quat` is expressed as a quaternion as `xyzw`.
	  */
	mat4 decompose_quaternion(vec4 quat);
	 /**
	  * @ingroup tzsl_matrix
	  * Calculate the determinant of a matrix.
	  */
	float determinant(matn m);
	 /**
	  * @ingroup tzsl_matrix
	  * Calculate the inverse of a matrix.
	  */
	matn inverse(matn m);
	 /**
	  * @ingroup tzsl_matrix
	  * Calculate the transpose of a matrix.
	  */
	matnm transpose(matmn m);
}

#endif // DOCONLY


mat4 tz::matrix::decompose_quaternion(vec4 quat)
{
	const float xx = quat.x * quat.x;
	const float xy = quat.x * quat.y;
	const float xz = quat.x * quat.z;
	const float xw = quat.x * quat.w;

	const float yy = quat.y * quat.y;
	const float yz = quat.y * quat.z;
	const float yw = quat.y * quat.w;

	const float zz = quat.z * quat.z;
	const float zw = quat.z * quat.w;

	mat4 ret;
	ret[0][0] = 1.0 - 2 * (yy + zz);
	ret[1][0] = 2 * (xy - zw);
	ret[2][0] = 2 * (xz + yw);
	ret[3][0] = 0.0f;
	
	ret[0][1] = 2 * (xy + zw);
	ret[1][1] = 1 - 2 * (xx + zz);
	ret[2][1] = 2 * (yz - xw);
	ret[3][1] = 0.0f;

	ret[0][2] = 2 * (xz - yw);
	ret[1][2] = 2 * (yz + xw);
	ret[2][2] = 1 - 2 * (xx + yy);
	ret[3][2] = 0.0f;

	ret[0][3] = 0.0f;
	ret[1][3] = 0.0f;
	ret[2][3] = 0.0f;
	ret[3][3] = 1.0f;
	return ret;
}

#define tz::matrix::determinant(m) determinant(m)
#define tz::matrix::inverse(m) inverse(m)
#define tz::matrix::transpose(m) transpose(m)


// End stdlib impl: <matrix>
#endif // TZSLC_STDLIB_MATRIX_TZSL

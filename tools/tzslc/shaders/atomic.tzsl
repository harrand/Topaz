#ifndef TZSLC_STDLIB_ATOMIC_TZSL
#define TZSLC_STDLIB_ATOMIC_TZSL
/*
 * TZSL stdlib: <atomic>
 * harrand 17/05/2022 for tz3.3
 */

/**
 * @ingroup tzsl
 * @defgroup tzsl_atomic Atomic Operations
 * Perform atomic operations on variables. Import <atomic>
 */

// Documentation purposes only.
#define DOCONLY TZ_VULKAN && TZ_OGL
#if DOCONLY
/**
 * @ingroup tzsl_atomic
 * Contains atomic operations as functions.
 */
 namespace tz::atomic
 {
	 /**
	  * @ingroup tzsl_atomic
	  * Performs an atomic `add` operation.
	  */
	 int add(int& mem, int data);
	 /**
	  * @ingroup tzsl_atomic
	  * Performs an atomic `and` operation.
	  */
	 int and(int& mem, int data);
	 /**
	  * @ingroup tzsl_atomic
	  * Performs an atomic `or` operation.
	  */
	 int or(int& mem, int data);
	 /**
	  * @ingroup tzsl_atomic
	  * Performs an atomic `xor` operation.
	  */
	 int xor(int& mem, int data);
	 /**
	  * @ingroup tzsl_atomic
	  * Performs an atomic `min` operation.
	  */
	 int min(int& mem, int data);
	 /**
	  * @ingroup tzsl_atomic
	  * Performs an atomic `max` operation.
	  */
	 int max(int& mem, int data);
	 /**
	  * @ingroup tzsl_atomic
	  * Performs an atomic exhange operation.
	  */
	 int exchange(int& mem, int data);
	 /**
	  * @ingroup tzsl_atomic
	  * Performs an atomic compare-exchange operation.
	  */
	 int cas(int& mem, uint compare, uint data);
 }

 #endif // 0

 #define tz::atomic::add(mem, data) atomicAdd(mem, data)
 #define tz::atomic::and(mem, data) atomicAnd(mem, data)
 #define tz::atomic::or(mem, data) atomicOr(mem, data)
 #define tz::atomic::xor(mem, data) atomicXor(mem, data)
 #define tz::atomic::min(mem, data) atomicMin(mem, data)
 #define tz::atomic::max(mem, data) atomicMax(mem, data)
 #define tz::atomic::exchange(mem, data) atomicExchange(mem, data)
 #define tz::atomic::cas(mem, compare, data) atomicCompSwap(mem, compare, data)

// End stdlib impl: <atomic>
 #endif // TZSLC_STDLIB_ATOMIC_TZSL

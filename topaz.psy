ogl_debug_callback ::= func(source : s32, type : s32, id : u32, severity : s32, length : u32, msg : u8 mut&) -> v0
{
	tzmsg ::= to_tzstring(msg);
	print_string(tzmsg);
	__debugbreak();
};

main ::= func() -> s32
{
	permanent_arena_val = arena_create(4096 * 1024);
	defer arena_destroy(permanent_arena_val);

	frame_arena_val = arena_create(4096 * 1024);
	defer arena_destroy(frame_arena_val);

	myvec ::= vec2{.x := 69.0; .y := 1.0;};

	ptr : f32 mut& := arena_push(permanent_arena, __sizeof(f32));
	(deref ptr) = vec2_length(myvec);

	register_wndclass();
	defer unregister_wndclass();
	wnd : u64 mut := open_window(800, 600, "Topaz Test");
	defer close_window(wnd);

	load_wgl_functions();
	opengl_wgl_init(wnd);
	gl.clear_colour(0.5, 0.0, 1.0, 1.0);
	hacky_hdc ::= GetDC(wnd);

	// GL_DEBUG_OUTPUT
	gl.enable(37600);
	// GL_DEBUG_OUTPUT_SYNCHRONOUS
	gl.enable(33346);
	gl.debug_message_callback(ogl_debug_callback, null);

	vao : u32 mut;
	gl.create_vertex_arrays(1, ref vao);
	gl.bind_vertex_array(vao);

	vertex_shader ::= gl.create_shader(35633);
	fragment_shader ::= gl.create_shader(35632);
	defer gl.delete_shader(vertex_shader);
	defer gl.delete_shader(fragment_shader);

	vertex_src ::= __embed("src/vertex.glsl");
	fragment_src ::= __embed("src/fragment.glsl");
	gl.shader_source(vertex_shader, 1, ref vertex_src, null);
	gl.shader_source(fragment_shader, 1, ref fragment_src, null);

	gl.compile_shader(vertex_shader);
	gl.compile_shader(fragment_shader);

	GL_COMPILE_STATUS ::= 35713;
	GL_LINK_STATUS ::= 35714;

	vertex_cpl : s32 mut;
	gl.get_shader_iv(vertex_shader, GL_COMPILE_STATUS, ref vertex_cpl);
	if(vertex_cpl == 0)
	{
		putchar('a');
		__debugbreak();
	}

	fragment_cpl : s32 mut;
	gl.get_shader_iv(fragment_shader, GL_COMPILE_STATUS, ref fragment_cpl);
	if(fragment_cpl == 0)
	{
		putchar('b');
		__debugbreak();
	}

	// create program
	prog ::= gl.create_program();
	gl.attach_shader(prog, vertex_shader);
	gl.attach_shader(prog, fragment_shader);
	
	gl.link_program(prog);
	shader_lnk : s32 mut;
	gl.get_program_iv(prog, GL_LINK_STATUS, ref shader_lnk);
	if(shader_lnk == 0)
	{
		putchar('l');
		__debugbreak();
	}

	GL_TRIANGLES ::= 4;
	col : f32 mut#3;
	(deref (col at 0)) = 0.0;
	(deref (col at 1)) = 0.0;
	(deref (col at 2)) = 0.0;
	r : f32 mut;
	factor : f32 mut := 0.0001;

	while(window_is_open(wnd))
	{
		arena_clear(frame_arena);
		window_update();
		gl.clear_colour(deref(col at 0), deref(col at 1), deref(col at 2), 1.0);
		gl.clear(16384);

		r = deref(col at 2);
		if(r > 0.8)
		{
			factor = -0.0001;
		}
		if(r < 0.0)
		{
			factor = 0.0001;
		}

		(deref (col at 2)) = (r + factor);

		gl.use_program(prog);
		gl.draw_arrays(GL_TRIANGLES, 0, 3);

		SwapBuffers(hacky_hdc);
		if(is_key_down(key.w))
		{
			__debugbreak();
		}
	}
	return 0;
};

== build ==
{
	add_source_file("src/file.psy");
	add_source_file("src/opengl.psy");
	add_source_file("src/string.psy");
	add_source_file("src/arena.psy");
	add_source_file("src/wnd.psy");
	add_source_file("src/vec.psy");
	add_source_file("src/keyboard.psy");
	//add_source_file("src/vulkan.psy");


	set_output_directory("build");
	set_executable("tz");
	set_optimisation(3);
}

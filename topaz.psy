ogl_debug_callback ::= func(source : s32, type : s32, id : u32, severity : s32, length : u32, msg : u8 mut&) -> v0
{
	puts(msg);
	__debugbreak();
};

wrangle_window_class ::= macro() -> v0
{
	register_wndclass();
	defer unregister_wndclass();
};

setup_arenas ::= macro() -> v0
{
	permanent_arena_val : arena mut := arena_create(4096 * 1024);
	permanent_arena ::= ref permanent_arena_val;
	defer puts("arena free: ");
	defer putuint(permanent_arena_val.cursor);
	defer puts("B");
	defer putchar(10);
	defer arena_destroy(permanent_arena_val);

	frame_arena_val : arena mut := arena_create(4096 * 1024);
	frame_arena ::= ref frame_arena_val;
	defer arena_destroy(frame_arena_val);
};

main ::= func() -> s32
{
	wrangle_window_class();
	setup_arenas();

	print("type of '5' = ");
	print(__typename(5));
	print(' ');
	putchar(10);

	wnd ::= open_window(800, 600, "Topaz Test");
	defer close_window(wnd);

	puts("watch as i count to 10!");
	putchar(10);
	counter : u64 mut;
	for(counter = 0, counter <= 10, counter = counter + 1)
	{
		putuint(counter);
		putchar(10);
	}

	tz_gpu_init(tz_gpu_appinfo
	{
		.name := "Topaz";
		.ver_maj := 6;
		.ver_min := 0;
	});

	hardware_count ::= tz_gpu_hardware_count();
	puts("hardware count: ");
	putuint(hardware_count);
	putchar(10);

	hardware_list : tz_gpu_hardware mut& := arena_push_one(permanent_arena, tz_gpu_hardware{});
	tz_gpu_iterate_hardware(hardware_list, hardware_count, permanent_arena);
	tz_gpu_use_hardware(deref(hardware_list at 0));

	buf ::= tz_gpu_create_buffer(tz_gpu_resource_info
	{
		.data := null;
		.data_size := 4096;
		.access := tz_gpu_access.static;
		//.flags := tz_gpu_resource_flag.none;
		.flags := tz_gpu_resource_flag.zero_memory;
	}, permanent_arena);
	if(buf == (tz_gpu_resource.invalid))
	{
		puts("failed to create buffer");
		__debugbreak();
	}
	puts("buffer resource handle: ");
	putuint(buf@s64);
	putchar(10);

	shader_data ::= tz_gpu_load_shader_files("build/vertex.spv", "build/fragment.spv", permanent_arena);
	shader ::= tz_gpu_create_graphics_shader(shader_data.vertex_spv_data, shader_data.vertex_spv_count, shader_data.fragment_spv_data, shader_data.fragment_spv_count, permanent_arena);
	if(shader == (tz_gpu_shader.invalid))
	{
		puts("failed to create shader");
		__debugbreak();
	}

	colour_target ::= tz_gpu_resource.window_resource;

	pass ::= tz_gpu_create_pass(tz_gpu_pass_info
	{
		.graphics := tz_gpu_graphics_state
		{
			.clear_colour := vec4{.x := 0.7; .y := 0.5; .z := 0.0; .w := 1.0;};
			.scissor := vec4u32_zero();
			.colour_targets_data := ref colour_target;
			.colour_targets_count := 1;
			.depth_target := tz_gpu_resource.invalid;
			.index_buffer := tz_gpu_resource.invalid;
			.draw_buffer := tz_gpu_resource.invalid;
			.culling := tz_gpu_cull.none;
			.static_tri_count := 1;
		};
		.shader := shader;
		.resources_data := ref buf;
		.resources_count := 1;
		.name := "Triangle Renderer";
	}, permanent_arena, frame_arena);
	if(pass == (tz_gpu_pass.invalid))
	{
		puts("failed to create pass");
		__debugbreak();
	}

	graph ::= tz_gpu_create_graph("triangle renderer", permanent_arena);
	tz_gpu_graph_add_pass(graph, pass);
	tz_gpu_graph_add_pass(graph, tz_gpu_pass.present);

	defer tz_gpu_term();

	while(window_is_open(wnd))
	{
		if(frame_arena_val.cursor > 0)
		{
			/*
			puts("frame arena free: ");
			putuint(frame_arena_val.cursor);
			puts("B");
			putchar(10);
			*/
		}
		arena_clear(frame_arena);

		tz_gpu_execute(graph, permanent_arena, frame_arena);
		window_update();
		if(is_key_down(key.escape))
		{
			puts("goodbye");
			__debugbreak();
		}
	}
	return 0;
};

== build ==
{
	add_source_file("src/debug.psy");
	add_source_file("src/wnd.psy");
	add_source_file("src/tz_gpu.psy");
	add_source_file("src/keyboard.psy");

	set_output_directory("build");
	set_executable("tz");
	set_optimisation(0);
}

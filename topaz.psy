ogl_debug_callback ::= func(source : s32, type : s32, id : u32, severity : s32, length : u32, msg : u8 mut&) -> v0
{
	puts(msg);
	__debugbreak();
};

wrangle_window_class ::= macro() -> v0
{
	register_wndclass();
	defer unregister_wndclass();
};

setup_arenas ::= macro() -> v0
{
	permanent_arena_val : arena mut := arena_create(4096 * 1024);
	permanent_arena ::= ref permanent_arena_val;
	defer puts("arena free: ");
	defer putuint(permanent_arena_val.cursor);
	defer puts("B");
	defer putchar(10);
	defer arena_destroy(permanent_arena_val);

	frame_arena_val : arena mut := arena_create(4096 * 1024);
	frame_arena ::= ref frame_arena_val;
	defer arena_destroy(frame_arena_val);
};

main ::= func() -> s32
{
	counter : u64 mut;
	my_vals ::= zero@s64#8;
	for(counter = 0, counter < 8, counter = counter + 1)
	{
		putsint(deref(my_vals at counter));
		putchar(10);
	}

	wrangle_window_class();
	setup_arenas();

	print("type of '5' = ");
	print(__typename(5));
	print(' ');
	putchar(10);

	wnd ::= tz_wnd_open_window(800, 600, "Topaz Test", permanent_arena);
	defer tz_wnd_close_window(wnd);

	puts("watch as i count to 10!");
	putchar(10);
	for(counter = 0, counter <= 10, counter = counter + 1)
	{
		putuint(counter);
		putchar(10);
	}

	tz_gpu_init(tz_gpu_appinfo
	{
		.name := "Topaz";
		.ver_maj := 6;
		.ver_min := 0;
	});

	hardware_count ::= tz_gpu_hardware_count();
	puts("hardware count: ");
	putuint(hardware_count);
	putchar(10);

	hardware_list : tz_gpu_hardware mut& := arena_push_one(permanent_arena, tz_gpu_hardware{});
	tz_gpu_iterate_hardware(hardware_list, hardware_count, permanent_arena);
	tz_gpu_use_hardware(deref(hardware_list at 0), wnd);

	defer tz_gpu_term();

	tz_mesh_init(tz_mesh_config
	{
		.clear_colour := vec4{.x := 0.5; .y := 0.0; .z := 0.0; .w := 1.0;};
		.object_extra_data_size := 0;
		.objects_dynamic := false;
	}, permanent_arena);

	graph ::= tz_gpu_create_graph("triangle renderer", permanent_arena);
	tz_gpu_graph_add_pass(graph, tz_mesh_get_pass());
	tz_gpu_graph_add_pass(graph, tz_gpu_pass.present);

	mesh_vertices : tz_mesh_vertex mut#4;
	// Vertex positions (x, y, z) and texture coordinates (u, v)
	deref(mesh_vertices at 0) = tz_mesh_vertex{.pos := vec3{.x := -0.5; .y := -0.5; .z := 0.0;}; .texcoord := vec2{.x := 0.0; .y := 1.0;};};
	deref(mesh_vertices at 1) = tz_mesh_vertex{.pos := vec3{.x :=  0.5; .y := -0.5; .z := 0.0;}; .texcoord := vec2{.x := 1.0; .y := 1.0;};};
	deref(mesh_vertices at 2) = tz_mesh_vertex{.pos := vec3{.x := -0.5; .y :=  0.5; .z := 0.0;}; .texcoord := vec2{.x := 0.0; .y := 0.0;};};
	deref(mesh_vertices at 3) = tz_mesh_vertex{.pos := vec3{.x :=  0.5; .y :=  0.5; .z := 0.0;}; .texcoord := vec2{.x := 1.0; .y := 0.0;};};

	// Triangle indices
	mesh_indices : u32 mut#6;
	deref(mesh_indices at 0) = 0;
	deref(mesh_indices at 1) = 1;
	deref(mesh_indices at 2) = 2;
	deref(mesh_indices at 3) = 2;
	deref(mesh_indices at 4) = 1;
	deref(mesh_indices at 5) = 3;

	quad ::= tz_mesh_upload(tz_mesh_data
	{
		.vertex_data := mesh_vertices at 0;
		.vertex_count := 4;
		.index_data := mesh_indices at 0;
		.index_count := 6;
	}, permanent_arena);

	tz_mesh_add_to_draw_list(quad, 0);
	model : mat4 mut:= mat4_multiply(mat4_translate(vec3{.x := -1.0; .y := 0.5; .z := 0.0;}), mat4_scale(vec3_filled(0.6)));
	mat4_debug_print(model);
	tz_mesh_set_object_data(0, tz_mesh_object_data
	{
		.model_matrix := model;
	}, null);

	while(tz_wnd_is_open(wnd))
	{
		if(frame_arena_val.cursor > 0)
		{
			/*
			puts("frame arena free: ");
			putuint(frame_arena_val.cursor);
			puts("B");
			putchar(10);
			*/
		}
		arena_clear(frame_arena);

		tz_gpu_execute(graph, permanent_arena, frame_arena);
		tz_wnd_update();
		if(is_key_down(key.escape))
		{
			puts("goodbye");
			putchar(10);
			tz_wnd_close_window(wnd);
		}
	}
	return 0;
};

== build ==
{
	add_source_file("src/debug.psy");
	add_source_file("src/mat.psy");
	add_source_file("src/tz_mesh.psy");
	add_source_file("src/tz_gpu.psy");
	add_source_file("src/keyboard.psy");
	add_source_file("src/tz_wnd.psy");

	set_output_directory("build");
	set_executable("tz");

	if static(__config() == "debug")
	{
		set_optimisation(0);
		enable_debug_symbols(true);
	}
	if static(__config() == "release")
	{
		set_optimisation(3);
		enable_debug_symbols(false);
	}

	run_command("glslc -o build/vertex.spv src/vertex.glsl");
	run_command("glslc -o build/fragment.spv src/fragment.glsl");
}

ogl_debug_callback ::= func(source : s32, type : s32, id : u32, severity : s32, length : u32, msg : u8 mut&) -> v0
{
	tzmsg ::= to_tzstring(msg);
	print_string(tzmsg);
	__debugbreak();
};

main ::= func() -> s32
{
	permanent_arena_val = arena_create(4096 * 1024);
	defer arena_destroy(permanent_arena_val);

	frame_arena_val = arena_create(4096 * 1024);
	defer arena_destroy(frame_arena_val);

	myvec ::= vec2{.x := 69.0; .y := 1.0;};

	ptr : f32 mut& := arena_push(permanent_arena, __sizeof(f32));
	(deref ptr) = vec2_length(myvec);

	register_wndclass();
	defer unregister_wndclass();
	wnd : u64 mut := open_window(800, 600, "Topaz Test");
	defer close_window(wnd);

	load_wgl_functions();
	opengl_wgl_init(wnd);
	glClearColor(0.5, 0.0, 1.0, 1.0);
	hacky_hdc ::= GetDC(wnd);

	// GL_DEBUG_OUTPUT
	glEnable(37600);
	// GL_DEBUG_OUTPUT_SYNCHRONOUS
	glEnable(33346);
	opengl.glDebugMessageCallback(ogl_debug_callback, null);

	vao : u32 mut;
	opengl.glCreateVertexArrays(1, ref vao);
	opengl.glBindVertexArray(vao);

	vertex_shader ::= opengl.glCreateShader(35633);
	fragment_shader ::= opengl.glCreateShader(35632);
	defer opengl.glDeleteShader(vertex_shader);
	defer opengl.glDeleteShader(fragment_shader);

	vertex_src ::= "#version 430\nvec2 positions[3] = vec2[](vec2(0.0, 0.5), vec2(0.5, -0.5), vec2(-0.5, -0.5));   void main(){gl_Position = vec4(positions[gl_VertexID], 0.0, 1.0);}";
	fragment_src ::= "#version 430\nlayout(location = 0) out vec4 fcol;\nvoid main(){fcol = vec4(1.0, 0.0, 0.0, 1.0);}";
	opengl.glShaderSource(vertex_shader, 1, ref vertex_src, null);
	opengl.glShaderSource(fragment_shader, 1, ref fragment_src, null);

	opengl.glCompileShader(vertex_shader);
	opengl.glCompileShader(fragment_shader);

	GL_COMPILE_STATUS ::= 35713;
	GL_LINK_STATUS ::= 35714;

	vertex_cpl : s32 mut;
	opengl.glGetShaderiv(vertex_shader, GL_COMPILE_STATUS, ref vertex_cpl);
	if(vertex_cpl == 0)
	{
		putchar('a');
		__debugbreak();
	}

	fragment_cpl : s32 mut;
	opengl.glGetShaderiv(fragment_shader, GL_COMPILE_STATUS, ref fragment_cpl);
	if(fragment_cpl == 0)
	{
		putchar('b');
		__debugbreak();
	}

	// create program
	prog ::= opengl.glCreateProgram();
	opengl.glAttachShader(prog, vertex_shader);
	opengl.glAttachShader(prog, fragment_shader);
	
	opengl.glLinkProgram(prog);
	shader_lnk : s32 mut;
	opengl.glGetProgramiv(prog, GL_LINK_STATUS, ref shader_lnk);
	if(shader_lnk == 0)
	{
		putchar('l');
		__debugbreak();
	}

	GL_TRIANGLES ::= 4;
	while(window_is_open(wnd))
	{
		arena_clear(frame_arena);
		window_update();
		glClear(16384);

		opengl.glUseProgram(prog);
		opengl.glDrawArrays(GL_TRIANGLES, 0, 3);

		SwapBuffers(hacky_hdc);
		if(is_key_down(key.w))
		{
			__debugbreak();
		}
	}
	return 0;
};

== build ==
{
	add_source_file("src/opengl.psy");
	add_source_file("src/string.psy");
	add_source_file("src/arena.psy");
	add_source_file("src/wnd.psy");
	add_source_file("src/vec.psy");
	add_source_file("src/keyboard.psy");
	//add_source_file("src/vulkan.psy");

	set_output_directory("build");
	set_executable("tz");
	set_optimisation(0);
}

shader(type = tesseval);

import <math>

input(id = 0) vec3 position[];
input(id = 1) mat4 mvp[];
input(id = 5) vec3 camera_position[];
output(id = 0) float vertex_height;

vec3 interpolate3(vec3 v0, vec3 v1, vec3 v2)
{
	return vec3(in::tess_coord.x) * v0 + vec3(in::tess_coord.y) * v1 + vec3(in::tess_coord.z) * v2;
}

mat4 interpolate4m(mat4 m0, mat4 m1, mat4 m2)
{
	return in::tess_coord.x * m0 + in::tess_coord.y * m1 + in::tess_coord.z * m2;
}
// Simplex 2D noise
//
vec3 permute(vec3 x) { return tz::math::mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = tz::math::floor(v + tz::math::dot(v, C.yy) );
  vec2 x0 = v -   i + tz::math::dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = tz::math::mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(tz::math::dot(x0,x0), tz::math::dot(x12.xy,x12.xy),
    tz::math::dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * tz::math::fract(p * C.www) - 1.0;
  vec3 h = tz::math::abs(x) - 0.5;
  vec3 ox = tz::math::floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * tz::math::dot(m, g);
}

vec4 get_colour(vec2 uv)
{
	return vec4(vec3(snoise(uv)), 1.0f);
}

void main()
{
	vec3 cam_pos = interpolate3(camera_position[0], camera_position[1], camera_position[2]);
	// if camera moves 1 unit, noise texture sampling should swing by same amount.

	vec4 pos = vec4(interpolate3(position[0], position[1], position[2]), 1.0);
	vertex_height = tz::math::clamp(snoise((pos.xz + cam_pos.xz) / 150.0f), 0.1f, 1.0f);
	pos.y = vertex_height * 60.0f;
	pos = interpolate4m(mvp[0], mvp[1], mvp[2]) * pos;
	out::position = pos;
}

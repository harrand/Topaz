shader(type = vertex);

import <mesh>

resource(id = 0) const buffer RenderData
{
	vec2 triangle_pos;
	vec2 triangle_scale;
	vec2 quad_pos;
	vec2 quad_scale;

	vec3 triangle_colour;
	vec3 quad_colour;
} render_data;

output(id = 0) vec3 colour;

vec3[9] get_vertex_data()
{
	vec3 data[9];
	data[0] = tz::mesh::fullscreen_triangle[0];
	data[1] = tz::mesh::fullscreen_triangle[1];
	data[2] = tz::mesh::fullscreen_triangle[2];

	data[3] = tz::mesh::fullscreen_quad[0].xzy;
	data[4] = tz::mesh::fullscreen_quad[1].xzy;
	data[5] = tz::mesh::fullscreen_quad[2].xzy;
	data[6] = tz::mesh::fullscreen_quad[3].xzy;
	data[7] = tz::mesh::fullscreen_quad[4].xzy;
	data[8] = tz::mesh::fullscreen_quad[5].xzy;
	return data;
}

void main()
{
	vec2 scale;
	vec2 pos;
	const bool is_triangle = in::vertex_id < 3;
	if(is_triangle)
	{
		scale = render_data.triangle_scale;
		pos = render_data.triangle_pos;
		colour = render_data.triangle_colour;
	}
	else
	{
		scale = render_data.quad_scale;
		pos = render_data.quad_pos;
		colour = render_data.quad_colour;
	}
	vec2 final_pos = get_vertex_data()[in::vertex_id].xy;
	final_pos *= scale * 0.25f;
	out::position = vec4(final_pos + pos, 0.0, 1.0);
}

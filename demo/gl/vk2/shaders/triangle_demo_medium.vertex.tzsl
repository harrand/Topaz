#pragma shader_stage(vertex)
#extension GL_EXT_debug_printf : enable

layout(location = 0) out vec2 texcoord_modelspace;

struct TriangleVertexData
{
	vec3 position;
	vec2 texcoord;
};

struct TriangleResourceData
{
	vec3 position;
	vec3 rotation;
	vec3 scale;
	mat4 mvp;
};

resource(id = 0) buffer VertexData
{
	TriangleVertexData[3] vertices;
} vertex_data;

resource(id = 1) buffer ResourceData
{
	TriangleResourceData[] resources;
} resource_data;

void main()
{
	int triangle_index = gl_VertexIndex / 3;
	int triangle_vertex_id = gl_VertexIndex % 3;
	TriangleVertexData cur_vertex = vertex_data.vertices[triangle_vertex_id];
	TriangleResourceData cur_resource = resource_data.resources[triangle_index];

	texcoord_modelspace = cur_vertex.texcoord;
	vec3 position_modelspace = cur_vertex.position;
	vec3 position_clipspace = (cur_resource.mvp * vec4(position_modelspace, 1.0)).xyz;
	gl_Position = vec4(position_clipspace, 1.0);
	debugPrintfEXT("triangle %d, vertex %d\n====================\nResource Data\n===============\nPosition = {%.2f, %.2f, %.2f} Rotation = {%.2f, %.2f, %.2f} Scale = {%.2f, %.2f, %.2f}", triangle_index, triangle_vertex_id, cur_resource.position.x, cur_resource.position.y, cur_resource.position.z, cur_resource.rotation.x, cur_resource.rotation.y, cur_resource.rotation.z, cur_resource.scale.x, cur_resource.scale.y, cur_resource.scale.z);
}

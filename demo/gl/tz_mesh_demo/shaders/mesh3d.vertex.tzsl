shader(type = vertex);

import <debug>
import "texcount"

// TYPES

struct vertex_t
{
	vec3 pos;
	vec2 texc;
	vec3 nrm;
	vec3 tang;
};

struct texture_t
{
	vec3 tint;
	uint texid;
};

struct drawdata_t
{
	mat4 model;
	texture_t textures[TEX_COUNT];
};

// RESOURCES

resource(id = 0) const buffer vertex_buffer
{
	vertex_t data[];
} vertex;

resource(id = 1) const buffer drawdata_buffer
{
	drawdata_t data[];
} draws;

resource(id = 2) const buffer camera_buffer
{
	mat4 v;
	mat4 p;
} camera;

// OUTPUTS

output(id = 0) vec2 out::texc;
output(id = 1) vec3 out::norm;
output(id = 2) texture_t out::textures[TEX_COUNT];

void main()
{
	vertex_t vtx = vertex.data[in::vertex_id];
	drawdata_t draw = draws.data[in::draw_id];
	out::position = camera.p * camera.v * draw.model * vec4(vtx.pos, 1.0f);
	out::texc = vtx.texc;
	out::norm = vtx.nrm;

	for(uint i = 0; i < TEX_COUNT; i++)
	{
		out::textures[i] = draw.textures[i];
	}
}

shader(type = compute);
kernel(1, 1, 1);

import <draw>
import <debug>

resource(id = 0) buffer draw_indirect_buffer
{
	uint count;
	tz::draw::DrawIndexedIndirectCommand commands[];
} draw_buffer;

struct mesh_entry_t
{
	uint internal_id;
	uint vtx_count;
	uint idx_count;
	uint internal_mesh_name_do_not_use1;
	uint internal_mesh_name_do_not_use2;
};

struct meshref_t
{
	uint vtx_offset;
	uint idx_offset;
	uint internal_align_dont_use;
	mesh_entry_t entry;
};

resource(id = 1) const buffer meshref_buffer
{
	uint draw_count;
	meshref_t refs[];
} meshes;

void main()
{
	uint draw_count = meshes.draw_count;
	for(uint i = 0; i < draw_count; i++)
	{
		meshref_t ref = meshes.refs[i];
		draw_buffer.commands[i] = tz::draw::DrawIndexedIndirectCommand::new();
		draw_buffer.commands[i].index_count = ref.entry.idx_count;
		draw_buffer.commands[i].instance_count = 1;
		draw_buffer.commands[i].first_index = ref.idx_offset;
		draw_buffer.commands[i].vertex_offset = 0;
		draw_buffer.commands[i].first_instance = 0;
	}
	draw_buffer.count = draw_count;
}
